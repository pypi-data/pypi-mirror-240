# coding: utf-8

"""
    OGC API - Processes

    Example API Definition for OGC API - Processes  # noqa: E501

    The version of the OpenAPI document: 0.1
    Contact: info@ogc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from openapi_client.models.extent_spatial import ExtentSpatial
from openapi_client.models.extent_temporal import ExtentTemporal

class Extent(BaseModel):
    """
    The extent of the data in the collection. In the Core only spatial and temporal extents are specified. Extensions may add additional members to represent other extents, for example, thermal or pressure ranges.  The first item in the array describes the overall extent of the data. All subsequent items describe more precise extents, e.g., to identify clusters of data. Clients only interested in the overall extent will only need to access the first item in each array.
    """
    spatial: Optional[ExtentSpatial] = None
    temporal: Optional[ExtentTemporal] = None
    __properties = ["spatial", "temporal"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Extent:
        """Create an instance of Extent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of spatial
        if self.spatial:
            _dict['spatial'] = self.spatial.to_dict()
        # override the default output from pydantic by calling `to_dict()` of temporal
        if self.temporal:
            _dict['temporal'] = self.temporal.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Extent:
        """Create an instance of Extent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Extent.parse_obj(obj)

        _obj = Extent.parse_obj({
            "spatial": ExtentSpatial.from_dict(obj.get("spatial")) if obj.get("spatial") is not None else None,
            "temporal": ExtentTemporal.from_dict(obj.get("temporal")) if obj.get("temporal") is not None else None
        })
        return _obj

