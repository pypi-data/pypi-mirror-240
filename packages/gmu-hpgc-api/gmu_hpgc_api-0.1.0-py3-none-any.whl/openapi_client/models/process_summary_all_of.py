# coding: utf-8

"""
    OGC API - Processes

    Example API Definition for OGC API - Processes  # noqa: E501

    The version of the OpenAPI document: 0.1
    Contact: info@ogc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from openapi_client.models.job_control_options import JobControlOptions
from openapi_client.models.link import Link
from openapi_client.models.transmission_mode import TransmissionMode

class ProcessSummaryAllOf(BaseModel):
    """
    ProcessSummaryAllOf
    """
    id: StrictStr = Field(...)
    version: StrictStr = Field(...)
    job_control_options: Optional[conlist(JobControlOptions)] = Field(None, alias="jobControlOptions")
    output_transmission: Optional[conlist(TransmissionMode)] = Field(None, alias="outputTransmission")
    links: Optional[conlist(Link)] = None
    __properties = ["id", "version", "jobControlOptions", "outputTransmission", "links"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProcessSummaryAllOf:
        """Create an instance of ProcessSummaryAllOf from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item in self.links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['links'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProcessSummaryAllOf:
        """Create an instance of ProcessSummaryAllOf from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProcessSummaryAllOf.parse_obj(obj)

        _obj = ProcessSummaryAllOf.parse_obj({
            "id": obj.get("id"),
            "version": obj.get("version"),
            "job_control_options": obj.get("jobControlOptions"),
            "output_transmission": obj.get("outputTransmission"),
            "links": [Link.from_dict(_item) for _item in obj.get("links")] if obj.get("links") is not None else None
        })
        return _obj

