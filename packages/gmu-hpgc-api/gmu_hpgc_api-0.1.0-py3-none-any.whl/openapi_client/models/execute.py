# coding: utf-8

"""
    OGC API - Processes

    Example API Definition for OGC API - Processes  # noqa: E501

    The version of the OpenAPI document: 0.1
    Contact: info@ogc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel
from openapi_client.models.execute_inputs_value import ExecuteInputsValue
from openapi_client.models.output import Output
from openapi_client.models.subscriber import Subscriber

class Execute(BaseModel):
    """
    Execute
    """
    inputs: Optional[Dict[str, ExecuteInputsValue]] = None
    outputs: Optional[Dict[str, Output]] = None
    subscriber: Optional[Subscriber] = None
    __properties = ["inputs", "outputs", "subscriber"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Execute:
        """Create an instance of Execute from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in inputs (dict)
        _field_dict = {}
        if self.inputs:
            for _key in self.inputs:
                if self.inputs[_key]:
                    _field_dict[_key] = self.inputs[_key].to_dict()
            _dict['inputs'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in outputs (dict)
        _field_dict = {}
        if self.outputs:
            for _key in self.outputs:
                if self.outputs[_key]:
                    _field_dict[_key] = self.outputs[_key].to_dict()
            _dict['outputs'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of subscriber
        if self.subscriber:
            _dict['subscriber'] = self.subscriber.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Execute:
        """Create an instance of Execute from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Execute.parse_obj(obj)

        _obj = Execute.parse_obj({
            "inputs": dict(
                (_k, ExecuteInputsValue.from_dict(_v))
                for _k, _v in obj.get("inputs").items()
            )
            if obj.get("inputs") is not None
            else None,
            "outputs": dict(
                (_k, Output.from_dict(_v))
                for _k, _v in obj.get("outputs").items()
            )
            if obj.get("outputs") is not None
            else None,
            "subscriber": Subscriber.from_dict(obj.get("subscriber")) if obj.get("subscriber") is not None else None
        })
        return _obj

