# coding: utf-8

"""
    OGC API - Processes

    Example API Definition for OGC API - Processes  # noqa: E501

    The version of the OpenAPI document: 0.1
    Contact: info@ogc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt
from openapi_client.models.input_description_all_of_max_occurs import InputDescriptionAllOfMaxOccurs
from openapi_client.models.model_schema import ModelSchema

class InputDescriptionAllOf(BaseModel):
    """
    InputDescriptionAllOf
    """
    min_occurs: Optional[StrictInt] = Field(1, alias="minOccurs")
    max_occurs: Optional[InputDescriptionAllOfMaxOccurs] = Field(None, alias="maxOccurs")
    var_schema: ModelSchema = Field(..., alias="schema")
    __properties = ["minOccurs", "maxOccurs", "schema"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InputDescriptionAllOf:
        """Create an instance of InputDescriptionAllOf from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of max_occurs
        if self.max_occurs:
            _dict['maxOccurs'] = self.max_occurs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_schema
        if self.var_schema:
            _dict['schema'] = self.var_schema.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InputDescriptionAllOf:
        """Create an instance of InputDescriptionAllOf from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InputDescriptionAllOf.parse_obj(obj)

        _obj = InputDescriptionAllOf.parse_obj({
            "min_occurs": obj.get("minOccurs") if obj.get("minOccurs") is not None else 1,
            "max_occurs": InputDescriptionAllOfMaxOccurs.from_dict(obj.get("maxOccurs")) if obj.get("maxOccurs") is not None else None,
            "var_schema": ModelSchema.from_dict(obj.get("schema")) if obj.get("schema") is not None else None
        })
        return _obj

