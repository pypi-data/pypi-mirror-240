# coding: utf-8

"""
    OGC API - Processes

    Example API Definition for OGC API - Processes  # noqa: E501

    The version of the OpenAPI document: 0.1
    Contact: info@ogc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, conint, conlist
from openapi_client.models.collection_info import CollectionInfo
from openapi_client.models.link import Link

class Collections(BaseModel):
    """
    Collections
    """
    links: conlist(Link) = Field(...)
    time_stamp: Optional[datetime] = Field(None, alias="timeStamp")
    number_matched: Optional[conint(strict=True, ge=0)] = Field(None, alias="numberMatched")
    number_returned: Optional[conint(strict=True, ge=0)] = Field(None, alias="numberReturned")
    collections: conlist(CollectionInfo) = Field(...)
    __properties = ["links", "timeStamp", "numberMatched", "numberReturned", "collections"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Collections:
        """Create an instance of Collections from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item in self.links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in collections (list)
        _items = []
        if self.collections:
            for _item in self.collections:
                if _item:
                    _items.append(_item.to_dict())
            _dict['collections'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Collections:
        """Create an instance of Collections from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Collections.parse_obj(obj)

        _obj = Collections.parse_obj({
            "links": [Link.from_dict(_item) for _item in obj.get("links")] if obj.get("links") is not None else None,
            "time_stamp": obj.get("timeStamp"),
            "number_matched": obj.get("numberMatched"),
            "number_returned": obj.get("numberReturned"),
            "collections": [CollectionInfo.from_dict(_item) for _item in obj.get("collections")] if obj.get("collections") is not None else None
        })
        return _obj

