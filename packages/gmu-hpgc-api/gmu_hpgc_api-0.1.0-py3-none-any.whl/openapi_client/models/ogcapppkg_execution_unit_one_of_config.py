# coding: utf-8

"""
    OGC API - Processes

    Example API Definition for OGC API - Processes  # noqa: E501

    The version of the OpenAPI document: 0.1
    Contact: info@ogc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, confloat, conint

class OgcapppkgExecutionUnitOneOfConfig(BaseModel):
    """
    Hardware requirements and configuration properties for executing the process.
    """
    cpu_min: Optional[Union[confloat(ge=1, strict=True), conint(ge=1, strict=True)]] = Field(None, alias="cpuMin", description="Minimum number of CPUs required to run the process (unit is CPU core).")
    cpu_max: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="cpuMax", description="Maximum number of CPU dedicated to the process (unit is CPU core)")
    memory_min: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="memoryMin", description="Minimum RAM memory required to run the application (unit is GB)")
    memory_max: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="memoryMax", description="Maximum RAM memory dedicated to the application (unit is GB)")
    storage_temp_min: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="storageTempMin", description="Minimum required temporary storage size (unit is GB)")
    storage_outputs_min: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="storageOutputsMin", description="Minimum required output storage size (unit is GB)")
    job_timeout: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="jobTimeout", description="Timeout delay for a job execution (in seconds)")
    additional_properties: Dict[str, Any] = {}
    __properties = ["cpuMin", "cpuMax", "memoryMin", "memoryMax", "storageTempMin", "storageOutputsMin", "jobTimeout"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OgcapppkgExecutionUnitOneOfConfig:
        """Create an instance of OgcapppkgExecutionUnitOneOfConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OgcapppkgExecutionUnitOneOfConfig:
        """Create an instance of OgcapppkgExecutionUnitOneOfConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OgcapppkgExecutionUnitOneOfConfig.parse_obj(obj)

        _obj = OgcapppkgExecutionUnitOneOfConfig.parse_obj({
            "cpu_min": obj.get("cpuMin"),
            "cpu_max": obj.get("cpuMax"),
            "memory_min": obj.get("memoryMin"),
            "memory_max": obj.get("memoryMax"),
            "storage_temp_min": obj.get("storageTempMin"),
            "storage_outputs_min": obj.get("storageOutputsMin"),
            "job_timeout": obj.get("jobTimeout")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj

