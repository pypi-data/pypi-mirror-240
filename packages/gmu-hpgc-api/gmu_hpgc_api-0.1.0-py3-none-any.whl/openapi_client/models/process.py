# coding: utf-8

"""
    OGC API - Processes

    Example API Definition for OGC API - Processes  # noqa: E501

    The version of the OpenAPI document: 0.1
    Contact: info@ogc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from openapi_client.models.description_type_additional_parameters import DescriptionTypeAdditionalParameters
from openapi_client.models.input_description import InputDescription
from openapi_client.models.job_control_options import JobControlOptions
from openapi_client.models.link import Link
from openapi_client.models.metadata import Metadata
from openapi_client.models.output_description import OutputDescription
from openapi_client.models.transmission_mode import TransmissionMode

class Process(BaseModel):
    """
    Process
    """
    title: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    keywords: Optional[conlist(StrictStr)] = None
    metadata: Optional[conlist(Metadata)] = None
    additional_parameters: Optional[DescriptionTypeAdditionalParameters] = Field(None, alias="additionalParameters")
    id: StrictStr = Field(...)
    version: StrictStr = Field(...)
    job_control_options: Optional[conlist(JobControlOptions)] = Field(None, alias="jobControlOptions")
    output_transmission: Optional[conlist(TransmissionMode)] = Field(None, alias="outputTransmission")
    links: Optional[conlist(Link)] = None
    inputs: Optional[Dict[str, InputDescription]] = None
    outputs: Optional[Dict[str, OutputDescription]] = None
    __properties = ["title", "description", "keywords", "metadata", "additionalParameters", "id", "version", "jobControlOptions", "outputTransmission", "links", "inputs", "outputs"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Process:
        """Create an instance of Process from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in metadata (list)
        _items = []
        if self.metadata:
            for _item in self.metadata:
                if _item:
                    _items.append(_item.to_dict())
            _dict['metadata'] = _items
        # override the default output from pydantic by calling `to_dict()` of additional_parameters
        if self.additional_parameters:
            _dict['additionalParameters'] = self.additional_parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item in self.links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in inputs (dict)
        _field_dict = {}
        if self.inputs:
            for _key in self.inputs:
                if self.inputs[_key]:
                    _field_dict[_key] = self.inputs[_key].to_dict()
            _dict['inputs'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in outputs (dict)
        _field_dict = {}
        if self.outputs:
            for _key in self.outputs:
                if self.outputs[_key]:
                    _field_dict[_key] = self.outputs[_key].to_dict()
            _dict['outputs'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Process:
        """Create an instance of Process from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Process.parse_obj(obj)

        _obj = Process.parse_obj({
            "title": obj.get("title"),
            "description": obj.get("description"),
            "keywords": obj.get("keywords"),
            "metadata": [Metadata.from_dict(_item) for _item in obj.get("metadata")] if obj.get("metadata") is not None else None,
            "additional_parameters": DescriptionTypeAdditionalParameters.from_dict(obj.get("additionalParameters")) if obj.get("additionalParameters") is not None else None,
            "id": obj.get("id"),
            "version": obj.get("version"),
            "job_control_options": obj.get("jobControlOptions"),
            "output_transmission": obj.get("outputTransmission"),
            "links": [Link.from_dict(_item) for _item in obj.get("links")] if obj.get("links") is not None else None,
            "inputs": dict(
                (_k, InputDescription.from_dict(_v))
                for _k, _v in obj.get("inputs").items()
            )
            if obj.get("inputs") is not None
            else None,
            "outputs": dict(
                (_k, OutputDescription.from_dict(_v))
                for _k, _v in obj.get("outputs").items()
            )
            if obj.get("outputs") is not None
            else None
        })
        return _obj

