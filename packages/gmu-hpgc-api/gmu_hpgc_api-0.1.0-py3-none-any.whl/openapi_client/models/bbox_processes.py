# coding: utf-8

"""
    OGC API - Processes

    Example API Definition for OGC API - Processes  # noqa: E501

    The version of the OpenAPI document: 0.1
    Contact: info@ogc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, conlist
from openapi_client.models.bbox_processes_crs import BboxProcessesCrs

class BboxProcesses(BaseModel):
    """
    BboxProcesses
    """
    bbox: conlist(Union[StrictFloat, StrictInt]) = Field(...)
    crs: Optional[BboxProcessesCrs] = None
    __properties = ["bbox", "crs"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BboxProcesses:
        """Create an instance of BboxProcesses from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of crs
        if self.crs:
            _dict['crs'] = self.crs.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BboxProcesses:
        """Create an instance of BboxProcesses from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BboxProcesses.parse_obj(obj)

        _obj = BboxProcesses.parse_obj({
            "bbox": obj.get("bbox"),
            "crs": BboxProcessesCrs.from_dict(obj.get("crs")) if obj.get("crs") is not None else None
        })
        return _obj

