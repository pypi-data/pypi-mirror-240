# coding: utf-8

"""
    OGC API - Processes

    Example API Definition for OGC API - Processes  # noqa: E501

    The version of the OpenAPI document: 0.1
    Contact: info@ogc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from openapi_client.models.extent_temporal_grid_resolution import ExtentTemporalGridResolution

class ExtentTemporalGrid(BaseModel):
    """
    Provides information about the limited availability of data within the collection organized as a grid (regular or irregular) along the temporal dimension.
    """
    coordinates: Optional[conlist(StrictStr, min_items=1)] = Field(None, description="List of coordinates along the temporal dimension for which data organized as an irregular grid in the collection is available (e.g., \"2017-11-14T09:00Z\",\"2017-11-14T12:00Z\",\"2017-11-14T15:00Z\",\"2017-11-14T18:00Z\",\"2017-11-14T21:00Z\").")
    cells_count: Optional[StrictInt] = Field(None, alias="cellsCount", description="Number of samples available along the temporal dimension for data organized as a regular grid. For values representing the whole area of contiguous cells spanning _resolution_ units along the dimension, this will be (_upperBound_ - _lowerBound_) / _resolution_. For values representing infinitely small point cells spaced by _resolution_ units along the dimension, this will be (_upperBound_ - _lowerBound_) / _resolution_ + 1.")
    resolution: Optional[ExtentTemporalGridResolution] = None
    __properties = ["coordinates", "cellsCount", "resolution"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExtentTemporalGrid:
        """Create an instance of ExtentTemporalGrid from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of resolution
        if self.resolution:
            _dict['resolution'] = self.resolution.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExtentTemporalGrid:
        """Create an instance of ExtentTemporalGrid from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExtentTemporalGrid.parse_obj(obj)

        _obj = ExtentTemporalGrid.parse_obj({
            "coordinates": obj.get("coordinates"),
            "cells_count": obj.get("cellsCount"),
            "resolution": ExtentTemporalGridResolution.from_dict(obj.get("resolution")) if obj.get("resolution") is not None else None
        })
        return _obj

