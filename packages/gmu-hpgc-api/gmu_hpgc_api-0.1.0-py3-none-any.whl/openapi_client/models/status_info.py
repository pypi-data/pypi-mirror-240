# coding: utf-8

"""
    OGC API - Processes

    Example API Definition for OGC API - Processes  # noqa: E501

    The version of the OpenAPI document: 0.1
    Contact: info@ogc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conint, conlist, validator
from openapi_client.models.link import Link
from openapi_client.models.status_code import StatusCode

class StatusInfo(BaseModel):
    """
    StatusInfo
    """
    process_id: Optional[StrictStr] = Field(None, alias="processID")
    type: StrictStr = Field(...)
    job_id: StrictStr = Field(..., alias="jobID")
    status: StatusCode = Field(...)
    message: Optional[StrictStr] = None
    created: Optional[datetime] = None
    started: Optional[datetime] = None
    finished: Optional[datetime] = None
    updated: Optional[datetime] = None
    progress: Optional[conint(strict=True, le=100, ge=0)] = None
    links: Optional[conlist(Link)] = None
    __properties = ["processID", "type", "jobID", "status", "message", "created", "started", "finished", "updated", "progress", "links"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('process'):
            raise ValueError("must be one of enum values ('process')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StatusInfo:
        """Create an instance of StatusInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item in self.links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['links'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StatusInfo:
        """Create an instance of StatusInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StatusInfo.parse_obj(obj)

        _obj = StatusInfo.parse_obj({
            "process_id": obj.get("processID"),
            "type": obj.get("type"),
            "job_id": obj.get("jobID"),
            "status": obj.get("status"),
            "message": obj.get("message"),
            "created": obj.get("created"),
            "started": obj.get("started"),
            "finished": obj.get("finished"),
            "updated": obj.get("updated"),
            "progress": obj.get("progress"),
            "links": [Link.from_dict(_item) for _item in obj.get("links")] if obj.get("links") is not None else None
        })
        return _obj

