# coding: utf-8

"""
    OGC API - Processes

    Example API Definition for OGC API - Processes  # noqa: E501

    The version of the OpenAPI document: 0.1
    Contact: info@ogc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conint, conlist
from openapi_client.models.collection_info_data_type import CollectionInfoDataType
from openapi_client.models.extent_uad import ExtentUad
from openapi_client.models.link import Link

class CollectionInfo(BaseModel):
    """
    CollectionInfo
    """
    id: StrictStr = Field(..., description="identifier of the collection used, for example, in URIs")
    title: Optional[StrictStr] = Field(None, description="human readable title of the collection")
    description: Optional[StrictStr] = Field(None, description="a description of the data in the collection")
    links: conlist(Link) = Field(...)
    extent: Optional[ExtentUad] = None
    item_type: Optional[StrictStr] = Field('unknown', alias="itemType", description="indicator about the type of the items in the collection if the collection has an accessible /collections/{collectionId}/items endpoint")
    crs: Optional[conlist(StrictStr)] = Field(None, description="the list of coordinate reference systems supported by the API; the first item is the default coordinate reference system")
    data_type: Optional[CollectionInfoDataType] = Field(None, alias="dataType")
    geometry_dimension: Optional[conint(strict=True, le=3, ge=0)] = Field(None, alias="geometryDimension", description="The geometry dimension of the features shown in this layer (0: points, 1: curves, 2: surfaces, 3: solids), unspecified: mixed or unknown")
    min_scale_denominator: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="minScaleDenominator", description="Minimum scale denominator for usage of the collection")
    max_scale_denominator: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="maxScaleDenominator", description="Maximum scale denominator for usage of the collection")
    min_cell_size: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="minCellSize", description="Minimum cell size for usage of the collection")
    max_cell_size: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="maxCellSize", description="Maximum cell size for usage of the collection")
    __properties = ["id", "title", "description", "links", "extent", "itemType", "crs", "dataType", "geometryDimension", "minScaleDenominator", "maxScaleDenominator", "minCellSize", "maxCellSize"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CollectionInfo:
        """Create an instance of CollectionInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item in self.links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of extent
        if self.extent:
            _dict['extent'] = self.extent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_type
        if self.data_type:
            _dict['dataType'] = self.data_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CollectionInfo:
        """Create an instance of CollectionInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CollectionInfo.parse_obj(obj)

        _obj = CollectionInfo.parse_obj({
            "id": obj.get("id"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "links": [Link.from_dict(_item) for _item in obj.get("links")] if obj.get("links") is not None else None,
            "extent": ExtentUad.from_dict(obj.get("extent")) if obj.get("extent") is not None else None,
            "item_type": obj.get("itemType") if obj.get("itemType") is not None else 'unknown',
            "crs": obj.get("crs"),
            "data_type": CollectionInfoDataType.from_dict(obj.get("dataType")) if obj.get("dataType") is not None else None,
            "geometry_dimension": obj.get("geometryDimension"),
            "min_scale_denominator": obj.get("minScaleDenominator"),
            "max_scale_denominator": obj.get("maxScaleDenominator"),
            "min_cell_size": obj.get("minCellSize"),
            "max_cell_size": obj.get("maxCellSize")
        })
        return _obj

