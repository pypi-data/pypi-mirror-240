# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/ext_proc/v3/ext_proc.proto, envoy/extensions/filters/http/ext_proc/v3/processing_mode.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import timedelta
from typing import List

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf

from ......config.common.mutation_rules import (
    v3 as _____config_common_mutation_rules_v3__,
)
from ......config.core import v3 as _____config_core_v3__
from ......type.matcher import v3 as _____type_matcher_v3__


class ProcessingModeHeaderSendMode(betterproto.Enum):
    """Control how headers and trailers are handled"""

    DEFAULT = 0
    """
    The default HeaderSendMode depends on which part of the message is being
    processed. By default, request and response headers are sent, while
    trailers are skipped.
    """

    SEND = 1
    """Send the header or trailer."""

    SKIP = 2
    """Do not send the header or trailer."""


class ProcessingModeBodySendMode(betterproto.Enum):
    """Control how the request and response bodies are handled"""

    NONE = 0
    """Do not send the body at all. This is the default."""

    STREAMED = 1
    """Stream the body to the server in pieces as they arrive at the proxy."""

    BUFFERED = 2
    """
    Buffer the message body in memory and send the entire body at once. If the
    body exceeds the configured buffer limit, then the downstream system will
    receive an error.
    """

    BUFFERED_PARTIAL = 3
    """
    Buffer the message body in memory and send the entire body in one chunk. If
    the body exceeds the configured buffer limit, then the body contents up to
    the buffer limit will be sent.
    """


@dataclass(eq=False, repr=False)
class ProcessingMode(betterproto.Message):
    """[#next-free-field: 7]"""

    request_header_mode: "ProcessingModeHeaderSendMode" = betterproto.enum_field(1)
    """How to handle the request header. Default is "SEND"."""

    response_header_mode: "ProcessingModeHeaderSendMode" = betterproto.enum_field(2)
    """How to handle the response header. Default is "SEND"."""

    request_body_mode: "ProcessingModeBodySendMode" = betterproto.enum_field(3)
    """How to handle the request body. Default is "NONE"."""

    response_body_mode: "ProcessingModeBodySendMode" = betterproto.enum_field(4)
    """How do handle the response body. Default is "NONE"."""

    request_trailer_mode: "ProcessingModeHeaderSendMode" = betterproto.enum_field(5)
    """How to handle the request trailers. Default is "SKIP"."""

    response_trailer_mode: "ProcessingModeHeaderSendMode" = betterproto.enum_field(6)
    """How to handle the response trailers. Default is "SKIP"."""


@dataclass(eq=False, repr=False)
class ExternalProcessor(betterproto.Message):
    """
    The filter communicates with an external gRPC service called an "external
    processor" that can do a variety of things with the request and response: *
    Access and modify the HTTP headers on the request, response, or both *
    Access and modify the HTTP request and response bodies * Access and modify
    the dynamic stream metadata * Immediately send an HTTP response downstream
    and terminate other processing The filter communicates with the server
    using a gRPC bidirectional stream. After the initial request, the external
    server is in control over what additional data is sent to it and how it
    should be processed. By implementing the protocol specified by the stream,
    the external server can choose: * Whether it receives the response message
    at all * Whether it receives the message body at all, in separate chunks,
    or as a single buffer * Whether subsequent HTTP requests are transmitted
    synchronously or whether they are   sent asynchronously. * To modify
    request or response trailers if they already exist The filter supports up
    to six different processing steps. Each is represented by a gRPC stream
    message that is sent to the external processor. For each message, the
    processor must send a matching response. * Request headers: Contains the
    headers from the original HTTP request. * Request body: Delivered if they
    are present and sent in a single message if   the BUFFERED or
    BUFFERED_PARTIAL mode is chosen, in multiple messages if the   STREAMED
    mode is chosen, and not at all otherwise. * Request trailers: Delivered if
    they are present and if the trailer mode is set   to SEND. * Response
    headers: Contains the headers from the HTTP response. Keep in mind   that
    if the upstream system sends them before processing the request body that
    this message may arrive before the complete body. * Response body: Sent
    according to the processing mode like the request body. * Response
    trailers: Delivered according to the processing mode like the   request
    trailers. By default, the processor sends only the request and response
    headers messages. This may be changed to include any of the six steps by
    changing the processing_mode setting of the filter configuration, or by
    setting the mode_override of any response from the external processor. The
    latter is only enabled if allow_mode_override is set to true. This way, a
    processor may, for example, use information in the request header to
    determine whether the message body must be examined, or whether the proxy
    should simply stream it straight through. All of this together allows a
    server to process the filter traffic in fairly sophisticated ways. For
    example: * A server may choose to examine all or part of the HTTP message
    bodies depending   on the content of the headers. * A server may choose to
    immediately reject some messages based on their HTTP   headers (or other
    dynamic metadata) and more carefully examine others. * A server may
    asynchronously monitor traffic coming through the filter by inspecting
    headers, bodies, or both, and then decide to switch to a synchronous
    processing   mode, either permanently or temporarily. The protocol itself
    is based on a bidirectional gRPC stream. Envoy will send the server
    :ref:`ProcessingRequest
    <envoy_v3_api_msg_service.ext_proc.v3.ProcessingRequest>` messages, and the
    server must reply with :ref:`ProcessingResponse
    <envoy_v3_api_msg_service.ext_proc.v3.ProcessingResponse>`. Stats about
    each gRPC call are recorded in a :ref:`dynamic filter state
    <arch_overview_advanced_filter_state_sharing>` object in a namespace
    matching the filter name. [#next-free-field: 16]
    """

    grpc_service: "_____config_core_v3__.GrpcService" = betterproto.message_field(1)
    """
    Configuration for the gRPC service that the filter will communicate with.
    The filter supports both the "Envoy" and "Google" gRPC clients.
    """

    failure_mode_allow: bool = betterproto.bool_field(2)
    """
    By default, if the gRPC stream cannot be established, or if it is closed
    prematurely with an error, the filter will fail. Specifically, if the
    response headers have not yet been delivered, then it will return a 500
    error downstream. If they have been delivered, then instead the HTTP stream
    to the downstream client will be reset. With this parameter set to true,
    however, then if the gRPC stream is prematurely closed or could not be
    opened, processing continues without error.
    """

    processing_mode: "ProcessingMode" = betterproto.message_field(3)
    """
    Specifies default options for how HTTP headers, trailers, and bodies are
    sent. See ProcessingMode for details.
    """

    async_mode: bool = betterproto.bool_field(4)
    """
    [#not-implemented-hide:] If true, send each part of the HTTP request or
    response specified by ProcessingMode asynchronously -- in other words, send
    the message on the gRPC stream and then continue filter processing. If
    false, which is the default, suspend filter execution after each message is
    sent to the remote service and wait up to "message_timeout" for a reply.
    """

    request_attributes: List[str] = betterproto.string_field(5)
    """
    [#not-implemented-hide:] Envoy provides a number of :ref:`attributes
    <arch_overview_attributes>` for expressive policies. Each attribute name
    provided in this field will be matched against that list and populated in
    the request_headers message. See the :ref:`attribute documentation
    <arch_overview_request_attributes>` for the list of supported attributes
    and their types.
    """

    response_attributes: List[str] = betterproto.string_field(6)
    """
    [#not-implemented-hide:] Envoy provides a number of :ref:`attributes
    <arch_overview_attributes>` for expressive policies. Each attribute name
    provided in this field will be matched against that list and populated in
    the response_headers message. See the :ref:`attribute documentation
    <arch_overview_attributes>` for the list of supported attributes and their
    types.
    """

    message_timeout: timedelta = betterproto.message_field(7)
    """
    Specifies the timeout for each individual message sent on the stream and
    when the filter is running in synchronous mode. Whenever the proxy sends a
    message on the stream that requires a response, it will reset this timer,
    and will stop processing and return an error (subject to the processing
    mode) if the timer expires before a matching response is received. There is
    no timeout when the filter is running in asynchronous mode. Zero is a valid
    config which means the timer will be triggered immediately. If not
    configured, default is 200 milliseconds.
    """

    stat_prefix: str = betterproto.string_field(8)
    """
    Optional additional prefix to use when emitting statistics. This allows to
    distinguish emitted statistics between configured *ext_proc* filters in an
    HTTP filter chain.
    """

    mutation_rules: "_____config_common_mutation_rules_v3__.HeaderMutationRules" = (
        betterproto.message_field(9)
    )
    """
    Rules that determine what modifications an external processing server may
    make to message headers. If not set, all headers may be modified except for
    "host", ":authority", ":scheme", ":method", and headers that start with the
    header prefix set via :ref:`header_prefix
    <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.header_prefix>` (which is
    usually "x-envoy"). Note that changing headers such as "host" or
    ":authority" may not in itself change Envoy's routing decision, as routes
    can be cached. To also force the route to be recomputed, set the
    :ref:`clear_route_cache
    <envoy_v3_api_field_service.ext_proc.v3.CommonResponse.clear_route_cache>`
    field to true in the same response.
    """

    max_message_timeout: timedelta = betterproto.message_field(10)
    """
    Specify the upper bound of :ref:`override_message_timeout <envoy_v3_api_fie
    ld_service.ext_proc.v3.ProcessingResponse.override_message_timeout>` If not
    specified, by default it is 0, which will effectively disable the
    ``override_message_timeout`` API.
    """

    disable_clear_route_cache: bool = betterproto.bool_field(11)
    """
    Prevents clearing the route-cache when the :ref:`clear_route_cache
    <envoy_v3_api_field_service.ext_proc.v3.CommonResponse.clear_route_cache>`
    field is set in an external processor response.
    """

    forward_rules: "HeaderForwardingRules" = betterproto.message_field(12)
    """
    Allow headers matching the ``forward_rules`` to be forwarded to the
    external processing server. If not set, all headers are forwarded to the
    external processing server.
    """

    filter_metadata: "betterproto_lib_google_protobuf.Struct" = (
        betterproto.message_field(13)
    )
    """
    Additional metadata to be added to the filter state for logging purposes.
    The metadata will be added to StreamInfo's filter state under the namespace
    corresponding to the ext_proc filter name.
    """

    allow_mode_override: bool = betterproto.bool_field(14)
    """
    If ``allow_mode_override`` is set to true, the filter config
    :ref:`processing_mode <envoy_v3_api_field_extensions.filters.http.ext_proc.
    v3.ExternalProcessor.processing_mode>` can be overridden by the response
    message from the external processing server :ref:`mode_override
    <envoy_v3_api_field_service.ext_proc.v3.ProcessingResponse.mode_override>`.
    If not set, ``mode_override`` API in the response message will be ignored.
    """

    disable_immediate_response: bool = betterproto.bool_field(15)
    """
    If set to true, ignore the :ref:`immediate_response <envoy_v3_api_field_ser
    vice.ext_proc.v3.ProcessingResponse.immediate_response>` message in an
    external processor response. In such case, no local reply will be sent.
    Instead, the stream to the external processor will be closed. There will be
    no more external processing for this stream from now on.
    """


@dataclass(eq=False, repr=False)
class HeaderForwardingRules(betterproto.Message):
    """
    The HeaderForwardingRules structure specifies what headers are allowed to
    be forwarded to the external processing server. This works as below:   1.
    If neither ``allowed_headers`` nor ``disallowed_headers`` is set, all
    headers are forwarded.   2. If both ``allowed_headers`` and
    ``disallowed_headers`` are set, only headers in the
    ``allowed_headers`` but not in the ``disallowed_headers`` are forwarded.
    3. If ``allowed_headers`` is set, and ``disallowed_headers`` is not set,
    only headers in      the ``allowed_headers`` are forwarded.   4. If
    ``disallowed_headers`` is set, and ``allowed_headers`` is not set, all
    headers except      headers in the ``disallowed_headers`` are forwarded.
    """

    allowed_headers: "_____type_matcher_v3__.ListStringMatcher" = (
        betterproto.message_field(1)
    )
    """
    If set, specifically allow any header in this list to be forwarded to the
    external processing server. This can be overridden by the below
    ``disallowed_headers``.
    """

    disallowed_headers: "_____type_matcher_v3__.ListStringMatcher" = (
        betterproto.message_field(2)
    )
    """
    If set, specifically disallow any header in this list to be forwarded to
    the external processing server. This overrides the above
    ``allowed_headers`` if a header matches both.
    """


@dataclass(eq=False, repr=False)
class ExtProcPerRoute(betterproto.Message):
    """
    Extra settings that may be added to per-route configuration for a virtual
    host or cluster.
    """

    disabled: bool = betterproto.bool_field(1, group="override")
    """
    Disable the filter for this particular vhost or route. If disabled is
    specified in multiple per-filter-configs, the most specific one will be
    used.
    """

    overrides: "ExtProcOverrides" = betterproto.message_field(2, group="override")
    """
    Override aspects of the configuration for this route. A set of overrides in
    a more specific configuration will override a "disabled" flag set in a
    less-specific one.
    """


@dataclass(eq=False, repr=False)
class ExtProcOverrides(betterproto.Message):
    """Overrides that may be set on a per-route basis [#next-free-field: 6]"""

    processing_mode: "ProcessingMode" = betterproto.message_field(1)
    """Set a different processing mode for this route than the default."""

    async_mode: bool = betterproto.bool_field(2)
    """
    [#not-implemented-hide:] Set a different asynchronous processing option
    than the default.
    """

    request_attributes: List[str] = betterproto.string_field(3)
    """
    [#not-implemented-hide:] Set different optional attributes than the default
    setting of the ``request_attributes`` field.
    """

    response_attributes: List[str] = betterproto.string_field(4)
    """
    [#not-implemented-hide:] Set different optional properties than the default
    setting of the ``response_attributes`` field.
    """

    grpc_service: "_____config_core_v3__.GrpcService" = betterproto.message_field(5)
    """Set a different gRPC service for this route than the default."""
