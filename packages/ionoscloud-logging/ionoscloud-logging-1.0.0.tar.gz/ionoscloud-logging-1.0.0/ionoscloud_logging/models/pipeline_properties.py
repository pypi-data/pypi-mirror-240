# coding: utf-8

"""
    IONOS Logging REST API

    Logging as a Service (LaaS) is a service that provides a centralized logging system where users are able to push and aggregate their system or application logs. This service also provides a visualization platform where users are able to observe, search and filter the logs and also create dashboards and alerts for their data points. This service can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an API. The API allows you to create logging pipelines or modify existing ones. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ionoscloud_logging.configuration import Configuration


class PipelineProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {

        'name': 'str',

        'logs': 'list[PipelineResponse]',

        'tcp_address': 'str',

        'http_address': 'str',

        'grafana_address': 'str',
    }

    attribute_map = {

        'name': 'name',

        'logs': 'logs',

        'tcp_address': 'tcpAddress',

        'http_address': 'httpAddress',

        'grafana_address': 'grafanaAddress',
    }

    def __init__(self, name=None, logs=None, tcp_address=None, http_address=None, grafana_address=None, local_vars_configuration=None):  # noqa: E501
        """PipelineProperties - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._logs = None
        self._tcp_address = None
        self._http_address = None
        self._grafana_address = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if logs is not None:
            self.logs = logs
        if tcp_address is not None:
            self.tcp_address = tcp_address
        if http_address is not None:
            self.http_address = http_address
        if grafana_address is not None:
            self.grafana_address = grafana_address


    @property
    def name(self):
        """Gets the name of this PipelineProperties.  # noqa: E501

        The friendly name of your pipeline.  # noqa: E501

        :return: The name of this PipelineProperties.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PipelineProperties.

        The friendly name of your pipeline.  # noqa: E501

        :param name: The name of this PipelineProperties.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def logs(self):
        """Gets the logs of this PipelineProperties.  # noqa: E501

        The information of the log aggregator  # noqa: E501

        :return: The logs of this PipelineProperties.  # noqa: E501
        :rtype: list[PipelineResponse]
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this PipelineProperties.

        The information of the log aggregator  # noqa: E501

        :param logs: The logs of this PipelineProperties.  # noqa: E501
        :type logs: list[PipelineResponse]
        """

        self._logs = logs

    @property
    def tcp_address(self):
        """Gets the tcp_address of this PipelineProperties.  # noqa: E501

        The address to connect fluentBit compatible logging agents to  # noqa: E501

        :return: The tcp_address of this PipelineProperties.  # noqa: E501
        :rtype: str
        """
        return self._tcp_address

    @tcp_address.setter
    def tcp_address(self, tcp_address):
        """Sets the tcp_address of this PipelineProperties.

        The address to connect fluentBit compatible logging agents to  # noqa: E501

        :param tcp_address: The tcp_address of this PipelineProperties.  # noqa: E501
        :type tcp_address: str
        """

        self._tcp_address = tcp_address

    @property
    def http_address(self):
        """Gets the http_address of this PipelineProperties.  # noqa: E501

        The address to post logs to using JSON with basic auth  # noqa: E501

        :return: The http_address of this PipelineProperties.  # noqa: E501
        :rtype: str
        """
        return self._http_address

    @http_address.setter
    def http_address(self, http_address):
        """Sets the http_address of this PipelineProperties.

        The address to post logs to using JSON with basic auth  # noqa: E501

        :param http_address: The http_address of this PipelineProperties.  # noqa: E501
        :type http_address: str
        """

        self._http_address = http_address

    @property
    def grafana_address(self):
        """Gets the grafana_address of this PipelineProperties.  # noqa: E501

        The address of the client's grafana instance  # noqa: E501

        :return: The grafana_address of this PipelineProperties.  # noqa: E501
        :rtype: str
        """
        return self._grafana_address

    @grafana_address.setter
    def grafana_address(self, grafana_address):
        """Sets the grafana_address of this PipelineProperties.

        The address of the client's grafana instance  # noqa: E501

        :param grafana_address: The grafana_address of this PipelineProperties.  # noqa: E501
        :type grafana_address: str
        """

        self._grafana_address = grafana_address
    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PipelineProperties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PipelineProperties):
            return True

        return self.to_dict() != other.to_dict()
