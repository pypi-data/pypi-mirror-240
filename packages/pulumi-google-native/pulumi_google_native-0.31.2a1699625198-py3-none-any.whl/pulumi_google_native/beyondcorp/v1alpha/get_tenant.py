# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetTenantResult',
    'AwaitableGetTenantResult',
    'get_tenant',
    'get_tenant_output',
]

@pulumi.output_type
class GetTenantResult:
    def __init__(__self__, create_time=None, display_name=None, google_group_email=None, google_group_id=None, name=None, partner_metadata=None, update_time=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if google_group_email and not isinstance(google_group_email, str):
            raise TypeError("Expected argument 'google_group_email' to be a str")
        pulumi.set(__self__, "google_group_email", google_group_email)
        if google_group_id and not isinstance(google_group_id, str):
            raise TypeError("Expected argument 'google_group_id' to be a str")
        pulumi.set(__self__, "google_group_id", google_group_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if partner_metadata and not isinstance(partner_metadata, dict):
            raise TypeError("Expected argument 'partner_metadata' to be a dict")
        pulumi.set(__self__, "partner_metadata", partner_metadata)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Timestamp when the resource was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Optional. An arbitrary caller-provided name for the Tenant. Cannot exceed 64 characters.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="googleGroupEmail")
    def google_group_email(self) -> str:
        """
        Optional. Google group email to which the Tenant is enabled.
        """
        return pulumi.get(self, "google_group_email")

    @property
    @pulumi.getter(name="googleGroupId")
    def google_group_id(self) -> str:
        """
        Optional. Google group ID to which the Tenant is enabled.
        """
        return pulumi.get(self, "google_group_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Unique resource name of the Tenant. The name is ignored when creating Tenant.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partnerMetadata")
    def partner_metadata(self) -> 'outputs.GoogleCloudBeyondcorpPartnerservicesV1alphaPartnerMetadataResponse':
        """
        Optional. Metadata provided by the Partner associated with Tenant.
        """
        return pulumi.get(self, "partner_metadata")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Timestamp when the resource was last modified.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetTenantResult(GetTenantResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTenantResult(
            create_time=self.create_time,
            display_name=self.display_name,
            google_group_email=self.google_group_email,
            google_group_id=self.google_group_id,
            name=self.name,
            partner_metadata=self.partner_metadata,
            update_time=self.update_time)


def get_tenant(organization_id: Optional[str] = None,
               tenant_id: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTenantResult:
    """
    Gets details of a single Tenant.
    """
    __args__ = dict()
    __args__['organizationId'] = organization_id
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:beyondcorp/v1alpha:getTenant', __args__, opts=opts, typ=GetTenantResult).value

    return AwaitableGetTenantResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        display_name=pulumi.get(__ret__, 'display_name'),
        google_group_email=pulumi.get(__ret__, 'google_group_email'),
        google_group_id=pulumi.get(__ret__, 'google_group_id'),
        name=pulumi.get(__ret__, 'name'),
        partner_metadata=pulumi.get(__ret__, 'partner_metadata'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_tenant)
def get_tenant_output(organization_id: Optional[pulumi.Input[str]] = None,
                      tenant_id: Optional[pulumi.Input[str]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTenantResult]:
    """
    Gets details of a single Tenant.
    """
    ...
