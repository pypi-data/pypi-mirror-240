# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'ComputeEnginePreferencesArgs',
    'GCSPayloadInfoArgs',
    'InlinePayloadInfoArgs',
    'MachinePreferencesArgs',
    'MachineSeriesArgs',
    'PayloadFileArgs',
    'RegionPreferencesArgs',
    'ReportConfigGroupPreferenceSetAssignmentArgs',
    'UploadFileInfoArgs',
    'VirtualMachinePreferencesArgs',
]

@pulumi.input_type
class ComputeEnginePreferencesArgs:
    def __init__(__self__, *,
                 license_type: Optional[pulumi.Input['ComputeEnginePreferencesLicenseType']] = None,
                 machine_preferences: Optional[pulumi.Input['MachinePreferencesArgs']] = None,
                 persistent_disk_type: Optional[pulumi.Input['ComputeEnginePreferencesPersistentDiskType']] = None):
        """
        The user preferences relating to Compute Engine target platform.
        :param pulumi.Input['ComputeEnginePreferencesLicenseType'] license_type: License type to consider when calculating costs for virtual machine insights and recommendations. If unspecified, costs are calculated based on the default licensing plan.
        :param pulumi.Input['MachinePreferencesArgs'] machine_preferences: Preferences concerning the machine types to consider on Compute Engine.
        :param pulumi.Input['ComputeEnginePreferencesPersistentDiskType'] persistent_disk_type: Persistent disk type to use. If unspecified (default), all types are considered, based on available usage data.
        """
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if machine_preferences is not None:
            pulumi.set(__self__, "machine_preferences", machine_preferences)
        if persistent_disk_type is not None:
            pulumi.set(__self__, "persistent_disk_type", persistent_disk_type)

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[pulumi.Input['ComputeEnginePreferencesLicenseType']]:
        """
        License type to consider when calculating costs for virtual machine insights and recommendations. If unspecified, costs are calculated based on the default licensing plan.
        """
        return pulumi.get(self, "license_type")

    @license_type.setter
    def license_type(self, value: Optional[pulumi.Input['ComputeEnginePreferencesLicenseType']]):
        pulumi.set(self, "license_type", value)

    @property
    @pulumi.getter(name="machinePreferences")
    def machine_preferences(self) -> Optional[pulumi.Input['MachinePreferencesArgs']]:
        """
        Preferences concerning the machine types to consider on Compute Engine.
        """
        return pulumi.get(self, "machine_preferences")

    @machine_preferences.setter
    def machine_preferences(self, value: Optional[pulumi.Input['MachinePreferencesArgs']]):
        pulumi.set(self, "machine_preferences", value)

    @property
    @pulumi.getter(name="persistentDiskType")
    def persistent_disk_type(self) -> Optional[pulumi.Input['ComputeEnginePreferencesPersistentDiskType']]:
        """
        Persistent disk type to use. If unspecified (default), all types are considered, based on available usage data.
        """
        return pulumi.get(self, "persistent_disk_type")

    @persistent_disk_type.setter
    def persistent_disk_type(self, value: Optional[pulumi.Input['ComputeEnginePreferencesPersistentDiskType']]):
        pulumi.set(self, "persistent_disk_type", value)


@pulumi.input_type
class GCSPayloadInfoArgs:
    def __init__(__self__, *,
                 format: Optional[pulumi.Input['GCSPayloadInfoFormat']] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        A resource that represents a payload hosted on Google Cloud Storage.
        :param pulumi.Input['GCSPayloadInfoFormat'] format: The import job format.
        :param pulumi.Input[str] path: The payload path in Google Cloud Storage.
        """
        if format is not None:
            pulumi.set(__self__, "format", format)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input['GCSPayloadInfoFormat']]:
        """
        The import job format.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input['GCSPayloadInfoFormat']]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The payload path in Google Cloud Storage.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class InlinePayloadInfoArgs:
    def __init__(__self__, *,
                 format: Optional[pulumi.Input['InlinePayloadInfoFormat']] = None,
                 payload: Optional[pulumi.Input[Sequence[pulumi.Input['PayloadFileArgs']]]] = None):
        """
        A resource that represents the inline import job payload.
        :param pulumi.Input['InlinePayloadInfoFormat'] format: The import job format.
        :param pulumi.Input[Sequence[pulumi.Input['PayloadFileArgs']]] payload: List of payload files.
        """
        if format is not None:
            pulumi.set(__self__, "format", format)
        if payload is not None:
            pulumi.set(__self__, "payload", payload)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input['InlinePayloadInfoFormat']]:
        """
        The import job format.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input['InlinePayloadInfoFormat']]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def payload(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PayloadFileArgs']]]]:
        """
        List of payload files.
        """
        return pulumi.get(self, "payload")

    @payload.setter
    def payload(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PayloadFileArgs']]]]):
        pulumi.set(self, "payload", value)


@pulumi.input_type
class MachinePreferencesArgs:
    def __init__(__self__, *,
                 allowed_machine_series: Optional[pulumi.Input[Sequence[pulumi.Input['MachineSeriesArgs']]]] = None):
        """
        The type of machines to consider when calculating virtual machine migration insights and recommendations. Not all machine types are available in all zones and regions.
        :param pulumi.Input[Sequence[pulumi.Input['MachineSeriesArgs']]] allowed_machine_series: Compute Engine machine series to consider for insights and recommendations. If empty, no restriction is applied on the machine series.
        """
        if allowed_machine_series is not None:
            pulumi.set(__self__, "allowed_machine_series", allowed_machine_series)

    @property
    @pulumi.getter(name="allowedMachineSeries")
    def allowed_machine_series(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MachineSeriesArgs']]]]:
        """
        Compute Engine machine series to consider for insights and recommendations. If empty, no restriction is applied on the machine series.
        """
        return pulumi.get(self, "allowed_machine_series")

    @allowed_machine_series.setter
    def allowed_machine_series(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MachineSeriesArgs']]]]):
        pulumi.set(self, "allowed_machine_series", value)


@pulumi.input_type
class MachineSeriesArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[str]] = None):
        """
        A Compute Engine machine series.
        :param pulumi.Input[str] code: Code to identify a Compute Engine machine series. Consult https://cloud.google.com/compute/docs/machine-resource#machine_type_comparison for more details on the available series.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[str]]:
        """
        Code to identify a Compute Engine machine series. Consult https://cloud.google.com/compute/docs/machine-resource#machine_type_comparison for more details on the available series.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code", value)


@pulumi.input_type
class PayloadFileArgs:
    def __init__(__self__, *,
                 data: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Payload file for inline import job payload.
        :param pulumi.Input[str] data: The file data.
        :param pulumi.Input[str] name: The file name.
        """
        if data is not None:
            pulumi.set(__self__, "data", data)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def data(self) -> Optional[pulumi.Input[str]]:
        """
        The file data.
        """
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The file name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RegionPreferencesArgs:
    def __init__(__self__, *,
                 preferred_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The user preferences relating to target regions.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] preferred_regions: A list of preferred regions, ordered by the most preferred region first. Set only valid Google Cloud region names. See https://cloud.google.com/compute/docs/regions-zones for available regions.
        """
        if preferred_regions is not None:
            pulumi.set(__self__, "preferred_regions", preferred_regions)

    @property
    @pulumi.getter(name="preferredRegions")
    def preferred_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of preferred regions, ordered by the most preferred region first. Set only valid Google Cloud region names. See https://cloud.google.com/compute/docs/regions-zones for available regions.
        """
        return pulumi.get(self, "preferred_regions")

    @preferred_regions.setter
    def preferred_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "preferred_regions", value)


@pulumi.input_type
class ReportConfigGroupPreferenceSetAssignmentArgs:
    def __init__(__self__, *,
                 group: pulumi.Input[str],
                 preference_set: pulumi.Input[str]):
        """
        Represents a combination of a group with a preference set.
        :param pulumi.Input[str] group: Name of the group.
        :param pulumi.Input[str] preference_set: Name of the Preference Set.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "preference_set", preference_set)

    @property
    @pulumi.getter
    def group(self) -> pulumi.Input[str]:
        """
        Name of the group.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: pulumi.Input[str]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter(name="preferenceSet")
    def preference_set(self) -> pulumi.Input[str]:
        """
        Name of the Preference Set.
        """
        return pulumi.get(self, "preference_set")

    @preference_set.setter
    def preference_set(self, value: pulumi.Input[str]):
        pulumi.set(self, "preference_set", value)


@pulumi.input_type
class UploadFileInfoArgs:
    def __init__(__self__):
        """
        A resource that contains a URI to which a data file can be uploaded.
        """
        pass


@pulumi.input_type
class VirtualMachinePreferencesArgs:
    def __init__(__self__, *,
                 commitment_plan: Optional[pulumi.Input['VirtualMachinePreferencesCommitmentPlan']] = None,
                 compute_engine_preferences: Optional[pulumi.Input['ComputeEnginePreferencesArgs']] = None,
                 region_preferences: Optional[pulumi.Input['RegionPreferencesArgs']] = None,
                 sizing_optimization_strategy: Optional[pulumi.Input['VirtualMachinePreferencesSizingOptimizationStrategy']] = None):
        """
        VirtualMachinePreferences enables you to create sets of assumptions, for example, a geographical location and pricing track, for your migrated virtual machines. The set of preferences influence recommendations for migrating virtual machine assets.
        :param pulumi.Input['VirtualMachinePreferencesCommitmentPlan'] commitment_plan: Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.
        :param pulumi.Input['ComputeEnginePreferencesArgs'] compute_engine_preferences: Compute Engine preferences concern insights and recommendations for Compute Engine target.
        :param pulumi.Input['RegionPreferencesArgs'] region_preferences: Region preferences for assets using this preference set. If you are unsure which value to set, the migration service API region is often a good value to start with.
        :param pulumi.Input['VirtualMachinePreferencesSizingOptimizationStrategy'] sizing_optimization_strategy: Sizing optimization strategy specifies the preferred strategy used when extrapolating usage data to calculate insights and recommendations for a virtual machine. If you are unsure which value to set, a moderate sizing optimization strategy is often a good value to start with.
        """
        if commitment_plan is not None:
            pulumi.set(__self__, "commitment_plan", commitment_plan)
        if compute_engine_preferences is not None:
            pulumi.set(__self__, "compute_engine_preferences", compute_engine_preferences)
        if region_preferences is not None:
            pulumi.set(__self__, "region_preferences", region_preferences)
        if sizing_optimization_strategy is not None:
            pulumi.set(__self__, "sizing_optimization_strategy", sizing_optimization_strategy)

    @property
    @pulumi.getter(name="commitmentPlan")
    def commitment_plan(self) -> Optional[pulumi.Input['VirtualMachinePreferencesCommitmentPlan']]:
        """
        Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.
        """
        return pulumi.get(self, "commitment_plan")

    @commitment_plan.setter
    def commitment_plan(self, value: Optional[pulumi.Input['VirtualMachinePreferencesCommitmentPlan']]):
        pulumi.set(self, "commitment_plan", value)

    @property
    @pulumi.getter(name="computeEnginePreferences")
    def compute_engine_preferences(self) -> Optional[pulumi.Input['ComputeEnginePreferencesArgs']]:
        """
        Compute Engine preferences concern insights and recommendations for Compute Engine target.
        """
        return pulumi.get(self, "compute_engine_preferences")

    @compute_engine_preferences.setter
    def compute_engine_preferences(self, value: Optional[pulumi.Input['ComputeEnginePreferencesArgs']]):
        pulumi.set(self, "compute_engine_preferences", value)

    @property
    @pulumi.getter(name="regionPreferences")
    def region_preferences(self) -> Optional[pulumi.Input['RegionPreferencesArgs']]:
        """
        Region preferences for assets using this preference set. If you are unsure which value to set, the migration service API region is often a good value to start with.
        """
        return pulumi.get(self, "region_preferences")

    @region_preferences.setter
    def region_preferences(self, value: Optional[pulumi.Input['RegionPreferencesArgs']]):
        pulumi.set(self, "region_preferences", value)

    @property
    @pulumi.getter(name="sizingOptimizationStrategy")
    def sizing_optimization_strategy(self) -> Optional[pulumi.Input['VirtualMachinePreferencesSizingOptimizationStrategy']]:
        """
        Sizing optimization strategy specifies the preferred strategy used when extrapolating usage data to calculate insights and recommendations for a virtual machine. If you are unsure which value to set, a moderate sizing optimization strategy is often a good value to start with.
        """
        return pulumi.get(self, "sizing_optimization_strategy")

    @sizing_optimization_strategy.setter
    def sizing_optimization_strategy(self, value: Optional[pulumi.Input['VirtualMachinePreferencesSizingOptimizationStrategy']]):
        pulumi.set(self, "sizing_optimization_strategy", value)


