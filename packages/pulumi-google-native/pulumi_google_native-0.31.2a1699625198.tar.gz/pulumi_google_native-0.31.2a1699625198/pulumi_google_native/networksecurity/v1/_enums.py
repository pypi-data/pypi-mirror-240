# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

from enum import Enum

__all__ = [
    'AuthorizationPolicyAction',
    'GoogleIamV1AuditLogConfigLogType',
    'MTLSPolicyClientValidationMode',
    'RuleBasicProfile',
]


class AuthorizationPolicyAction(str, Enum):
    """
    Required. The action to take when a rule match is found. Possible values are "ALLOW" or "DENY".
    """
    ACTION_UNSPECIFIED = "ACTION_UNSPECIFIED"
    """
    Default value.
    """
    ALLOW = "ALLOW"
    """
    Grant access.
    """
    DENY = "DENY"
    """
    Deny access. Deny rules should be avoided unless they are used to provide a default "deny all" fallback.
    """


class GoogleIamV1AuditLogConfigLogType(str, Enum):
    """
    The log type that this config enables.
    """
    LOG_TYPE_UNSPECIFIED = "LOG_TYPE_UNSPECIFIED"
    """
    Default case. Should never be this.
    """
    ADMIN_READ = "ADMIN_READ"
    """
    Admin reads. Example: CloudIAM getIamPolicy
    """
    DATA_WRITE = "DATA_WRITE"
    """
    Data writes. Example: CloudSQL Users create
    """
    DATA_READ = "DATA_READ"
    """
    Data reads. Example: CloudSQL Users list
    """


class MTLSPolicyClientValidationMode(str, Enum):
    """
    When the client presents an invalid certificate or no certificate to the load balancer, the `client_validation_mode` specifies how the client connection is handled. Required if the policy is to be used with the external HTTPS load balancing. For Traffic Director it must be empty.
    """
    CLIENT_VALIDATION_MODE_UNSPECIFIED = "CLIENT_VALIDATION_MODE_UNSPECIFIED"
    """
    Not allowed.
    """
    ALLOW_INVALID_OR_MISSING_CLIENT_CERT = "ALLOW_INVALID_OR_MISSING_CLIENT_CERT"
    """
    Allow connection even if certificate chain validation of the client certificate failed or no client certificate was presented. The proof of possession of the private key is always checked if client certificate was presented. This mode requires the backend to implement processing of data extracted from a client certificate to authenticate the peer, or to reject connections if the client certificate fingerprint is missing.
    """
    REJECT_INVALID = "REJECT_INVALID"
    """
    Require a client certificate and allow connection to the backend only if validation of the client certificate passed. If set, requires a reference to non-empty TrustConfig specified in `client_validation_trust_config`.
    """


class RuleBasicProfile(str, Enum):
    """
    Required. Profile which tells what the primitive action should be.
    """
    BASIC_PROFILE_UNSPECIFIED = "BASIC_PROFILE_UNSPECIFIED"
    """
    If there is not a mentioned action for the target.
    """
    ALLOW = "ALLOW"
    """
    Allow the matched traffic.
    """
    DENY = "DENY"
    """
    Deny the matched traffic.
    """
