# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetPhraseSetResult',
    'AwaitableGetPhraseSetResult',
    'get_phrase_set',
    'get_phrase_set_output',
]

@pulumi.output_type
class GetPhraseSetResult:
    def __init__(__self__, boost=None, kms_key_name=None, kms_key_version_name=None, name=None, phrases=None):
        if boost and not isinstance(boost, float):
            raise TypeError("Expected argument 'boost' to be a float")
        pulumi.set(__self__, "boost", boost)
        if kms_key_name and not isinstance(kms_key_name, str):
            raise TypeError("Expected argument 'kms_key_name' to be a str")
        pulumi.set(__self__, "kms_key_name", kms_key_name)
        if kms_key_version_name and not isinstance(kms_key_version_name, str):
            raise TypeError("Expected argument 'kms_key_version_name' to be a str")
        pulumi.set(__self__, "kms_key_version_name", kms_key_version_name)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if phrases and not isinstance(phrases, list):
            raise TypeError("Expected argument 'phrases' to be a list")
        pulumi.set(__self__, "phrases", phrases)

    @property
    @pulumi.getter
    def boost(self) -> float:
        """
        Hint Boost. Positive value will increase the probability that a specific phrase will be recognized over other similar sounding phrases. The higher the boost, the higher the chance of false positive recognition as well. Negative boost values would correspond to anti-biasing. Anti-biasing is not enabled, so negative boost will simply be ignored. Though `boost` can accept a wide range of positive values, most use cases are best served with values between 0 (exclusive) and 20. We recommend using a binary search approach to finding the optimal value for your use case as well as adding phrases both with and without boost to your requests.
        """
        return pulumi.get(self, "boost")

    @property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> str:
        """
        The [KMS key name](https://cloud.google.com/kms/docs/resource-hierarchy#keys) with which the content of the PhraseSet is encrypted. The expected format is `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.
        """
        return pulumi.get(self, "kms_key_name")

    @property
    @pulumi.getter(name="kmsKeyVersionName")
    def kms_key_version_name(self) -> str:
        """
        The [KMS key version name](https://cloud.google.com/kms/docs/resource-hierarchy#key_versions) with which content of the PhraseSet is encrypted. The expected format is `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{crypto_key_version}`.
        """
        return pulumi.get(self, "kms_key_version_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name of the phrase set.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def phrases(self) -> Sequence['outputs.PhraseResponse']:
        """
        A list of word and phrases.
        """
        return pulumi.get(self, "phrases")


class AwaitableGetPhraseSetResult(GetPhraseSetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPhraseSetResult(
            boost=self.boost,
            kms_key_name=self.kms_key_name,
            kms_key_version_name=self.kms_key_version_name,
            name=self.name,
            phrases=self.phrases)


def get_phrase_set(location: Optional[str] = None,
                   phrase_set_id: Optional[str] = None,
                   project: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPhraseSetResult:
    """
    Get a phrase set.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['phraseSetId'] = phrase_set_id
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:speech/v1:getPhraseSet', __args__, opts=opts, typ=GetPhraseSetResult).value

    return AwaitableGetPhraseSetResult(
        boost=pulumi.get(__ret__, 'boost'),
        kms_key_name=pulumi.get(__ret__, 'kms_key_name'),
        kms_key_version_name=pulumi.get(__ret__, 'kms_key_version_name'),
        name=pulumi.get(__ret__, 'name'),
        phrases=pulumi.get(__ret__, 'phrases'))


@_utilities.lift_output_func(get_phrase_set)
def get_phrase_set_output(location: Optional[pulumi.Input[str]] = None,
                          phrase_set_id: Optional[pulumi.Input[str]] = None,
                          project: Optional[pulumi.Input[Optional[str]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPhraseSetResult]:
    """
    Get a phrase set.
    """
    ...
