# coding: utf-8

"""
    Cloudhub API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SessionCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'str',
        'type': 'TrustServiceSessionTypes',
        'redirect_uri': 'str',
        'lifetime_in_seconds': 'int'
    }

    attribute_map = {
        'identifier': 'identifier',
        'type': 'type',
        'redirect_uri': 'redirectUri',
        'lifetime_in_seconds': 'lifetimeInSeconds'
    }

    def __init__(self, identifier=None, type=None, redirect_uri=None, lifetime_in_seconds=None):  # noqa: E501
        """SessionCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._identifier = None
        self._type = None
        self._redirect_uri = None
        self._lifetime_in_seconds = None
        self.discriminator = None
        self.identifier = identifier
        if type is not None:
            self.type = type
        self.redirect_uri = redirect_uri
        if lifetime_in_seconds is not None:
            self.lifetime_in_seconds = lifetime_in_seconds

    @property
    def identifier(self):
        """Gets the identifier of this SessionCreateRequest.  # noqa: E501


        :return: The identifier of this SessionCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this SessionCreateRequest.


        :param identifier: The identifier of this SessionCreateRequest.  # noqa: E501
        :type: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def type(self):
        """Gets the type of this SessionCreateRequest.  # noqa: E501


        :return: The type of this SessionCreateRequest.  # noqa: E501
        :rtype: TrustServiceSessionTypes
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SessionCreateRequest.


        :param type: The type of this SessionCreateRequest.  # noqa: E501
        :type: TrustServiceSessionTypes
        """

        self._type = type

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this SessionCreateRequest.  # noqa: E501


        :return: The redirect_uri of this SessionCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this SessionCreateRequest.


        :param redirect_uri: The redirect_uri of this SessionCreateRequest.  # noqa: E501
        :type: str
        """
        if redirect_uri is None:
            raise ValueError("Invalid value for `redirect_uri`, must not be `None`")  # noqa: E501

        self._redirect_uri = redirect_uri

    @property
    def lifetime_in_seconds(self):
        """Gets the lifetime_in_seconds of this SessionCreateRequest.  # noqa: E501


        :return: The lifetime_in_seconds of this SessionCreateRequest.  # noqa: E501
        :rtype: int
        """
        return self._lifetime_in_seconds

    @lifetime_in_seconds.setter
    def lifetime_in_seconds(self, lifetime_in_seconds):
        """Sets the lifetime_in_seconds of this SessionCreateRequest.


        :param lifetime_in_seconds: The lifetime_in_seconds of this SessionCreateRequest.  # noqa: E501
        :type: int
        """

        self._lifetime_in_seconds = lifetime_in_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SessionCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SessionCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
