# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['adic']

# %% ../nbs/00_core.ipynb 6
#| export


# %% ../nbs/00_core.ipynb 8
from typing import Any

# %% ../nbs/00_core.ipynb 10
#| export


# %% ../nbs/00_core.ipynb 12
from atyp import IterStr
from chck import isdict, isstr

# %% ../nbs/00_core.ipynb 14
#| export


# %% ../nbs/00_core.ipynb 16
class adic(dict):
    __getattr__ = dict.get
    __delattr__ = dict.__delitem__

    def __init__(self, seq: dict = None, **kwargs):
        seq = seq or dict()
        seq.update(kwargs)
        if seq is not None:
            for name, value in seq.items():
                self.__setattr__(name, value)

    def __setattr__(self, name: str, value: Any):
        if isdict(value): self[name] = type(self)(value)
        else: self[name] = value

    def __setitem__(self, key, value: Any):
        if isdict(value): super().__setitem__(key, type(self)(value))
        else: super().__setitem__(key, value)

    def __dir__(self) -> IterStr: return [x for x in self.keys() if isstr(x)]
