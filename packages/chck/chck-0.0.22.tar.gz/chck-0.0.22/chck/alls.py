# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/100_alls.ipynb.

# %% auto 0
__all__ = ['T', 'allmap', 'areinstances', 'alltype', 'allsame', 'allint', 'alldig', 'allstr']

# %% ../nbs/100_alls.ipynb 4
from numbers import Number
from typing import Iterable, TypeVar, TypeGuard
T = TypeVar('T')

from .core import isiter, isint, isstr
from .strs import isdig
from .wrap import makeguard
from .tgrd import GuardFunc

# %% ../nbs/100_alls.ipynb 6
def allmap(x, f: GuardFunc) -> bool: return isiter(x) and all(map(f, x))

def areinstances(x, t: T) -> TypeGuard[Iterable[T]]:
    '''Checks if all elements of `x` are instances of `t`
    
    Notes
    -----
    The following are all functionally equivalent to the current implementation:
    ```python
    allmap(x, vanilla(t))
    allmap(x, lambda y: isinstance(y, t))
    isiter(x) and all(isinstance(y, t) for y in x)
    isiter(x) and all(vanilla(t)(y) for y in x)
    isiter(x) and all(map(lambda y: isinstance(y, t), x))
    
    # NOTE: dtype: TypeLike, isfunc: GuardFunc = isinstance
    isiter(vals) and all(isfunc(val, dtype) for val in vals) 
    ```

    See Also
    --------
    allmap : Maps `f` over `x` and returns `all` of the results
    alltype : Alias for `areinstances`
    '''
    return allmap(x, makeguard(t))

# %% ../nbs/100_alls.ipynb 7
def alltype(x, t: T) -> TypeGuard[Iterable[T]]: return areinstances(x, t)

def allsame(x: Iterable) -> TypeGuard[Iterable[T]]:
    return alltype(x, type(x[0])) if (isiter(x) and len(x) > 0) else True

# %% ../nbs/100_alls.ipynb 8
def allint(x) -> TypeGuard[Iterable[int]]: return allmap(x, isint)
def alldig(x) -> TypeGuard[Iterable[str]]: return allmap(x, isdig)
def allstr(x) -> TypeGuard[Iterable[str]]: return allmap(x, isstr)
