{"version":3,"sources":["webpack:///./js/dashboard/widgets/all-widgets/media/mjpeg-video.js"],"names":["ConfigForm","args","fields","TextField","name","label","gettext","required","ColorComboField","filterEnabled","CheckField","WidgetConfigForm","MJPEGVideo","_url","_backgroundColor","_preserveAspectRatio","_videoElement","Boolean","this","width","height","spacer","$","class","css","Theme","container","append","_clearVideoElement","_makeVideoElement","videoElement","src","attr","url","backgroundColor","preserveAspectRatio","json","Widget","StockIcon","stockName","Widgets"],"mappings":"q/EAeMA,E,8BAEF,cAAuB,IAAPC,EAAO,qC,+VAAA,EAEfC,OAAQ,CACJ,IAAIC,IAAU,CACVC,KAAM,MACNC,MAAOC,YAAQ,OACfC,UAAU,IAEd,IAAIC,IAAgB,CAChBJ,KAAM,kBACNC,MAAOC,YAAQ,oBACfG,eAAe,EACfF,UAAU,IAEd,IAAIG,IAAW,CACXN,KAAM,sBACNC,MAAOC,YAAQ,6BAGpBL,I,gBArBUU,GAgCnBC,E,oCAeF,aAAc,wBACV,gBAEKC,KAAO,KACZ,EAAKC,iBAAmB,oBACxB,EAAKC,sBAAuB,EAE5B,EAAKC,cAAgB,KAPX,E,+CAWV,OAAOC,QAAQC,KAAKL,Q,kCAGZM,EAAOC,GACf,IAAIC,EAASC,YAAE,cAAe,CAACC,MAAO,iCACtCF,EAAOG,IAAI,aAAcC,IAAeP,KAAKJ,mBAE7C,IAAIY,EAAYJ,YAAE,cAAe,CAACC,MAAO,oCAOzC,OANAF,EAAOM,OAAOD,GAEdR,KAAKU,qBACLV,KAAKF,cAAgBE,KAAKW,kBAAkBV,EAAOC,GACnDM,EAAUC,OAAOT,KAAKF,eAEfK,I,qCAIPH,KAAKU,qBACL,mD,wCAGcT,EAAOC,GACrB,IAAIU,EAAeR,YAAE,QAAS,CAACC,MAAO,gCAAiCQ,IAAKb,KAAKL,OAMjF,OAJKK,KAAKH,sBACNe,EAAaN,IAAI,SAAU,QAGxBM,I,2CAIHZ,KAAKF,gBACLE,KAAKF,cAAcgB,KAAK,MAAO,KAC/Bd,KAAKF,cAAgB,Q,qCAKzB,MAAO,CACHiB,IAAKf,KAAKL,KACVqB,gBAAiBhB,KAAKJ,iBACtBqB,oBAAqBjB,KAAKH,wB,qCAInBqB,GACK,MAAZA,EAAKH,MACLf,KAAKL,KAAOuB,EAAKH,KAEjBG,EAAKF,kBACLhB,KAAKJ,iBAAmBsB,EAAKF,iBAED,MAA5BE,EAAKD,sBACLjB,KAAKH,qBAAuBqB,EAAKD,0B,8BAjFpBE,K,EAAnBzB,E,WAEgBN,YAAQ,U,EAFxBM,E,cAGmBN,YAAQ,gB,EAH3BM,E,WAIgB,c,EAJhBA,E,OAKY,IAAI0B,IAAU,CAAClC,KAAM,eAAgBmC,UAAW,a,EAL5D3B,E,aAMkBZ,G,EANlBY,E,cAOkB,G,EAPlBA,E,cAQkB,G,EARlBA,E,YASgB,GA8EtB4B,IAAiB5B,GAGFA","file":"12.js","sourcesContent":["\nimport $ from '$qui/lib/jquery.module.js'\n\nimport {gettext}         from '$qui/base/i18n.js'\nimport {CheckField}      from '$qui/forms/common-fields/common-fields.js'\nimport {ColorComboField} from '$qui/forms/common-fields/common-fields.js'\nimport {TextField}       from '$qui/forms/common-fields/common-fields.js'\nimport StockIcon         from '$qui/icons/stock-icon.js'\nimport * as Theme        from '$qui/theme.js'\n\nimport * as Widgets     from '$app/dashboard/widgets/widgets.js'\nimport Widget           from '$app/dashboard/widgets/widget.js'\nimport WidgetConfigForm from '$app/dashboard/widgets/widget-config-form.js'\n\n\nclass ConfigForm extends WidgetConfigForm {\n\n    constructor({...args}) {\n        super({\n            fields: [\n                new TextField({\n                    name: 'url',\n                    label: gettext('URL'),\n                    required: true\n                }),\n                new ColorComboField({\n                    name: 'backgroundColor',\n                    label: gettext('Background Color'),\n                    filterEnabled: true,\n                    required: true\n                }),\n                new CheckField({\n                    name: 'preserveAspectRatio',\n                    label: gettext('Preserve Aspect Ratio')\n                })\n            ],\n            ...args\n        })\n    }\n\n}\n\n\n/**\n * @alias qtoggle.dashboard.widgets.media.MJPEGVideo\n * @extends qtoggle.dashboard.widgets.Widget\n */\nclass MJPEGVideo extends Widget {\n\n    static category = gettext('Media')\n    static displayName = gettext('MJPEG Video')\n    static typeName = 'MJPEGVideo'\n    static icon = new StockIcon({name: 'widget-video', stockName: 'qtoggle'})\n    static ConfigForm = ConfigForm\n    static vResizable = true\n    static hResizable = true\n    static hasFrame = true\n\n\n    /**\n     * @constructs\n     */\n    constructor() {\n        super()\n\n        this._url = null\n        this._backgroundColor = '@background-color'\n        this._preserveAspectRatio = true\n\n        this._videoElement = null\n    }\n\n    isValid() {\n        return Boolean(this._url)\n    }\n\n    makeContent(width, height) {\n        let spacer = $('<div></div>', {class: 'dashboard-mjpeg-video-spacer'})\n        spacer.css('background', Theme.getColor(this._backgroundColor))\n\n        let container = $('<div></div>', {class: 'dashboard-mjpeg-video-container'})\n        spacer.append(container)\n\n        this._clearVideoElement()\n        this._videoElement = this._makeVideoElement(width, height)\n        container.append(this._videoElement)\n\n        return spacer\n    }\n\n    clearContent() {\n        this._clearVideoElement()\n        super.clearContent()\n    }\n\n    _makeVideoElement(width, height) {\n        let videoElement = $('<img>', {class: 'dashboard-mjpeg-video-element', src: this._url})\n\n        if (!this._preserveAspectRatio) {\n            videoElement.css('height', '100%')\n        }\n\n        return videoElement\n    }\n\n    _clearVideoElement() {\n        if (this._videoElement) {\n            this._videoElement.attr('src', '#')\n            this._videoElement = null\n        }\n    }\n\n    configToJSON() {\n        return {\n            url: this._url,\n            backgroundColor: this._backgroundColor,\n            preserveAspectRatio: this._preserveAspectRatio\n        }\n    }\n\n    configFromJSON(json) {\n        if (json.url != null) {\n            this._url = json.url\n        }\n        if (json.backgroundColor) {\n            this._backgroundColor = json.backgroundColor\n        }\n        if (json.preserveAspectRatio != null) {\n            this._preserveAspectRatio = json.preserveAspectRatio\n        }\n    }\n\n}\n\nWidgets.register(MJPEGVideo)\n\n\nexport default MJPEGVideo\n"],"sourceRoot":""}