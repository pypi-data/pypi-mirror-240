{"version":3,"sources":["webpack:///./js/dashboard/widgets/all-widgets/sliders-knobs/on-off-button.js"],"names":["ConfigForm","args","fields","ColorComboField","name","label","gettext","filterEnabled","required","PortPickerField","onChange","value","form","_showHidePortTypeFields","CheckField","NumericField","data","this","getUnvalidatedData","port","getPort","portId","isBoolean","type","booleanFieldNames","numberFieldNames","forEach","getField","hide","show","WidgetConfigForm","OnOffButton","_on","_color","DEFAULT_COLOR","_portId","_inverted","_offValue","_onValue","_containerDiv","_backgroundDiv","_handleDiv","_thickness","_vert","_dragPastThresh","_dragDelta","Boolean","enabled","writable","online","getPortValue","_showValue","_isBoolean","_showOn","_showOff","width","height","_makeHorizContent","removeClass","_makeVertContent","addClass","containerWidth","containerHeight","left","top","containerDiv","$","class","css","borderWidth","Widgets","_makeBackground","append","thickness","backgroundDiv","Math","min","getContentWidth","getContentHeight","_makeHandle","setDragElement","on","_doSwitch","bind","handleDiv","bezelWidth","roundEm","radius","margin","color","Theme","onText","text","offText","setPortValue","elemX","elemY","deltaX","deltaY","drag","max","dragPastThresh","abs","vibrate","inverted","offValue","onValue","json","Widget","StockIcon","stockName"],"mappings":"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","file":"17.js","sourcesContent":["\nimport $ from '$qui/lib/jquery.module.js'\n\nimport {gettext}         from '$qui/base/i18n.js'\nimport {CheckField}      from '$qui/forms/common-fields/common-fields.js'\nimport {ColorComboField} from '$qui/forms/common-fields/common-fields.js'\nimport {NumericField}    from '$qui/forms/common-fields/common-fields.js'\nimport StockIcon         from '$qui/icons/stock-icon.js'\nimport * as Theme        from '$qui/theme.js'\n\nimport PortPickerField  from '$app/dashboard/widgets/port-picker-field.js'\nimport Widget           from '$app/dashboard/widgets/widget.js'\nimport {DEFAULT_COLOR}  from '$app/dashboard/widgets/widget.js'\nimport WidgetConfigForm from '$app/dashboard/widgets/widget-config-form.js'\nimport * as Widgets     from '$app/dashboard/widgets/widgets.js'\n\n\nconst TEXT_FACTOR = 0.3 /* Fraction of button thickness */\n\n\nclass ConfigForm extends WidgetConfigForm {\n\n    constructor({...args}) {\n        super({\n            fields: [\n                new ColorComboField({\n                    name: 'color',\n                    label: gettext('Color'),\n                    filterEnabled: true,\n                    required: true\n                }),\n                new PortPickerField({\n                    name: 'portId',\n                    label: gettext('Port'),\n                    required: true,\n                    onChange: (value, form) => form._showHidePortTypeFields()\n                }),\n                new CheckField({\n                    name: 'inverted',\n                    label: gettext('Inverted Logic')\n                }),\n                new NumericField({\n                    name: 'offValue',\n                    label: gettext('Off Value'),\n                    required: true\n                }),\n                new NumericField({\n                    name: 'onValue',\n                    label: gettext('On Value'),\n                    required: true\n                })\n            ],\n            ...args\n        })\n    }\n\n    _showHidePortTypeFields() {\n        let data = this.getUnvalidatedData()\n        let port = this.getPort(data.portId)\n        let isBoolean = true\n        if (port && port.type === 'number') {\n            isBoolean = false\n        }\n\n        let booleanFieldNames = ['inverted']\n        let numberFieldNames = ['offValue', 'onValue']\n\n        if (isBoolean) {\n            numberFieldNames.forEach(function (name) {\n                this.getField(name).hide()\n            }, this)\n            booleanFieldNames.forEach(function (name) {\n                this.getField(name).show()\n            }, this)\n        }\n        else {\n            booleanFieldNames.forEach(function (name) {\n                this.getField(name).hide()\n            }, this)\n            numberFieldNames.forEach(function (name) {\n                this.getField(name).show()\n            }, this)\n        }\n    }\n\n    onUpdateFromWidget() {\n        this._showHidePortTypeFields()\n    }\n\n}\n\n\n/**\n * @alias qtoggle.dashboard.widgets.slidersknobs.OnOffButton\n * @extends qtoggle.dashboard.widgets.Widget\n */\nclass OnOffButton extends Widget {\n\n    static category = gettext('Sliders/Knobs')\n    static displayName = gettext('On/Off Button')\n    static typeName = 'OnOffButton'\n    static icon = new StockIcon({name: 'widget-on-off-button', stockName: 'qtoggle'})\n    static ConfigForm = ConfigForm\n    static hResizable = true\n    static vResizable = true\n\n\n    /**\n     * @constructs\n     */\n    constructor() {\n        super()\n\n        this._on = false\n        this._color = DEFAULT_COLOR\n        this._portId = ''\n        this._inverted = false\n        this._offValue = 0\n        this._onValue = 1\n\n        this._containerDiv = null\n        this._backgroundDiv = null\n        this._handleDiv = null\n        this._thickness = 0\n        this._vert = false\n        this._dragPastThresh = false\n        this._dragDelta = 0\n    }\n\n    isValid() {\n        if (!this._portId) {\n            return false\n        }\n\n        let port = this.getPort(this._portId)\n\n        return Boolean(port && port.enabled && port.writable && port.online !== false)\n    }\n\n    showCurrentValue() {\n        let value = this.getPortValue(this._portId)\n        if (value == null) {\n            return\n        }\n\n        this._showValue(value)\n    }\n\n    onPortValueChange(portId, value) {\n        if (portId !== this._portId || value == null) {\n            return\n        }\n\n        this._showValue(value)\n    }\n\n    _showValue(value) {\n        if (this._isBoolean()) {\n            value = this._inverted ? !value : value\n\n            if (value && !this._on) {\n                this._showOn()\n            }\n            else if (!value && this._on) {\n                this._showOff()\n            }\n        }\n        else { /* Number */\n            if (value === this._onValue && !this._on) {\n                this._showOn()\n            }\n            else if (value === this._offValue && this._on) {\n                this._showOff()\n            }\n        }\n    }\n\n    makeContent(width, height) {\n        if (width > height) {\n            this._vert = false\n            this._containerDiv = this._makeHorizContent(width, height)\n            this._containerDiv.removeClass('vert')\n        }\n        else {\n            this._vert = true\n            this._containerDiv = this._makeVertContent(width, height)\n            this._containerDiv.addClass('vert')\n        }\n\n        /* Update the current state */\n        if (this._on) {\n            this._showOn()\n        }\n        else {\n            this._showOff()\n        }\n\n        return this._containerDiv\n    }\n\n    _makeHorizContent(containerWidth, containerHeight) {\n        let left = (containerWidth - 2 * containerHeight) / 2\n        let top = 0\n        let width = 2 * containerHeight\n        let height = containerHeight\n\n        if (containerWidth < 2 * containerHeight) {\n            left = 0\n            top = (containerHeight - containerWidth / 2) / 2\n            width = containerWidth\n            height = containerWidth / 2\n        }\n\n        let containerDiv = $('<div></div>', {class: 'dashboard-on-off-button-container'})\n        containerDiv.css({\n            top: `${top}em`,\n            left: `${left}em`,\n            width: `${width}em`,\n            height: `${height}em`,\n            borderWidth: `${Widgets.CELL_PADDING}em`\n        })\n\n        this._thickness = height\n        this._backgroundDiv = this._makeBackground(this._thickness)\n        containerDiv.append(this._backgroundDiv)\n\n        return containerDiv\n    }\n\n    _makeVertContent(containerWidth, containerHeight) {\n        let left = 0\n        let top = (containerHeight - 2 * containerWidth) / 2\n        let width = containerWidth\n        let height = 2 * containerWidth\n\n        if (containerHeight < 2 * containerWidth) {\n            left = (containerWidth - containerHeight / 2) / 2\n            top = 0\n            height = containerHeight\n            width = containerHeight / 2\n        }\n\n        let containerDiv = $('<div></div>', {class: 'dashboard-on-off-button-container'})\n        containerDiv.css({\n            top: `${top}em`,\n            left: `${left}em`,\n            width: `${width}em`,\n            height: `${height}em`,\n            borderWidth: `${Widgets.CELL_PADDING}em`\n        })\n\n        this._thickness = width\n        this._backgroundDiv = this._makeBackground(this._thickness)\n        containerDiv.append(this._backgroundDiv)\n\n        return containerDiv\n    }\n\n    _makeBackground(thickness) {\n        let backgroundDiv = $('<div></div>', {class: 'dashboard-on-off-button-background'})\n\n        backgroundDiv.css('border-radius', `${Math.min(this.getContentWidth(), this.getContentHeight())}em`)\n\n        this._handleDiv = this._makeHandle(thickness)\n        backgroundDiv.append(this._handleDiv)\n\n        this.setDragElement(backgroundDiv, this._vert ? 'y' : 'x')\n\n        backgroundDiv.on('pointerup', function () {\n            if (this._dragDelta < this._thickness * 0.05) {\n                this._doSwitch()\n            }\n        }.bind(this))\n\n        return backgroundDiv\n    }\n\n    _makeHandle(thickness) {\n        let handleDiv = $('<div></div>', {class: 'dashboard-on-off-button-handle'})\n        let bezelWidth = this.roundEm(Widgets.BEZEL_WIDTH)\n\n        let radius = (thickness - 2 * (Widgets.CELL_PADDING + bezelWidth))\n        handleDiv.css({\n            width: `${radius}em`,\n            height: `${radius}em`,\n            margin: `${bezelWidth}em`,\n            color: Theme.getColor(this._color)\n        })\n\n        let onText = $('<div></div>', {class: 'dashboard-on-off-button-text-on'})\n        onText.text('ON')\n        onText.css('font-size', `${TEXT_FACTOR * thickness}em`)\n\n        let offText = $('<div></div>', {class: 'dashboard-on-off-button-text-off'})\n        offText.text('OFF')\n        offText.css('font-size', `${TEXT_FACTOR * thickness}em`)\n\n        handleDiv.append(onText)\n        handleDiv.append(offText)\n\n        return handleDiv\n    }\n\n    _showOn() {\n        this._on = true\n        this._containerDiv.addClass('on')\n        if (this._vert) {\n            this._handleDiv.css({top: `${this._thickness}em`, left: 0})\n        }\n        else {\n            this._handleDiv.css({left: `${this._thickness}em`, top: 0})\n        }\n\n        this._handleDiv.css('background', Theme.getColor(this._color))\n    }\n\n    _showOff() {\n        this._on = false\n        this._containerDiv.removeClass('on')\n        this._handleDiv.css({left: 0, top: 0})\n        this._handleDiv.css('background', '')\n    }\n\n    _doSwitch() {\n        if (this._on) {\n            this._showOff()\n        }\n        else {\n            this._showOn()\n        }\n\n        /* Actually send the new state to the server */\n        if (this._portId) {\n            let value\n            if (this._isBoolean()) {\n                value = this._inverted ? !this._on : this._on\n            }\n            else {\n                value = this._on ? this._onValue : this._offValue\n            }\n\n            this.setPortValue(this._portId, value)\n        }\n    }\n\n    _isBoolean() {\n        let port = this.getPort(this._portId)\n        return port && port.type === 'boolean'\n    }\n\n    onDragBegin() {\n        this._handleDiv.css('transition', 'none') /* Temporarily disable transitions */\n        this._dragDelta = 0\n    }\n\n    onDrag(elemX, elemY, deltaX, deltaY) {\n        let drag = this._vert ? deltaY : deltaX\n        if (this._on) {\n            drag = Math.max(-this._thickness, Math.min(0, drag)) + this._thickness\n        }\n        else {\n            drag = Math.max(0, Math.min(this._thickness, drag))\n        }\n\n        /* Don't actually switch unless dragging is above 50% */\n        let dragPastThresh = Math.abs(drag) / this._thickness > 0.5\n        if (this._on) {\n            dragPastThresh = !dragPastThresh\n        }\n        if (this._dragPastThresh !== dragPastThresh) {\n            this.vibrate()\n        }\n        this._dragPastThresh = dragPastThresh\n        this._dragDelta = Math.max(Math.abs(deltaX), Math.abs(deltaY))\n\n        if (this._vert) {\n            this._handleDiv.css({top: `${drag}em`, left: 0})\n        }\n        else {\n            this._handleDiv.css({left: `${drag}em`, top: 0})\n        }\n    }\n\n    onDragEnd(elemX, elemY, deltaX, deltaY) {\n        this._handleDiv.css('transition', '') /* Restore transitions */\n\n        let drag = this._vert ? deltaY : deltaX\n\n        if (this._dragPastThresh) {\n            if ((this._on && drag > 0) || (!this._on && drag < 0)) {\n                return\n            }\n\n            this._doSwitch()\n            this._dragPastThresh = false\n        }\n        else { /* Restore previous state, no switching */\n            if (this._on) {\n                this._showOn()\n            }\n            else {\n                this._showOff()\n            }\n        }\n    }\n\n    configToJSON() {\n        return {\n            color: this._color,\n            portId: this._portId,\n            inverted: this._inverted,\n            offValue: this._offValue,\n            onValue: this._onValue\n        }\n    }\n\n    configFromJSON(json) {\n        if (json.color) {\n            this._color = json.color\n        }\n        if (json.portId) {\n            this._portId = json.portId\n        }\n        if (json.inverted != null) {\n            this._inverted = json.inverted\n        }\n        if (json.offValue != null) {\n            this._offValue = json.offValue\n        }\n        if (json.onValue != null) {\n            this._onValue = json.onValue\n        }\n    }\n\n}\n\nWidgets.register(OnOffButton)\n\n\nexport default OnOffButton\n"],"sourceRoot":""}