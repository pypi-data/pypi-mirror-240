{"version":3,"sources":["webpack:///./js/dashboard/widgets/all-widgets/charts/line-chart.js"],"names":["FILTER_LEN_RATIO","0","1","2","3","ConfigForm","args","addField","ChoiceButtonsField","name","label","gettext","separator","choices","value","CheckField","getField","hide","PortHistoryChartConfigForm","LineChart","_smoothLevel","_fillArea","_showDataPoints","ObjectUtils","smoothLevel","this","fillArea","showDataPoints","json","history","from","to","decimate","isBoolean","applyMovingAverage","wLength","Math","round","length","movingAverage","data","decimateHistory","processHistory","low","isInverted","high","map","sample","timestamp","getMultiplier","widgetCall","options","stepped","yTicksStepSize","yTicksLabelCallback","yMin","getMin","yMax","getMax","unitOfMeasurement","getUnit","smooth","Boolean","showMajorTicks","top","right","bottom","left","PortHistoryChart","StockIcon","stockName","Widgets"],"mappings":"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","file":"8.js","sourcesContent":["\nimport {gettext}            from '$qui/base/i18n.js'\nimport {CheckField}         from '$qui/forms/common-fields/common-fields.js'\nimport {ChoiceButtonsField} from '$qui/forms/common-fields/common-fields.js'\nimport StockIcon            from '$qui/icons/stock-icon.js'\nimport * as ObjectUtils     from '$qui/utils/object.js'\n\nimport * as Widgets    from '$app/dashboard/widgets/widgets.js'\nimport {decimate}      from '$app/utils.js'\nimport {movingAverage} from '$app/utils.js'\n\nimport '$app/widgets/time-chart.js'\n\nimport {PortHistoryChartConfigForm} from './port-history-chart.js'\nimport {PortHistoryChart}           from './port-history-chart.js'\n\n\nconst FILTER_LEN_RATIO = { /* Filter window length as percent of total signal length */\n    0: 0,\n    1: 0.025,\n    2: 0.075,\n    3: 0.2\n}\n\nconst MAX_DATA_POINTS_LEN = 1000 /* Max data points to be displayed on chart at once */\n\n\nclass ConfigForm extends PortHistoryChartConfigForm {\n\n    static NUMBER_FIELD_NAMES = ['min', 'max', 'unit', 'smoothLevel']\n\n    constructor({...args}) {\n        super({...args})\n\n        this.addField(-1, new ChoiceButtonsField({\n            name: 'smoothLevel',\n            label: gettext('Smoothing'),\n            separator: true,\n            choices: [\n                {value: 0, label: gettext('Off')},\n                {value: 1, label: gettext('Slight')},\n                {value: 2, label: gettext('Medium')},\n                {value: 3, label: gettext('Strong')}\n            ]\n        }))\n        this.addField(-1, new CheckField({\n            name: 'fillArea',\n            label: gettext('Fill Area')\n        }))\n        this.addField(-1, new CheckField({\n            name: 'showDataPoints',\n            label: gettext('Show Data Points')\n        }))\n\n        this.getField('timeGroups').hide()\n    }\n\n}\n\n\n/**\n * @alias qtoggle.dashboard.widgets.charts.LineChart\n * @extends qtoggle.dashboard.widgets.charts.PortHistoryChart\n */\nclass LineChart extends PortHistoryChart {\n\n    static CHART_TYPE = 'time'\n\n    static displayName = gettext('Line Chart')\n    static typeName = 'LineChart'\n    static icon = new StockIcon({name: 'widget-line-chart', stockName: 'qtoggle'})\n    static ConfigForm = ConfigForm\n\n\n    /**\n     * @constructs\n     */\n    constructor() {\n        super()\n\n        this._smoothLevel = 0\n        this._fillArea = false\n        this._showDataPoints = false\n    }\n\n    configToJSON() {\n        return ObjectUtils.combine(super.configToJSON(), {\n            smoothLevel: this._smoothLevel,\n            fillArea: this._fillArea,\n            showDataPoints: this._showDataPoints\n        })\n    }\n\n    configFromJSON(json) {\n        super.configFromJSON(json)\n\n        if (json.smoothLevel != null) {\n            this._smoothLevel = json.smoothLevel\n        }\n        if (json.fillArea != null) {\n            this._fillArea = json.fillArea\n        }\n        if (json.showDataPoints != null) {\n            this._showDataPoints = json.showDataPoints\n        }\n    }\n\n    decimateHistory(history, from, to) {\n        return decimate(history, MAX_DATA_POINTS_LEN, /* xField = */ 'timestamp', /* yField = */ 'value')\n    }\n\n    processHistory(history, from, to) {\n        /* Apply moving average filtering in addition to chart smoothing */\n        if (!this.isBoolean() && this._smoothLevel) {\n            history = this.applyMovingAverage(history)\n        }\n\n        return history\n    }\n\n    applyMovingAverage(history) {\n        let wLength = Math.round(history.length * FILTER_LEN_RATIO[this._smoothLevel])\n        if (wLength < 2) {\n            return history\n        }\n\n        return movingAverage(history, wLength, /* xField = */ 'timestamp', /* yField = */ 'value')\n    }\n\n    isSliceHistoryMode() {\n        return true\n    }\n\n    showHistorySlice(history, from, to) {\n        history = this.decimateHistory(history, from, to)\n        history = this.processHistory(history, from, to)\n\n        let data\n        if (this.isBoolean()) {\n            let low = this.isInverted() ? 1 : 0\n            let high = this.isInverted() ? 0 : 1\n            data = history.map(sample => [sample.timestamp, sample.value ? low : high])\n        }\n        else {\n            /* Also round value to decent number of decimals */\n            data = history.map(\n                sample => [sample.timestamp, Math.round(sample.value * 1e6 * this.getMultiplier()) / 1e6]\n            )\n        }\n\n        this.widgetCall('setValue', data)\n        this.widgetCall('setXRange', from, to)\n    }\n\n    makeChartOptions() {\n        let options = super.makeChartOptions()\n\n        if (this.isBoolean()) {\n            options.stepped = true\n            options.yTicksStepSize = 1\n            options.fillArea = this._fillArea\n            options.showDataPoints = this._showDataPoints\n            options.yTicksLabelCallback = value => value ? gettext('On') : gettext('Off')\n        }\n        else {\n            options.yMin = this.getMin()\n            options.yMax = this.getMax()\n            options.unitOfMeasurement = this.getUnit()\n\n            options.smooth = Boolean(this._smoothLevel)\n            options.fillArea = this._fillArea\n            options.showDataPoints = this._showDataPoints\n        }\n\n        options.showMajorTicks = true\n\n        return options\n    }\n\n    makePadding() {\n        return {\n            top: 0.2,\n            right: 0,\n            bottom: 0,\n            left: 0\n        }\n    }\n\n}\n\nWidgets.register(LineChart)\n\n\nexport default LineChart\n"],"sourceRoot":""}