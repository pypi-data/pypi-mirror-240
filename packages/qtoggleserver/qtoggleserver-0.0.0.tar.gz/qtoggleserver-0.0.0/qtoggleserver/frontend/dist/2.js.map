{"version":3,"sources":["webpack:///./js/dashboard/widgets/all-widgets/charts/base-chart-widget.js","webpack:///./js/dashboard/widgets/all-widgets/charts/port-history-chart.js"],"names":["BaseChartConfigForm","WidgetConfigForm","BaseChartWidget","_chartContainer","widgetCall","width","height","this","$","class","css","makeChart","div","widget","constructor","CHART_TYPE","args","apply","makeChartOptions","cellWidth","getCellWidth","scalingFactor","getEmSize","Widgets","padding","makePadding","showTooltips","extraChartOptions","layout","top","right","bottom","left","Widget","gettext","TIME_INTERVAL_CHOICES","label","value","StringUtils","count","TIME_GROUPS_CHOICES","multiplier","unit","UNIT_MAPPING","weekDay","logger","Logger","get","PortHistoryChartConfigForm","fields","PortPickerField","name","required","onChange","form","updateFieldsVisibility","ColorComboField","filterEnabled","ComboField","choices","NumericField","description","TextField","maxLength","CheckField","data","getUnvalidatedData","port","getPort","portId","isBoolean","type","NUMBER_FIELD_NAMES","forEach","getField","hide","BOOLEAN_FIELD_NAMES","show","fieldName","min","max","PortHistoryChart","_portId","_color","DEFAULT_COLOR","_timeInterval","_timeGroups","_min","_max","_unit","_multiplier","_inverted","_fetchHistoryPromise","_historyDownloadManager","_cachedSamples","_dateAdapter","ChartJS","_date","Boolean","enabled","online","nowDate","Date","getTime","timestamp","endOf","add","fetchHistoryPromise","from","to","timestamps","wantProgress","setProgress","sliceHistoryMode","isSliceHistoryMode","getFromTimestamp","getHistorySlice","computeGroupsTimestamps","getHistoryTimestamps","then","history","clearProgress","getHTML","parents","length","showHistorySlice","showHistoryTimestamps","bind","error","HistoryDownloadTooManyRequests","msg","warn","errorStack","setError","getPanel","isActive","purge","addSample","shift","showCurrentValue","isEditEnabled","invalidateCache","color","timeInterval","timeGroups","inverted","json","undefined","push","i","reverse","Promise","resolve","fetchPromise","HistoryDownloadManager","fetch","Math","round","slice","sort","lastFetchedTimestamp","timestampsToFetch","filter","t","PortsAPI","lastCachedSample","s","distinctHistory","sample","prevSample","concat","ArrayUtils","map","selectedSamples","samples","timestampIndex","pop","ObjectUtils","colors"],"mappings":"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","file":"2.js","sourcesContent":["\nimport $ from '$qui/lib/jquery.module.js'\n\nimport {gettext} from '$qui/base/i18n.js'\n\nimport Widget           from '$app/dashboard/widgets/widget.js'\nimport WidgetConfigForm from '$app/dashboard/widgets/widget-config-form.js'\nimport * as Widgets     from '$app/dashboard/widgets/widgets.js'\n\n\nexport class BaseChartConfigForm extends WidgetConfigForm {\n}\n\n\n/**\n * @alias qtoggle.dashboard.widgets.charts.BaseChartWidget\n * @extends qtoggle.dashboard.widgets.Widget\n */\nexport class BaseChartWidget extends Widget {\n\n    static CHART_TYPE = 'override.me'\n\n    static category = gettext('Charts')\n    static noProgressInteraction = true\n    static vResizable = true\n    static hResizable = true\n    static hasFrame = true\n\n    /**\n     * @constructs\n     */\n    constructor() {\n        super()\n\n        this._chartContainer = null\n        this.widgetCall = null\n    }\n\n    makeContent(width, height) {\n        this._chartContainer = $('<div></div>', {class: 'dashboard-chart-widget-container'})\n        this._chartContainer.css({width: `${width}em`, height: `${height}em`})\n        this.makeChart(this._chartContainer)\n\n        return this._chartContainer\n    }\n\n    makeChart(div) {\n        let widget = div[`${this.constructor.CHART_TYPE}chart`]\n\n        this.widgetCall = function (...args) {\n            return widget.apply(div, args)\n        }\n\n        this.widgetCall(this.makeChartOptions())\n    }\n\n    makeChartOptions() {\n        let cellWidth = this.getCellWidth()\n        let scalingFactor = this.getEmSize() * Widgets.LABEL_FONT_SIZE\n        let padding = this.makePadding()\n\n        return {\n            scalingFactor: scalingFactor,\n            showTooltips: true,\n            extraChartOptions: {\n                layout: {\n                    padding: {\n                        top: padding.top * cellWidth,\n                        right: padding.right * cellWidth,\n                        bottom: padding.bottom * cellWidth,\n                        left: padding.left * cellWidth\n                    }\n                }\n            }\n        }\n    }\n\n    makePadding() {\n        return {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n        }\n    }\n\n}\n","\nimport Logger from '$qui/lib/logger.module.js'\n\nimport {gettext}         from '$qui/base/i18n.js'\nimport {CheckField}      from '$qui/forms/common-fields/common-fields.js'\nimport {ColorComboField} from '$qui/forms/common-fields/common-fields.js'\nimport {ComboField}      from '$qui/forms/common-fields/common-fields.js'\nimport {NumericField}    from '$qui/forms/common-fields/common-fields.js'\nimport {TextField}       from '$qui/forms/common-fields/common-fields.js'\nimport * as ArrayUtils   from '$qui/utils/array.js'\nimport * as ObjectUtils  from '$qui/utils/object.js'\nimport * as StringUtils  from '$qui/utils/string.js'\n\nimport * as ChartJS from '$app/lib/chartjs.module.js'\n\nimport * as PortsAPI                    from '$app/api/ports.js'\nimport HistoryDownloadManager           from '$app/common/history-download-manager.js'\nimport {HistoryDownloadTooManyRequests} from '$app/common/history-download-manager.js'\nimport PortPickerField                  from '$app/dashboard/widgets/port-picker-field.js'\nimport {DEFAULT_COLOR}                  from '$app/dashboard/widgets/widget.js'\n\nimport {BaseChartWidget}     from './base-chart-widget.js'\nimport {BaseChartConfigForm} from './base-chart-widget.js'\n\n\nconst TIME_INTERVAL_CHOICES = [\n    {label: gettext('1 second'), value: 1},\n    {label: StringUtils.formatPercent(gettext('%(count)d seconds'), {count: 5}), value: 5},\n    {label: StringUtils.formatPercent(gettext('%(count)d seconds'), {count: 10}), value: 10},\n    {label: StringUtils.formatPercent(gettext('%(count)d seconds'), {count: 30}), value: 30},\n    {label: gettext('1 minute'), value: 60},\n    {label: StringUtils.formatPercent(gettext('%(count)d minutes'), {count: 5}), value: 300},\n    {label: StringUtils.formatPercent(gettext('%(count)d minutes'), {count: 10}), value: 600},\n    {label: StringUtils.formatPercent(gettext('%(count)d minutes'), {count: 15}), value: 900},\n    {label: StringUtils.formatPercent(gettext('%(count)d minutes'), {count: 30}), value: 1800},\n    {label: gettext('1 hour'), value: 3600},\n    {label: StringUtils.formatPercent(gettext('%(count)d hours'), {count: 4}), value: 14400},\n    {label: StringUtils.formatPercent(gettext('%(count)d hours'), {count: 8}), value: 28800},\n    {label: StringUtils.formatPercent(gettext('%(count)d hours'), {count: 12}), value: 43200},\n    {label: gettext('1 day'), value: 86400},\n    {label: gettext('1 week'), value: 86400 * 7},\n    {label: gettext('1 month'), value: 86400 * 31},\n    {label: gettext('1 year'), value: 86400 * 366}\n]\n\nconst TIME_GROUPS_CHOICES = [\n    {label: `${gettext('1 minute')} (${gettext('every second')})`, value: {multiplier: 60, unit: 'second'}},\n    {\n        label: `${StringUtils.formatPercent(gettext('%(count)d minutes'), {count: 5})} (${gettext('every minute')})`,\n        value: {multiplier: 5, unit: 'minute'}\n    },\n    {\n        label: `${StringUtils.formatPercent(gettext('%(count)d minutes'), {count: 10})} (${gettext('every minute')})`,\n        value: {multiplier: 10, unit: 'minute'}\n    },\n    {\n        label: `${StringUtils.formatPercent(gettext('%(count)d minutes'), {count: 15})} (${gettext('every minute')})`,\n        value: {multiplier: 15, unit: 'minute'}\n    },\n    {\n        label: `${StringUtils.formatPercent(gettext('%(count)d minutes'), {count: 30})} (${gettext('every minute')})`,\n        value: {multiplier: 30, unit: 'minute'}\n    },\n    {label: `${gettext('1 hour')} (${gettext('every minute')})`, value: {multiplier: 60, unit: 'minute'}},\n    {\n        label: `${StringUtils.formatPercent(gettext('%(count)d hours'), {count: 4})} (${gettext('every hour')})`,\n        value: {multiplier: 4, unit: 'hour'}\n    },\n    {\n        label: `${StringUtils.formatPercent(gettext('%(count)d hours'), {count: 8})} (${gettext('every hour')})`,\n        value: {multiplier: 8, unit: 'hour'}\n    },\n    {\n        label: `${StringUtils.formatPercent(gettext('%(count)d hours'), {count: 12})} (${gettext('every hour')})`,\n        value: {multiplier: 12, unit: 'hour'}\n    },\n    {label: `${gettext('1 day')} (${gettext('every hour')})`, value: {multiplier: 24, unit: 'hour'}},\n    {label: `${gettext('1 week')} (${gettext('every day')})`, value: {multiplier: 7, unit: 'weekDay'}},\n    {label: `${gettext('1 month')} (${gettext('every day')})`, value: {multiplier: 31, unit: 'day'}},\n    {label: `${gettext('1 year')} (${gettext('every month')})`, value: {multiplier: 12, unit: 'month'}}\n]\n\nconst UNIT_MAPPING = {\n    weekDay: 'day'\n}\n\nconst MAX_FETCH_REQUESTS = 5 /* This means at most 50k data points per interval */\nconst MAX_CACHED_SAMPLES_LEN = 400 /* Should be enough for every day during one year */\n\nconst logger = Logger.get('qtoggle.dashboard.widgets')\n\n\nexport class PortHistoryChartConfigForm extends BaseChartConfigForm {\n\n    static BOOLEAN_FIELD_NAMES = ['inverted']\n    static NUMBER_FIELD_NAMES = ['min', 'max', 'unit', 'multiplier']\n\n\n    constructor({...args}) {\n        super({\n            fields: [\n                new PortPickerField({\n                    name: 'portId',\n                    label: gettext('Port'),\n                    required: true,\n                    onChange: (value, form) => form.updateFieldsVisibility()\n                }),\n                new ColorComboField({\n                    name: 'color',\n                    filterEnabled: true,\n                    label: gettext('Color'),\n                    required: true\n                }),\n                new ComboField({\n                    name: 'timeInterval',\n                    label: gettext('Time Interval'),\n                    required: true,\n                    choices: TIME_INTERVAL_CHOICES\n                }),\n                new ComboField({\n                    name: 'timeGroups',\n                    label: gettext('Time Groups'),\n                    required: true,\n                    choices: TIME_GROUPS_CHOICES\n                }),\n                new NumericField({\n                    name: 'max',\n                    label: gettext('Maximum Value'),\n                    description: gettext('Lower chart limit. Leave empty for automatic adjustment.')\n                }),\n                new NumericField({\n                    name: 'min',\n                    label: gettext('Minimum Value'),\n                    description: gettext('Higher chart limit. Leave empty for automatic adjustment.')\n                }),\n                new TextField({\n                    name: 'unit',\n                    label: gettext('Unit'),\n                    maxLength: 16\n                }),\n                new NumericField({\n                    name: 'multiplier',\n                    label: gettext('Multiplier'),\n                    description: gettext('A multiplying factor for port values.'),\n                    required: true\n                }),\n                new CheckField({\n                    name: 'inverted',\n                    label: gettext('Inverted Logic')\n                })\n            ],\n            ...args\n        })\n    }\n\n    /**\n     * @returns {Boolean}\n     */\n    isBoolean() {\n        let data = this.getUnvalidatedData()\n        let port = this.getPort(data.portId)\n        let isBoolean = true\n        if (port && port.type === 'number') {\n            isBoolean = false\n        }\n\n        return isBoolean\n    }\n\n    updateFieldsVisibility() {\n        if (this.isBoolean()) {\n            this.constructor.NUMBER_FIELD_NAMES.forEach(function (name) {\n                this.getField(name).hide()\n            }, this)\n            this.constructor.BOOLEAN_FIELD_NAMES.forEach(function (name) {\n                this.getField(name).show()\n            }, this)\n        }\n        else {\n            this.constructor.BOOLEAN_FIELD_NAMES.forEach(function (name) {\n                this.getField(name).hide()\n            }, this)\n            this.constructor.NUMBER_FIELD_NAMES.forEach(function (name) {\n                this.getField(name).show()\n            }, this)\n        }\n    }\n\n    onUpdateFromWidget() {\n        this.updateFieldsVisibility()\n    }\n\n    fromPort(port, fieldName) {\n        let data = super.fromPort(port, fieldName)\n\n        data.unit = port.unit\n        data.min = port.min != null ? port.min : null\n        data.max = port.max != null ? port.max : null\n\n        return data\n    }\n\n}\n\n\n/**\n * @alias qtoggle.dashboard.widgets.charts.PortHistoryChart\n * @extends qtoggle.dashboard.widgets.charts.BaseChartWidget\n */\nexport class PortHistoryChart extends BaseChartWidget {\n\n    static ConfigForm = PortHistoryChartConfigForm\n\n\n    /**\n     * @constructs\n     */\n    constructor() {\n        super()\n\n        this._portId = ''\n        this._color = DEFAULT_COLOR\n        this._timeInterval = null\n        this._timeGroups = null\n        this._min = null\n        this._max = null\n        this._unit = ''\n        this._multiplier = 1\n        this._inverted = false\n\n        this._fetchHistoryPromise = null\n        this._historyDownloadManager = null /* Used for slice history mode */\n        this._cachedSamples = [] /* Used for timestamps history mode */\n\n        /* Use ChartJS date adapter to determine beginning of time units */\n        this._dateAdapter = new ChartJS._adapters._date()\n    }\n\n    isValid() {\n        if (!this._portId) {\n            return false\n        }\n\n        let port = this.getPort(this._portId)\n\n        return Boolean(port && port.enabled && port.online !== false)\n    }\n\n    /**\n     * @returns {Boolean}\n     */\n    isBoolean() {\n        let port = this.getPort(this._portId)\n        return port && port.type === 'boolean'\n    }\n\n    /**\n     * @returns {Boolean}\n     */\n    isSliceHistoryMode() {\n        /* Override in concrete class */\n        return true\n    }\n\n    /**\n     * @returns {Boolean}\n     */\n    isInverted() {\n        return this._inverted\n    }\n\n    /**\n     * @returns {?Number}\n     */\n    getMin() {\n        return this._min\n    }\n\n    /**\n     * @returns {?Number}\n     */\n    getMax() {\n        return this._max\n    }\n\n    /**\n     * @returns {String}\n     */\n    getUnit() {\n        return this._unit\n    }\n\n    /**\n     * @returns {?{multiplier: Number, unit: String}}\n     */\n    getTimeGroups() {\n        return this._timeGroups\n    }\n\n    /**\n     * @returns {?Number}\n     */\n    getTimeInterval() {\n        return this._timeInterval\n    }\n\n    /**\n     * @returns {Number}\n     */\n    getFromTimestamp() {\n        let nowDate = new Date()\n\n        if (this._timeInterval != null) {\n            return nowDate.getTime() - this._timeInterval * 1000\n        }\n        else if (this._timeGroups != null) {\n            let {multiplier, unit} = this._timeGroups\n            unit = UNIT_MAPPING[unit] || unit\n\n            let timestamp = this._dateAdapter.endOf(nowDate, unit).getTime() + 1\n            return this._dateAdapter.add(timestamp, -multiplier - 1, unit).getTime()\n        }\n        else {\n            return nowDate.getTime()\n        }\n    }\n\n    /**\n     * @returns {Number}\n     */\n    getMultiplier() {\n        return this._multiplier\n    }\n\n    invalidateCache() {\n        this._historyDownloadManager = null\n        this._cachedSamples = []\n    }\n\n    showCurrentValue(wantProgress = true) {\n        if (wantProgress && !this._fetchHistoryPromise) {\n            this.setProgress()\n        }\n\n        let fetchHistoryPromise\n        let from, to, timestamps\n        let sliceHistoryMode = this.isSliceHistoryMode()\n\n        if (sliceHistoryMode) {\n            from = this.getFromTimestamp()\n            to = new Date().getTime()\n            fetchHistoryPromise = this.getHistorySlice(from, to)\n        }\n        else {\n            timestamps = this.computeGroupsTimestamps()\n            fetchHistoryPromise = this.getHistoryTimestamps(timestamps)\n        }\n\n        fetchHistoryPromise.then(function (history) {\n\n            if (!this._fetchHistoryPromise) {\n                this.clearProgress()\n            }\n\n            let addedToDOM = this.getHTML().parents('body').length > 0\n            if (!addedToDOM) {\n                return /* The widget has been removed from DOM, in the meantime */\n            }\n\n            if (sliceHistoryMode) {\n                this.showHistorySlice(history, from, to)\n            }\n            else {\n                this.showHistoryTimestamps(history, timestamps)\n            }\n\n        }.bind(this)).catch(function (error) {\n\n            if (error instanceof HistoryDownloadTooManyRequests) {\n                let msg = gettext('Please choose a smaller interval of time!')\n                logger.warn('too many requests while downloading history')\n                error = msg\n            }\n            else {\n                logger.errorStack(`fetching history for port ${this._portId} failed`, error)\n            }\n\n            this.setError(error)\n\n        }.bind(this))\n    }\n\n    onPortValueChange(portId, value) {\n        if (portId !== this._portId) {\n            return\n        }\n\n        if (!this.getPanel().isActive()) {\n            return\n        }\n\n        if (this._fetchHistoryPromise) {\n            return /* Don't add data point if we're currently fetching history */\n        }\n\n        let wantProgress = false\n\n        if (this.isSliceHistoryMode()) {\n            if (!this._historyDownloadManager) {\n                return\n            }\n\n            /* Remove old values that are no longer displayed on chart */\n            let to = this.getFromTimestamp()\n            this._historyDownloadManager.purge(null, to)\n\n            /* Add new value using the current timestamp */\n            this._historyDownloadManager.addSample(value, new Date().getTime(), /* bridgeGap = */ true)\n        }\n        else {\n            /* Remove old values that will no longer be displayed on chart */\n\n            while (this._cachedSamples.length > MAX_CACHED_SAMPLES_LEN) {\n                this._cachedSamples.shift()\n            }\n        }\n\n        this.showCurrentValue(wantProgress)\n    }\n\n    onPanelBecomeActive() {\n        if (this.getPanel().isEditEnabled()) {\n            return\n        }\n\n        this.invalidateCache()\n        this.showCurrentValue()\n    }\n\n    configToJSON() {\n        return {\n            portId: this._portId,\n            color: this._color,\n            timeInterval: this._timeInterval,\n            timeGroups: this._timeGroups,\n            min: this._min,\n            max: this._max,\n            unit: this._unit,\n            multiplier: this._multiplier,\n            inverted: this._inverted\n        }\n    }\n\n    configFromJSON(json) {\n        /* Invalidate history if port changed */\n        if (json.portId !== this._portId) {\n            this.invalidateCache()\n        }\n        /* Invalidate history if time groups changed */\n        if (json.timeGroups !== this._timeGroups) {\n            this.invalidateCache()\n        }\n\n        if (json.portId) {\n            this._portId = json.portId\n        }\n        if (json.color) {\n            this._color = json.color\n        }\n        if (json.timeInterval) {\n            this._timeInterval = json.timeInterval\n        }\n        if (json.timeGroups) {\n            this._timeGroups = json.timeGroups\n        }\n        if (json.min !== undefined) {\n            this._min = json.min\n        }\n        if (json.max !== undefined) {\n            this._max = json.max\n        }\n        if (json.unit != null) {\n            this._unit = json.unit\n        }\n        if (json.multiplier != null) {\n            this._multiplier = json.multiplier\n        }\n        if (json.inverted != null) {\n            this._inverted = json.inverted\n        }\n    }\n\n    computeGroupsTimestamps() {\n        if (this._timeGroups == null) {\n            return []\n        }\n\n        let timestamps = []\n        let {multiplier, unit} = this._timeGroups\n        unit = UNIT_MAPPING[unit] || unit\n\n        let nowDate = new Date()\n        let timestamp = this._dateAdapter.endOf(nowDate, unit).getTime() + 1\n        timestamps.push(timestamp)\n\n        for (let i = 0; i < multiplier; i++) {\n            timestamp = this._dateAdapter.add(timestamp, -1, unit).getTime()\n            timestamps.push(timestamp)\n        }\n\n        timestamps.reverse()\n\n        return timestamps\n    }\n\n    getHistorySlice(from, to) {\n        if (!this._portId) {\n            return Promise.resolve([])\n        }\n\n        let currentFetchPromise = this._fetchHistoryPromise || Promise.resolve()\n        let fetchPromise = currentFetchPromise.then(function () {\n\n            if (!this._historyDownloadManager) {\n                this._historyDownloadManager = new HistoryDownloadManager(this.getPort(this._portId))\n            }\n            return this._historyDownloadManager.fetch(Math.round(from), Math.round(to), MAX_FETCH_REQUESTS)\n\n        }.bind(this)).catch(function (error) {\n\n            this._fetchHistoryPromise = null\n            throw error\n\n        }.bind(this)).then(function (history) {\n\n            if (this._fetchHistoryPromise === fetchPromise) {\n                /* Last active fetch promise has just ended */\n                this._fetchHistoryPromise = null\n            }\n\n            return history\n\n        }.bind(this))\n\n        this._fetchHistoryPromise = fetchPromise\n\n        return this._fetchHistoryPromise\n    }\n\n    getHistoryTimestamps(timestamps) {\n        /* Ensure requested timestamps are chronologically ordered */\n        timestamps = timestamps.slice()\n        timestamps.sort()\n\n        if (!timestamps.length) {\n            return Promise.resolve([])\n        }\n\n        let currentFetchPromise = this._fetchHistoryPromise || Promise.resolve()\n\n        let fetchPromise = currentFetchPromise.then(function () {\n\n            /* Only fetch samples for timestamps newer than last cached sample */\n            let lastFetchedTimestamp = 0\n            if (this._cachedSamples.length > 0) {\n                lastFetchedTimestamp = this._cachedSamples[this._cachedSamples.length - 1].timestamp\n            }\n\n            let timestampsToFetch = timestamps.filter(t => t > lastFetchedTimestamp)\n            if (timestampsToFetch.length > 0) {\n                return PortsAPI.getPortHistory(\n                    this._portId,\n                    /* from = */ null,\n                    /* to = */ null,\n                    /* limit = */ null,\n                    timestampsToFetch\n                )\n            }\n            else {\n                return Promise.resolve([])\n            }\n\n        }.bind(this)).catch(function (error) {\n\n            this._fetchHistoryPromise = null\n            throw error\n\n        }.bind(this)).then(function (history) {\n\n            /* Keep only non-null samples newer than last cached sample */\n            if (this._cachedSamples.length) {\n                let lastCachedSample = this._cachedSamples[this._cachedSamples.length - 1]\n                history = history.filter(s => s != null && s.timestamp > lastCachedSample.timestamp)\n            }\n            else {\n                history = history.filter(s => s != null)\n            }\n\n            /* Ignore duplicate (and successive) samples */\n            let distinctHistory = history.slice(0, 1)\n            history.slice(1).forEach(function (sample, i) {\n                let prevSample = history[i]\n                if (sample.timestamp !== prevSample.timestamp) {\n                    distinctHistory.push(sample)\n                }\n            })\n            history = distinctHistory\n\n            /* Cache fetched values */\n            this._cachedSamples = this._cachedSamples.concat(history)\n\n            if (this._fetchHistoryPromise === fetchPromise) {\n                /* Last active fetch promise has just ended */\n                this._fetchHistoryPromise = null\n            }\n\n            if (this._cachedSamples.length === 0) {\n                return ArrayUtils.range(0, timestamps.length).map(() => null)\n            }\n\n            /* Associate samples to requested timestamps */\n            let selectedSamples = []\n            let samples = this._cachedSamples.slice()\n            for (let timestampIndex = timestamps.length - 1; timestampIndex >= 0; timestampIndex--) {\n                let timestamp = timestamps[timestampIndex]\n                while (samples.length && samples[samples.length - 1].timestamp > timestamp) {\n                    samples.pop()\n                }\n\n                if (!samples.length) {\n                    break /* No more samples */\n                }\n\n                selectedSamples.push(samples[samples.length - 1])\n            }\n\n            /* Pad with nulls until we get our requested number of samples */\n            while (selectedSamples.length < timestamps.length) {\n                selectedSamples.push(null)\n            }\n\n            /* We actually built selected samples in reverse order */\n            selectedSamples.reverse()\n\n            return selectedSamples\n\n        }.bind(this))\n\n        this._fetchHistoryPromise = fetchPromise\n\n        return this._fetchHistoryPromise\n    }\n\n    /**\n     * @param {Object[]} history\n     * @param {Number} from\n     * @param {Number} to\n     */\n    showHistorySlice(history, from, to) {\n        /* Override in concrete class */\n    }\n\n    /**\n     * @param {Object[]} history\n     * @param {Number[]} timestamps\n     */\n    showHistoryTimestamps(history, timestamps) {\n        /* Override in concrete class */\n    }\n\n    makeChartOptions() {\n        return ObjectUtils.combine(super.makeChartOptions(), {\n            colors: [this._color]\n        })\n    }\n\n}\n"],"sourceRoot":""}