{"version":3,"sources":["webpack:///./js/dashboard/widgets/all-widgets/displays/text-indicator.js"],"names":["ConfigForm","args","fields","PortPickerField","name","label","gettext","required","onChange","value","form","_updateFields","TextField","separator","ColorComboField","filterEnabled","CheckField","maxLength","UpDownField","min","max","SliderField","ticks","ArrayUtils","map","i","description","this","data","getUnvalidatedData","port","getPort","portId","isBoolean","type","customValuesFields","getFields","filter","f","getName","match","RegExp","customTextsFields","customColorsFields","lastCustomFieldNo","length","customValuesCount","forEach","no","_addCustomFields","push","valueField","textField","colorField","bind","visibleFieldNames","customFieldNames","booleanFieldNames","numberFieldNames","allFieldNames","ObjectUtils","customText","customValues","displayUnit","n","_getCustomFields","field","getField","isHidden","show","hide","integer","step","customValuesCountField","index","getFieldIndex","NumericField","addField","widget","v","text","color","fieldName","unit","WidgetConfigForm","TextIndicator","_portId","_falseText","_falseColor","_trueText","_trueColor","DEFAULT_COLOR","_displayUnit","_unit","_decimals","_color","_size","_customText","_text","_customValues","_textElement","Boolean","enabled","online","getPortValue","_showValue","width","height","container","$","class","_makeTextElement","append","textElement","css","_isBoolean","valueText","toFixed","find","m","StringUtils","Theme","html","falseText","falseColor","trueText","trueColor","decimals","size","json","Widget","StockIcon","stockName","Widgets"],"mappings":"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","file":"11.js","sourcesContent":["\nimport $ from '$qui/lib/jquery.module.js'\n\nimport {gettext}         from '$qui/base/i18n.js'\nimport {CheckField}      from '$qui/forms/common-fields/common-fields.js'\nimport {ColorComboField} from '$qui/forms/common-fields/common-fields.js'\nimport {NumericField}    from '$qui/forms/common-fields/common-fields.js'\nimport {SliderField}     from '$qui/forms/common-fields/common-fields.js'\nimport {TextField}       from '$qui/forms/common-fields/common-fields.js'\nimport {UpDownField}     from '$qui/forms/common-fields/common-fields.js'\nimport StockIcon         from '$qui/icons/stock-icon.js'\nimport * as Theme        from '$qui/theme.js'\nimport * as ArrayUtils   from '$qui/utils/array.js'\nimport * as ObjectUtils  from '$qui/utils/object.js'\nimport * as StringUtils  from '$qui/utils/string.js'\n\nimport PortPickerField  from '$app/dashboard/widgets/port-picker-field.js'\nimport Widget           from '$app/dashboard/widgets/widget.js'\nimport {DEFAULT_COLOR}  from '$app/dashboard/widgets/widget.js'\nimport WidgetConfigForm from '$app/dashboard/widgets/widget-config-form.js'\nimport * as Widgets     from '$app/dashboard/widgets/widgets.js'\n\n\nconst MAX_VALUES_COUNT = 50\n\n\nclass ConfigForm extends WidgetConfigForm {\n\n    constructor({...args}) {\n        super({\n            fields: [\n                new PortPickerField({\n                    name: 'portId',\n                    label: gettext('Port'),\n                    required: true,\n                    onChange: (value, form) => form._updateFields()\n                }),\n\n                new TextField({\n                    name: 'falseText',\n                    label: gettext('False Text'),\n                    separator: true,\n                    required: true\n                }),\n                new TextField({\n                    name: 'trueText',\n                    label: gettext('True Text'),\n                    required: true\n                }),\n                new ColorComboField({\n                    name: 'falseColor',\n                    filterEnabled: true,\n                    label: gettext('False Color'),\n                    separator: true,\n                    required: true\n                }),\n                new ColorComboField({\n                    name: 'trueColor',\n                    filterEnabled: true,\n                    label: gettext('True Color'),\n                    required: true\n                }),\n\n                new CheckField({\n                    name: 'displayUnit',\n                    label: gettext('Display Unit'),\n                    separator: true,\n                    onChange: (value, form) => form._updateFields()\n                }),\n                new TextField({\n                    name: 'unit',\n                    label: gettext('Unit'),\n                    maxLength: 16\n                }),\n                new UpDownField({\n                    name: 'decimals',\n                    label: gettext('Decimals'),\n                    min: 0,\n                    max: 10\n                }),\n                new ColorComboField({\n                    name: 'color',\n                    filterEnabled: true,\n                    label: gettext('Color'),\n                    required: true\n                }),\n                new SliderField({\n                    name: 'size',\n                    label: gettext('Size'),\n                    required: true,\n                    ticks: ArrayUtils.range(1, 11).map(i => ({value: i, label: `${i}`}))\n                }),\n\n                new CheckField({\n                    name: 'customText',\n                    label: gettext('Custom Text'),\n                    separator: true,\n                    onChange: (value, form) => form._updateFields()\n                }),\n                new TextField({\n                    name: 'text',\n                    label: gettext('Text'),\n                    description: gettext('Use {{value}} as a placeholder for current port value.'),\n                    required: true\n                }),\n\n                new CheckField({\n                    name: 'customValues',\n                    label: gettext('Custom Values'),\n                    separator: true,\n                    onChange: (value, form) => form._updateFields()\n                }),\n                new UpDownField({\n                    name: 'customValuesCount',\n                    label: gettext('Number Of Values'),\n                    min: 2,\n                    max: MAX_VALUES_COUNT,\n                    onChange: (value, form) => form._updateFields()\n                })\n            ],\n            ...args\n        })\n    }\n\n    onUpdateFromWidget() {\n        this._updateFields()\n    }\n\n    _updateFields() {\n        let data = this.getUnvalidatedData()\n        let port = this.getPort(data.portId)\n        let isBoolean = true\n        if (port && port.type === 'number') {\n            isBoolean = false\n        }\n\n        /* Gather current custom fields */\n        let customValuesFields = this.getFields().filter(f => f.getName().match(new RegExp('customValue\\\\d+')))\n        let customTextsFields = this.getFields().filter(f => f.getName().match(new RegExp('customText\\\\d+')))\n        let customColorsFields = this.getFields().filter(f => f.getName().match(new RegExp('customColor\\\\d+')))\n\n        /* Add new needed custom fields */\n        let lastCustomFieldNo = customValuesFields.length - 1\n        ArrayUtils.range(lastCustomFieldNo + 1, data.customValuesCount).forEach(function (no) {\n\n            let fields = this._addCustomFields(no, port)\n\n            customValuesFields.push(fields.valueField)\n            customTextsFields.push(fields.textField)\n            customColorsFields.push(fields.colorField)\n\n        }.bind(this))\n\n        let customFields = [...customValuesFields, ...customTextsFields, ...customColorsFields]\n        let customFieldNames = customFields.map(f => f.getName())\n\n        let booleanFieldNames = ['falseText', 'trueText', 'falseColor', 'trueColor']\n        let numberFieldNames = [\n            'displayUnit',\n            'unit',\n            'decimals',\n            'color',\n            'customText',\n            'text',\n            'customValues',\n            'customValuesCount',\n            ...customFieldNames\n        ]\n\n        let allFieldNames = [...booleanFieldNames, ...numberFieldNames]\n        let visibleFieldNames\n\n        if (isBoolean) {\n            visibleFieldNames = ObjectUtils.fromEntries(booleanFieldNames.map(f => [f, true]))\n        }\n        else { /* number */\n            visibleFieldNames = ObjectUtils.fromEntries(numberFieldNames.map(f => [f, true]))\n\n            if (data.customText || data.customValues) {\n                delete visibleFieldNames['displayUnit']\n            }\n            if (data.customText || data.customValues || !data.displayUnit) {\n                delete visibleFieldNames['unit']\n            }\n            if (!data.customText || data.customValues) {\n                delete visibleFieldNames['text']\n            }\n            if (data.customValues) {\n                delete visibleFieldNames['color']\n                delete visibleFieldNames['customText']\n            }\n            else {\n                delete visibleFieldNames['customValuesCount']\n                customFieldNames.forEach(n => delete visibleFieldNames[n])\n            }\n\n            /* Hide all unused custom fields */\n            ArrayUtils.range(data.customValuesCount, lastCustomFieldNo + 1).forEach(function (no) {\n\n                let fields = this._getCustomFields(no)\n\n                delete visibleFieldNames[fields.valueField.getName()]\n                delete visibleFieldNames[fields.textField.getName()]\n                delete visibleFieldNames[fields.colorField.getName()]\n\n            }.bind(this))\n        }\n\n        allFieldNames.forEach(function (name) {\n            let field = this.getField(name)\n            if (name in visibleFieldNames && field.isHidden()) {\n                field.show()\n            }\n            else if (!(name in visibleFieldNames) && !field.isHidden()) {\n                field.hide()\n            }\n        }.bind(this))\n    }\n\n    _addCustomFields(no, port) {\n        let min = null\n        let max = null\n        let integer = false\n        let step = null\n        if (port) {\n            min = port.min\n            max = port.max\n            integer = port.integer\n            step = port.step\n        }\n\n        let customValuesCountField = this.getField('customValuesCount')\n        let index = this.getFieldIndex(customValuesCountField) + 1 + no * 3\n\n        let valueField = new NumericField({\n            name: `customValue${no}`,\n            label: `${gettext('Value')} ${no + 1}`,\n            required: true,\n            separator: true,\n            min: min,\n            max: max,\n            integer: integer,\n            step: step\n        })\n        this.addField(index, valueField)\n\n        let textField = new TextField({\n            name: `customText${no}`,\n            label: `${gettext('Text')} ${no + 1}`,\n            required: true\n        })\n        this.addField(index + 1, textField)\n\n        let colorField = new ColorComboField({\n            name: `customColor${no}`,\n            label: `${gettext('Color')} ${no + 1}`,\n            filterEnabled: true,\n            required: true\n        })\n        this.addField(index + 2, colorField)\n\n        return {\n            valueField: valueField,\n            textField: textField,\n            colorField: colorField\n        }\n    }\n\n    _getCustomFields(no) {\n        let valueField = this.getField(`customValue${no}`)\n        let textField = this.getField(`customText${no}`)\n        let colorField = this.getField(`customColor${no}`)\n\n        return {\n            valueField: valueField,\n            textField: textField,\n            colorField: colorField\n        }\n    }\n\n    fromWidget(widget) {\n        let data = super.fromWidget(widget)\n\n        data.customValues.forEach(function (v, no) {\n            data[`customValue${no}`] = v.value\n            data[`customText${no}`] = v.text\n            data[`customColor${no}`] = v.color\n        })\n\n        data.customValues = data.customValues.length >= 2\n        data.customValuesCount = data.customValues.length\n\n        return data\n    }\n\n    toWidget(data, widget) {\n        if (data.customValues) {\n            data.customValues = ArrayUtils.range(0, data.customValuesCount).map(function (no) {\n\n                return {\n                    value: data[`customValue${no}`],\n                    text: data[`customText${no}`],\n                    color: data[`customColor${no}`]\n                }\n\n            })\n        }\n        else {\n            data.customValues = []\n        }\n\n        super.toWidget(data, widget)\n    }\n\n    fromPort(port, fieldName) {\n        let data = super.fromPort(port, fieldName)\n\n        data.unit = port.unit\n\n        return data\n    }\n\n}\n\n\n/**\n * @alias qtoggle.dashboard.widgets.displays.TextIndicator\n * @extends qtoggle.dashboard.widgets.Widget\n */\nclass TextIndicator extends Widget {\n\n    static category = gettext('Displays')\n    static displayName = gettext('Text Indicator')\n    static typeName = 'TextIndicator'\n    static icon = new StockIcon({name: 'widget-text', stockName: 'qtoggle'})\n    static ConfigForm = ConfigForm\n    static vResizable = true\n    static hResizable = true\n\n\n    /**\n     * @constructs\n     */\n    constructor() {\n        super()\n\n        this._portId = ''\n\n        this._falseText = gettext('Off')\n        this._falseColor = '@disabled-color'\n        this._trueText = gettext('On')\n        this._trueColor = DEFAULT_COLOR\n\n        this._displayUnit = true\n        this._unit = ''\n        this._decimals = 0\n        this._color = DEFAULT_COLOR\n        this._size = 5\n        this._customText = false\n        this._text = '{{value}}'\n\n        this._customValues = []\n\n        this._textElement = null\n    }\n\n    isValid() {\n        if (!this._portId) {\n            return false\n        }\n\n        let port = this.getPort(this._portId)\n\n        return Boolean(port && port.enabled && port.online !== false)\n    }\n\n    showCurrentValue() {\n        let value = this.getPortValue(this._portId)\n        if (value == null) {\n            return\n        }\n\n        this._showValue(value)\n    }\n\n    onPortValueChange(portId, value) {\n        if (portId !== this._portId) {\n            return\n        }\n\n        this._showValue(value)\n    }\n\n    makeContent(width, height) {\n        let container = $('<div></div>', {class: 'dashboard-text-indicator-container'})\n\n        this._textElement = this._makeTextElement(width, height)\n        container.append(this._textElement)\n\n        return container\n    }\n\n    _makeTextElement(width, height) {\n        let textElement = $('<span></span>', {class: 'dashboard-text-indicator-text-element'})\n\n        textElement.css('font-size', `${this._size * 10}%`)\n\n        return textElement\n    }\n\n    _showValue(value) {\n        let text\n        let color\n\n        if (this._isBoolean()) {\n            if (value) {\n                text = this._trueText\n                color = this._trueColor\n            }\n            else {\n                text = this._falseText\n                color = this._falseColor\n            }\n        }\n        else { /* Number */\n            let valueText = value.toFixed(this._decimals)\n            if (this._displayUnit) {\n                valueText += this._unit\n            }\n\n            if (this._customValues.length) {\n                let match = this._customValues.find(m => m.value === value) || this._customValues[0]\n                text = match.text\n                color = match.color\n            }\n            else if (this._customText) {\n                text = this._text\n                color = this._color\n            }\n            else {\n                text = '{{value}}'\n                color = this._color\n            }\n\n            text = StringUtils.replaceAll(text, '{{value}}', valueText)\n        }\n\n        color = Theme.getColor(color)\n\n        this._textElement.css('color', color)\n        this._textElement.html(text)\n    }\n\n    _isBoolean() {\n        let port = this.getPort(this._portId)\n        return port && port.type === 'boolean'\n    }\n\n    configToJSON() {\n        return {\n            portId: this._portId,\n\n            falseText: this._falseText,\n            falseColor: this._falseColor,\n            trueText: this._trueText,\n            trueColor: this._trueColor,\n\n            displayUnit: this._displayUnit,\n            unit: this._unit,\n            decimals: this._decimals,\n            color: this._color,\n            size: this._size,\n            customText: this._customText,\n            text: this._text,\n\n            customValues: this._customValues\n        }\n    }\n\n    configFromJSON(json) {\n        if (json.portId) {\n            this._portId = json.portId\n        }\n\n        if (json.falseText != null) {\n            this._falseText = json.falseText\n        }\n        if (json.trueText != null) {\n            this._trueText = json.trueText\n        }\n        if (json.falseColor != null) {\n            this._falseColor = json.falseColor\n        }\n        if (json.trueColor != null) {\n            this._trueColor = json.trueColor\n        }\n\n        if (json.displayUnit != null) {\n            this._displayUnit = json.displayUnit\n        }\n        if (json.unit != null) {\n            this._unit = json.unit\n        }\n        if (json.decimals != null) {\n            this._decimals = json.decimals\n        }\n        if (json.color != null) {\n            this._color = json.color\n        }\n        if (json.size != null) {\n            this._size = json.size\n        }\n        if (json.customText != null) {\n            this._customText = json.customText\n        }\n        if (json.text != null) {\n            this._text = json.text\n        }\n\n        if (json.customValues != null) {\n            this._customValues = json.customValues\n        }\n    }\n\n}\n\nWidgets.register(TextIndicator)\n\n\nexport default TextIndicator\n"],"sourceRoot":""}