{"version":3,"sources":["webpack:///./js/dashboard/widgets/all-widgets/push-buttons/push-button.js"],"names":["ConfigForm","args","fields","ColorComboField","name","label","gettext","filterEnabled","required","PortPickerField","onChange","value","form","_showHidePortTypeFields","CheckField","NumericField","UpDownField","unit","min","max","step","description","data","this","getUnvalidatedData","port","getPort","portId","isBoolean","type","booleanFieldNames","numberFieldNames","forEach","getField","hide","show","WidgetConfigForm","PushButton","_color","DEFAULT_COLOR","_portId","_inverted","_pressedValue","_releasedValue","_timeout","_timeoutHandle","_bezelDiv","_handleDiv","Boolean","enabled","writable","online","width","height","container","$","class","_makeBezel","css","Widgets","append","_makeHandleDiv","diameter","Math","marginTop","bezelDiv","handleDiv","background","Theme","margin","roundEm","that","pointerUp","Window","off","vibrate","handleRelease","clearTimeout","on","e","handlePress","setTimeout","preventDefault","_isBoolean","setPortValue","color","inverted","pressedValue","releasedValue","timeout","json","Widget","StockIcon","stockName"],"mappings":"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","file":"14.js","sourcesContent":["\nimport $ from '$qui/lib/jquery.module.js'\n\nimport {gettext}         from '$qui/base/i18n.js'\nimport {CheckField}      from '$qui/forms/common-fields/common-fields.js'\nimport {ColorComboField} from '$qui/forms/common-fields/common-fields.js'\nimport {NumericField}    from '$qui/forms/common-fields/common-fields.js'\nimport {UpDownField}     from '$qui/forms/common-fields/common-fields.js'\nimport StockIcon         from '$qui/icons/stock-icon.js'\nimport * as Theme        from '$qui/theme.js'\nimport * as Window       from '$qui/window.js'\n\nimport PortPickerField  from '$app/dashboard/widgets/port-picker-field.js'\nimport * as Widgets     from '$app/dashboard/widgets/widgets.js'\nimport Widget           from '$app/dashboard/widgets/widget.js'\nimport {DEFAULT_COLOR}  from '$app/dashboard/widgets/widget.js'\nimport WidgetConfigForm from '$app/dashboard/widgets/widget-config-form.js'\n\n\nclass ConfigForm extends WidgetConfigForm {\n\n    constructor({...args}) {\n        super({\n            fields: [\n                new ColorComboField({\n                    name: 'color',\n                    label: gettext('Color'),\n                    filterEnabled: true,\n                    required: true\n                }),\n                new PortPickerField({\n                    name: 'portId',\n                    label: gettext('Port'),\n                    required: true,\n                    onChange: (value, form) => form._showHidePortTypeFields()\n                }),\n                new CheckField({\n                    name: 'inverted',\n                    label: gettext('Inverted Logic')\n                }),\n                new NumericField({\n                    name: 'pressedValue',\n                    label: gettext('Pressed Value'),\n                    required: true\n                }),\n                new NumericField({\n                    name: 'releasedValue',\n                    label: gettext('Released Value'),\n                    required: true\n                }),\n                new UpDownField({\n                    name: 'timeout',\n                    label: gettext('Release Timeout'),\n                    unit: 'ms',\n                    min: 0,\n                    max: 10000,\n                    step: 100,\n                    description: gettext('Sets the time after which the button is automatically released. ' +\n                                         'Value 0 disables automatic release.')\n                })\n            ],\n            ...args\n        })\n    }\n\n    _showHidePortTypeFields() {\n        let data = this.getUnvalidatedData()\n        let port = this.getPort(data.portId)\n        let isBoolean = true\n        if (port && port.type === 'number') {\n            isBoolean = false\n        }\n\n        let booleanFieldNames = ['inverted']\n        let numberFieldNames = ['pressedValue', 'releasedValue']\n\n        if (isBoolean) {\n            numberFieldNames.forEach(function (name) {\n                this.getField(name).hide()\n            }, this)\n            booleanFieldNames.forEach(function (name) {\n                this.getField(name).show()\n            }, this)\n        }\n        else {\n            booleanFieldNames.forEach(function (name) {\n                this.getField(name).hide()\n            }, this)\n            numberFieldNames.forEach(function (name) {\n                this.getField(name).show()\n            }, this)\n        }\n    }\n\n    onUpdateFromWidget() {\n        this._showHidePortTypeFields()\n    }\n\n}\n\n\n/**\n * @alias qtoggle.dashboard.widgets.pushbuttons.PushButton\n * @extends qtoggle.dashboard.widgets.Widget\n */\nclass PushButton extends Widget {\n\n    static category = gettext('Push Buttons')\n    static displayName = gettext('Push Button')\n    static typeName = 'PushButton'\n    static icon = new StockIcon({name: 'widget-push-button', stockName: 'qtoggle'})\n    static ConfigForm = ConfigForm\n    static vResizable = true\n    static hResizable = true\n\n\n    /**\n     * @constructs\n     */\n    constructor() {\n        super()\n\n        this._color = DEFAULT_COLOR\n        this._portId = ''\n        this._inverted = false\n        this._pressedValue = 1\n        this._releasedValue = 0\n        this._timeout = 1000\n        this._timeoutHandle = null\n\n        this._bezelDiv = null\n        this._handleDiv = null\n    }\n\n    isValid() {\n        if (!this._portId) {\n            return false\n        }\n\n        let port = this.getPort(this._portId)\n\n        return Boolean(port && port.enabled && port.writable && port.online !== false)\n    }\n\n    makeContent(width, height) {\n        let container = $('<div></div>', {class: 'dashboard-push-button-container'})\n\n        this._bezelDiv = this._makeBezel(width, height)\n        container.css('borderWidth', `${Widgets.CELL_PADDING}em`)\n        container.append(this._bezelDiv)\n\n        this._handleDiv = this._makeHandleDiv()\n        this._bezelDiv.append(this._handleDiv)\n\n        return container\n    }\n\n    _makeBezel(width, height) {\n        let diameter = Math.min(width, height) - 2 * Widgets.CELL_PADDING\n        let marginTop = (height > width) ? (height - width) / 2 : 0\n        let bezelDiv = $('<div></div>', {class: 'dashboard-push-button-bezel'})\n        bezelDiv.css({\n            'width': `${diameter}em`,\n            'height': `${diameter}em`,\n            'margin-top': `${marginTop}em`\n        })\n\n        return bezelDiv\n    }\n\n    _makeHandleDiv() {\n        let handleDiv = $('<div></div>', {class: 'qui-base-button dashboard-push-button-handle'})\n        handleDiv.css({\n            background: Theme.getColor(this._color),\n            margin: `${this.roundEm(Widgets.BEZEL_WIDTH)}em`\n        })\n\n        let that = this\n\n        function pointerUp() {\n            Window.$body.off('pointerup pointercancel pointerleave', pointerUp)\n\n            that.vibrate()\n            that.handleRelease()\n\n            if (that._timeoutHandle) {\n                clearTimeout(that._timeoutHandle)\n                that._timeoutHandle = null\n            }\n        }\n\n        handleDiv.on('pointerdown', function (e) {\n            Window.$body.on('pointerup pointercancel pointerleave', pointerUp)\n\n            that.vibrate()\n            that.handlePress()\n\n            if (that._timeout) {\n                that._timeoutHandle = setTimeout(function () {\n                    that._timeoutHandle = null\n                    pointerUp()\n                }, that._timeout)\n            }\n\n            e.preventDefault()\n        })\n\n        return handleDiv\n    }\n\n    _isBoolean() {\n        let isBoolean = true\n        let port = this.getPort(this._portId)\n        if (port && port.type === 'number') {\n            isBoolean = false\n        }\n\n        return isBoolean\n    }\n\n    handlePress() {\n        if (this._isBoolean()) {\n            this.setPortValue(this._portId, !this._inverted)\n        }\n        else {\n            this.setPortValue(this._portId, this._pressedValue)\n        }\n    }\n\n    handleRelease() {\n        if (this._isBoolean()) {\n            this.setPortValue(this._portId, this._inverted)\n        }\n        else {\n            this.setPortValue(this._portId, this._releasedValue)\n        }\n    }\n\n    configToJSON() {\n        return {\n            color: this._color,\n            portId: this._portId,\n            inverted: this._inverted,\n            pressedValue: this._pressedValue,\n            releasedValue: this._releasedValue,\n            timeout: this._timeout\n        }\n    }\n\n    configFromJSON(json) {\n        if (json.color) {\n            this._color = json.color\n        }\n        if (json.portId) {\n            this._portId = json.portId\n        }\n        if (json.inverted != null) {\n            this._inverted = json.inverted\n        }\n        if (json.pressedValue != null) {\n            this._pressedValue = json.pressedValue\n        }\n        if (json.releasedValue != null) {\n            this._releasedValue = json.releasedValue\n        }\n        if (json.timeout != null) {\n            this._timeout = json.timeout\n        }\n    }\n\n}\n\nWidgets.register(PushButton)\n\n\nexport default PushButton\n"],"sourceRoot":""}