{"version":3,"sources":["webpack:///./js/dashboard/widgets/all-widgets/push-buttons/inc-dec-buttons.js"],"names":["ConfigForm","args","fields","PortPickerField","name","label","gettext","required","NumericField","ColorComboField","filterEnabled","port","fieldName","data","unit","min","max","WidgetConfigForm","IncDecButtons","_portId","_min","_max","_increment","_decColor","DEFAULT_COLOR","_incColor","this","getPort","Boolean","enabled","writable","online","type","width","height","vert","container","$","class","css","Widgets","bezelDiv","_makeBezel","append","Math","_makeHandleDivs","decHandleDiv","incHandleDiv","handleDivs","add","borderRadius","roundEm","Theme","halfHeight","halfWidth","_makeHandleSign","on","handleDec","bind","handleInc","sign","signSpan","html","value","getPortValue","setPortValue","portId","increment","decColor","incColor","json","Widget","StockIcon","stockName"],"mappings":"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","file":"13.js","sourcesContent":["\nimport $ from '$qui/lib/jquery.module.js'\n\nimport {gettext}         from '$qui/base/i18n.js'\nimport {ColorComboField} from '$qui/forms/common-fields/common-fields.js'\nimport {NumericField}    from '$qui/forms/common-fields/common-fields.js'\nimport StockIcon         from '$qui/icons/stock-icon.js'\nimport * as Theme        from '$qui/theme.js'\n\nimport PortPickerField  from '$app/dashboard/widgets/port-picker-field.js'\nimport * as Widgets     from '$app/dashboard/widgets/widgets.js'\nimport Widget           from '$app/dashboard/widgets/widget.js'\nimport {DEFAULT_COLOR}  from '$app/dashboard/widgets/widget.js'\nimport WidgetConfigForm from '$app/dashboard/widgets/widget-config-form.js'\n\n\nclass ConfigForm extends WidgetConfigForm {\n\n    constructor({...args}) {\n        super({\n            fields: [\n                new PortPickerField({\n                    name: 'portId',\n                    label: gettext('Port'),\n                    required: true\n                }),\n                new NumericField({\n                    name: 'min',\n                    label: gettext('Minimum Value'),\n                    required: true\n                }),\n                new NumericField({\n                    name: 'max',\n                    label: gettext('Maximum Value'),\n                    required: true\n                }),\n                new NumericField({\n                    name: 'increment',\n                    label: gettext('Increment'),\n                    required: true\n                }),\n                new ColorComboField({\n                    name: 'decColor',\n                    label: gettext('Decrease Color'),\n                    filterEnabled: true,\n                    required: true\n                }),\n                new ColorComboField({\n                    name: 'incColor',\n                    label: gettext('Increase Color'),\n                    filterEnabled: true,\n                    required: true\n                })\n            ],\n            ...args\n        })\n    }\n\n    fromPort(port, fieldName) {\n        let data = super.fromPort(port, fieldName)\n\n        data.unit = port.unit\n        data.min = port.min != null ? port.min : 0\n        data.max = port.max != null ? port.max : 100\n\n        return data\n    }\n\n}\n\n\n/**\n * @alias qtoggle.dashboard.widgets.pushbuttons.IncDecButtons\n * @extends qtoggle.dashboard.widgets.Widget\n */\nclass IncDecButtons extends Widget {\n\n    static category = gettext('Push Buttons')\n    static displayName = gettext('Increase/Decrease Button')\n    static typeName = 'IncDecButtons'\n    static icon = new StockIcon({name: 'widget-plus-minus', stockName: 'qtoggle'})\n    static ConfigForm = ConfigForm\n    static vResizable = true\n    static hResizable = true\n\n\n    /**\n     * @constructs\n     */\n    constructor() {\n        super()\n\n        this._portId = ''\n        this._min = 0\n        this._max = 100\n        this._increment = 1\n        this._decColor = DEFAULT_COLOR\n        this._incColor = DEFAULT_COLOR\n    }\n\n    isValid() {\n        if (!this._portId) {\n            return false\n        }\n\n        let port = this.getPort(this._portId)\n\n        return Boolean(port && port.enabled && port.writable && port.online !== false && port.type === 'number')\n    }\n\n    makeContent(width, height) {\n        let vert = width <= height\n\n        let container = $('<div></div>', {class: 'dashboard-inc-dec-buttons-container'})\n        container.css('borderWidth', `${Widgets.CELL_PADDING}em`)\n\n        let bezelDiv = this._makeBezel(width, height, vert)\n        container.append(bezelDiv)\n\n        return container\n    }\n\n    _makeBezel(width, height, vert) {\n        width -= 2 * Widgets.CELL_PADDING\n        height -= 2 * Widgets.CELL_PADDING\n        let bezelDiv = $('<div></div>', {class: 'dashboard-inc-dec-buttons-bezel'})\n        bezelDiv.css({\n            'width': `${width}em`,\n            'height': `${height}em`,\n            /* Setting border-radius this way (instead of percent) prevents ellipse effect */\n            'border-radius': `${Math.max(width, height)}em`\n        })\n\n        let [decHandleDiv, incHandleDiv] = this._makeHandleDivs(width, height, vert)\n        bezelDiv.append(decHandleDiv)\n        bezelDiv.append(incHandleDiv)\n\n        return bezelDiv\n    }\n\n    _makeHandleDivs(width, height, vert) {\n        let decHandleDiv = $('<div></div>', {class: 'qui-base-button dashboard-inc-dec-buttons-handle dec-handle'})\n        let incHandleDiv = $('<div></div>', {class: 'qui-base-button dashboard-inc-dec-buttons-handle inc-handle'})\n        let handleDivs = decHandleDiv.add(incHandleDiv)\n        let borderRadius = Math.max(width, height)\n\n        handleDivs.css({\n            'margin': `${this.roundEm(Widgets.BEZEL_WIDTH)}em`,\n            'border-radius': `${borderRadius}em`\n        })\n\n        decHandleDiv.css('background', Theme.getColor(this._decColor))\n        incHandleDiv.css('background', Theme.getColor(this._incColor))\n\n        if (vert) {\n            let halfHeight = this.roundEm(height / 2 - 1.5 * Widgets.BEZEL_WIDTH)\n            decHandleDiv.css({\n                'border-bottom-left-radius': 0,\n                'border-bottom-right-radius': 0,\n                'margin-bottom': 0,\n                'bottom': 'auto',\n                'height': `${halfHeight}em`\n            })\n            incHandleDiv.css({\n                'border-top-left-radius': 0,\n                'border-top-right-radius': 0,\n                'margin-top': 0,\n                'top': 'auto',\n                'height': `${halfHeight}em`\n            })\n        }\n        else {\n            let halfWidth = this.roundEm(width / 2 - 1.5 * Widgets.BEZEL_WIDTH)\n            decHandleDiv.css({\n                'border-top-right-radius': 0,\n                'border-bottom-right-radius': 0,\n                'margin-right': 0,\n                'right': 'auto',\n                'width': `${halfWidth}em`\n            })\n            incHandleDiv.css({\n                'border-top-left-radius': 0,\n                'border-bottom-left-radius': 0,\n                'margin-left': 0,\n                'left': 'auto',\n                'width': `${halfWidth}em`\n            })\n        }\n\n        /* Plus/minus signs */\n\n        decHandleDiv.append(this._makeHandleSign('&minus;'))\n        incHandleDiv.append(this._makeHandleSign('&plus;'))\n\n        decHandleDiv.on('click', this.handleDec.bind(this))\n        incHandleDiv.on('click', this.handleInc.bind(this))\n\n        return [decHandleDiv, incHandleDiv]\n    }\n\n    _makeHandleSign(sign) {\n        let signSpan = $('<span></span>', {class: 'dashboard-inc-dec-buttons-handle-sign'})\n        signSpan.html(sign)\n\n        return signSpan\n    }\n\n    handleDec() {\n        let value = this.getPortValue(this._portId)\n        if (value - this._increment >= this._min) {\n            value -= this._increment\n        }\n\n        this.setPortValue(this._portId, value)\n    }\n\n    handleInc() {\n        let value = this.getPortValue(this._portId)\n        if (value + this._increment <= this._max) {\n            value += this._increment\n        }\n\n        this.setPortValue(this._portId, value)\n    }\n\n    configToJSON() {\n        return {\n            portId: this._portId,\n            min: this._min,\n            max: this._max,\n            increment: this._increment,\n            decColor: this._decColor,\n            incColor: this._incColor\n        }\n    }\n\n    configFromJSON(json) {\n        if (json.portId) {\n            this._portId = json.portId\n        }\n        if (json.min != null) {\n            this._min = json.min\n        }\n        if (json.max != null) {\n            this._max = json.max\n        }\n        if (json.increment != null) {\n            this._increment = json.increment\n        }\n        if (json.decColor != null) {\n            this._decColor = json.decColor\n        }\n        if (json.incColor != null) {\n            this._incColor = json.incColor\n        }\n    }\n\n}\n\nWidgets.register(IncDecButtons)\n\n\nexport default IncDecButtons\n"],"sourceRoot":""}