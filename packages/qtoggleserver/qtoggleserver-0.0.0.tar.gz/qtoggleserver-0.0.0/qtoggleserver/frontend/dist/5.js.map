{"version":3,"sources":["webpack:///./js/dashboard/widgets/all-widgets/charts/base-chart-widget.js","webpack:///./js/dashboard/widgets/all-widgets/charts/pie-chart.js"],"names":["BaseChartConfigForm","WidgetConfigForm","BaseChartWidget","_chartContainer","widgetCall","width","height","this","$","class","css","makeChart","div","widget","constructor","CHART_TYPE","args","apply","makeChartOptions","cellWidth","getCellWidth","scalingFactor","getEmSize","Widgets","padding","makePadding","showTooltips","extraChartOptions","layout","top","right","bottom","left","Widget","gettext","ConfigForm","fields","TextField","name","label","maxLength","NumericField","description","required","UpDownField","min","max","onChange","value","form","_updatePortFields","portIdFields","getFields","filter","field","getName","match","RegExp","portLabelFields","portColorFields","portFields","data","getUnvalidatedData","lastPortFieldNo","length","ArrayUtils","numPorts","forEach","no","_addPortFields","push","idField","labelField","colorField","bind","_getPortFields","show","hide","multiplierField","getField","unitField","port0LabelField","PortPickerField","separator","port","type","_handlePortSelect","ColorComboField","filterEnabled","addField","portId","getPort","getValue","displayName","display_name","id","setValue","portIds","i","labels","colors","fieldName","unit","PieChart","_ports","color","_unit","_multiplier","every","portInfo","Boolean","enabled","online","multiplier","map","p","json","getPortValue","portValue","d","Math","round","some","getPanel","isActive","showCurrentValue","Colors","Theme","ObjectUtils","legend","unitOfMeasurement","StockIcon","stockName"],"mappings":"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","file":"5.js","sourcesContent":["\nimport $ from '$qui/lib/jquery.module.js'\n\nimport {gettext} from '$qui/base/i18n.js'\n\nimport Widget           from '$app/dashboard/widgets/widget.js'\nimport WidgetConfigForm from '$app/dashboard/widgets/widget-config-form.js'\nimport * as Widgets     from '$app/dashboard/widgets/widgets.js'\n\n\nexport class BaseChartConfigForm extends WidgetConfigForm {\n}\n\n\n/**\n * @alias qtoggle.dashboard.widgets.charts.BaseChartWidget\n * @extends qtoggle.dashboard.widgets.Widget\n */\nexport class BaseChartWidget extends Widget {\n\n    static CHART_TYPE = 'override.me'\n\n    static category = gettext('Charts')\n    static noProgressInteraction = true\n    static vResizable = true\n    static hResizable = true\n    static hasFrame = true\n\n    /**\n     * @constructs\n     */\n    constructor() {\n        super()\n\n        this._chartContainer = null\n        this.widgetCall = null\n    }\n\n    makeContent(width, height) {\n        this._chartContainer = $('<div></div>', {class: 'dashboard-chart-widget-container'})\n        this._chartContainer.css({width: `${width}em`, height: `${height}em`})\n        this.makeChart(this._chartContainer)\n\n        return this._chartContainer\n    }\n\n    makeChart(div) {\n        let widget = div[`${this.constructor.CHART_TYPE}chart`]\n\n        this.widgetCall = function (...args) {\n            return widget.apply(div, args)\n        }\n\n        this.widgetCall(this.makeChartOptions())\n    }\n\n    makeChartOptions() {\n        let cellWidth = this.getCellWidth()\n        let scalingFactor = this.getEmSize() * Widgets.LABEL_FONT_SIZE\n        let padding = this.makePadding()\n\n        return {\n            scalingFactor: scalingFactor,\n            showTooltips: true,\n            extraChartOptions: {\n                layout: {\n                    padding: {\n                        top: padding.top * cellWidth,\n                        right: padding.right * cellWidth,\n                        bottom: padding.bottom * cellWidth,\n                        left: padding.left * cellWidth\n                    }\n                }\n            }\n        }\n    }\n\n    makePadding() {\n        return {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n        }\n    }\n\n}\n","\nimport {gettext}         from '$qui/base/i18n.js'\nimport {ColorComboField} from '$qui/forms/common-fields/common-fields.js'\nimport {NumericField}    from '$qui/forms/common-fields/common-fields.js'\nimport {TextField}       from '$qui/forms/common-fields/common-fields.js'\nimport {UpDownField}     from '$qui/forms/common-fields/common-fields.js'\nimport StockIcon         from '$qui/icons/stock-icon.js'\nimport * as Theme        from '$qui/theme.js'\nimport * as ArrayUtils   from '$qui/utils/array.js'\nimport * as Colors       from '$qui/utils/colors.js'\nimport * as ObjectUtils  from '$qui/utils/object.js'\n\nimport PortPickerField from '$app/dashboard/widgets/port-picker-field.js'\nimport * as Widgets    from '$app/dashboard/widgets/widgets.js'\n\nimport '$app/widgets/pie-chart.js'\n\nimport {BaseChartConfigForm} from './base-chart-widget.js'\nimport {BaseChartWidget}     from './base-chart-widget.js'\n\n\nclass ConfigForm extends BaseChartConfigForm {\n\n    constructor({...args}) {\n        super({\n            fields: [\n                new TextField({\n                    name: 'unit',\n                    label: gettext('Unit'),\n                    maxLength: 16\n                }),\n                new NumericField({\n                    name: 'multiplier',\n                    label: gettext('Multiplier'),\n                    description: gettext('A multiplying factor that brings the port value to the 0..100 range.'),\n                    required: true\n                }),\n                new UpDownField({\n                    name: 'numPorts',\n                    label: gettext('Ports'),\n                    min: 1,\n                    max: 20,\n                    onChange: (value, form) => form._updatePortFields()\n                })\n            ],\n            ...args\n        })\n    }\n\n    onUpdateFromWidget() {\n        this._updatePortFields()\n    }\n\n    _updatePortFields() {\n        let portIdFields =\n                this.getFields().filter(field => field.getName().match(new RegExp('portId\\\\d+')))\n        let portLabelFields =\n                this.getFields().filter(field => field.getName().match(new RegExp('portLabel\\\\d+')))\n        let portColorFields =\n                this.getFields().filter(field => field.getName().match(new RegExp('portColor\\\\d+')))\n\n        let portFields = [...portIdFields, ...portLabelFields, ...portColorFields]\n\n        let data = this.getUnvalidatedData()\n        let lastPortFieldNo = portIdFields.length - 1\n\n        /* Add new needed fields */\n        ArrayUtils.range(lastPortFieldNo + 1, data.numPorts).forEach(function (no) {\n\n            let fields = this._addPortFields(no)\n\n            portFields.push(fields.idField)\n            portFields.push(fields.labelField)\n            portFields.push(fields.colorField)\n\n        }.bind(this))\n\n        /* Show all used fields */\n        ArrayUtils.range(0, data.numPorts).forEach(function (no) {\n\n            let fields = this._getPortFields(no)\n\n            fields.idField.show()\n            fields.labelField.show()\n            fields.colorField.show()\n\n        }.bind(this))\n\n        /* Hide all unused fields */\n        ArrayUtils.range(data.numPorts, lastPortFieldNo + 1).forEach(function (no) {\n\n            let fields = this._getPortFields(no)\n\n            fields.idField.hide()\n            fields.labelField.hide()\n            fields.colorField.hide()\n\n        }.bind(this))\n\n        /* Multiplier field only makes sense when using one single port */\n        /* Unit field only makes sense when using multiple ports */\n        let multiplierField = this.getField('multiplier')\n        let unitField = this.getField('unit')\n        if (data.numPorts > 1) {\n            multiplierField.hide()\n            unitField.show()\n        }\n        else {\n            multiplierField.show()\n            unitField.hide()\n        }\n\n        /* Hide port1 label if only one port is used */\n        let port0LabelField = this._getPortFields(0).labelField\n        if (port0LabelField) {\n            if (data.numPorts > 1) {\n                port0LabelField.show()\n            }\n            else {\n                port0LabelField.hide()\n            }\n        }\n    }\n\n    _addPortFields(no) {\n        let idField = new PortPickerField({\n            name: `portId${no}`,\n            label: `${gettext('Port')} ${no + 1}`,\n            required: true,\n            separator: true,\n            filter: port => port.type === 'number',\n            onChange: (value, form) => form._handlePortSelect(value, no)\n        })\n\n        let labelField = new TextField({\n            name: `portLabel${no}`,\n            label: `${gettext('Label')} ${no + 1}`\n        })\n\n        let colorField = new ColorComboField({\n            name: `portColor${no}`,\n            label: `${gettext('Color')} ${no + 1}`,\n            filterEnabled: true,\n            required: true\n        })\n\n        this.addField(-1, idField)\n        this.addField(-1, labelField)\n        this.addField(-1, colorField)\n\n        return {\n            idField: idField,\n            labelField: labelField,\n            colorField: colorField\n        }\n    }\n\n    _getPortFields(no) {\n        let idField = this.getField(`portId${no}`)\n        let labelField = this.getField(`portLabel${no}`)\n        let colorField = this.getField(`portColor${no}`)\n\n        return {\n            idField: idField,\n            labelField: labelField,\n            colorField: colorField\n        }\n    }\n\n    _handlePortSelect(portId, no) {\n        let port = this.getPort(portId)\n        if (!port) {\n            return\n        }\n\n        let portFields = this._getPortFields(no)\n        let labelField = portFields.labelField\n        if (!labelField) {\n            return\n        }\n\n        if (labelField.getValue()) {\n            return\n        }\n\n        let displayName = port.display_name || port.id\n        labelField.setValue(displayName)\n    }\n\n    fromWidget(widget) {\n        let data = super.fromWidget(widget)\n\n        data.numPorts = data.portIds.length\n        ArrayUtils.range(0, data.numPorts).forEach(function (i) {\n            data[`portId${i}`] = data.portIds[i]\n            data[`portLabel${i}`] = data.labels[i]\n            data[`portColor${i}`] = data.colors[i]\n        })\n\n        return data\n    }\n\n    toWidget(data, widget) {\n        data.portIds = []\n        data.labels = []\n        data.colors = []\n\n        ArrayUtils.range(0, data.numPorts).forEach(function (i) {\n            data.portIds[i] = data[`portId${i}`]\n            data.labels[i] = data[`portLabel${i}`]\n            data.colors[i] = data[`portColor${i}`]\n        })\n\n        super.toWidget(data, widget)\n    }\n\n    fromPort(port, fieldName) {\n        /* We don't want widget label to be updated from any selected port */\n        return {\n            unit: port.unit\n        }\n    }\n\n}\n\n\n/**\n * @alias qtoggle.dashboard.widgets.charts.PieChart\n * @extends qtoggle.dashboard.widgets.charts.BaseChartWidget\n */\nclass PieChart extends BaseChartWidget {\n\n    static CHART_TYPE = 'pie'\n\n    static displayName = gettext('Pie Chart')\n    static typeName = 'PieChart'\n    static icon = new StockIcon({name: 'widget-pie-chart', stockName: 'qtoggle'})\n    static ConfigForm = ConfigForm\n\n\n    /**\n     * @constructs\n     */\n    constructor() {\n        super()\n\n        /* The widget requires at least one port */\n        this._ports = [\n            {portId: null, label: '', color: ''}\n        ]\n\n        this._unit = ''\n        this._multiplier = 100\n    }\n\n    isValid() {\n        return this._ports.every(function (portInfo) {\n\n            let port = this.getPort(portInfo.portId)\n            return Boolean(port && port.enabled && port.online !== false && port.type === 'number')\n\n        }.bind(this))\n    }\n\n    configToJSON() {\n        return {\n            unit: this._unit,\n            multiplier: this._multiplier,\n            portIds: this._ports.map(p => p.portId),\n            labels: this._ports.map(p => p.label),\n            colors: this._ports.map(p => p.color)\n        }\n    }\n\n    configFromJSON(json) {\n        if (json.unit != null) {\n            this._unit = json.unit\n        }\n        if (json.multiplier != null) {\n            this._multiplier = json.multiplier\n        }\n\n        if (json.portIds != null) {\n            this._ports = json.portIds.map(function (portId, i) {\n                return {\n                    portId: portId,\n                    label: json.labels != null ? json.labels[i] : '',\n                    color: json.colors != null ? json.colors[i] : ''\n                }\n            })\n        }\n    }\n\n    showCurrentValue() {\n        let data, labels\n\n        if (this._ports.length > 1) {\n            data = []\n            labels = []\n            this._ports.forEach(function (portInfo) {\n\n                let value = this.getPortValue(portInfo.portId)\n                data.push(value)\n                labels.push(portInfo.label)\n\n            }.bind(this))\n        }\n        else {\n            let portInfo = this._ports[0]\n            let portValue = this.getPortValue(portInfo.portId)\n            if (portValue == null) {\n                return\n            }\n\n            let value = portValue * this._multiplier\n\n            data = [value, 100 - value]\n            labels = []\n        }\n\n        /* Also round values to decent number of decimals */\n        data = data.map(d => Math.round(d * 1e6) / 1e6)\n\n        this.widgetCall('setValue', data)\n        this.widgetCall({labels: labels})\n    }\n\n    onPortValueChange(portId, value) {\n        if (!this._ports.some(p => p.portId === portId)) {\n            return\n        }\n\n        if (!this.getPanel().isActive()) {\n            return\n        }\n\n        this.showCurrentValue()\n    }\n\n    makeChartOptions() {\n        let colors = this._ports.map(p => p.color)\n        if (this._ports.length === 1) {\n            let color = Colors.alpha(Theme.getColor(colors[0]), 0.2)\n            colors.push(color)\n        }\n\n        return ObjectUtils.combine(super.makeChartOptions(), {\n            legend: this._ports.length > 1 ? 'right' : null,\n            unitOfMeasurement: this._ports.length > 1 ? this._unit : '%',\n            colors: colors\n        })\n    }\n\n    makePadding() {\n        return {\n            top: 0.2,\n            right: 0,\n            bottom: 0.2,\n            left: 0\n        }\n    }\n\n}\n\nWidgets.register(PieChart)\n\n\nexport default PieChart\n"],"sourceRoot":""}