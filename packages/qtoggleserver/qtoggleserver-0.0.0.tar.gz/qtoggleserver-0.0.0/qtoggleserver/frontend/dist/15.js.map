{"version":3,"sources":["webpack:///./js/dashboard/widgets/all-widgets/push-buttons/radio-buttons.js"],"names":["ConfigForm","args","fields","PortPickerField","name","label","gettext","required","ColorComboField","filterEnabled","CheckField","onChange","value","form","_updateButtonFields","UpDownField","min","max","this","buttonValueFields","getFields","filter","field","getName","match","RegExp","buttonLabelFields","buttonColorFields","activeColorField","getField","buttonFields","concat","data","getUnvalidatedData","port","getPort","portId","separateColors","hide","show","lastButtonFieldNo","length","ArrayUtils","numButtons","forEach","no","_addButtonFields","push","valueField","labelField","colorField","_getButtonFields","integer","step","NumericField","separator","TextField","addField","widget","values","i","labels","colors","WidgetConfigForm","RadioButtons","_normalColor","_activeColor","DEFAULT_COLOR","_separateColors","_portId","_vertical","_buttons","color","Boolean","enabled","writable","online","type","getPortValue","_showValue","width","height","container","$","class","addClass","css","_getLabelHeight","Widgets","toggleClass","button","index","bezelDiv","_makeBezel","append","labelSpan","_makeLabel","handleDiv","_makeHandleDiv","_getLabelFontSize","text","diameter","Math","background","Theme","borderColor","margin","roundEm","that","pointerUp","Window","off","vibrate","handleRelease","_timeoutHandle","clearTimeout","on","e","handlePress","_timeout","setTimeout","preventDefault","activeColor","getLabel","constructor","hasFrame","setPortValue","normalColor","vertical","map","b","json","setWidth","setHeight","Widget","StockIcon","stockName"],"mappings":"ykFAqBA,IAIMA,E,8BAEF,cAAuB,IAAPC,EAAO,qC,+VAAA,EAEfC,OAAQ,CACJ,IAAIC,IAAgB,CAChBC,KAAM,SACNC,MAAOC,YAAQ,QACfC,UAAU,IAEd,IAAIC,IAAgB,CAChBJ,KAAM,cACNC,MAAOC,YAAQ,gBACfG,eAAe,EACfF,UAAU,IAEd,IAAIC,IAAgB,CAChBJ,KAAM,cACNC,MAAOC,YAAQ,gBACfG,eAAe,EACfF,UAAU,IAEd,IAAIG,IAAW,CACXN,KAAM,iBACNC,MAAOC,YAAQ,mBACfK,SAAU,SAACC,EAAOC,GAAR,OAAiBA,EAAKC,yBAEpC,IAAIJ,IAAW,CACXN,KAAM,WACNC,MAAOC,YAAQ,cAEnB,IAAIS,IAAY,CACZX,KAAM,aACNC,MAAOC,YAAQ,WACfU,IAAK,EACLC,IAAK,GACLN,SAAU,SAACC,EAAOC,GAAR,OAAiBA,EAAKC,2BAGrCb,I,uDAKPiB,KAAKJ,wB,4CAIL,IAAIK,EACID,KAAKE,YAAYC,QAAO,SAAAC,GAAK,OAAIA,EAAMC,UAAUC,MAAM,IAAIC,OAAO,uBACtEC,EACIR,KAAKE,YAAYC,QAAO,SAAAC,GAAK,OAAIA,EAAMC,UAAUC,MAAM,IAAIC,OAAO,uBACtEE,EACIT,KAAKE,YAAYC,QAAO,SAAAC,GAAK,OAAIA,EAAMC,UAAUC,MAAM,IAAIC,OAAO,uBACtEG,EAAmBV,KAAKW,SAAS,eAEjCC,EAAeX,EAAkBY,OAAOL,GAAmBK,OAAOJ,GAElEK,EAAOd,KAAKe,qBACZC,EAAOhB,KAAKiB,QAAQH,EAAKI,QAGzBJ,EAAKK,eACLT,EAAiBU,OAGjBV,EAAiBW,OAGrB,IAAIC,EAAoBd,EAAkBe,OAAS,EAGnDC,IAAiBF,EAAoB,EAAGR,EAAKW,YAAYC,SAAQ,SAAUC,GAEvE,IAAI3C,EAASgB,KAAK4B,iBAAiBD,EAAIX,GAEvCJ,EAAaiB,KAAK7C,EAAO8C,YACzBlB,EAAaiB,KAAK7C,EAAO+C,YACzBnB,EAAaiB,KAAK7C,EAAOgD,cAE1BhC,MAGHwB,IAAiB,EAAGV,EAAKW,YAAYC,SAAQ,SAAUC,GAEnD,IAAI3C,EAASgB,KAAKiC,iBAAiBN,GAEnC3C,EAAO8C,WAAWT,OAClBrC,EAAO+C,WAAWV,OAEdP,EAAKK,eACLnC,EAAOgD,WAAWX,OAGlBrC,EAAOgD,WAAWZ,SAGvBpB,MAGHwB,IAAiBV,EAAKW,WAAYH,EAAoB,GAAGI,SAAQ,SAAUC,GAEvE,IAAI3C,EAASgB,KAAKiC,iBAAiBN,GAEnC3C,EAAO8C,WAAWV,OAClBpC,EAAO+C,WAAWX,OAClBpC,EAAOgD,WAAWZ,SAEnBpB,Q,uCAGU2B,EAAIX,GACjB,IAAIlB,EAAM,KACNC,EAAM,KACNmC,GAAU,EACVC,EAAO,KACPnB,IACAlB,EAAMkB,EAAKlB,IACXC,EAAMiB,EAAKjB,IACXmC,EAAUlB,EAAKkB,QACfC,EAAOnB,EAAKmB,MAGhB,IAAIL,EAAa,IAAIM,IAAa,CAC9BlD,KAAM,cAAF,OAAgByC,GACpBxC,MAAO,GAAF,OAAKC,YAAQ,SAAb,YAAyBuC,EAAK,GACnCtC,UAAU,EACVgD,WAAW,EACXvC,IAAKA,EACLC,IAAKA,EACLmC,QAASA,EACTC,KAAMA,IAGNJ,EAAa,IAAIO,IAAU,CAC3BpD,KAAM,cAAF,OAAgByC,GACpBxC,MAAO,GAAF,OAAKC,YAAQ,SAAb,YAAyBuC,EAAK,KAGnCK,EAAa,IAAI1C,IAAgB,CACjCJ,KAAM,cAAF,OAAgByC,GACpBxC,MAAO,GAAF,OAAKC,YAAQ,SAAb,YAAyBuC,EAAK,GACnCpC,eAAe,EACfF,UAAU,IAOd,OAJAW,KAAKuC,UAAU,EAAGT,GAClB9B,KAAKuC,UAAU,EAAGR,GAClB/B,KAAKuC,UAAU,EAAGP,GAEX,CACHF,WAAYA,EACZC,WAAYA,EACZC,WAAYA,K,uCAIHL,GAKb,MAAO,CACHG,WALa9B,KAAKW,SAAL,qBAA4BgB,IAMzCI,WALa/B,KAAKW,SAAL,qBAA4BgB,IAMzCK,WALahC,KAAKW,SAAL,qBAA4BgB,O,iCAStCa,GACP,IAAI1B,EAAO,EAAH,4CAAoB0B,GAS5B,OAPA1B,EAAKW,WAAaX,EAAK2B,OAAOlB,OAC9BC,IAAiB,EAAGV,EAAKW,YAAYC,SAAQ,SAAUgB,GACnD5B,EAAK,cAAD,OAAe4B,IAAO5B,EAAK2B,OAAOC,GACtC5B,EAAK,cAAD,OAAe4B,IAAO5B,EAAK6B,OAAOD,GACtC5B,EAAK,cAAD,OAAe4B,IAAO5B,EAAK8B,OAAOF,MAGnC5B,I,+BAGFA,EAAM0B,GACX1B,EAAK2B,OAAS,GACd3B,EAAK6B,OAAS,GACd7B,EAAK8B,OAAS,GAEdpB,IAAiB,EAAGV,EAAKW,YAAYC,SAAQ,SAAUgB,GACnD5B,EAAK2B,OAAOC,GAAK5B,EAAK,cAAD,OAAe4B,IACpC5B,EAAK6B,OAAOD,GAAK5B,EAAK,cAAD,OAAe4B,IACpC5B,EAAK8B,OAAOF,GAAK5B,EAAK,cAAD,OAAe4B,OAGxC,4CAAe5B,EAAM0B,O,GAjMJK,KA2MnBC,E,8BAcF,aAAc,wBACV,gBAEKC,aAAe,cACpB,EAAKC,aAAeC,IACpB,EAAKC,iBAAkB,EACvB,EAAKC,QAAU,GACf,EAAKC,WAAY,EAGjB,EAAKC,SAAW,CACZ,CAAC3D,MAAO,EAAGP,MAAO,GAAImE,MAAO,IAAK,CAAC5D,MAAO,EAAGP,MAAO,GAAImE,MAAO,KAXzD,E,4CAgBV,IAAKtD,KAAKmD,QACN,OAAO,EAGX,IAAInC,EAAOhB,KAAKiB,QAAQjB,KAAKmD,SAE7B,OAAOI,QAAQvC,GAAQA,EAAKwC,SAAWxC,EAAKyC,WAA4B,IAAhBzC,EAAK0C,QAAkC,WAAd1C,EAAK2C,Q,yCAItF,IAAIjE,EAAQM,KAAK4D,aAAa5D,KAAKmD,SACtB,MAATzD,GAIJM,KAAK6D,WAAWnE,K,kCAGRoE,EAAOC,GACf,IAAIC,EAAYC,YAAE,cAAe,CAACC,MAAO,sCAwBzC,OAvBIlE,KAAKoD,UACLY,EAAUG,SAAS,aAGnBH,EAAUG,SAAS,cACnBH,EAAUI,IAAI,aAAd,UAA+BpE,KAAKqE,kBAAoBC,IAAxD,QAGJN,EAAUO,YAAY,kBAAmBvE,KAAKkD,iBAE9ClD,KAAKqD,SAAS3B,SAAQ,SAAU8C,EAAQC,GAEpCD,EAAOE,SAAW1E,KAAK2E,WAAWb,EAAOC,GACzCC,EAAUY,OAAOJ,EAAOE,UAExBF,EAAOK,UAAY7E,KAAK8E,WAAWL,GACnCD,EAAOE,SAASE,OAAOJ,EAAOK,WAE9BL,EAAOO,UAAY/E,KAAKgF,eAAeP,GACvCD,EAAOE,SAASE,OAAOJ,EAAOO,aAE/B/E,MAEIgE,I,iCAGAS,GACP,IAAII,EAAYZ,YAAE,gBAAiB,CAACC,MAAO,kCAO3C,OANAW,EAAUT,IAAI,CACV,sBAAgBpE,KAAKiF,oBAArB,MACA,eAAYjF,KAAKqE,kBAAoBrE,KAAKiF,oBAA1C,QAEJJ,EAAUK,KAAKlF,KAAKqD,SAASoB,GAAOtF,OAE7B0F,I,iCAIAf,EAAOC,GACd,IAAIoB,EAAWC,KAAKtF,IAAIgE,EAAOC,GAAU/D,KAAKqE,kBAAoB,EAAIC,IAElEI,EAAWT,YAAE,cAAe,CAACC,MAAO,gCAMxC,OALAQ,EAASN,IAAI,CACTN,MAAO,GAAF,OAAKqB,EAAL,MACLpB,OAAQ,GAAF,OAAKoB,EAAL,QAGHT,I,qCAGID,GACX,IAAIM,EAAYd,YAAE,cAAe,CAACC,MAAO,iDACzCa,EAAUX,IAAI,CACViB,WAAYC,IAAetF,KAAK+C,cAChCwC,YAAaD,IAAetF,KAAKkD,gBAAkBlD,KAAKqD,SAASoB,GAAOnB,MAAQtD,KAAKgD,cACrFwC,OAAQ,GAAF,OAAKxF,KAAKyF,QAAQnB,KAAlB,QAGV,IAAIoB,EAAO1F,KAEX,SAAS2F,IACLC,IAAaC,IAAI,uCAAwCF,GAEzDD,EAAKI,UACLJ,EAAKK,cAActB,GAEfiB,EAAKM,iBACLC,aAAaP,EAAKM,gBAClBN,EAAKM,eAAiB,MAqB9B,OAjBAjB,EAAUmB,GAAG,eAAe,SAAUC,GAClCP,IAAaM,GAAG,uCAAwCP,GAExDD,EAAK7B,WAAW6B,EAAKrC,SAASoB,GAAO/E,OACrCgG,EAAKI,UACLJ,EAAKU,YAAY3B,GAEbiB,EAAKW,WACLX,EAAKM,eAAiBM,YAAW,WAC7BZ,EAAKM,eAAiB,KACtBL,MACDD,EAAKW,WAGZF,EAAEI,oBAGCxB,I,iCAGArF,GACPM,KAAKqD,SAAS3B,SAAQ,SAAU8C,GAC5B,IAAIgC,EAAcxG,KAAKkD,gBAAkBsB,EAAOlB,MAAQtD,KAAKgD,aAEzDwB,EAAO9E,QAAUA,GACjB8E,EAAOO,UAAUX,IAAI,aAAckB,IAAekB,IAClDhC,EAAOO,UAAUX,IAAI,eAAgB,OAGrCI,EAAOO,UAAUX,IAAI,aAAckB,IAAetF,KAAK+C,eACvDyB,EAAOO,UAAUX,IAAI,eAAgB,OAE1CpE,Q,wCAIH,OAAIA,KAAKyG,WA7WU,IAiXRzG,KAAK0G,YAAYC,SAAWrC,IAAkCA,M,0CAKzE,OAAItE,KAAKyG,WArXa,GAyXXnC,M,kCAIHG,GACRzE,KAAK4G,aAAa5G,KAAKmD,QAASnD,KAAKqD,SAASoB,GAAO/E,S,oCAG3C+E,M,qCAIV,MAAO,CACHoC,YAAa7G,KAAK+C,aAClByD,YAAaxG,KAAKgD,aAClB7B,eAAgBnB,KAAKkD,gBACrBhC,OAAQlB,KAAKmD,QACb2D,SAAU9G,KAAKoD,UACfX,OAAQzC,KAAKqD,SAAS0D,KAAI,SAAAC,GAAC,OAAIA,EAAEtH,SACjCiD,OAAQ3C,KAAKqD,SAAS0D,KAAI,SAAAC,GAAC,OAAIA,EAAE7H,SACjCyD,OAAQ5C,KAAKqD,SAAS0D,KAAI,SAAAC,GAAC,OAAIA,EAAE1D,Y,qCAI1B2D,GACPA,EAAKJ,cACL7G,KAAK+C,aAAekE,EAAKJ,aAEzBI,EAAKT,cACLxG,KAAKgD,aAAeiE,EAAKT,aAEF,MAAvBS,EAAK9F,iBACLnB,KAAKkD,gBAAkB+D,EAAK9F,gBAE5B8F,EAAK/F,SACLlB,KAAKmD,QAAU8D,EAAK/F,QAEH,MAAjB+F,EAAKH,WACL9G,KAAKoD,UAAY6D,EAAKH,UAGP,MAAfG,EAAKxE,SACLzC,KAAKqD,SAAW4D,EAAKxE,OAAOsE,KAAI,SAAUrH,EAAOgD,GAC7C,MAAO,CACHhD,MAAOA,EACPP,MAAsB,MAAf8H,EAAKtE,OAAiBsE,EAAKtE,OAAOD,GAAK,GAC9CY,MAAsB,MAAf2D,EAAKrE,OAAiBqE,EAAKrE,OAAOF,GAAK,OAIlD1C,KAAKoD,WACLpD,KAAKkH,SAAS,GACdlH,KAAKmH,UAAUF,EAAKxE,OAAOlB,UAG3BvB,KAAKkH,SAASD,EAAKxE,OAAOlB,QAC1BvB,KAAKmH,UAAU,O,wCAKTjG,EAAQxB,GAClBwB,IAAWlB,KAAKmD,SAIpBnD,KAAK6D,WAAWnE,O,GA7OG0H,K,EAArBtE,E,WAEgB1D,YAAQ,iB,EAFxB0D,E,cAGmB1D,YAAQ,kB,EAH3B0D,E,WAIgB,gB,EAJhBA,E,OAKY,IAAIuE,IAAU,CAACnI,KAAM,eAAgBoI,UAAW,a,EAL5DxE,E,aAMkBhE,G,EANlBgE,E,cAOkB,G,EAPlBA,E,cAQkB,GA0OxBwB,IAAiBxB,GAGFA","file":"15.js","sourcesContent":["\nimport $ from '$qui/lib/jquery.module.js'\n\nimport {gettext}         from '$qui/base/i18n.js'\nimport {CheckField}      from '$qui/forms/common-fields/common-fields.js'\nimport {ColorComboField} from '$qui/forms/common-fields/common-fields.js'\nimport {NumericField}    from '$qui/forms/common-fields/common-fields.js'\nimport {TextField}       from '$qui/forms/common-fields/common-fields.js'\nimport {UpDownField}     from '$qui/forms/common-fields/common-fields.js'\nimport StockIcon         from '$qui/icons/stock-icon.js'\nimport * as Theme        from '$qui/theme.js'\nimport * as ArrayUtils   from '$qui/utils/array.js'\nimport * as Window       from '$qui/window.js'\n\nimport PortPickerField  from '$app/dashboard/widgets/port-picker-field.js'\nimport Widget           from '$app/dashboard/widgets/widget.js'\nimport {DEFAULT_COLOR}  from '$app/dashboard/widgets/widget.js'\nimport WidgetConfigForm from '$app/dashboard/widgets/widget-config-form.js'\nimport * as Widgets     from '$app/dashboard/widgets/widgets.js'\n\n\nconst SMALL_LABEL_HEIGHT = 0.15 /* em */\nconst SMALL_LABEL_FONT_SIZE = 0.1 /* em */\n\n\nclass ConfigForm extends WidgetConfigForm {\n\n    constructor({...args}) {\n        super({\n            fields: [\n                new PortPickerField({\n                    name: 'portId',\n                    label: gettext('Port'),\n                    required: true\n                }),\n                new ColorComboField({\n                    name: 'normalColor',\n                    label: gettext('Normal Color'),\n                    filterEnabled: true,\n                    required: true\n                }),\n                new ColorComboField({\n                    name: 'activeColor',\n                    label: gettext('Active Color'),\n                    filterEnabled: true,\n                    required: true\n                }),\n                new CheckField({\n                    name: 'separateColors',\n                    label: gettext('Separate Colors'),\n                    onChange: (value, form) => form._updateButtonFields()\n                }),\n                new CheckField({\n                    name: 'vertical',\n                    label: gettext('Vertical')\n                }),\n                new UpDownField({\n                    name: 'numButtons',\n                    label: gettext('Buttons'),\n                    min: 2,\n                    max: 20,\n                    onChange: (value, form) => form._updateButtonFields()\n                })\n            ],\n            ...args\n        })\n    }\n\n    onUpdateFromWidget() {\n        this._updateButtonFields()\n    }\n\n    _updateButtonFields() {\n        let buttonValueFields =\n                this.getFields().filter(field => field.getName().match(new RegExp('buttonValue\\\\d+')))\n        let buttonLabelFields =\n                this.getFields().filter(field => field.getName().match(new RegExp('buttonLabel\\\\d+')))\n        let buttonColorFields =\n                this.getFields().filter(field => field.getName().match(new RegExp('buttonColor\\\\d+')))\n        let activeColorField = this.getField('activeColor')\n\n        let buttonFields = buttonValueFields.concat(buttonLabelFields).concat(buttonColorFields)\n\n        let data = this.getUnvalidatedData()\n        let port = this.getPort(data.portId)\n\n        /* Show/hide active color field */\n        if (data.separateColors) {\n            activeColorField.hide()\n        }\n        else {\n            activeColorField.show()\n        }\n\n        let lastButtonFieldNo = buttonLabelFields.length - 1\n\n        /* Add new needed fields */\n        ArrayUtils.range(lastButtonFieldNo + 1, data.numButtons).forEach(function (no) {\n\n            let fields = this._addButtonFields(no, port)\n\n            buttonFields.push(fields.valueField)\n            buttonFields.push(fields.labelField)\n            buttonFields.push(fields.colorField)\n\n        }, this)\n\n        /* Show all used fields */\n        ArrayUtils.range(0, data.numButtons).forEach(function (no) {\n\n            let fields = this._getButtonFields(no)\n\n            fields.valueField.show()\n            fields.labelField.show()\n\n            if (data.separateColors) {\n                fields.colorField.show()\n            }\n            else {\n                fields.colorField.hide()\n            }\n\n        }, this)\n\n        /* Hide all unused fields */\n        ArrayUtils.range(data.numButtons, lastButtonFieldNo + 1).forEach(function (no) {\n\n            let fields = this._getButtonFields(no)\n\n            fields.valueField.hide()\n            fields.labelField.hide()\n            fields.colorField.hide()\n\n        }, this)\n    }\n\n    _addButtonFields(no, port) {\n        let min = null\n        let max = null\n        let integer = false\n        let step = null\n        if (port) {\n            min = port.min\n            max = port.max\n            integer = port.integer\n            step = port.step\n        }\n\n        let valueField = new NumericField({\n            name: `buttonValue${no}`,\n            label: `${gettext('Value')} ${no + 1}`,\n            required: true,\n            separator: true,\n            min: min,\n            max: max,\n            integer: integer,\n            step: step\n        })\n\n        let labelField = new TextField({\n            name: `buttonLabel${no}`,\n            label: `${gettext('Label')} ${no + 1}`\n        })\n\n        let colorField = new ColorComboField({\n            name: `buttonColor${no}`,\n            label: `${gettext('Color')} ${no + 1}`,\n            filterEnabled: true,\n            required: true\n        })\n\n        this.addField(-1, valueField)\n        this.addField(-1, labelField)\n        this.addField(-1, colorField)\n\n        return {\n            valueField: valueField,\n            labelField: labelField,\n            colorField: colorField\n        }\n    }\n\n    _getButtonFields(no) {\n        let valueField = this.getField(`buttonValue${no}`)\n        let labelField = this.getField(`buttonLabel${no}`)\n        let colorField = this.getField(`buttonColor${no}`)\n\n        return {\n            valueField: valueField,\n            labelField: labelField,\n            colorField: colorField\n        }\n    }\n\n    fromWidget(widget) {\n        let data = super.fromWidget(widget)\n\n        data.numButtons = data.values.length\n        ArrayUtils.range(0, data.numButtons).forEach(function (i) {\n            data[`buttonValue${i}`] = data.values[i]\n            data[`buttonLabel${i}`] = data.labels[i]\n            data[`buttonColor${i}`] = data.colors[i]\n        })\n\n        return data\n    }\n\n    toWidget(data, widget) {\n        data.values = []\n        data.labels = []\n        data.colors = []\n\n        ArrayUtils.range(0, data.numButtons).forEach(function (i) {\n            data.values[i] = data[`buttonValue${i}`]\n            data.labels[i] = data[`buttonLabel${i}`]\n            data.colors[i] = data[`buttonColor${i}`]\n        })\n\n        super.toWidget(data, widget)\n    }\n\n}\n\n\n/**\n * @alias qtoggle.dashboard.widgets.pushbuttons.RadioButtons\n * @extends qtoggle.dashboard.widgets.Widget\n */\nclass RadioButtons extends Widget {\n\n    static category = gettext('Push Buttons')\n    static displayName = gettext('Radio Buttons')\n    static typeName = 'RadioButtons'\n    static icon = new StockIcon({name: 'widget-radio', stockName: 'qtoggle'})\n    static ConfigForm = ConfigForm\n    static hResizable = false\n    static vResizable = false\n\n\n    /**\n     * @constructs\n     */\n    constructor() {\n        super()\n\n        this._normalColor = '@gray-color'\n        this._activeColor = DEFAULT_COLOR\n        this._separateColors = false\n        this._portId = ''\n        this._vertical = false\n\n        /* The radio buttons widget requires at least two buttons */\n        this._buttons = [\n            {value: 0, label: '', color: ''}, {value: 0, label: '', color: ''}\n        ]\n    }\n\n    isValid() {\n        if (!this._portId) {\n            return false\n        }\n\n        let port = this.getPort(this._portId)\n\n        return Boolean(port && port.enabled && port.writable && port.online !== false && port.type === 'number')\n    }\n\n    showCurrentValue() {\n        let value = this.getPortValue(this._portId)\n        if (value == null) {\n            return\n        }\n\n        this._showValue(value)\n    }\n\n    makeContent(width, height) {\n        let container = $('<div></div>', {class: 'dashboard-radio-buttons-container'})\n        if (this._vertical) {\n            container.addClass('vertical')\n        }\n        else {\n            container.addClass('horizontal')\n            container.css('margin-top', `${this._getLabelHeight() + Widgets.CELL_PADDING}em`)\n        }\n\n        container.toggleClass('separate-colors', this._separateColors)\n\n        this._buttons.forEach(function (button, index) {\n\n            button.bezelDiv = this._makeBezel(width, height)\n            container.append(button.bezelDiv)\n\n            button.labelSpan = this._makeLabel(index)\n            button.bezelDiv.append(button.labelSpan)\n\n            button.handleDiv = this._makeHandleDiv(index)\n            button.bezelDiv.append(button.handleDiv)\n\n        }, this)\n\n        return container\n    }\n\n    _makeLabel(index) {\n        let labelSpan = $('<span></span>', {class: 'dashboard-radio-buttons-label'})\n        labelSpan.css({\n            'font-size': `${this._getLabelFontSize()}em`,\n            'top': `${-(this._getLabelHeight() / this._getLabelFontSize())}em`\n        })\n        labelSpan.text(this._buttons[index].label)\n\n        return labelSpan\n    }\n\n\n    _makeBezel(width, height) {\n        let diameter = Math.min(width, height) - this._getLabelHeight() - 2 * Widgets.CELL_PADDING\n\n        let bezelDiv = $('<div></div>', {class: 'dashboard-push-button-bezel'})\n        bezelDiv.css({\n            width: `${diameter}em`,\n            height: `${diameter}em`\n        })\n\n        return bezelDiv\n    }\n\n    _makeHandleDiv(index) {\n        let handleDiv = $('<div></div>', {class: 'qui-base-button dashboard-push-button-handle'})\n        handleDiv.css({\n            background: Theme.getColor(this._normalColor),\n            borderColor: Theme.getColor(this._separateColors ? this._buttons[index].color : this._activeColor),\n            margin: `${this.roundEm(Widgets.BEZEL_WIDTH)}em`\n        })\n\n        let that = this\n\n        function pointerUp() {\n            Window.$body.off('pointerup pointercancel pointerleave', pointerUp)\n\n            that.vibrate()\n            that.handleRelease(index)\n\n            if (that._timeoutHandle) {\n                clearTimeout(that._timeoutHandle)\n                that._timeoutHandle = null\n            }\n        }\n\n        handleDiv.on('pointerdown', function (e) {\n            Window.$body.on('pointerup pointercancel pointerleave', pointerUp)\n\n            that._showValue(that._buttons[index].value)\n            that.vibrate()\n            that.handlePress(index)\n\n            if (that._timeout) {\n                that._timeoutHandle = setTimeout(function () {\n                    that._timeoutHandle = null\n                    pointerUp()\n                }, that._timeout)\n            }\n\n            e.preventDefault()\n        })\n\n        return handleDiv\n    }\n\n    _showValue(value) {\n        this._buttons.forEach(function (button) {\n            let activeColor = this._separateColors ? button.color : this._activeColor\n\n            if (button.value === value) {\n                button.handleDiv.css('background', Theme.getColor(activeColor))\n                button.handleDiv.css('border-width', '0')\n            }\n            else {\n                button.handleDiv.css('background', Theme.getColor(this._normalColor))\n                button.handleDiv.css('border-width', '')\n            }\n        }, this)\n    }\n\n    _getLabelHeight() {\n        if (this.getLabel()) {\n            return SMALL_LABEL_HEIGHT\n        }\n        else {\n            return this.constructor.hasFrame ? Widgets.LABEL_HEIGHT_WITH_FRAME : Widgets.LABEL_HEIGHT\n        }\n    }\n\n    _getLabelFontSize() {\n        if (this.getLabel()) {\n            return SMALL_LABEL_FONT_SIZE\n        }\n        else {\n            return Widgets.LABEL_FONT_SIZE\n        }\n    }\n\n    handlePress(index) {\n        this.setPortValue(this._portId, this._buttons[index].value)\n    }\n\n    handleRelease(index) {\n    }\n\n    configToJSON() {\n        return {\n            normalColor: this._normalColor,\n            activeColor: this._activeColor,\n            separateColors: this._separateColors,\n            portId: this._portId,\n            vertical: this._vertical,\n            values: this._buttons.map(b => b.value),\n            labels: this._buttons.map(b => b.label),\n            colors: this._buttons.map(b => b.color)\n        }\n    }\n\n    configFromJSON(json) {\n        if (json.normalColor) {\n            this._normalColor = json.normalColor\n        }\n        if (json.activeColor) {\n            this._activeColor = json.activeColor\n        }\n        if (json.separateColors != null) {\n            this._separateColors = json.separateColors\n        }\n        if (json.portId) {\n            this._portId = json.portId\n        }\n        if (json.vertical != null) {\n            this._vertical = json.vertical\n        }\n\n        if (json.values != null) {\n            this._buttons = json.values.map(function (value, i) {\n                return {\n                    value: value,\n                    label: json.labels != null ? json.labels[i] : '',\n                    color: json.colors != null ? json.colors[i] : ''\n                }\n            })\n\n            if (this._vertical) {\n                this.setWidth(1)\n                this.setHeight(json.values.length)\n            }\n            else {\n                this.setWidth(json.values.length)\n                this.setHeight(1)\n            }\n        }\n    }\n\n    onPortValueChange(portId, value) {\n        if (portId !== this._portId) {\n            return\n        }\n\n        this._showValue(value)\n    }\n\n}\n\nWidgets.register(RadioButtons)\n\n\nexport default RadioButtons\n"],"sourceRoot":""}