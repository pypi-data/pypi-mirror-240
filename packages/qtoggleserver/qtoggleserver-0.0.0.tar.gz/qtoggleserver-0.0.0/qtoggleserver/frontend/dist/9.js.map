{"version":3,"sources":["webpack:///./js/dashboard/widgets/all-widgets/displays/on-off-indicator.js"],"names":["ConfigForm","args","fields","ColorComboField","name","filterEnabled","label","gettext","required","PortPickerField","onChange","value","form","_showHidePortTypeFields","CheckField","NumericField","data","this","getUnvalidatedData","port","getPort","portId","isBoolean","type","booleanFieldNames","numberFieldNames","forEach","getField","hide","show","WidgetConfigForm","OnOffIndicator","_color","DEFAULT_COLOR","_portId","_inverted","_offValue","_onValue","_bezelDiv","_lightDiv","Boolean","enabled","online","getPortValue","_showValue","_isBoolean","_showOn","_showOff","width","height","container","$","class","_makeBezel","css","Widgets","append","_makeLightDiv","diameter","Math","min","marginTop","bezelDiv","lightDiv","background","Theme","margin","roundEm","getContentElement","addClass","removeClass","color","inverted","offValue","onValue","json","Widget","StockIcon","stockName"],"mappings":"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","file":"9.js","sourcesContent":["\nimport $ from '$qui/lib/jquery.module.js'\n\nimport {gettext}         from '$qui/base/i18n.js'\nimport {CheckField}      from '$qui/forms/common-fields/common-fields.js'\nimport {ColorComboField} from '$qui/forms/common-fields/common-fields.js'\nimport {NumericField}    from '$qui/forms/common-fields/common-fields.js'\nimport StockIcon         from '$qui/icons/stock-icon.js'\nimport * as Theme        from '$qui/theme.js'\n\nimport PortPickerField  from '$app/dashboard/widgets/port-picker-field.js'\nimport Widget           from '$app/dashboard/widgets/widget.js'\nimport {DEFAULT_COLOR}  from '$app/dashboard/widgets/widget.js'\nimport WidgetConfigForm from '$app/dashboard/widgets/widget-config-form.js'\nimport * as Widgets     from '$app/dashboard/widgets/widgets.js'\n\n\nclass ConfigForm extends WidgetConfigForm {\n\n    constructor({...args}) {\n        super({\n            fields: [\n                new ColorComboField({\n                    name: 'color',\n                    filterEnabled: true,\n                    label: gettext('Color'),\n                    required: true\n                }),\n                new PortPickerField({\n                    name: 'portId',\n                    label: gettext('Port'),\n                    required: true,\n                    onChange: (value, form) => form._showHidePortTypeFields()\n                }),\n                new CheckField({\n                    name: 'inverted',\n                    label: gettext('Inverted Logic')\n                }),\n                new NumericField({\n                    name: 'offValue',\n                    label: gettext('Off Value')\n                }),\n                new NumericField({\n                    name: 'onValue',\n                    label: gettext('On Value')\n                })\n            ],\n            ...args\n        })\n    }\n\n    _showHidePortTypeFields() {\n        let data = this.getUnvalidatedData()\n        let port = this.getPort(data.portId)\n        let isBoolean = true\n        if (port && port.type === 'number') {\n            isBoolean = false\n        }\n\n        let booleanFieldNames = ['inverted']\n        let numberFieldNames = ['offValue', 'onValue']\n\n        if (isBoolean) {\n            numberFieldNames.forEach(function (name) {\n                this.getField(name).hide()\n            }, this)\n            booleanFieldNames.forEach(function (name) {\n                this.getField(name).show()\n            }, this)\n        }\n        else {\n            booleanFieldNames.forEach(function (name) {\n                this.getField(name).hide()\n            }, this)\n            numberFieldNames.forEach(function (name) {\n                this.getField(name).show()\n            }, this)\n        }\n    }\n\n    onUpdateFromWidget() {\n        this._showHidePortTypeFields()\n    }\n\n}\n\n\n/**\n * @alias qtoggle.dashboard.widgets.displays.OnOffIndicator\n * @extends qtoggle.dashboard.widgets.Widget\n */\nclass OnOffIndicator extends Widget {\n\n    static category = gettext('Displays')\n    static displayName = gettext('On/Off Indicator')\n    static typeName = 'OnOffIndicator'\n    static icon = new StockIcon({name: 'widget-on-off-indicator', stockName: 'qtoggle'})\n    static ConfigForm = ConfigForm\n    static vResizable = true\n    static hResizable = true\n\n\n    /**\n     * @constructs\n     */\n    constructor() {\n        super()\n\n        this._color = DEFAULT_COLOR\n        this._portId = ''\n        this._inverted = false\n        this._offValue = 0\n        this._onValue = 1\n\n        this._bezelDiv = null\n        this._lightDiv = null\n    }\n\n    isValid() {\n        if (!this._portId) {\n            return false\n        }\n\n        let port = this.getPort(this._portId)\n\n        return Boolean(port && port.enabled && port.online !== false)\n    }\n\n    showCurrentValue() {\n        let value = this.getPortValue(this._portId)\n        if (value == null) {\n            return\n        }\n\n        this._showValue(value)\n    }\n\n    onPortValueChange(portId, value) {\n        if (portId !== this._portId) {\n            return\n        }\n\n        this._showValue(value)\n    }\n\n    _showValue(value) {\n        if (this._isBoolean()) {\n            value = this._inverted ? !value : value\n\n            if (value) {\n                this._showOn()\n            }\n            else if (!value) {\n                this._showOff()\n            }\n        }\n        else { /* Number */\n            if ((value === this._onValue) || (value !== this._offValue && this._onValue == null)) {\n                this._showOn()\n            }\n            else if ((value === this._offValue) || (value !== this._onValue && this._offValue == null)) {\n                this._showOff()\n            }\n        }\n    }\n\n    makeContent(width, height) {\n        let container = $('<div></div>', {class: 'dashboard-on-off-indicator-container'})\n\n        this._bezelDiv = this._makeBezel(width, height)\n        container.css('borderWidth', `${Widgets.CELL_PADDING}em`)\n        container.append(this._bezelDiv)\n\n        this._lightDiv = this._makeLightDiv()\n        this._bezelDiv.append(this._lightDiv)\n\n        return container\n    }\n\n    _makeBezel(width, height) {\n        let diameter = Math.min(width, height) / 2\n        let marginTop = diameter / 6\n        let bezelDiv = $('<div></div>', {class: 'dashboard-on-off-indicator-bezel'})\n        bezelDiv.css({\n            'width': `${diameter}em`,\n            'height': `${diameter}em`,\n            'margin-top': `${marginTop}em`\n        })\n\n        return bezelDiv\n    }\n\n    _makeLightDiv() {\n        let lightDiv = $('<div></div>', {class: 'dashboard-on-off-indicator-light'})\n        lightDiv.css({\n            background: Theme.getColor(this._color),\n            margin: `${this.roundEm(Widgets.BEZEL_WIDTH)}em`\n        })\n\n        return lightDiv\n    }\n\n    _showOn() {\n        this.getContentElement().addClass('on')\n        this._lightDiv.css('background', Theme.getColor(this._color))\n    }\n\n    _showOff() {\n        this.getContentElement().removeClass('on')\n        this._lightDiv.css('background', '')\n    }\n\n    _isBoolean() {\n        let port = this.getPort(this._portId)\n        return port && port.type === 'boolean'\n    }\n\n    configToJSON() {\n        return {\n            color: this._color,\n            portId: this._portId,\n            inverted: this._inverted,\n            offValue: this._offValue,\n            onValue: this._onValue\n        }\n    }\n\n    configFromJSON(json) {\n        if (json.color) {\n            this._color = json.color\n        }\n        if (json.portId) {\n            this._portId = json.portId\n        }\n        if (json.inverted != null) {\n            this._inverted = json.inverted\n        }\n        this._offValue = json.offValue\n        this._onValue = json.onValue\n    }\n\n}\n\nWidgets.register(OnOffIndicator)\n\n\nexport default OnOffIndicator\n"],"sourceRoot":""}