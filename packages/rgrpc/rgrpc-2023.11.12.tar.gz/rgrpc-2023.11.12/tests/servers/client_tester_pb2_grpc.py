# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import client_tester_pb2 as client__tester__pb2


class ClientTesterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TestUnaryUnary = channel.unary_unary(
                '/client_tester.ClientTester/TestUnaryUnary',
                request_serializer=client__tester__pb2.TestRequest.SerializeToString,
                response_deserializer=client__tester__pb2.TestResponse.FromString,
                )
        self.TestUnaryStream = channel.unary_stream(
                '/client_tester.ClientTester/TestUnaryStream',
                request_serializer=client__tester__pb2.TestRequest.SerializeToString,
                response_deserializer=client__tester__pb2.TestResponse.FromString,
                )
        self.TestStreamUnary = channel.stream_unary(
                '/client_tester.ClientTester/TestStreamUnary',
                request_serializer=client__tester__pb2.TestRequest.SerializeToString,
                response_deserializer=client__tester__pb2.TestResponse.FromString,
                )
        self.TestStreamStream = channel.stream_stream(
                '/client_tester.ClientTester/TestStreamStream',
                request_serializer=client__tester__pb2.TestRequest.SerializeToString,
                response_deserializer=client__tester__pb2.TestResponse.FromString,
                )


class ClientTesterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def TestUnaryUnary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestUnaryStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestStreamUnary(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestStreamStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClientTesterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TestUnaryUnary': grpc.unary_unary_rpc_method_handler(
                    servicer.TestUnaryUnary,
                    request_deserializer=client__tester__pb2.TestRequest.FromString,
                    response_serializer=client__tester__pb2.TestResponse.SerializeToString,
            ),
            'TestUnaryStream': grpc.unary_stream_rpc_method_handler(
                    servicer.TestUnaryStream,
                    request_deserializer=client__tester__pb2.TestRequest.FromString,
                    response_serializer=client__tester__pb2.TestResponse.SerializeToString,
            ),
            'TestStreamUnary': grpc.stream_unary_rpc_method_handler(
                    servicer.TestStreamUnary,
                    request_deserializer=client__tester__pb2.TestRequest.FromString,
                    response_serializer=client__tester__pb2.TestResponse.SerializeToString,
            ),
            'TestStreamStream': grpc.stream_stream_rpc_method_handler(
                    servicer.TestStreamStream,
                    request_deserializer=client__tester__pb2.TestRequest.FromString,
                    response_serializer=client__tester__pb2.TestResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'client_tester.ClientTester', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ClientTester(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def TestUnaryUnary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/client_tester.ClientTester/TestUnaryUnary',
            client__tester__pb2.TestRequest.SerializeToString,
            client__tester__pb2.TestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestUnaryStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/client_tester.ClientTester/TestUnaryStream',
            client__tester__pb2.TestRequest.SerializeToString,
            client__tester__pb2.TestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestStreamUnary(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/client_tester.ClientTester/TestStreamUnary',
            client__tester__pb2.TestRequest.SerializeToString,
            client__tester__pb2.TestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestStreamStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/client_tester.ClientTester/TestStreamStream',
            client__tester__pb2.TestRequest.SerializeToString,
            client__tester__pb2.TestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
