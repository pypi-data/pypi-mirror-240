[project]
name = "quart-depends"
version = "1.0.1"
description = ''
readme = "README.md"
requires-python = ">=3.9"

keywords = []
authors = [{ name = "Joe Black", email = "me@joeblack.nyc" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = ["fast-depends", "pydantic<=1.10.13", "quart"]

[project.optional-dependencies]
development = [
  "aiosqlite",
  "black",
  "build",
  "coverage[toml]>=6.5",
  "python-dotenv",
  "Flask-SQLAlchemy~=3.0.3",
  "isort",
  "ipython",
  "mypy",
  "pre-commit",
  "pytest",
  "pytest-env",
  "pytest-asyncio",
  "pytest-mock",
  "pep8",
  "redis",
  "ruff",
  "SQLAlchemy[asyncio]~=2.0.7",
  "twine",
]

[project.urls]
Documentation = "https://github.com/joeblackwaslike/quart-depends#readme"
Issues = "https://github.com/joeblackwaslike/quart-depends/issues"
Source = "https://github.com/joeblackwaslike/quart-depends"

[tool.isort]
profile = "wemake"
src_paths = ["src", "tests"]
force_single_line = true
use_parentheses = true
atomic = true
lines_after_imports = 2
line_length = 100
order_by_type = false
known_first_party = ["src", "tests"]

[tool.black]
exclude = '''
/(
    \.git
    \.venv
  | \.mypy_cache
)/
'''
line_length = 100
safe = true


[tool.ruff]
target-version = "py311"
src = ["src"]
line-length = 100
select = [
  "A",
  "ARG",
  "B",
  "C",
  "D",   # pydocstyle
  "DTZ",
  "E",   # pycodestyle
  "EM",
  "F",   # pyflakes
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",  # pyupgrade
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  "B008",
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D105",
  "D106",
  "D107",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "C408",
  "RUF012",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
  "UP007",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]
unsafe-fixes = true

[tool.ruff.pydocstyle]
convention = "google"

# [tool.ruff.isort]
# # src_paths = ["src", "tests"]
# force_single_line = true
# use_parentheses = true
# atomic = true
# lines_after_imports = 2
# line_length = 100
# order_by_type = false
# known-first-party = ["quart_depends"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["src", "tests"]
branch = true
parallel = true
omit = ["src/quart_depends/__about__.py"]

[tool.coverage.paths]
quart_depends = ["src/quart_depends", "*/quart-depends/src/quart_depends"]
tests = ["tests", "*/quart-depends/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
norecursedirs = [".vscode", ".venv", "*.egg-info", ".git", ".pytest_cache"]
addopts = "--showlocals --loop-scope session"
asyncio_mode = "auto"
py311_task = true
env = ["PYTHONHASHSEED=0"]

[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"
