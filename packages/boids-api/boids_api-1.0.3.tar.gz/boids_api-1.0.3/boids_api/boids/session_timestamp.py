# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from boids_api.boids.base_model import Model
import re
from boids_api import util


class SessionTimestamp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tick: int=None, elapsed_time: str=None, delta_time: float=None):
        """SessionTimestamp - a model defined in OpenAPI

        :param tick: The tick of this SessionTimestamp.
        :param elapsed_time: The elapsed_time of this SessionTimestamp.
        :param delta_time: The delta_time of this SessionTimestamp.
        """
        self.openapi_types = {
            'tick': int,
            'elapsed_time': str,
            'delta_time': float
        }

        self.attribute_map = {
            'tick': 'tick',
            'elapsed_time': 'elapsed_time',
            'delta_time': 'delta_time'
        }

        self._tick = tick
        self._elapsed_time = elapsed_time
        self._delta_time = delta_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SessionTimestamp':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SessionTimestamp of this SessionTimestamp.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tick(self):
        """Gets the tick of this SessionTimestamp.


        :return: The tick of this SessionTimestamp.
        :rtype: int
        """
        return self._tick

    @tick.setter
    def tick(self, tick):
        """Sets the tick of this SessionTimestamp.


        :param tick: The tick of this SessionTimestamp.
        :type tick: int
        """
        if tick is None:
            raise ValueError("Invalid value for `tick`, must not be `None`")

        self._tick = tick

    @property
    def elapsed_time(self):
        """Gets the elapsed_time of this SessionTimestamp.


        :return: The elapsed_time of this SessionTimestamp.
        :rtype: str
        """
        return self._elapsed_time

    @elapsed_time.setter
    def elapsed_time(self, elapsed_time):
        """Sets the elapsed_time of this SessionTimestamp.


        :param elapsed_time: The elapsed_time of this SessionTimestamp.
        :type elapsed_time: str
        """
        if elapsed_time is None:
            raise ValueError("Invalid value for `elapsed_time`, must not be `None`")
        if elapsed_time is not None and not re.search(r'\d{1,}:[0-5]\d:[0-5]\d\.\d{3}', elapsed_time):
            raise ValueError("Invalid value for `elapsed_time`, must be a follow pattern or equal to `/\d{1,}:[0-5]\d:[0-5]\d\.\d{3}/`")

        self._elapsed_time = elapsed_time

    @property
    def delta_time(self):
        """Gets the delta_time of this SessionTimestamp.


        :return: The delta_time of this SessionTimestamp.
        :rtype: float
        """
        return self._delta_time

    @delta_time.setter
    def delta_time(self, delta_time):
        """Sets the delta_time of this SessionTimestamp.


        :param delta_time: The delta_time of this SessionTimestamp.
        :type delta_time: float
        """

        self._delta_time = delta_time
