# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from boids_api.boids.base_model import Model
from boids_api.boids.speed_range import SpeedRange
from boids_api import util


class BehaviorConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avoid_walls: bool=True, normalize_velocity: bool=True, view_range: int=None, view_angle: int=None, speed_limits: SpeedRange=None):
        """BehaviorConfiguration - a model defined in OpenAPI

        :param avoid_walls: The avoid_walls of this BehaviorConfiguration.
        :param normalize_velocity: The normalize_velocity of this BehaviorConfiguration.
        :param view_range: The view_range of this BehaviorConfiguration.
        :param view_angle: The view_angle of this BehaviorConfiguration.
        :param speed_limits: The speed_limits of this BehaviorConfiguration.
        """
        self.openapi_types = {
            'avoid_walls': bool,
            'normalize_velocity': bool,
            'view_range': int,
            'view_angle': int,
            'speed_limits': SpeedRange
        }

        self.attribute_map = {
            'avoid_walls': 'avoid_walls',
            'normalize_velocity': 'normalize_velocity',
            'view_range': 'view_range',
            'view_angle': 'view_angle',
            'speed_limits': 'speed_limits'
        }

        self._avoid_walls = avoid_walls
        self._normalize_velocity = normalize_velocity
        self._view_range = view_range
        self._view_angle = view_angle
        self._speed_limits = speed_limits

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BehaviorConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BehaviorConfiguration of this BehaviorConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avoid_walls(self):
        """Gets the avoid_walls of this BehaviorConfiguration.


        :return: The avoid_walls of this BehaviorConfiguration.
        :rtype: bool
        """
        return self._avoid_walls

    @avoid_walls.setter
    def avoid_walls(self, avoid_walls):
        """Sets the avoid_walls of this BehaviorConfiguration.


        :param avoid_walls: The avoid_walls of this BehaviorConfiguration.
        :type avoid_walls: bool
        """

        self._avoid_walls = avoid_walls

    @property
    def normalize_velocity(self):
        """Gets the normalize_velocity of this BehaviorConfiguration.


        :return: The normalize_velocity of this BehaviorConfiguration.
        :rtype: bool
        """
        return self._normalize_velocity

    @normalize_velocity.setter
    def normalize_velocity(self, normalize_velocity):
        """Sets the normalize_velocity of this BehaviorConfiguration.


        :param normalize_velocity: The normalize_velocity of this BehaviorConfiguration.
        :type normalize_velocity: bool
        """

        self._normalize_velocity = normalize_velocity

    @property
    def view_range(self):
        """Gets the view_range of this BehaviorConfiguration.


        :return: The view_range of this BehaviorConfiguration.
        :rtype: int
        """
        return self._view_range

    @view_range.setter
    def view_range(self, view_range):
        """Sets the view_range of this BehaviorConfiguration.


        :param view_range: The view_range of this BehaviorConfiguration.
        :type view_range: int
        """

        self._view_range = view_range

    @property
    def view_angle(self):
        """Gets the view_angle of this BehaviorConfiguration.


        :return: The view_angle of this BehaviorConfiguration.
        :rtype: int
        """
        return self._view_angle

    @view_angle.setter
    def view_angle(self, view_angle):
        """Sets the view_angle of this BehaviorConfiguration.


        :param view_angle: The view_angle of this BehaviorConfiguration.
        :type view_angle: int
        """
        if view_angle is not None and view_angle > 359:
            raise ValueError("Invalid value for `view_angle`, must be a value less than or equal to `359`")
        if view_angle is not None and view_angle < 0:
            raise ValueError("Invalid value for `view_angle`, must be a value greater than or equal to `0`")

        self._view_angle = view_angle

    @property
    def speed_limits(self):
        """Gets the speed_limits of this BehaviorConfiguration.


        :return: The speed_limits of this BehaviorConfiguration.
        :rtype: SpeedRange
        """
        return self._speed_limits

    @speed_limits.setter
    def speed_limits(self, speed_limits):
        """Sets the speed_limits of this BehaviorConfiguration.


        :param speed_limits: The speed_limits of this BehaviorConfiguration.
        :type speed_limits: SpeedRange
        """

        self._speed_limits = speed_limits
