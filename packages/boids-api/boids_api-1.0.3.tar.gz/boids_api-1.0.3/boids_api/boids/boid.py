# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from boids_api.boids.base_model import Model
from boids_api.boids.cartesian_triple import CartesianTriple
from boids_api import util


class Boid(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, uuid: str=None, position: CartesianTriple=None, velocity: CartesianTriple=None, url: str=None):
        """Boid - a model defined in OpenAPI

        :param uuid: The uuid of this Boid.
        :param position: The position of this Boid.
        :param velocity: The velocity of this Boid.
        :param url: The url of this Boid.
        """
        self.openapi_types = {
            'uuid': str,
            'position': CartesianTriple,
            'velocity': CartesianTriple,
            'url': str
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'position': 'position',
            'velocity': 'velocity',
            'url': 'url'
        }

        self._uuid = uuid
        self._position = position
        self._velocity = velocity
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Boid':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Boid of this Boid.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self):
        """Gets the uuid of this Boid.


        :return: The uuid of this Boid.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Boid.


        :param uuid: The uuid of this Boid.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def position(self):
        """Gets the position of this Boid.


        :return: The position of this Boid.
        :rtype: CartesianTriple
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Boid.


        :param position: The position of this Boid.
        :type position: CartesianTriple
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")

        self._position = position

    @property
    def velocity(self):
        """Gets the velocity of this Boid.


        :return: The velocity of this Boid.
        :rtype: CartesianTriple
        """
        return self._velocity

    @velocity.setter
    def velocity(self, velocity):
        """Sets the velocity of this Boid.


        :param velocity: The velocity of this Boid.
        :type velocity: CartesianTriple
        """
        if velocity is None:
            raise ValueError("Invalid value for `velocity`, must not be `None`")

        self._velocity = velocity

    @property
    def url(self):
        """Gets the url of this Boid.


        :return: The url of this Boid.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Boid.


        :param url: The url of this Boid.
        :type url: str
        """

        self._url = url
