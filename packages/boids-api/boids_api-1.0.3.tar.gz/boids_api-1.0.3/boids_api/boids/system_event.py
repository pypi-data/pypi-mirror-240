# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from boids_api.boids.base_model import Model
from boids_api.boids.session_timestamp import SessionTimestamp
from boids_api.boids.system_event_level import SystemEventLevel
from boids_api import util


class SystemEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timestamp: SessionTimestamp=None, level: SystemEventLevel=None, event_type: str=None):
        """SystemEvent - a model defined in OpenAPI

        :param timestamp: The timestamp of this SystemEvent.
        :param level: The level of this SystemEvent.
        :param event_type: The event_type of this SystemEvent.
        """
        self.openapi_types = {
            'timestamp': SessionTimestamp,
            'level': SystemEventLevel,
            'event_type': str
        }

        self.attribute_map = {
            'timestamp': 'timestamp',
            'level': 'level',
            'event_type': 'event_type'
        }

        self._timestamp = timestamp
        self._level = level
        self._event_type = event_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SystemEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SystemEvent of this SystemEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timestamp(self):
        """Gets the timestamp of this SystemEvent.


        :return: The timestamp of this SystemEvent.
        :rtype: SessionTimestamp
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this SystemEvent.


        :param timestamp: The timestamp of this SystemEvent.
        :type timestamp: SessionTimestamp
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def level(self):
        """Gets the level of this SystemEvent.


        :return: The level of this SystemEvent.
        :rtype: SystemEventLevel
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this SystemEvent.


        :param level: The level of this SystemEvent.
        :type level: SystemEventLevel
        """
        if level is None:
            raise ValueError("Invalid value for `level`, must not be `None`")

        self._level = level

    @property
    def event_type(self):
        """Gets the event_type of this SystemEvent.


        :return: The event_type of this SystemEvent.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this SystemEvent.


        :param event_type: The event_type of this SystemEvent.
        :type event_type: str
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")

        self._event_type = event_type
