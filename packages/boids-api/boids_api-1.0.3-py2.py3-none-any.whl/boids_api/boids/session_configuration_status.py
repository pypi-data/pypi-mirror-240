# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from boids_api.boids.base_model import Model
from boids_api.boids.behavior_configuration import BehaviorConfiguration
from boids_api.boids.session_state import SessionState
from boids_api.boids.world_configuration import WorldConfiguration
from boids_api import util


class SessionConfigurationStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, title: str=None, num_boids: int=None, state: SessionState=None, world: WorldConfiguration=None, behavior: BehaviorConfiguration=None, uuid: str=None, url: str=None, next_states: List[SessionState]=None, created: str=None, modified: str=None):
        """SessionConfigurationStatus - a model defined in OpenAPI

        :param title: The title of this SessionConfigurationStatus.
        :param num_boids: The num_boids of this SessionConfigurationStatus.
        :param state: The state of this SessionConfigurationStatus.
        :param world: The world of this SessionConfigurationStatus.
        :param behavior: The behavior of this SessionConfigurationStatus.
        :param uuid: The uuid of this SessionConfigurationStatus.
        :param url: The url of this SessionConfigurationStatus.
        :param next_states: The next_states of this SessionConfigurationStatus.
        :param created: The created of this SessionConfigurationStatus.
        :param modified: The modified of this SessionConfigurationStatus.
        """
        self.openapi_types = {
            'title': str,
            'num_boids': int,
            'state': SessionState,
            'world': WorldConfiguration,
            'behavior': BehaviorConfiguration,
            'uuid': str,
            'url': str,
            'next_states': List[SessionState],
            'created': str,
            'modified': str
        }

        self.attribute_map = {
            'title': 'title',
            'num_boids': 'num_boids',
            'state': 'state',
            'world': 'world',
            'behavior': 'behavior',
            'uuid': 'uuid',
            'url': 'url',
            'next_states': 'next_states',
            'created': 'created',
            'modified': 'modified'
        }

        self._title = title
        self._num_boids = num_boids
        self._state = state
        self._world = world
        self._behavior = behavior
        self._uuid = uuid
        self._url = url
        self._next_states = next_states
        self._created = created
        self._modified = modified

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SessionConfigurationStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SessionConfigurationStatus of this SessionConfigurationStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title(self):
        """Gets the title of this SessionConfigurationStatus.

        Session title

        :return: The title of this SessionConfigurationStatus.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SessionConfigurationStatus.

        Session title

        :param title: The title of this SessionConfigurationStatus.
        :type title: str
        """

        self._title = title

    @property
    def num_boids(self):
        """Gets the num_boids of this SessionConfigurationStatus.


        :return: The num_boids of this SessionConfigurationStatus.
        :rtype: int
        """
        return self._num_boids

    @num_boids.setter
    def num_boids(self, num_boids):
        """Sets the num_boids of this SessionConfigurationStatus.


        :param num_boids: The num_boids of this SessionConfigurationStatus.
        :type num_boids: int
        """

        self._num_boids = num_boids

    @property
    def state(self):
        """Gets the state of this SessionConfigurationStatus.


        :return: The state of this SessionConfigurationStatus.
        :rtype: SessionState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SessionConfigurationStatus.


        :param state: The state of this SessionConfigurationStatus.
        :type state: SessionState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def world(self):
        """Gets the world of this SessionConfigurationStatus.


        :return: The world of this SessionConfigurationStatus.
        :rtype: WorldConfiguration
        """
        return self._world

    @world.setter
    def world(self, world):
        """Sets the world of this SessionConfigurationStatus.


        :param world: The world of this SessionConfigurationStatus.
        :type world: WorldConfiguration
        """

        self._world = world

    @property
    def behavior(self):
        """Gets the behavior of this SessionConfigurationStatus.


        :return: The behavior of this SessionConfigurationStatus.
        :rtype: BehaviorConfiguration
        """
        return self._behavior

    @behavior.setter
    def behavior(self, behavior):
        """Sets the behavior of this SessionConfigurationStatus.


        :param behavior: The behavior of this SessionConfigurationStatus.
        :type behavior: BehaviorConfiguration
        """

        self._behavior = behavior

    @property
    def uuid(self):
        """Gets the uuid of this SessionConfigurationStatus.


        :return: The uuid of this SessionConfigurationStatus.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this SessionConfigurationStatus.


        :param uuid: The uuid of this SessionConfigurationStatus.
        :type uuid: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")

        self._uuid = uuid

    @property
    def url(self):
        """Gets the url of this SessionConfigurationStatus.


        :return: The url of this SessionConfigurationStatus.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SessionConfigurationStatus.


        :param url: The url of this SessionConfigurationStatus.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def next_states(self):
        """Gets the next_states of this SessionConfigurationStatus.


        :return: The next_states of this SessionConfigurationStatus.
        :rtype: List[SessionState]
        """
        return self._next_states

    @next_states.setter
    def next_states(self, next_states):
        """Sets the next_states of this SessionConfigurationStatus.


        :param next_states: The next_states of this SessionConfigurationStatus.
        :type next_states: List[SessionState]
        """
        if next_states is None:
            raise ValueError("Invalid value for `next_states`, must not be `None`")

        self._next_states = next_states

    @property
    def created(self):
        """Gets the created of this SessionConfigurationStatus.


        :return: The created of this SessionConfigurationStatus.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this SessionConfigurationStatus.


        :param created: The created of this SessionConfigurationStatus.
        :type created: str
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this SessionConfigurationStatus.


        :return: The modified of this SessionConfigurationStatus.
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this SessionConfigurationStatus.


        :param modified: The modified of this SessionConfigurationStatus.
        :type modified: str
        """

        self._modified = modified
