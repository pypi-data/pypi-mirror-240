# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from boids_api.boids.base_model import Model
from boids_api.boids.cartesian_triple import CartesianTriple
from boids_api.boids.session_timestamp import SessionTimestamp
from boids_api.boids.system_event import SystemEvent
from boids_api.boids.system_event_level import SystemEventLevel
from boids_api import util


class BoidTelemetryEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timestamp: SessionTimestamp=None, level: SystemEventLevel=None, event_type: str=None, id: str=None, position: CartesianTriple=None, velocity: CartesianTriple=None):
        """BoidTelemetryEvent - a model defined in OpenAPI

        :param timestamp: The timestamp of this BoidTelemetryEvent.
        :param level: The level of this BoidTelemetryEvent.
        :param event_type: The event_type of this BoidTelemetryEvent.
        :param id: The id of this BoidTelemetryEvent.
        :param position: The position of this BoidTelemetryEvent.
        :param velocity: The velocity of this BoidTelemetryEvent.
        """
        self.openapi_types = {
            'timestamp': SessionTimestamp,
            'level': SystemEventLevel,
            'event_type': str,
            'id': str,
            'position': CartesianTriple,
            'velocity': CartesianTriple
        }

        self.attribute_map = {
            'timestamp': 'timestamp',
            'level': 'level',
            'event_type': 'event_type',
            'id': 'id',
            'position': 'position',
            'velocity': 'velocity'
        }

        self._timestamp = timestamp
        self._level = level
        self._event_type = event_type
        self._id = id
        self._position = position
        self._velocity = velocity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BoidTelemetryEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BoidTelemetryEvent of this BoidTelemetryEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timestamp(self):
        """Gets the timestamp of this BoidTelemetryEvent.


        :return: The timestamp of this BoidTelemetryEvent.
        :rtype: SessionTimestamp
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this BoidTelemetryEvent.


        :param timestamp: The timestamp of this BoidTelemetryEvent.
        :type timestamp: SessionTimestamp
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def level(self):
        """Gets the level of this BoidTelemetryEvent.


        :return: The level of this BoidTelemetryEvent.
        :rtype: SystemEventLevel
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this BoidTelemetryEvent.


        :param level: The level of this BoidTelemetryEvent.
        :type level: SystemEventLevel
        """
        if level is None:
            raise ValueError("Invalid value for `level`, must not be `None`")

        self._level = level

    @property
    def event_type(self):
        """Gets the event_type of this BoidTelemetryEvent.


        :return: The event_type of this BoidTelemetryEvent.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this BoidTelemetryEvent.


        :param event_type: The event_type of this BoidTelemetryEvent.
        :type event_type: str
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")

        self._event_type = event_type

    @property
    def id(self):
        """Gets the id of this BoidTelemetryEvent.


        :return: The id of this BoidTelemetryEvent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BoidTelemetryEvent.


        :param id: The id of this BoidTelemetryEvent.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def position(self):
        """Gets the position of this BoidTelemetryEvent.


        :return: The position of this BoidTelemetryEvent.
        :rtype: CartesianTriple
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this BoidTelemetryEvent.


        :param position: The position of this BoidTelemetryEvent.
        :type position: CartesianTriple
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")

        self._position = position

    @property
    def velocity(self):
        """Gets the velocity of this BoidTelemetryEvent.


        :return: The velocity of this BoidTelemetryEvent.
        :rtype: CartesianTriple
        """
        return self._velocity

    @velocity.setter
    def velocity(self, velocity):
        """Sets the velocity of this BoidTelemetryEvent.


        :param velocity: The velocity of this BoidTelemetryEvent.
        :type velocity: CartesianTriple
        """
        if velocity is None:
            raise ValueError("Invalid value for `velocity`, must not be `None`")

        self._velocity = velocity
