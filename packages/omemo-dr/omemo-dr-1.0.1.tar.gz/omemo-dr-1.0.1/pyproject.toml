[build-system]
requires = ["setuptools>=65.0.0"]
build-backend = "setuptools.build_meta"

[project]
name = "omemo-dr"
requires-python = ">=3.10"
description = "OMEMO Double Ratchet"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
  {email = "philipp@hoerist.com"},
  {name = "Philipp Hörist"}
]
classifiers = [
  "Intended Audience :: Developers",
  "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
  "Programming Language :: Python :: 3",
  "Topic :: Security :: Cryptography",
  "Topic :: Software Development :: Libraries :: Python Modules"
]
dependencies = [
  "cryptography",
  "protobuf>=4.21.0",
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
  "ruff>=0.0.267",
  "codespell[toml]>=2.2.4",
  "black>=23.1.0"
]

[tool.setuptools.dynamic]
version = {attr = "omemo_dr.__version__"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"omemo_dr" = ["py.typed"]

[tool.codespell]
skip = "*__pycache__*,build,dist,test,*.egg-info,.git,*.po,*.nsi,*.spec"
ignore-words-list = "claus,pres,ser,trough"

[tool.pyright]
pythonVersion = "3.10"
pythonPlatform = "All"
typeCheckingMode = "strict"

reportUnnecessaryTypeIgnoreComment = "error"
reportPropertyTypeMismatch = "error"
reportMissingModuleSource = "none"

exclude = [
  "**/__pycache__",
  ".git",
  "build",
  "node_modules",
  "src/omemo_dr/protocol/omemo_pb2.py",
  "src/omemo_dr/protocol/whisper_pb2.py",
  "src/omemo_dr/state/storage_pb2.py",
]

[tool.ruff]
line-length = 88

select = [
  "A",      # flake8-builtins
  # "ANN",  # flake8-annotations
  # "ARG",    # flake8-unused-arguments
  "B",      # flake8-bugbear
  "BLE",    # flake8-blind-except
  "C",      # flake8-comprehensions
  "C901",   # mccabe
  # "D",    # pydocstyle
  "E",      # pycodestyle
  # "EM",     # flake8-errmsg
  # "ERA",    # eradicate
  "F",      # pyflakes  
  # "FBT",    # flake8-boolean-trap
  # "I",    # flake8-tidy-imports, isort
  "ICN",    # flake8-import-conventions
  "N",      # pep8-naming
  # "PDV",    # pandas-vet
  "PGH",    # pygrep-hooks
  "PLC",    # pylint
  "PLE",    # pylint
  "PLR",    # pylint
  "PLW",    # pylint
  "Q",      # flake8-quotes
  "RUF",    # Ruff-specific rules
  # "RET",    # flake8-return
  "S",      # flake8-bandit
  "SIM",    # flake8-simplify
  # "T",      # flake8-debugger, flake8-print
  # "TID",    # flake8-tidy-imports
  "UP",     # pyupgrade
  "W",      # pycodestyle
  "YTT",    # flake8-2020
]

ignore = [
  "A002", # Argument `max` is shadowing a python builtin
  "A003", # Class attribute `x` is shadowing a python builtin
  "B007", # Loop control variable `x` not used within loop body
  "B904", # Within an `except` clause, raise exceptions with `raise ... from err`
  "BLE001", # Do not catch blind exception: `Exception`
  "C416", # Unnecessary `list` comprehension (rewrite using `list()`)
  "E501", # Line too long (x > y characters)
  "N802", # Function name `loadSignedPreKeys` should be lowercase
  "N803", # Argument name `signedPreKeyId` should be lowercase
  "N806", # Variable `x` in function should be lowercase
  "N815", # Variable `messageKeys` in class scope should not be mixedCase
  "N818",   # Exception name should be named with an Error suffix
  "PGH003",  # Use specific rule codes when ignoring type issues
  "PLR0913", # Too many arguments to function call (x/y)
  "PLR0915", # Too many statements (57/50)
  "PLR2004", # Magic value used in comparison, consider replacing x with a constant variable
  "RUF001", # AmbiguousUnicodeCharacterString
  "S101",   # Use of `assert` detected
  "S110", # `try`-`except`-`pass` detected, consider logging the exception
  "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
  "S603", # check for execution of untrusted input
  "SIM108", # Use ternary operator
  "SIM110", # Use any()` instead of `for` loop
  "SIM118", # Don’t use .keys()
  "UP004", # Class inherits from `object`
  "UP007",  # Use X | Y for type annotations
  "UP008", # Use `super()` instead of `super(__class__, self)`
  "UP031", # Use format specifiers instead of percent format
  "UP038", # Use `X | Y` in `isinstance` call instead of `(X, Y)`
]

exclude = [
  ".eggs",
  ".git",
  ".ruff_cache",
  ".venv",
  "build",
  "dist",
  "venv",
  "*.pyi",
  "*pb2.py",
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
target-version = "py310"

[tool.ruff.mccabe]
max-complexity = 15

[tool.ruff.flake8-quotes]
inline-quotes = "double"
docstring-quotes = "double"
multiline-quotes = "double"

[tool.isort]
force_alphabetical_sort_within_sections = true
force_single_line = true
group_by_package = true
known_typing = ["typing"]
sections = [
  "FUTURE",
  "TYPING",
  "STDLIB",
  "THIRDPARTY",
  "FIRSTPARTY",
  "LOCALFOLDER"
]
skip_gitignore = true
skip_glob = ["**/*pb2.py"]

[tool.black]
line-length = 88
target-version = ['py310']
force-exclude = ".*pb2.py"
