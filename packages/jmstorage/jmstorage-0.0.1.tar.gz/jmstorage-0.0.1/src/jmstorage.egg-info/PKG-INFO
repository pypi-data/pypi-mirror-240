Metadata-Version: 2.1
Name: jmstorage
Version: 0.0.1
Summary: Key value caching machanism with backends: disk, Sqlite, Redis, MySQL, PostgreSQL.
Author: JustinMusti
License: MIT License
        
        Copyright (c) 2023 M
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/justinmusti/jmstorage
Project-URL: Bug Tracker, https://github.com/justinmusti/jmstorage/issues
Classifier: Development Status :: 3 - Alpha
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: dill~=0.3
Provides-Extra: dev
Requires-Dist: build~=1.0; extra == "dev"
Requires-Dist: flake8~=6.1; extra == "dev"
Requires-Dist: isort==5.12.0; extra == "dev"
Requires-Dist: ipython~=8.12; extra == "dev"
Requires-Dist: pytest==7.4.3; extra == "dev"
Requires-Dist: twine==4.0.2; extra == "dev"

# jmstorage


![Unit Tests](https://github.com/justinmusti/jmstorage/actions/workflows/run_tests.yml/badge.svg) [![JMStorage on PyPI](https://badge.fury.io/py/jmstorage.svg 'JM Storage PyPI')](https://pypi.org/project/jmstorage/)

Thread safe key:value storage with multiple back-end options.

## Install 

```shell
pip install jmstorage

```


## Storage Options

1. disk(local file system)  
   * Currently, this is the only supported option.
   * This is thread safe as the library acquires a thread lock during write operations.
2. Redis  
   * In Development, will update as it becomes available.
3. Sqlite
   * In Development, will update as it becomes available.
4. MySQL
   * In Development, will update as it becomes available.
5. PostgreSQL
    * In Development, will update as it becomes available.


## How to Use

```python
from jmstorage import Cache

c = Cache(namespace="namespace-value", path="./path_to_local_disk_file/")

# Set Value
c.set("my_key", "my_value")

# Read Value
my_val = c.get("my_key")
# > "my_value"

# Pop Value
my_val = c.pop("my_key")
# > "my_value"
c.get("my_key")
# > None


# Delete Value
c.delete("my_key")
c.get("my_key")
# > None

# Truncate Storage
c.truncate()
c.get("my_key")
# > None
```
