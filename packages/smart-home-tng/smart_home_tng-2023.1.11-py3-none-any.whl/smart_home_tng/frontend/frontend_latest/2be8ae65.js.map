{"version":3,"file":"2be8ae65.js","mappings":";;;AAuDA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AAGA;AACA;;;;AAIA;AACA;AAGA;AACA;;;;AAIA;;;AAIA;;AAEA;AACA;;AAIA;;AAGA;AACA;;AAEA;AACA;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsFA;ACjLA;AAGA;;ACoBA;AACA;;AAEA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoFA;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1CA","sources":["webpack://home-assistant-frontend/./src/components/ha-date-range-picker.ts","webpack://home-assistant-frontend/./src/components/ha-state-icon.ts","webpack://home-assistant-frontend/./src/components/ha-textfield.ts","webpack://home-assistant-frontend/./src/layouts/ha-app-layout.js"],"sourcesContent":["import \"@material/mwc-button/mwc-button\";\nimport \"@material/mwc-list/mwc-list\";\nimport { ActionDetail } from \"@material/mwc-list/mwc-list-foundation\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { mdiCalendar } from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { formatDateTime } from \"../common/datetime/format_date_time\";\nimport { useAmPm } from \"../common/datetime/use_am_pm\";\nimport { computeRTLDirection } from \"../common/util/compute_rtl\";\nimport { HomeAssistant } from \"../types\";\nimport \"./date-range-picker\";\nimport \"./ha-svg-icon\";\nimport \"./ha-textfield\";\n\nexport interface DateRangePickerRanges {\n  [key: string]: [Date, Date];\n}\n\n@customElement(\"ha-date-range-picker\")\nexport class HaDateRangePicker extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public startDate!: Date;\n\n  @property() public endDate!: Date;\n\n  @property() public ranges?: DateRangePickerRanges;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) private _hour24format = false;\n\n  @property({ type: String }) private _rtlDirection = \"ltr\";\n\n  protected updated(changedProps: PropertyValues) {\n    if (changedProps.has(\"hass\")) {\n      const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n      if (!oldHass || oldHass.locale !== this.hass.locale) {\n        this._hour24format = !useAmPm(this.hass.locale);\n        this._rtlDirection = computeRTLDirection(this.hass);\n      }\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <date-range-picker\n        ?disabled=${this.disabled}\n        twentyfour-hours=${this._hour24format}\n        start-date=${this.startDate}\n        end-date=${this.endDate}\n        ?ranges=${this.ranges !== undefined}\n      >\n        <div slot=\"input\" class=\"date-range-inputs\">\n          <ha-svg-icon .path=${mdiCalendar}></ha-svg-icon>\n          <ha-textfield\n            .value=${formatDateTime(this.startDate, this.hass.locale)}\n            .label=${this.hass.localize(\n              \"ui.components.date-range-picker.start_date\"\n            )}\n            .disabled=${this.disabled}\n            @click=${this._handleInputClick}\n            readonly\n          ></ha-textfield>\n          <ha-textfield\n            .value=${formatDateTime(this.endDate, this.hass.locale)}\n            .label=${this.hass.localize(\n              \"ui.components.date-range-picker.end_date\"\n            )}\n            .disabled=${this.disabled}\n            @click=${this._handleInputClick}\n            readonly\n          ></ha-textfield>\n        </div>\n        ${this.ranges\n          ? html`<div\n              slot=\"ranges\"\n              class=\"date-range-ranges\"\n              .dir=${this._rtlDirection}\n            >\n              <mwc-list @action=${this._setDateRange} activatable>\n                ${Object.keys(this.ranges).map(\n                  (name) => html`<mwc-list-item> ${name} </mwc-list-item>`\n                )}\n              </mwc-list>\n            </div>`\n          : \"\"}\n        <div slot=\"footer\" class=\"date-range-footer\">\n          <mwc-button @click=${this._cancelDateRange}\n            >${this.hass.localize(\"ui.common.cancel\")}</mwc-button\n          >\n          <mwc-button @click=${this._applyDateRange}\n            >${this.hass.localize(\n              \"ui.components.date-range-picker.select\"\n            )}</mwc-button\n          >\n        </div>\n      </date-range-picker>\n    `;\n  }\n\n  private _setDateRange(ev: CustomEvent<ActionDetail>) {\n    const dateRange = Object.values(this.ranges!)[ev.detail.index];\n    const dateRangePicker = this._dateRangePicker;\n    dateRangePicker.clickRange(dateRange);\n    dateRangePicker.clickedApply();\n  }\n\n  private _cancelDateRange() {\n    this._dateRangePicker.clickCancel();\n  }\n\n  private _applyDateRange() {\n    this._dateRangePicker.clickedApply();\n  }\n\n  private get _dateRangePicker() {\n    const dateRangePicker = this.shadowRoot!.querySelector(\n      \"date-range-picker\"\n    ) as any;\n    return dateRangePicker.vueComponent.$children[0];\n  }\n\n  private _handleInputClick() {\n    // close the date picker, so it will open again on the click event\n    if (this._dateRangePicker.open) {\n      this._dateRangePicker.open = false;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-svg-icon {\n        margin-right: 8px;\n        margin-inline-end: 8px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n\n      .date-range-inputs {\n        display: flex;\n        align-items: center;\n      }\n\n      .date-range-ranges {\n        border-right: 1px solid var(--divider-color);\n      }\n\n      .date-range-footer {\n        display: flex;\n        justify-content: flex-end;\n        padding: 8px;\n        border-top: 1px solid var(--divider-color);\n      }\n\n      ha-textfield {\n        display: inline-block;\n        max-width: 250px;\n        min-width: 200px;\n      }\n\n      ha-textfield:last-child {\n        margin-left: 8px;\n        margin-inline-start: 8px;\n        margin-inline-end: initial;\n        direction: var(--direction);\n      }\n\n      @media only screen and (max-width: 800px) {\n        .date-range-ranges {\n          border-right: none;\n          border-bottom: 1px solid var(--divider-color);\n        }\n      }\n\n      @media only screen and (max-width: 500px) {\n        ha-textfield {\n          min-width: inherit;\n        }\n\n        ha-svg-icon {\n          display: none;\n        }\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-date-range-picker\": HaDateRangePicker;\n  }\n}\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { stateIconPath } from \"../common/entity/state_icon_path\";\nimport \"./ha-icon\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-state-icon\")\nexport class HaStateIcon extends LitElement {\n  @property({ attribute: false }) public state?: HassEntity;\n\n  @property() public icon?: string;\n\n  protected render(): TemplateResult {\n    if (this.icon || this.state?.attributes.icon) {\n      return html`<ha-icon\n        .icon=${this.icon || this.state?.attributes.icon}\n      ></ha-icon>`;\n    }\n    return html`<ha-svg-icon .path=${stateIconPath(this.state)}></ha-svg-icon>`;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-state-icon\": HaStateIcon;\n  }\n}\n","import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { TemplateResult, html, PropertyValues, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public iconTrailing?: boolean;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      (changedProperties.has(\"invalid\") &&\n        (this.invalid || changedProperties.get(\"invalid\") !== undefined)) ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid ? this.errorMessage || \"Invalid\" : \"\"\n      );\n      this.reportValidity();\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n        padding-inline-start: var(--text-field-suffix-padding-left, 12px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 0px);\n        direction: var(--direction);\n      }\n      .mdc-text-field--with-leading-icon {\n        padding-inline-start: var(--text-field-suffix-padding-left, 0px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 16px);\n        direction: var(--direction);\n      }\n\n      .mdc-text-field:not(.mdc-text-field--disabled)\n        .mdc-text-field__affix--suffix {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon--leading {\n        margin-inline-start: 16px;\n        margin-inline-end: 8px;\n        direction: var(--direction);\n      }\n\n      input {\n        text-align: var(--text-field-text-align, start);\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n\n      .mdc-floating-label {\n        inset-inline-start: 16px !important;\n        inset-inline-end: initial !important;\n        transform-origin: var(--float-start);\n        direction: var(--direction);\n        transform-origin: var(--float-start);\n      }\n\n      .mdc-text-field--with-leading-icon.mdc-text-field--filled\n        .mdc-floating-label {\n        max-width: calc(100% - 48px);\n        inset-inline-start: 48px !important;\n        inset-inline-end: initial !important;\n        direction: var(--direction);\n      }\n\n      .mdc-text-field__input[type=\"number\"] {\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          .mdc-text-field__affix--suffix,\n          .mdc-text-field--with-leading-icon,\n          .mdc-text-field__icon--leading,\n          .mdc-floating-label,\n          .mdc-text-field--with-leading-icon.mdc-text-field--filled\n            .mdc-floating-label,\n          .mdc-text-field__input[type=\"number\"] {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n","/* eslint-plugin-disable lit */\n/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\nThis code is copied from app-header-layout.\n'fullbleed' support is removed as Home Assisstant doesn't use it.\ntransform: translate(0) is added.\n*/\n/*\n  FIXME(polymer-modulizer): the above comments were extracted\n  from HTML and may be out of place here. Review them and\n  then delete this comment!\n*/\nimport \"@polymer/app-layout/app-header-layout/app-header-layout\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport \"@polymer/polymer/polymer-element\";\n\nclass HaAppLayout extends customElements.get(\"app-header-layout\") {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n          /**\n         * Force app-header-layout to have its own stacking context so that its parent can\n         * control the stacking of it relative to other elements (e.g. app-drawer-layout).\n         * This could be done using \\`isolation: isolate\\`, but that's not well supported\n         * across browsers.\n         */\n          position: relative;\n          z-index: 0;\n        }\n\n        #wrapper ::slotted([slot=\"header\"]) {\n          @apply --layout-fixed-top;\n          z-index: 1;\n        }\n\n        #wrapper.initializing ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) {\n          height: 100%;\n        }\n\n        :host([has-scrolling-region]) #wrapper ::slotted([slot=\"header\"]) {\n          position: absolute;\n        }\n\n        :host([has-scrolling-region])\n          #wrapper.initializing\n          ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) #wrapper #contentContainer {\n          @apply --layout-fit;\n          overflow-y: auto;\n          -webkit-overflow-scrolling: touch;\n        }\n\n        :host([has-scrolling-region]) #wrapper.initializing #contentContainer {\n          position: relative;\n        }\n\n        #contentContainer {\n          /* Create a stacking context here so that all children appear below the header. */\n          position: relative;\n          z-index: 0;\n          /* Using 'transform' will cause 'position: fixed' elements to behave like\n           'position: absolute' relative to this element. */\n          transform: translate(0);\n          margin-left: env(safe-area-inset-left);\n          margin-right: env(safe-area-inset-right);\n        }\n\n        @media print {\n          :host([has-scrolling-region]) #wrapper #contentContainer {\n            overflow-y: visible;\n          }\n        }\n      </style>\n\n      <div id=\"wrapper\" class=\"initializing\">\n        <slot id=\"headerSlot\" name=\"header\"></slot>\n\n        <div id=\"contentContainer\"><slot></slot></div>\n        <slot id=\"fab\" name=\"fab\"></slot>\n      </div>\n    `;\n  }\n}\ncustomElements.define(\"ha-app-layout\", HaAppLayout);\n"],"names":[],"sourceRoot":""}