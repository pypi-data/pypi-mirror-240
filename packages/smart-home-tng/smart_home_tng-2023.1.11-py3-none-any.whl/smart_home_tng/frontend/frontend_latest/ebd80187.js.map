{"version":3,"file":"ebd80187.js","mappings":";;;;AAgBA;;AC+JA;;AAEA;;AAEA;AAaA;;AAEA;AACA;;AAGA;;;;;;AAgEA;AAGA;;;AAWA;;;AAqBA;;AA+LA;AACA;AACA;AAGA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAGA;AAKA;;;AAGA;AACA;AACA;AACA;;AAEA;;;AAGA;;;AAGA;;AAGA;;;;AAOA;;;AAOA;;;AA4BA;;AAEA;;;AAGA;;;;AAMA;AACA;AACA;;;AAGA;;;;AAMA;AACA;AACA;;;AAGA;;;;;AAOA;;AAEA;;;AAGA;;AAnEA;AAEA;AACA;;AAIA;AACA;;AAIA;AACA;;;AAKA;;AAEA;;;;;AAsDA;;;;AAKA;;;AAKA;AAEA;AAGA;;AAEA;;AAGA;AACA;;;AAGA;;;AAKA;AACA;;;AAGA;;;AAKA;;AAEA;;;AAGA;;;AAKA;;AAEA;;;AAGA;;;;AAMA;;AAGA;;AAEA;;;;AAIA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoTA","sources":["webpack://home-assistant-frontend/./src/components/ha-check-list-item.ts","webpack://home-assistant-frontend/./src/panels/config/entities/ha-config-entities.ts"],"sourcesContent":["import { css } from \"lit\";\nimport { CheckListItemBase } from \"@material/mwc-list/mwc-check-list-item-base\";\nimport { styles as controlStyles } from \"@material/mwc-list/mwc-control-list-item.css\";\nimport { styles } from \"@material/mwc-list/mwc-list-item.css\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-check-list-item\")\nexport class HaCheckListItem extends CheckListItemBase {\n  static override styles = [\n    styles,\n    controlStyles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-check-list-item\": HaCheckListItem;\n  }\n}\n","import type { RequestSelectedDetail } from \"@material/mwc-list/mwc-list-item\";\nimport {\n  mdiAlertCircle,\n  mdiCancel,\n  mdiDelete,\n  mdiEyeOff,\n  mdiFilterVariant,\n  mdiPencilOff,\n  mdiPlus,\n  mdiRestoreAlert,\n  mdiUndo,\n} from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport { HassEntity, UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport memoize from \"memoize-one\";\nimport type { HASSDomEvent } from \"../../../common/dom/fire_event\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { navigate } from \"../../../common/navigate\";\nimport { LocalizeFunc } from \"../../../common/translations/localize\";\nimport { computeRTL } from \"../../../common/util/compute_rtl\";\nimport type {\n  DataTableColumnContainer,\n  RowClickedEvent,\n  SelectionChangedEvent,\n} from \"../../../components/data-table/ha-data-table\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-check-list-item\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-svg-icon\";\nimport {\n  AreaRegistryEntry,\n  subscribeAreaRegistry,\n} from \"../../../data/area_registry\";\nimport { ConfigEntry, getConfigEntries } from \"../../../data/config_entries\";\nimport {\n  DeviceRegistryEntry,\n  subscribeDeviceRegistry,\n} from \"../../../data/device_registry\";\nimport { UNAVAILABLE } from \"../../../data/entity\";\nimport {\n  computeEntityRegistryName,\n  EntityRegistryEntry,\n  removeEntityRegistryEntry,\n  subscribeEntityRegistry,\n  updateEntityRegistryEntry,\n} from \"../../../data/entity_registry\";\nimport { domainToName } from \"../../../data/integration\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport {\n  hideMoreInfoDialog,\n  showMoreInfoDialog,\n} from \"../../../dialogs/more-info/show-ha-more-info-dialog\";\nimport \"../../../layouts/hass-loading-screen\";\nimport \"../../../layouts/hass-tabs-subpage-data-table\";\nimport type { HaTabsSubpageDataTable } from \"../../../layouts/hass-tabs-subpage-data-table\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { HomeAssistant, Route } from \"../../../types\";\nimport { configSections } from \"../ha-panel-config\";\nimport \"../integrations/ha-integration-overflow-menu\";\n\nexport interface StateEntity extends Omit<EntityRegistryEntry, \"id\"> {\n  readonly?: boolean;\n  selectable?: boolean;\n  id?: string;\n}\n\nexport interface EntityRow extends StateEntity {\n  entity?: HassEntity;\n  unavailable: boolean;\n  restored: boolean;\n  status: string;\n  area?: string;\n}\n\n@customElement(\"ha-config-entities\")\nexport class HaConfigEntities extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public isWide!: boolean;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @state() private _entities?: EntityRegistryEntry[];\n\n  @state() private _devices?: DeviceRegistryEntry[];\n\n  @state() private _areas: AreaRegistryEntry[] = [];\n\n  @state() private _stateEntities: StateEntity[] = [];\n\n  @property() public _entries?: ConfigEntry[];\n\n  @state() private _showDisabled = false;\n\n  @state() private _showHidden = false;\n\n  @state() private _showUnavailable = true;\n\n  @state() private _showReadOnly = true;\n\n  @state() private _filter: string = history.state?.filter || \"\";\n\n  @state() private _numHiddenEntities = 0;\n\n  @state() private _searchParms = new URLSearchParams(window.location.search);\n\n  @state() private _selectedEntities: string[] = [];\n\n  @query(\"hass-tabs-subpage-data-table\", true)\n  private _dataTable!: HaTabsSubpageDataTable;\n\n  private _activeFilters = memoize(\n    (\n      filters: URLSearchParams,\n      localize: LocalizeFunc,\n      entries?: ConfigEntry[]\n    ): string[] | undefined => {\n      const filterTexts: string[] = [];\n      filters.forEach((value, key) => {\n        switch (key) {\n          case \"config_entry\": {\n            // If we are requested to show the entities for a given config entry,\n            // also show the disabled ones by default.\n            this._showDisabled = true;\n\n            if (!entries) {\n              this._loadConfigEntries();\n              break;\n            }\n            const configEntry = entries.find(\n              (entry) => entry.entry_id === value\n            );\n            if (!configEntry) {\n              break;\n            }\n            const integrationName = domainToName(localize, configEntry.domain);\n            filterTexts.push(\n              `${this.hass.localize(\n                \"ui.panel.config.integrations.integration\"\n              )} \"${integrationName}${\n                integrationName !== configEntry.title\n                  ? `: ${configEntry.title}`\n                  : \"\"\n              }\"`\n            );\n            break;\n          }\n        }\n      });\n      return filterTexts.length ? filterTexts : undefined;\n    }\n  );\n\n  private _columns = memoize(\n    (narrow, _language, showDisabled): DataTableColumnContainer<EntityRow> => ({\n      icon: {\n        title: \"\",\n        label: this.hass.localize(\n          \"ui.panel.config.entities.picker.headers.state_icon\"\n        ),\n        type: \"icon\",\n        template: (_, entry: EntityRow) => html`\n          <ha-state-icon\n            title=${ifDefined(entry.entity?.state)}\n            slot=\"item-icon\"\n            .state=${entry.entity}\n          ></ha-state-icon>\n        `,\n      },\n      name: {\n        title: this.hass.localize(\n          \"ui.panel.config.entities.picker.headers.name\"\n        ),\n        sortable: true,\n        filterable: true,\n        direction: \"asc\",\n        grows: true,\n        template: narrow\n          ? (name, entity: EntityRow) =>\n              html`\n                ${name}<br />\n                <div class=\"secondary\">\n                  ${entity.entity_id} |\n                  ${this.hass.localize(`component.${entity.platform}.title`) ||\n                  entity.platform}\n                </div>\n              `\n          : undefined,\n      },\n      entity_id: {\n        title: this.hass.localize(\n          \"ui.panel.config.entities.picker.headers.entity_id\"\n        ),\n        hidden: narrow,\n        sortable: true,\n        filterable: true,\n        width: \"25%\",\n      },\n      platform: {\n        title: this.hass.localize(\n          \"ui.panel.config.entities.picker.headers.integration\"\n        ),\n        hidden: narrow,\n        sortable: true,\n        filterable: true,\n        width: \"20%\",\n        template: (platform) =>\n          this.hass.localize(`component.${platform}.title`) || platform,\n      },\n      area: {\n        title: this.hass.localize(\n          \"ui.panel.config.entities.picker.headers.area\"\n        ),\n        sortable: true,\n        hidden: narrow,\n        filterable: true,\n        width: \"15%\",\n      },\n      disabled_by: {\n        title: this.hass.localize(\n          \"ui.panel.config.entities.picker.headers.disabled_by\"\n        ),\n        sortable: true,\n        hidden: narrow || !showDisabled,\n        filterable: true,\n        width: \"15%\",\n        template: (disabled_by: EntityRegistryEntry[\"disabled_by\"]) =>\n          disabled_by === null\n            ? \"â€”\"\n            : this.hass.localize(`config_entry.disabled_by.${disabled_by}`),\n      },\n      status: {\n        title: this.hass.localize(\n          \"ui.panel.config.entities.picker.headers.status\"\n        ),\n        type: \"icon\",\n        sortable: true,\n        filterable: true,\n        width: \"68px\",\n        template: (_status, entity: EntityRow) =>\n          entity.unavailable ||\n          entity.disabled_by ||\n          entity.hidden_by ||\n          entity.readonly\n            ? html`\n                <div\n                  tabindex=\"0\"\n                  style=\"display:inline-block; position: relative;\"\n                >\n                  <ha-svg-icon\n                    style=${styleMap({\n                      color: entity.unavailable ? \"var(--error-color)\" : \"\",\n                    })}\n                    .path=${entity.restored\n                      ? mdiRestoreAlert\n                      : entity.unavailable\n                      ? mdiAlertCircle\n                      : entity.disabled_by\n                      ? mdiCancel\n                      : entity.hidden_by\n                      ? mdiEyeOff\n                      : mdiPencilOff}\n                  ></ha-svg-icon>\n                  <paper-tooltip animation-delay=\"0\" position=\"left\">\n                    ${entity.restored\n                      ? this.hass.localize(\n                          \"ui.panel.config.entities.picker.status.restored\"\n                        )\n                      : entity.unavailable\n                      ? this.hass.localize(\n                          \"ui.panel.config.entities.picker.status.unavailable\"\n                        )\n                      : entity.disabled_by\n                      ? this.hass.localize(\n                          \"ui.panel.config.entities.picker.status.disabled\"\n                        )\n                      : entity.hidden_by\n                      ? this.hass.localize(\n                          \"ui.panel.config.entities.picker.status.hidden\"\n                        )\n                      : this.hass.localize(\n                          \"ui.panel.config.entities.picker.status.readonly\"\n                        )}\n                  </paper-tooltip>\n                </div>\n              `\n            : \"â€”\",\n      },\n    })\n  );\n\n  private _filteredEntitiesAndDomains = memoize(\n    (\n      entities: StateEntity[],\n      devices: DeviceRegistryEntry[] | undefined,\n      areas: AreaRegistryEntry[] | undefined,\n      stateEntities: StateEntity[],\n      filters: URLSearchParams,\n      showDisabled: boolean,\n      showUnavailable: boolean,\n      showReadOnly: boolean,\n      showHidden: boolean,\n      entries?: ConfigEntry[]\n    ) => {\n      const result: EntityRow[] = [];\n\n      // If nothing gets filtered, this is our correct count of entities\n      let startLength = entities.length + stateEntities.length;\n\n      const areaLookup: { [areaId: string]: AreaRegistryEntry } = {};\n      const deviceLookup: { [deviceId: string]: DeviceRegistryEntry } = {};\n\n      if (areas) {\n        for (const area of areas) {\n          areaLookup[area.area_id] = area;\n        }\n        if (devices) {\n          for (const device of devices) {\n            deviceLookup[device.id] = device;\n          }\n        }\n      }\n\n      let filteredEntities = showReadOnly\n        ? entities.concat(stateEntities)\n        : entities;\n\n      const filteredDomains: string[] = [];\n\n      filters.forEach((value, key) => {\n        if (key === \"config_entry\") {\n          filteredEntities = filteredEntities.filter(\n            (entity) => entity.config_entry_id === value\n          );\n          // If we have an active filter and `showReadOnly` is true, the length of `entities` is correct.\n          // If however, the read-only entities were not added before, we need to check how many would\n          // have matched the active filter and add that number to the count.\n          startLength = filteredEntities.length;\n          if (!showReadOnly) {\n            startLength += stateEntities.filter(\n              (entity) => entity.config_entry_id === value\n            ).length;\n          }\n\n          if (!entries) {\n            this._loadConfigEntries();\n            return;\n          }\n\n          const configEntry = entries.find((entry) => entry.entry_id === value);\n\n          if (configEntry) {\n            filteredDomains.push(configEntry.domain);\n          }\n        }\n      });\n\n      if (!showDisabled) {\n        filteredEntities = filteredEntities.filter(\n          (entity) => !entity.disabled_by\n        );\n      }\n\n      if (!showHidden) {\n        filteredEntities = filteredEntities.filter(\n          (entity) => !entity.hidden_by\n        );\n      }\n\n      for (const entry of filteredEntities) {\n        const entity = this.hass.states[entry.entity_id];\n        const unavailable = entity?.state === UNAVAILABLE;\n        const restored = entity?.attributes.restored === true;\n        const areaId = entry.area_id ?? deviceLookup[entry.device_id!]?.area_id;\n        const area = areaId ? areaLookup[areaId] : undefined;\n\n        if (!showUnavailable && unavailable) {\n          continue;\n        }\n\n        result.push({\n          ...entry,\n          entity,\n          name: computeEntityRegistryName(\n            this.hass!,\n            entry as EntityRegistryEntry\n          ),\n          unavailable,\n          restored,\n          area: area ? area.name : \"â€”\",\n          status: restored\n            ? this.hass.localize(\n                \"ui.panel.config.entities.picker.status.restored\"\n              )\n            : unavailable\n            ? this.hass.localize(\n                \"ui.panel.config.entities.picker.status.unavailable\"\n              )\n            : entry.disabled_by\n            ? this.hass.localize(\n                \"ui.panel.config.entities.picker.status.disabled\"\n              )\n            : this.hass.localize(\"ui.panel.config.entities.picker.status.ok\"),\n        });\n      }\n\n      this._numHiddenEntities = startLength - result.length;\n      return { filteredEntities: result, filteredDomains: filteredDomains };\n    }\n  );\n\n  public constructor() {\n    super();\n    window.addEventListener(\"location-changed\", () => {\n      if (\n        window.location.search.substring(1) !== this._searchParms.toString()\n      ) {\n        this._searchParms = new URLSearchParams(window.location.search);\n      }\n    });\n    window.addEventListener(\"popstate\", () => {\n      if (\n        window.location.search.substring(1) !== this._searchParms.toString()\n      ) {\n        this._searchParms = new URLSearchParams(window.location.search);\n      }\n    });\n  }\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeEntityRegistry(this.hass.connection!, (entities) => {\n        this._entities = entities;\n      }),\n      subscribeDeviceRegistry(this.hass.connection!, (devices) => {\n        this._devices = devices;\n      }),\n      subscribeAreaRegistry(this.hass.connection, (areas) => {\n        this._areas = areas;\n      }),\n    ];\n  }\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    hideMoreInfoDialog(this);\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || this._entities === undefined) {\n      return html` <hass-loading-screen></hass-loading-screen> `;\n    }\n    const activeFilters = this._activeFilters(\n      this._searchParms,\n      this.hass.localize,\n      this._entries\n    );\n\n    const { filteredEntities, filteredDomains } =\n      this._filteredEntitiesAndDomains(\n        this._entities,\n        this._devices,\n        this._areas,\n        this._stateEntities,\n        this._searchParms,\n        this._showDisabled,\n        this._showUnavailable,\n        this._showReadOnly,\n        this._showHidden,\n        this._entries\n      );\n\n    const includeZHAFab = filteredDomains.includes(\"zha\");\n\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .backPath=${this._searchParms.has(\"historyBack\")\n          ? undefined\n          : \"/config\"}\n        .route=${this.route}\n        .tabs=${configSections.devices}\n        .columns=${this._columns(\n          this.narrow,\n          this.hass.language,\n          this._showDisabled\n        )}\n        .data=${filteredEntities}\n        .activeFilters=${activeFilters}\n        .numHidden=${this._numHiddenEntities}\n        .hideFilterMenu=${this._selectedEntities.length > 0}\n        .searchLabel=${this.hass.localize(\n          \"ui.panel.config.entities.picker.search\"\n        )}\n        .hiddenLabel=${this.hass.localize(\n          \"ui.panel.config.entities.picker.filter.hidden_entities\",\n          \"number\",\n          this._numHiddenEntities\n        )}\n        .filter=${this._filter}\n        selectable\n        clickable\n        @selection-changed=${this._handleSelectionChanged}\n        @clear-filter=${this._clearFilter}\n        @search-changed=${this._handleSearchChange}\n        @row-click=${this._openEditEntry}\n        id=\"entity_id\"\n        .hasFab=${includeZHAFab}\n      >\n        <ha-integration-overflow-menu\n          .hass=${this.hass}\n          slot=\"toolbar-icon\"\n        ></ha-integration-overflow-menu>\n        ${this._selectedEntities.length\n          ? html`\n              <div\n                class=${classMap({\n                  \"header-toolbar\": this.narrow,\n                  \"table-header\": !this.narrow,\n                })}\n                slot=\"header\"\n              >\n                <p class=\"selected-txt\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.entities.picker.selected\",\n                    \"number\",\n                    this._selectedEntities.length\n                  )}\n                </p>\n                <div class=\"header-btns\">\n                  ${!this.narrow\n                    ? html`\n                        <mwc-button @click=${this._enableSelected}\n                          >${this.hass.localize(\n                            \"ui.panel.config.entities.picker.enable_selected.button\"\n                          )}</mwc-button\n                        >\n                        <mwc-button @click=${this._disableSelected}\n                          >${this.hass.localize(\n                            \"ui.panel.config.entities.picker.disable_selected.button\"\n                          )}</mwc-button\n                        >\n                        <mwc-button @click=${this._hideSelected}\n                          >${this.hass.localize(\n                            \"ui.panel.config.entities.picker.hide_selected.button\"\n                          )}</mwc-button\n                        >\n                        <mwc-button\n                          @click=${this._removeSelected}\n                          class=\"warning\"\n                          >${this.hass.localize(\n                            \"ui.panel.config.entities.picker.remove_selected.button\"\n                          )}</mwc-button\n                        >\n                      `\n                    : html`\n                        <ha-icon-button\n                          id=\"enable-btn\"\n                          @click=${this._enableSelected}\n                          .path=${mdiUndo}\n                          .label=${this.hass.localize(\"ui.common.enable\")}\n                        ></ha-icon-button>\n                        <paper-tooltip animation-delay=\"0\" for=\"enable-btn\">\n                          ${this.hass.localize(\n                            \"ui.panel.config.entities.picker.enable_selected.button\"\n                          )}\n                        </paper-tooltip>\n                        <ha-icon-button\n                          id=\"disable-btn\"\n                          @click=${this._disableSelected}\n                          .path=${mdiCancel}\n                          .label=${this.hass.localize(\"ui.common.disable\")}\n                        ></ha-icon-button>\n                        <paper-tooltip animation-delay=\"0\" for=\"disable-btn\">\n                          ${this.hass.localize(\n                            \"ui.panel.config.entities.picker.disable_selected.button\"\n                          )}\n                        </paper-tooltip>\n                        <ha-icon-button\n                          id=\"hide-btn\"\n                          @click=${this._hideSelected}\n                          .path=${mdiEyeOff}\n                          .label=${this.hass.localize(\"ui.common.hide\")}\n                        ></ha-icon-button>\n                        <paper-tooltip animation-delay=\"0\" for=\"hide-btn\">\n                          ${this.hass.localize(\n                            \"ui.panel.config.entities.picker.hide_selected.button\"\n                          )}\n                        </paper-tooltip>\n                        <ha-icon-button\n                          class=\"warning\"\n                          id=\"remove-btn\"\n                          @click=${this._removeSelected}\n                          .path=${mdiDelete}\n                          .label=${this.hass.localize(\"ui.common.remove\")}\n                        ></ha-icon-button>\n                        <paper-tooltip animation-delay=\"0\" for=\"remove-btn\">\n                          ${this.hass.localize(\n                            \"ui.panel.config.entities.picker.remove_selected.button\"\n                          )}\n                        </paper-tooltip>\n                      `}\n                </div>\n              </div>\n            `\n          : html`\n              <ha-button-menu slot=\"filter-menu\" corner=\"BOTTOM_START\" multi>\n                <ha-icon-button\n                  slot=\"trigger\"\n                  .label=${this.hass!.localize(\n                    \"ui.panel.config.entities.picker.filter.filter\"\n                  )}\n                  .path=${mdiFilterVariant}\n                ></ha-icon-button>\n                ${this.narrow && activeFilters?.length\n                  ? html`<mwc-list-item @click=${this._clearFilter}\n                      >${this.hass.localize(\n                        \"ui.components.data-table.filtering_by\"\n                      )}\n                      ${activeFilters.join(\", \")}\n                      <span class=\"clear\">Clear</span></mwc-list-item\n                    >`\n                  : \"\"}\n                <ha-check-list-item\n                  @request-selected=${this._showDisabledChanged}\n                  .selected=${this._showDisabled}\n                  left\n                >\n                  ${this.hass!.localize(\n                    \"ui.panel.config.entities.picker.filter.show_disabled\"\n                  )}\n                </ha-check-list-item>\n                <ha-check-list-item\n                  @request-selected=${this._showHiddenChanged}\n                  .selected=${this._showHidden}\n                  left\n                >\n                  ${this.hass!.localize(\n                    \"ui.panel.config.entities.picker.filter.show_hidden\"\n                  )}\n                </ha-check-list-item>\n                <ha-check-list-item\n                  @request-selected=${this._showRestoredChanged}\n                  graphic=\"control\"\n                  .selected=${this._showUnavailable}\n                  left\n                >\n                  ${this.hass!.localize(\n                    \"ui.panel.config.entities.picker.filter.show_unavailable\"\n                  )}\n                </ha-check-list-item>\n                <ha-check-list-item\n                  @request-selected=${this._showReadOnlyChanged}\n                  graphic=\"control\"\n                  .selected=${this._showReadOnly}\n                  left\n                >\n                  ${this.hass!.localize(\n                    \"ui.panel.config.entities.picker.filter.show_readonly\"\n                  )}\n                </ha-check-list-item>\n              </ha-button-menu>\n            `}\n        ${includeZHAFab\n          ? html`<a href=\"/config/zha/add\" slot=\"fab\">\n              <ha-fab\n                .label=${this.hass.localize(\"ui.panel.config.zha.add_device\")}\n                extended\n                ?rtl=${computeRTL(this.hass)}\n              >\n                <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n              </ha-fab>\n            </a>`\n          : html``}\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  public willUpdate(changedProps): void {\n    super.willUpdate(changedProps);\n    const oldHass = changedProps.get(\"hass\");\n    let changed = false;\n    if (!this.hass || !this._entities) {\n      return;\n    }\n    if (changedProps.has(\"hass\") || changedProps.has(\"_entities\")) {\n      const stateEntities: StateEntity[] = [];\n      const regEntityIds = new Set(\n        this._entities.map((entity) => entity.entity_id)\n      );\n      for (const entityId of Object.keys(this.hass.states)) {\n        if (regEntityIds.has(entityId)) {\n          continue;\n        }\n        if (\n          !oldHass ||\n          this.hass.states[entityId] !== oldHass.states[entityId]\n        ) {\n          changed = true;\n        }\n        stateEntities.push({\n          name: computeStateName(this.hass.states[entityId]),\n          entity_id: entityId,\n          platform: computeDomain(entityId),\n          disabled_by: null,\n          hidden_by: null,\n          area_id: null,\n          config_entry_id: null,\n          device_id: null,\n          icon: null,\n          readonly: true,\n          selectable: false,\n          entity_category: null,\n          has_entity_name: false,\n        });\n      }\n      if (changed) {\n        this._stateEntities = stateEntities;\n      }\n    }\n  }\n\n  private _showDisabledChanged(ev: CustomEvent<RequestSelectedDetail>) {\n    if (ev.detail.source !== \"property\") {\n      return;\n    }\n    this._showDisabled = ev.detail.selected;\n  }\n\n  private _showHiddenChanged(ev: CustomEvent<RequestSelectedDetail>) {\n    if (ev.detail.source !== \"property\") {\n      return;\n    }\n    this._showHidden = ev.detail.selected;\n  }\n\n  private _showRestoredChanged(ev: CustomEvent<RequestSelectedDetail>) {\n    if (ev.detail.source !== \"property\") {\n      return;\n    }\n    this._showUnavailable = ev.detail.selected;\n  }\n\n  private _showReadOnlyChanged(ev: CustomEvent<RequestSelectedDetail>) {\n    if (ev.detail.source !== \"property\") {\n      return;\n    }\n    this._showReadOnly = ev.detail.selected;\n  }\n\n  private _handleSearchChange(ev: CustomEvent) {\n    this._filter = ev.detail.value;\n    history.replaceState({ filter: this._filter }, \"\");\n  }\n\n  private _handleSelectionChanged(\n    ev: HASSDomEvent<SelectionChangedEvent>\n  ): void {\n    this._selectedEntities = ev.detail.value;\n  }\n\n  private async _enableSelected() {\n    showConfirmationDialog(this, {\n      title: this.hass.localize(\n        \"ui.panel.config.entities.picker.enable_selected.confirm_title\",\n        \"number\",\n        this._selectedEntities.length\n      ),\n      text: this.hass.localize(\n        \"ui.panel.config.entities.picker.enable_selected.confirm_text\"\n      ),\n      confirmText: this.hass.localize(\"ui.common.enable\"),\n      dismissText: this.hass.localize(\"ui.common.cancel\"),\n      confirm: async () => {\n        let require_restart = false;\n        let reload_delay = 0;\n        await Promise.all(\n          this._selectedEntities.map(async (entity) => {\n            const result = await updateEntityRegistryEntry(this.hass, entity, {\n              disabled_by: null,\n            });\n            if (result.require_restart) {\n              require_restart = true;\n            }\n            if (result.reload_delay) {\n              reload_delay = Math.max(reload_delay, result.reload_delay);\n            }\n          })\n        );\n        this._clearSelection();\n        // If restart is required by any entity, show a dialog.\n        // Otherwise, show a dialog explaining that some patience is needed\n        if (require_restart) {\n          showAlertDialog(this, {\n            text: this.hass.localize(\n              \"ui.dialogs.entity_registry.editor.enabled_restart_confirm\"\n            ),\n          });\n        } else if (reload_delay) {\n          showAlertDialog(this, {\n            text: this.hass.localize(\n              \"ui.dialogs.entity_registry.editor.enabled_delay_confirm\",\n              \"delay\",\n              reload_delay\n            ),\n          });\n        }\n      },\n    });\n  }\n\n  private _disableSelected() {\n    showConfirmationDialog(this, {\n      title: this.hass.localize(\n        \"ui.panel.config.entities.picker.disable_selected.confirm_title\",\n        \"number\",\n        this._selectedEntities.length\n      ),\n      text: this.hass.localize(\n        \"ui.panel.config.entities.picker.disable_selected.confirm_text\"\n      ),\n      confirmText: this.hass.localize(\"ui.common.disable\"),\n      dismissText: this.hass.localize(\"ui.common.cancel\"),\n      confirm: () => {\n        this._selectedEntities.forEach((entity) =>\n          updateEntityRegistryEntry(this.hass, entity, {\n            disabled_by: \"user\",\n          })\n        );\n        this._clearSelection();\n      },\n    });\n  }\n\n  private _hideSelected() {\n    showConfirmationDialog(this, {\n      title: this.hass.localize(\n        \"ui.panel.config.entities.picker.hide_selected.confirm_title\",\n        \"number\",\n        this._selectedEntities.length\n      ),\n      text: this.hass.localize(\n        \"ui.panel.config.entities.picker.hide_selected.confirm_text\"\n      ),\n      confirmText: this.hass.localize(\"ui.common.hide\"),\n      dismissText: this.hass.localize(\"ui.common.cancel\"),\n      confirm: () => {\n        this._selectedEntities.forEach((entity) =>\n          updateEntityRegistryEntry(this.hass, entity, {\n            hidden_by: \"user\",\n          })\n        );\n        this._clearSelection();\n      },\n    });\n  }\n\n  private _removeSelected() {\n    const removeableEntities = this._selectedEntities.filter((entity) => {\n      const stateObj = this.hass.states[entity];\n      return stateObj?.attributes.restored;\n    });\n    showConfirmationDialog(this, {\n      title: this.hass.localize(\n        `ui.panel.config.entities.picker.remove_selected.confirm_${\n          removeableEntities.length !== this._selectedEntities.length\n            ? \"partly_\"\n            : \"\"\n        }title`,\n        \"number\",\n        removeableEntities.length\n      ),\n      text:\n        removeableEntities.length === this._selectedEntities.length\n          ? this.hass.localize(\n              \"ui.panel.config.entities.picker.remove_selected.confirm_text\"\n            )\n          : this.hass.localize(\n              \"ui.panel.config.entities.picker.remove_selected.confirm_partly_text\",\n              \"removable\",\n              removeableEntities.length,\n              \"selected\",\n              this._selectedEntities.length\n            ),\n      confirmText: this.hass.localize(\"ui.common.remove\"),\n      dismissText: this.hass.localize(\"ui.common.cancel\"),\n      confirm: () => {\n        removeableEntities.forEach((entity) =>\n          removeEntityRegistryEntry(this.hass, entity)\n        );\n        this._clearSelection();\n      },\n    });\n  }\n\n  private _clearSelection() {\n    this._dataTable.clearSelection();\n  }\n\n  private _openEditEntry(ev: CustomEvent): void {\n    const entityId = (ev.detail as RowClickedEvent).id;\n    showMoreInfoDialog(this, {\n      entityId,\n      tab: \"settings\",\n    });\n  }\n\n  private async _loadConfigEntries() {\n    this._entries = await getConfigEntries(this.hass);\n  }\n\n  private _clearFilter() {\n    if (\n      this._activeFilters(this._searchParms, this.hass.localize, this._entries)\n    ) {\n      navigate(window.location.pathname, { replace: true });\n    }\n    this._showDisabled = true;\n    this._showReadOnly = true;\n    this._showUnavailable = true;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        hass-loading-screen {\n          --app-header-background-color: var(--sidebar-background-color);\n          --app-header-text-color: var(--sidebar-text-color);\n        }\n        .table-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          height: 56px;\n          background-color: var(--mdc-text-field-fill-color, whitesmoke);\n          border-bottom: 1px solid\n            var(--mdc-text-field-idle-line-color, rgba(0, 0, 0, 0.42));\n          box-sizing: border-box;\n        }\n        .header-toolbar {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          color: var(--secondary-text-color);\n          position: relative;\n          top: -4px;\n        }\n        .selected-txt {\n          font-weight: bold;\n          padding-left: 16px;\n          padding-inline-start: 16px;\n          direction: var(--direction);\n        }\n        .table-header .selected-txt {\n          margin-top: 20px;\n        }\n        .header-toolbar .selected-txt {\n          font-size: 16px;\n        }\n        .header-toolbar .header-btns {\n          margin-right: -12px;\n          margin-inline-end: -12px;\n          direction: var(--direction);\n        }\n        .header-btns {\n          display: flex;\n        }\n        .header-btns > mwc-button,\n        .header-btns > ha-icon-button {\n          margin: 8px;\n        }\n        ha-button-menu {\n          margin-left: 8px;\n        }\n        .clear {\n          color: var(--primary-color);\n          padding-left: 8px;\n          padding-inline-start: 8px;\n          text-transform: uppercase;\n          direction: var(--direction);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-entities\": HaConfigEntities;\n  }\n}\n"],"names":[],"sourceRoot":""}