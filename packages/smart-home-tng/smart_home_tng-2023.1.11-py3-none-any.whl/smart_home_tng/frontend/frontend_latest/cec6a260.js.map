{"version":3,"file":"cec6a260.js","mappings":";;;;;AACA;AAwDA;AACA;;;AAGA;;;;AAMA;;AAIA;;;;AAUA;AACA;AACA;;;;;;;;;;AAYA;AACA;AACA;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2EA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/hui-editor.ts"],"sourcesContent":["import { undoDepth } from \"@codemirror/commands\";\nimport \"@material/mwc-button\";\nimport { mdiClose } from \"@mdi/js\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport { dump, load } from \"js-yaml\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { array, assert, object, optional, string, type } from \"superstruct\";\nimport { deepEqual } from \"../../common/util/deep-equal\";\nimport \"../../components/ha-circular-progress\";\nimport \"../../components/ha-code-editor\";\nimport type { HaCodeEditor } from \"../../components/ha-code-editor\";\nimport \"../../components/ha-icon-button\";\nimport type { LovelaceConfig } from \"../../data/lovelace\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../dialogs/generic/show-dialog-box\";\nimport \"../../layouts/ha-app-layout\";\nimport { haStyle } from \"../../resources/styles\";\nimport type { HomeAssistant } from \"../../types\";\nimport { showToast } from \"../../util/toast\";\nimport type { Lovelace } from \"./types\";\n\nconst lovelaceStruct = type({\n  title: optional(string()),\n  views: array(object()),\n});\n\n@customElement(\"hui-editor\")\nclass LovelaceFullConfigEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public lovelace?: Lovelace;\n\n  @property() public closeEditor?: () => void;\n\n  @state() private _saving?: boolean;\n\n  @state() private _changed?: boolean;\n\n  protected render(): TemplateResult | void {\n    return html`\n      <ha-app-layout>\n        <app-header slot=\"header\">\n          <app-toolbar>\n            <ha-icon-button\n              .path=${mdiClose}\n              @click=${this._closeEditor}\n              .label=${this.hass!.localize(\"ui.common.close\")}\n            ></ha-icon-button>\n            <div main-title>\n              ${this.hass!.localize(\n                \"ui.panel.lovelace.editor.raw_editor.header\"\n              )}\n            </div>\n            <div\n              class=\"save-button\n              ${classMap({\n                saved: this._saving! === false || this._changed === true,\n              })}\"\n            >\n              ${this._changed\n                ? this.hass!.localize(\n                    \"ui.panel.lovelace.editor.raw_editor.unsaved_changes\"\n                  )\n                : this.hass!.localize(\n                    \"ui.panel.lovelace.editor.raw_editor.saved\"\n                  )}\n            </div>\n            <mwc-button\n              raised\n              @click=${this._handleSave}\n              .disabled=${!this._changed}\n              >${this.hass!.localize(\n                \"ui.panel.lovelace.editor.raw_editor.save\"\n              )}</mwc-button\n            >\n          </app-toolbar>\n        </app-header>\n        <div class=\"content\">\n          <ha-code-editor\n            mode=\"yaml\"\n            autofocus\n            autocomplete-entities\n            autocomplete-icons\n            .hass=${this.hass}\n            @value-changed=${this._yamlChanged}\n            @editor-save=${this._handleSave}\n            dir=\"ltr\"\n          >\n          </ha-code-editor>\n        </div>\n      </ha-app-layout>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    this.yamlEditor.value = dump(this.lovelace!.rawConfig);\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    const oldLovelace = changedProps.get(\"lovelace\") as Lovelace | undefined;\n    if (\n      !this._saving &&\n      oldLovelace &&\n      this.lovelace &&\n      oldLovelace.rawConfig !== this.lovelace.rawConfig &&\n      !deepEqual(oldLovelace.rawConfig, this.lovelace.rawConfig)\n    ) {\n      showToast(this, {\n        message: this.hass!.localize(\n          \"ui.panel.lovelace.editor.raw_editor.lovelace_changed\"\n        ),\n        action: {\n          action: () => {\n            this.yamlEditor.value = dump(this.lovelace!.rawConfig);\n          },\n          text: this.hass!.localize(\n            \"ui.panel.lovelace.editor.raw_editor.reload\"\n          ),\n        },\n        duration: 0,\n        dismissable: false,\n      });\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          --code-mirror-height: 100%;\n        }\n\n        ha-app-layout {\n          height: 100vh;\n        }\n\n        app-toolbar {\n          background-color: var(--app-header-edit-background-color, #455a64);\n          color: var(--app-header-edit-text-color, #fff);\n        }\n\n        mwc-button[disabled] {\n          background-color: var(--mdc-theme-on-primary);\n          border-radius: 4px;\n        }\n\n        .comments {\n          font-size: 16px;\n        }\n\n        .content {\n          height: calc(100vh - var(--header-height));\n        }\n\n        .save-button {\n          opacity: 0;\n          font-size: 14px;\n          padding: 0px 10px;\n        }\n\n        .saved {\n          opacity: 1;\n        }\n      `,\n    ];\n  }\n\n  private _yamlChanged() {\n    this._changed = undoDepth(this.yamlEditor.codemirror!.state) > 0;\n    if (this._changed && !window.onbeforeunload) {\n      window.onbeforeunload = () => true;\n    } else if (!this._changed && window.onbeforeunload) {\n      window.onbeforeunload = null;\n    }\n  }\n\n  private async _closeEditor() {\n    if (\n      this._changed &&\n      !(await showConfirmationDialog(this, {\n        text: this.hass.localize(\n          \"ui.panel.lovelace.editor.raw_editor.confirm_unsaved_changes\"\n        ),\n        dismissText: this.hass!.localize(\"ui.common.stay\"),\n        confirmText: this.hass!.localize(\"ui.common.leave\"),\n      }))\n    ) {\n      return;\n    }\n\n    window.onbeforeunload = null;\n    if (this.closeEditor) {\n      this.closeEditor();\n    }\n  }\n\n  private async _removeConfig() {\n    try {\n      await this.lovelace!.deleteConfig();\n    } catch (err: any) {\n      showAlertDialog(this, {\n        text: this.hass.localize(\n          \"ui.panel.lovelace.editor.raw_editor.error_remove\",\n          \"error\",\n          err\n        ),\n      });\n    }\n    window.onbeforeunload = null;\n    if (this.closeEditor) {\n      this.closeEditor();\n    }\n  }\n\n  private async _handleSave() {\n    this._saving = true;\n\n    const value = this.yamlEditor.value;\n\n    if (!value) {\n      showConfirmationDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.lovelace.editor.raw_editor.confirm_remove_config_title\"\n        ),\n        text: this.hass.localize(\n          \"ui.panel.lovelace.editor.raw_editor.confirm_remove_config_text\"\n        ),\n        confirmText: this.hass.localize(\"ui.common.remove\"),\n        dismissText: this.hass.localize(\"ui.common.cancel\"),\n        confirm: () => this._removeConfig(),\n      });\n      return;\n    }\n\n    if (this.yamlEditor.hasComments) {\n      if (\n        !confirm(\n          this.hass.localize(\n            \"ui.panel.lovelace.editor.raw_editor.confirm_unsaved_comments\"\n          )\n        )\n      ) {\n        return;\n      }\n    }\n\n    let config: LovelaceConfig;\n    try {\n      config = load(value) as LovelaceConfig;\n    } catch (err: any) {\n      showAlertDialog(this, {\n        text: this.hass.localize(\n          \"ui.panel.lovelace.editor.raw_editor.error_parse_yaml\",\n          \"error\",\n          err\n        ),\n      });\n      this._saving = false;\n      return;\n    }\n    try {\n      assert(config, lovelaceStruct);\n    } catch (err: any) {\n      showAlertDialog(this, {\n        text: this.hass.localize(\n          \"ui.panel.lovelace.editor.raw_editor.error_invalid_config\",\n          \"error\",\n          err\n        ),\n      });\n      return;\n    }\n    // @ts-ignore\n    if (config.resources) {\n      showAlertDialog(this, {\n        text: this.hass.localize(\n          \"ui.panel.lovelace.editor.raw_editor.resources_moved\"\n        ),\n      });\n    }\n    try {\n      await this.lovelace!.saveConfig(config);\n    } catch (err: any) {\n      showAlertDialog(this, {\n        text: this.hass.localize(\n          \"ui.panel.lovelace.editor.raw_editor.error_save_yaml\",\n          \"error\",\n          err\n        ),\n      });\n    }\n    window.onbeforeunload = null;\n    this._changed = false;\n    this._saving = false;\n  }\n\n  private get yamlEditor(): HaCodeEditor {\n    return this.shadowRoot!.querySelector(\"ha-code-editor\")! as HaCodeEditor;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-editor\": LovelaceFullConfigEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}