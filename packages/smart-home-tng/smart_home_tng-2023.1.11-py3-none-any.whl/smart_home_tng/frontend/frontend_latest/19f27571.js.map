{"version":3,"file":"19f27571.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEA;AAIA;;AAKA;;;;AC1BA;;;AAKA;AAGA;;;AAqBA;;;;AAMA;;AA3BA;;AAGA;;AAAA;AAEA;AAEA;AAGA;;;;;;AAsBA;AACA;;;;AAMA;AACA;;AAEA;;;;;;AAQA;;;AAKA;;;;AAMA;;;AAGA;;;AAKA;;;AAKA;AACA;;AAEA;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgFA","sources":["webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/panels/developer-tools/yaml_configuration/developer-yaml-config.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public outlined = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        border-radius: var(--ha-card-border-radius, 4px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import \"@material/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { componentsWithService } from \"../../../common/config/components_with_service\";\nimport \"../../../components/buttons/ha-call-service-button\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-circular-progress\";\nimport { checkCoreConfig } from \"../../../data/core\";\nimport { domainToName } from \"../../../data/integration\";\nimport { showConfirmationDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { HomeAssistant, Route } from \"../../../types\";\n\n@customElement(\"developer-yaml-config\")\nexport class DeveloperYamlConfig extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public isWide!: boolean;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @property({ type: Boolean }) public showAdvanced!: boolean;\n\n  @state() private _validating = false;\n\n  @state() private _reloadableDomains: string[] = [];\n\n  @state() private _isValid: boolean | null = null;\n\n  private _validateLog = \"\";\n\n  protected updated(changedProperties) {\n    const oldHass = changedProperties.get(\"hass\");\n    if (\n      changedProperties.has(\"hass\") &&\n      (!oldHass || oldHass.config.components !== this.hass.config.components)\n    ) {\n      this._reloadableDomains = componentsWithService(\n        this.hass,\n        \"reload\"\n      ).sort();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"content\">\n        <ha-card\n          outlined\n          header=${this.hass.localize(\n            \"ui.panel.developer-tools.tabs.yaml.section.validation.heading\"\n          )}\n        >\n          <div class=\"card-content\">\n            ${this.hass.localize(\n              \"ui.panel.developer-tools.tabs.yaml.section.validation.introduction\"\n            )}\n            ${!this._validateLog\n              ? html`\n                  <div class=\"validate-container layout vertical center-center\">\n                    ${!this._validating\n                      ? html`\n                          ${this._isValid\n                            ? html`<div class=\"validate-result\" id=\"result\">\n                                ${this.hass.localize(\n                                  \"ui.panel.developer-tools.tabs.yaml.section.validation.valid\"\n                                )}\n                              </div>`\n                            : \"\"}\n                        `\n                      : html`\n                          <ha-circular-progress active></ha-circular-progress>\n                        `}\n                  </div>\n                `\n              : html`\n                  <div class=\"config-invalid\">\n                    <span class=\"text\">\n                      ${this.hass.localize(\n                        \"ui.panel.developer-tools.tabs.yaml.section.validation.invalid\"\n                      )}\n                    </span>\n                  </div>\n                  <div id=\"configLog\" class=\"validate-log\">\n                    ${this._validateLog}\n                  </div>\n                `}\n          </div>\n          <div class=\"card-actions\">\n            <mwc-button @click=${this._validateConfig}>\n              ${this.hass.localize(\n                \"ui.panel.developer-tools.tabs.yaml.section.validation.check_config\"\n              )}\n            </mwc-button>\n            <mwc-button\n              class=\"warning\"\n              @click=${this._restart}\n              .disabled=${this._validateLog}\n            >\n              ${this.hass.localize(\n                \"ui.panel.developer-tools.tabs.yaml.section.server_management.restart\"\n              )}\n            </mwc-button>\n          </div>\n        </ha-card>\n        <ha-card\n          outlined\n          header=${this.hass.localize(\n            \"ui.panel.developer-tools.tabs.yaml.section.reloading.heading\"\n          )}\n        >\n          <div class=\"card-content\">\n            ${this.hass.localize(\n              \"ui.panel.developer-tools.tabs.yaml.section.reloading.introduction\"\n            )}\n          </div>\n          <div class=\"card-actions\">\n            <ha-call-service-button\n              .hass=${this.hass}\n              domain=\"homeassistant\"\n              service=\"reload_core_config\"\n              >${this.hass.localize(\n                \"ui.panel.developer-tools.tabs.yaml.section.reloading.core\"\n              )}\n            </ha-call-service-button>\n          </div>\n          ${this._reloadableDomains.map(\n            (domain) =>\n              html`\n                <div class=\"card-actions\">\n                  <ha-call-service-button\n                    .hass=${this.hass}\n                    .domain=${domain}\n                    service=\"reload\"\n                    >${this.hass.localize(\n                      `ui.panel.developer-tools.tabs.yaml.section.reloading.${domain}`\n                    ) ||\n                    this.hass.localize(\n                      \"ui.panel.developer-tools.tabs.yaml.section.reloading.reload\",\n                      \"domain\",\n                      domainToName(this.hass.localize, domain)\n                    )}\n                  </ha-call-service-button>\n                </div>\n              `\n          )}\n        </ha-card>\n      </div>\n    `;\n  }\n\n  private async _validateConfig() {\n    this._validating = true;\n    this._validateLog = \"\";\n    this._isValid = null;\n\n    const configCheck = await checkCoreConfig(this.hass);\n    this._validating = false;\n    this._isValid = configCheck.result === \"valid\";\n\n    if (configCheck.errors) {\n      this._validateLog = configCheck.errors;\n    }\n  }\n\n  private _restart() {\n    showConfirmationDialog(this, {\n      title: this.hass.localize(\n        \"ui.panel.developer-tools.tabs.yaml.section.server_management.confirm_restart_title\"\n      ),\n      text: this.hass.localize(\n        \"ui.panel.developer-tools.tabs.yaml.section.server_management.confirm_restart_text\"\n      ),\n      confirmText: this.hass.localize(\n        \"ui.panel.developer-tools.tabs.yaml.section.server_management.restart\"\n      ),\n      confirm: () => {\n        this.hass.callService(\"homeassistant\", \"restart\").catch((reason) => {\n          this._isValid = false;\n          this._validateLog = reason.message;\n        });\n      },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .validate-container {\n          height: 60px;\n        }\n\n        .validate-result {\n          color: var(--success-color);\n          font-weight: 500;\n        }\n\n        .config-invalid {\n          margin: 1em 0;\n          text-align: center;\n        }\n\n        .config-invalid .text {\n          color: var(--error-color);\n          font-weight: 500;\n        }\n\n        .validate-log {\n          white-space: pre-line;\n          direction: ltr;\n        }\n\n        .content {\n          padding: 28px 20px 16px;\n          max-width: 1040px;\n          margin: 0 auto;\n        }\n\n        ha-card {\n          margin-top: 24px;\n        }\n\n        .card-actions {\n          display: flex;\n          justify-content: space-between;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"developer-yaml-config\": DeveloperYamlConfig;\n  }\n}\n"],"names":[],"sourceRoot":""}