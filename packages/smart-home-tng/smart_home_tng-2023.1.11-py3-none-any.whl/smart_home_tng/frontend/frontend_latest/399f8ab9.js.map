{"version":3,"file":"399f8ab9.js","mappings":";AAaA;;AAEA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;;;AC7CA;AACA;;AAOA;;AAGA;;;;AAMA;;;;;AAOA;;AAEA;;;AAMA;;;;;;AAOA;;;;AAMA;;;;AAMA;AACA;;AAEA;AACA;;AAQA;AAEA;;;AAIA;;;;;AAKA;;;;AAMA;AACA;;AAEA;AACA;;AAQA;AAEA;;;AAIA;;;;;AAKA;;;;AAMA;AACA;;AAEA;AACA;;AAQA;AAEA;;AAGA;;;AAIA;;;AAGA;;;;AAKA;AAEA;;;AAIA;;;AAKA;;;AAKA;;;AAKA;AAEA;;AAKA;;;AAGA;;;AAKA;;;;AAIA;;;AAIA;;;;AAIA;;;AAIA;;;AAIA;;;;AAMA;;;AAKA;;AAKA;AACA;;;AAIA;;;;AAIA;;;AAIA;;;;;;;AAOA;;;;AAKA;;;AAKA;;AAGA;;AAzPA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6XA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zha/dialog-zha-reconfigure-device.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { mdiCheckCircle, mdiCloseCircle } from \"@mdi/js\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/ha-circular-progress\";\nimport { createCloseHeading } from \"../../../../../components/ha-dialog\";\nimport \"../../../../../components/ha-svg-icon\";\nimport {\n  AttributeConfigurationStatus,\n  Cluster,\n  ClusterConfigurationEvent,\n  ClusterConfigurationStatus,\n  fetchClustersForZhaNode,\n  reconfigureNode,\n  ZHA_CHANNEL_CFG_DONE,\n  ZHA_CHANNEL_MSG_BIND,\n  ZHA_CHANNEL_MSG_CFG_RPT,\n} from \"../../../../../data/zha\";\nimport { haStyleDialog } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { ZHAReconfigureDeviceDialogParams } from \"./show-dialog-zha-reconfigure-device\";\n\n@customElement(\"dialog-zha-reconfigure-device\")\nclass DialogZHAReconfigureDevice extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _status?: string;\n\n  @state() private _stages?: string[];\n\n  @state() private _clusterConfigurationStatuses?: Map<\n    number,\n    ClusterConfigurationStatus\n  > = new Map();\n\n  @state() private _params: ZHAReconfigureDeviceDialogParams | undefined =\n    undefined;\n\n  @state() private _allSuccessful = true;\n\n  @state() private _showDetails = false;\n\n  private _subscribed?: Promise<UnsubscribeFunc>;\n\n  public showDialog(params: ZHAReconfigureDeviceDialogParams): void {\n    this._params = params;\n    this._stages = undefined;\n  }\n\n  public closeDialog(): void {\n    this._unsubscribe();\n    this._params = undefined;\n    this._status = undefined;\n    this._stages = undefined;\n    this._clusterConfigurationStatuses = undefined;\n    this._showDetails = false;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(`ui.dialogs.zha_reconfigure_device.heading`) +\n            \": \" +\n            (this._params?.device.user_given_name || this._params?.device.name)\n        )}\n      >\n        ${!this._status\n          ? html`\n              <p>\n                ${this.hass.localize(\n                  \"ui.dialogs.zha_reconfigure_device.introduction\"\n                )}\n              </p>\n              <p>\n                <em>\n                  ${this.hass.localize(\n                    \"ui.dialogs.zha_reconfigure_device.battery_device_warning\"\n                  )}\n                </em>\n              </p>\n              <mwc-button\n                slot=\"primaryAction\"\n                @click=${this._startReconfiguration}\n              >\n                ${this.hass.localize(\n                  \"ui.dialogs.zha_reconfigure_device.start_reconfiguration\"\n                )}\n              </mwc-button>\n            `\n          : ``}\n        ${this._status === \"started\"\n          ? html`\n              <div class=\"flex-container\">\n                <ha-circular-progress active></ha-circular-progress>\n                <div class=\"status\">\n                  <p>\n                    <b>\n                      ${this.hass.localize(\n                        \"ui.dialogs.zha_reconfigure_device.in_progress\"\n                      )}\n                    </b>\n                  </p>\n                  <p>\n                    ${this.hass.localize(\n                      \"ui.dialogs.zha_reconfigure_device.run_in_background\"\n                    )}\n                  </p>\n                </div>\n              </div>\n              <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n                ${this.hass.localize(\"ui.dialogs.generic.close\")}\n              </mwc-button>\n              <mwc-button slot=\"secondaryAction\" @click=${this._toggleDetails}>\n                ${this._showDetails\n                  ? this.hass.localize(\n                      `ui.dialogs.zha_reconfigure_device.button_hide`\n                    )\n                  : this.hass.localize(\n                      `ui.dialogs.zha_reconfigure_device.button_show`\n                    )}\n              </mwc-button>\n            `\n          : ``}\n        ${this._status === \"failed\"\n          ? html`\n              <div class=\"flex-container\">\n                <ha-svg-icon\n                  .path=${mdiCloseCircle}\n                  class=\"failed\"\n                ></ha-svg-icon>\n                <div class=\"status\">\n                  <p>\n                    ${this.hass.localize(\n                      \"ui.dialogs.zha_reconfigure_device.configuration_failed\"\n                    )}\n                  </p>\n                </div>\n              </div>\n              <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n                ${this.hass.localize(\"ui.dialogs.generic.close\")}\n              </mwc-button>\n              <mwc-button slot=\"secondaryAction\" @click=${this._toggleDetails}>\n                ${this._showDetails\n                  ? this.hass.localize(\n                      `ui.dialogs.zha_reconfigure_device.button_hide`\n                    )\n                  : this.hass.localize(\n                      `ui.dialogs.zha_reconfigure_device.button_show`\n                    )}\n              </mwc-button>\n            `\n          : ``}\n        ${this._status === \"finished\"\n          ? html`\n              <div class=\"flex-container\">\n                <ha-svg-icon\n                  .path=${mdiCheckCircle}\n                  class=\"success\"\n                ></ha-svg-icon>\n                <div class=\"status\">\n                  <p>\n                    ${this.hass.localize(\n                      \"ui.dialogs.zha_reconfigure_device.configuration_complete\"\n                    )}\n                  </p>\n                </div>\n              </div>\n              <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n                ${this.hass.localize(\"ui.dialogs.generic.close\")}\n              </mwc-button>\n              <mwc-button slot=\"secondaryAction\" @click=${this._toggleDetails}>\n                ${this._showDetails\n                  ? this.hass.localize(\n                      `ui.dialogs.zha_reconfigure_device.button_hide`\n                    )\n                  : this.hass.localize(\n                      `ui.dialogs.zha_reconfigure_device.button_show`\n                    )}\n              </mwc-button>\n            `\n          : ``}\n        ${this._stages\n          ? html`\n              <div class=\"stages\">\n                ${this._stages.map(\n                  (stage) => html`\n                    <span class=\"stage\">\n                      <ha-svg-icon\n                        .path=${mdiCheckCircle}\n                        class=\"success\"\n                      ></ha-svg-icon>\n                      ${stage}\n                    </span>\n                  `\n                )}\n              </div>\n            `\n          : \"\"}\n        ${this._showDetails\n          ? html`\n              <div class=\"wrapper\">\n                <h2 class=\"grid-item\">\n                  ${this.hass.localize(\n                    `ui.dialogs.zha_reconfigure_device.cluster_header`\n                  )}\n                </h2>\n                <h2 class=\"grid-item\">\n                  ${this.hass.localize(\n                    `ui.dialogs.zha_reconfigure_device.bind_header`\n                  )}\n                </h2>\n                <h2 class=\"grid-item\">\n                  ${this.hass.localize(\n                    `ui.dialogs.zha_reconfigure_device.reporting_header`\n                  )}\n                </h2>\n\n                ${this._clusterConfigurationStatuses?.size\n                  ? html`\n                      ${Array.from(\n                        this._clusterConfigurationStatuses.values()\n                      ).map(\n                        (clusterStatus) => html`\n                          <div class=\"grid-item\">\n                            ${clusterStatus.cluster.name}\n                          </div>\n                          <div class=\"grid-item\">\n                            ${clusterStatus.bindSuccess !== undefined\n                              ? clusterStatus.bindSuccess\n                                ? html`\n                                    <span class=\"stage\">\n                                      <ha-svg-icon\n                                        .path=${mdiCheckCircle}\n                                        class=\"success\"\n                                      ></ha-svg-icon>\n                                    </span>\n                                  `\n                                : html`\n                                    <span class=\"stage\">\n                                      <ha-svg-icon\n                                        .path=${mdiCloseCircle}\n                                        class=\"failed\"\n                                      ></ha-svg-icon>\n                                    </span>\n                                  `\n                              : \"\"}\n                          </div>\n                          <div class=\"grid-item\">\n                            ${clusterStatus.attributes.size > 0\n                              ? html`\n                                  <div class=\"attributes\">\n                                    <div class=\"grid-item\">\n                                      ${this.hass.localize(\n                                        `ui.dialogs.zha_reconfigure_device.attribute`\n                                      )}\n                                    </div>\n                                    <div class=\"grid-item\">\n                                      <div>\n                                        ${this.hass.localize(\n                                          `ui.dialogs.zha_reconfigure_device.min_max_change`\n                                        )}\n                                      </div>\n                                    </div>\n                                    ${Array.from(\n                                      clusterStatus.attributes.values()\n                                    ).map(\n                                      (attribute) => html`\n                                        <span class=\"grid-item\">\n                                          ${attribute.name}:\n                                          ${attribute.success\n                                            ? html`\n                                                <span class=\"stage\">\n                                                  <ha-svg-icon\n                                                    .path=${mdiCheckCircle}\n                                                    class=\"success\"\n                                                  ></ha-svg-icon>\n                                                </span>\n                                              `\n                                            : html`\n                                                <span class=\"stage\">\n                                                  <ha-svg-icon\n                                                    .path=${mdiCloseCircle}\n                                                    class=\"failed\"\n                                                  ></ha-svg-icon>\n                                                </span>\n                                              `}\n                                        </span>\n                                        <div class=\"grid-item\">\n                                          ${attribute.min}/${attribute.max}/${attribute.change}\n                                        </div>\n                                      `\n                                    )}\n                                  </div>\n                                `\n                              : \"\"}\n                          </div>\n                        `\n                      )}\n                    `\n                  : \"\"}\n              </div>\n            `\n          : \"\"}\n      </ha-dialog>\n    `;\n  }\n\n  private async _startReconfiguration(): Promise<void> {\n    if (!this.hass || !this._params) {\n      return;\n    }\n    this._clusterConfigurationStatuses = new Map(\n      (await fetchClustersForZhaNode(this.hass, this._params.device.ieee)).map(\n        (cluster: Cluster) => [\n          cluster.id,\n          {\n            cluster: cluster,\n            bindSuccess: undefined,\n            attributes: new Map<number, AttributeConfigurationStatus>(),\n          },\n        ]\n      )\n    );\n    this._subscribe(this._params);\n    this._status = \"started\";\n  }\n\n  private _handleMessage(message: ClusterConfigurationEvent): void {\n    if (message.type === ZHA_CHANNEL_CFG_DONE) {\n      this._unsubscribe();\n      this._status = this._allSuccessful ? \"finished\" : \"failed\";\n    } else {\n      const clusterConfigurationStatus =\n        this._clusterConfigurationStatuses!.get(\n          message.zha_channel_msg_data.cluster_id\n        );\n      if (message.type === ZHA_CHANNEL_MSG_BIND) {\n        if (!this._stages) {\n          this._stages = [\"binding\"];\n        }\n        const success = message.zha_channel_msg_data.success;\n        clusterConfigurationStatus!.bindSuccess = success;\n        this._allSuccessful = this._allSuccessful && success;\n      }\n      if (message.type === ZHA_CHANNEL_MSG_CFG_RPT) {\n        if (this._stages && !this._stages.includes(\"reporting\")) {\n          this._stages.push(\"reporting\");\n        }\n        const attributes = message.zha_channel_msg_data.attributes;\n        Object.keys(attributes).forEach((name) => {\n          const attribute = attributes[name];\n          clusterConfigurationStatus!.attributes.set(attribute.id, attribute);\n          this._allSuccessful = this._allSuccessful && attribute.success;\n        });\n      }\n      this.requestUpdate();\n    }\n  }\n\n  private _unsubscribe(): void {\n    if (this._subscribed) {\n      this._subscribed.then((unsub) => unsub());\n      this._subscribed = undefined;\n    }\n  }\n\n  private _subscribe(params: ZHAReconfigureDeviceDialogParams): void {\n    if (!this.hass) {\n      return;\n    }\n    this._subscribed = reconfigureNode(\n      this.hass,\n      params.device.ieee,\n      this._handleMessage.bind(this)\n    );\n  }\n\n  private _toggleDetails() {\n    this._showDetails = !this._showDetails;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        .wrapper {\n          display: grid;\n          grid-template-columns: 3fr 1fr 2fr;\n        }\n        .attributes {\n          display: grid;\n          grid-template-columns: 1fr 1fr;\n        }\n        .grid-item {\n          border: 1px solid;\n          padding: 7px;\n        }\n        .success {\n          color: var(--success-color);\n        }\n\n        .failed {\n          color: var(--warning-color);\n        }\n\n        .flex-container {\n          display: flex;\n          align-items: center;\n        }\n\n        .stages {\n          margin-top: 16px;\n        }\n\n        .stage ha-svg-icon {\n          width: 16px;\n          height: 16px;\n        }\n        .stage {\n          padding: 8px;\n        }\n\n        ha-svg-icon {\n          width: 68px;\n          height: 48px;\n        }\n\n        .flex-container ha-circular-progress,\n        .flex-container ha-svg-icon {\n          margin-right: 20px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-zha-reconfigure-device\": DialogZHAReconfigureDevice;\n  }\n}\n"],"names":[],"sourceRoot":""}