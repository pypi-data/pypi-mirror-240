"""
Code Generator for Smart Home - The Next Generation.

Generates helper code from component manifests.

Smart Home - TNG is a Home Automation framework for observing the state
of entities and react to changes. It is based on Home Assistant from
home-assistant.io and the Home Assistant Community.

Copyright (c) 2022, Andreas Nixdorf

This program is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation, either version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program.  If not, see
http://www.gnu.org/licenses/.
"""

import collections
import json
import typing

from smart_home_tng.core.setup_manager import SetupManager

from .code_generator import CodeGenerator
from .config import Config
from .integration import Integration

_NAME: typing.Final = "zeroconf"
_BASE: typing.Final = """
\"\"\"Automatically generated by shc_from_manifests.

To update, run python3 -m script.shc_from_manifests.
\"\"\"

import typing

# fmt: off

# pylint: disable=unused-variable
ZEROCONF: typing.Final = {}

# pylint: disable=unused-variable
HOMEKIT: typing.Final = {}
""".strip()


# pylint: disable=unused-variable
class ZeroConfGenerator(CodeGenerator):
    """Generate zeroconf file."""

    def __init__(self):
        super().__init__(_NAME)

    def generate_and_validate(
        self, integrations: dict[str, Integration], config: Config
    ) -> str:
        """Validate and generate zeroconf data."""
        service_type_dict = collections.defaultdict(list)
        homekit_dict = {}

        for domain in sorted(integrations):
            integration = integrations[domain]

            if not integration.manifest or not integration.config_flow:
                continue

            service_types = integration.manifest.get("zeroconf", [])
            homekit = integration.manifest.get("homekit", {})
            homekit_models = homekit.get("models", [])

            if not (service_types or homekit_models):
                continue

            for entry in service_types:
                data = {"domain": domain}
                if isinstance(entry, dict):
                    typ = entry["type"]
                    data.update(SetupManager.async_process_zeroconf_match_dict(entry))
                else:
                    typ = entry

                service_type_dict[typ].append(data)

            for model in homekit_models:
                if model in homekit_dict:
                    integration.add_error(
                        "zeroconf",
                        f"Integrations {domain} and {homekit_dict[model]} "
                        "have overlapping HomeKit models",
                    )
                    break

                homekit_dict[model] = domain

        # HomeKit models are matched on starting string, make sure none overlap.
        warned = set()
        for key in homekit_dict.items():
            if key in warned:
                continue

            # n^2 yoooo
            for key_2 in homekit_dict.items():
                if key == key_2 or key_2 in warned:
                    continue

                if key.startswith(key_2) or key_2.startswith(key):
                    integration.add_error(
                        "zeroconf",
                        f"Integrations {homekit_dict[key]} and {homekit_dict[key_2]} "
                        "have overlapping HomeKit models",
                    )
                    warned.add(key)
                    warned.add(key_2)
                    break

        zeroconf = collections.OrderedDict(
            (key, service_type_dict[key]) for key in sorted(service_type_dict)
        )
        homekit = collections.OrderedDict(
            (key, homekit_dict[key]) for key in sorted(homekit_dict)
        )

        return _BASE.format(
            json.dumps(zeroconf, indent=4), json.dumps(homekit, indent=4)
        )

    def validate(self, integrations: dict[str, Integration], config: Config) -> None:
        """Validate zeroconf file."""
        zeroconf_path = config.root / "homeassistant/generated/zeroconf.py"
        config.cache["zeroconf"] = content = self.generate_and_validate(
            integrations, config
        )

        if config.specific_integrations:
            return

        if not zeroconf_path.is_file():
            config.add_error(
                "zeroconf",
                "File zeroconf.py is not up to date. Run python3 -m script.shc_from_manifests.",
                fixable=True,
            )
            return

        with open(str(zeroconf_path), encoding="utf-8") as fp:
            current = fp.read().strip()
            if current != content:
                config.add_error(
                    "zeroconf",
                    "File zeroconf.py is not up to date. Run python3 -m script.shc_from_manifests.",
                    fixable=True,
                )
            return

    def generate(self, integrations: dict[str, Integration], config: Config):
        """Generate zeroconf file."""
        zeroconf_path = config.root / "smart_home_tng/core/generated/zeroconf.py"
        with open(str(zeroconf_path), "w", encoding="utf-8") as fp:
            fp.write(f"{config.cache['zeroconf']}\n")
