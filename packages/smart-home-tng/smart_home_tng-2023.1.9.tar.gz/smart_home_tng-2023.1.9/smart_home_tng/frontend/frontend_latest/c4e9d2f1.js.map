{"version":3,"file":"c4e9d2f1.js","mappings":";;AAuEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AAGA;;AAeA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;ACrGA;;AAEA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChEA;;;ACIA;;;AAGA;;;;;;;AAUA;;;;;AAUA;;AAIA;AACA;;;AAGA;;;AAGA;;AAIA;AAQA;AACA;;;;;;;AAQA;AAGA;AACA;;AAhHA;;;;AAsHA;AACA;AAGA;;AA1HA;;;AAgIA;;;;;;;;;;;AAgGA","sources":["webpack://home-assistant-frontend/mwc-textarea-base.ts","webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-textarea.ts","webpack://home-assistant-frontend/./src/panels/config/cloud/account/dialog-cloud-tts-try.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n\nimport {TextAreaCharCounter, TextFieldBase, TextFieldInputMode, TextFieldType} from '@material/mwc-textfield/mwc-textfield-base';\nimport {ComplexAttributeConverter, html, TemplateResult} from 'lit';\nimport {property, query} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\nimport {ifDefined} from 'lit/directives/if-defined.js';\nimport {live} from 'lit/directives/live.js';\n\nexport {TextAreaCharCounter, TextFieldInputMode, TextFieldType};\n\nconst booleanOrStringConverter: ComplexAttributeConverter<boolean|string> = {\n  fromAttribute(value) {\n    if (value === null) {\n      return false;\n    } else if (value === '') {\n      return true;\n    }\n\n    return value;\n  },\n  toAttribute(value) {\n    if (typeof value === 'boolean') {\n      return value ? '' : null;\n    }\n\n    return value;\n  }\n};\n\n/** @soyCompatible */\nexport abstract class TextAreaBase extends TextFieldBase {\n  @query('textarea') protected override formElement!: HTMLInputElement;\n\n  @property({type: Number}) rows = 2;\n\n  @property({type: Number}) cols = 20;\n\n  @property({converter: booleanOrStringConverter})\n  override charCounter: boolean|TextAreaCharCounter = false;\n\n  /** @soyTemplate */\n  override render(): TemplateResult {\n    const shouldRenderCharCounter = this.charCounter && this.maxLength !== -1;\n    const shouldRenderInternalCharCounter =\n        shouldRenderCharCounter && this.charCounter === 'internal';\n    const shouldRenderExternalCharCounter =\n        shouldRenderCharCounter && !shouldRenderInternalCharCounter;\n    const shouldRenderHelperText = !!this.helper || !!this.validationMessage ||\n        shouldRenderExternalCharCounter;\n\n    /** @classMap */\n    const classes = {\n      'mdc-text-field--disabled': this.disabled,\n      'mdc-text-field--no-label': !this.label,\n      'mdc-text-field--filled': !this.outlined,\n      'mdc-text-field--outlined': this.outlined,\n      'mdc-text-field--end-aligned': this.endAligned,\n      'mdc-text-field--with-internal-counter': shouldRenderInternalCharCounter,\n    };\n\n    return html`\n      <label class=\"mdc-text-field mdc-text-field--textarea ${\n        classMap(classes)}\">\n        ${this.renderRipple()}\n        ${this.outlined ? this.renderOutline() : this.renderLabel()}\n        ${this.renderInput()}\n        ${this.renderCharCounter(shouldRenderInternalCharCounter)}\n        ${this.renderLineRipple()}\n      </label>\n      ${\n        this.renderHelperText(\n            shouldRenderHelperText, shouldRenderExternalCharCounter)}\n    `;\n  }\n\n  /** @soyTemplate */\n  protected override renderInput(): TemplateResult {\n    const ariaLabelledbyOrUndef = !!this.label ? 'label' : undefined;\n    const minOrUndef = this.minLength === -1 ? undefined : this.minLength;\n    const maxOrUndef = this.maxLength === -1 ? undefined : this.maxLength;\n    const autocapitalizeOrUndef = this.autocapitalize ?\n        (this.autocapitalize as 'off' | 'none' | 'on' | 'sentences' | 'words' |\n         'characters' | 'off' | 'none' | 'on' | 'sentences' | 'words' |\n         'characters') :\n        undefined;\n\n    return html`\n      <textarea\n          aria-labelledby=${ifDefined(ariaLabelledbyOrUndef)}\n          class=\"mdc-text-field__input\"\n          .value=\"${live(this.value) as unknown as string}\"\n          rows=\"${this.rows}\"\n          cols=\"${this.cols}\"\n          ?disabled=\"${this.disabled}\"\n          placeholder=\"${this.placeholder}\"\n          ?required=\"${this.required}\"\n          ?readonly=\"${this.readOnly}\"\n          minlength=\"${ifDefined(minOrUndef)}\"\n          maxlength=\"${ifDefined(maxOrUndef)}\"\n          name=\"${ifDefined(this.name === '' ? undefined : this.name)}\"\n          inputmode=\"${ifDefined(this.inputMode)}\"\n          autocapitalize=\"${ifDefined(autocapitalizeOrUndef)}\"\n          @input=\"${this.handleInputChange}\"\n          @blur=\"${this.onInputBlur}\">\n      </textarea>`;\n  }\n}\n","import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { TextAreaBase } from \"@material/mwc-textarea/mwc-textarea-base\";\nimport { styles as textfieldStyles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { styles as textareaStyles } from \"@material/mwc-textarea/mwc-textarea.css\";\nimport { css, PropertyValues } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-textarea\")\nexport class HaTextArea extends TextAreaBase {\n  @property({ type: Boolean, reflect: true }) autogrow = false;\n\n  updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (this.autogrow && changedProperties.has(\"value\")) {\n      this.mdcRoot.dataset.value = this.value + '=\\u200B\"'; // add a zero-width space to correctly wrap\n    }\n  }\n\n  static override styles = [\n    textfieldStyles,\n    textareaStyles,\n    css`\n      :host([autogrow]) .mdc-text-field {\n        position: relative;\n        min-height: 74px;\n        min-width: 178px;\n        max-height: 200px;\n      }\n      :host([autogrow]) .mdc-text-field:after {\n        content: attr(data-value);\n        margin-top: 23px;\n        margin-bottom: 9px;\n        line-height: 1.5rem;\n        min-height: 42px;\n        padding: 0px 32px 0 16px;\n        letter-spacing: var(\n          --mdc-typography-subtitle1-letter-spacing,\n          0.009375em\n        );\n        visibility: hidden;\n        white-space: pre-wrap;\n      }\n      :host([autogrow]) .mdc-text-field__input {\n        position: absolute;\n        height: calc(100% - 32px);\n      }\n      :host([autogrow]) .mdc-text-field.mdc-text-field--no-label:after {\n        margin-top: 16px;\n        margin-bottom: 16px;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textarea\": HaTextArea;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { mdiPlayCircleOutline, mdiRobot } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { LocalStorage } from \"../../../../common/decorators/local-storage\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { stopPropagation } from \"../../../../common/dom/stop_propagation\";\nimport { computeStateDomain } from \"../../../../common/entity/compute_state_domain\";\nimport { computeStateName } from \"../../../../common/entity/compute_state_name\";\nimport { supportsFeature } from \"../../../../common/entity/supports-feature\";\nimport { createCloseHeading } from \"../../../../components/ha-dialog\";\nimport \"../../../../components/ha-select\";\nimport \"../../../../components/ha-textarea\";\nimport type { HaTextArea } from \"../../../../components/ha-textarea\";\nimport { showAutomationEditor } from \"../../../../data/automation\";\nimport { SUPPORT_PLAY_MEDIA } from \"../../../../data/media-player\";\nimport { convertTextToSpeech } from \"../../../../data/tts\";\nimport { showAlertDialog } from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyleDialog } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { TryTtsDialogParams } from \"./show-dialog-cloud-tts-try\";\n\n@customElement(\"dialog-cloud-try-tts\")\nexport class DialogTryTts extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _loadingExample = false;\n\n  @state() private _params?: TryTtsDialogParams;\n\n  @query(\"#message\") private _messageInput?: HaTextArea;\n\n  @LocalStorage(\"cloudTtsTryMessage\", false, false) private _message!: string;\n\n  @LocalStorage(\"cloudTtsTryTarget\", false, false) private _target!: string;\n\n  public showDialog(params: TryTtsDialogParams) {\n    this._params = params;\n  }\n\n  public closeDialog() {\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n    const target = this._target || \"browser\";\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        scrimClickAction\n        escapeKeyAction\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\"ui.panel.config.cloud.account.tts.dialog.header\")\n        )}\n      >\n        <div>\n          <ha-textarea\n            autogrow\n            id=\"message\"\n            label=\"Message\"\n            .value=${this._message ||\n            this.hass.localize(\n              \"ui.panel.config.cloud.account.tts.dialog.example_message\",\n              \"name\",\n              this.hass.user!.name\n            )}\n          >\n          </ha-textarea>\n\n          <ha-select\n            .label=${this.hass.localize(\n              \"ui.panel.config.cloud.account.tts.dialog.target\"\n            )}\n            id=\"target\"\n            .value=${target}\n            @selected=${this._handleTargetChanged}\n            fixedMenuPosition\n            naturalMenuWidth\n            @closed=${stopPropagation}\n          >\n            <mwc-list-item value=\"browser\">\n              ${this.hass.localize(\n                \"ui.panel.config.cloud.account.tts.dialog.target_browser\"\n              )}\n            </mwc-list-item>\n            ${Object.values(this.hass.states)\n              .filter(\n                (entity) =>\n                  computeStateDomain(entity) === \"media_player\" &&\n                  supportsFeature(entity, SUPPORT_PLAY_MEDIA)\n              )\n              .map(\n                (entity) => html`\n                  <mwc-list-item .value=${entity.entity_id}>\n                    ${computeStateName(entity)}\n                  </mwc-list-item>\n                `\n              )}\n          </ha-select>\n        </div>\n        <mwc-button\n          slot=\"primaryAction\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.cloud.account.tts.dialog.play\"\n          )}\n          @click=${this._playExample}\n          .disabled=${this._loadingExample}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlayCircleOutline}></ha-svg-icon>\n        </mwc-button>\n        <mwc-button\n          slot=\"secondaryAction\"\n          .disabled=${target === \"browser\"}\n          .label=${this.hass.localize(\n            \"ui.panel.config.cloud.account.tts.dialog.create_automation\"\n          )}\n          @click=${this._createAutomation}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiRobot}></ha-svg-icon>\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _handleTargetChanged(ev) {\n    this._target = ev.target.value;\n    this.requestUpdate(\"_target\");\n  }\n\n  private async _playExample() {\n    const message = this._messageInput?.value;\n    if (!message) {\n      return;\n    }\n    this._message = message;\n\n    if (this._target === \"browser\") {\n      // We create the audio element here + do a play, because iOS requires it to be done by user action\n      const audio = new Audio();\n      audio.play();\n      this._playBrowser(message, audio);\n    } else {\n      this.hass.callService(\"tts\", \"cloud_say\", {\n        entity_id: this._target,\n        message,\n      });\n    }\n  }\n\n  private _createAutomation() {\n    const message = this._messageInput!.value!;\n    this._message = message;\n    showAutomationEditor({\n      action: [\n        {\n          service: \"tts.cloud_say\",\n          data: {\n            entity_id: this._target,\n            message: message,\n          },\n        },\n      ],\n    });\n    this.closeDialog();\n  }\n\n  private async _playBrowser(message: string, audio: HTMLAudioElement) {\n    this._loadingExample = true;\n\n    const language = this._params!.defaultVoice[0];\n    const gender = this._params!.defaultVoice[1];\n\n    let url;\n    try {\n      const result = await convertTextToSpeech(this.hass, {\n        platform: \"cloud\",\n        message,\n        language,\n        options: { gender },\n      });\n      url = result.path;\n    } catch (err: any) {\n      this._loadingExample = false;\n      showAlertDialog(this, {\n        text: `Unable to load example. ${err.error || err.body || err}`,\n        warning: true,\n      });\n      return;\n    }\n    audio.src = url;\n    audio.addEventListener(\"canplaythrough\", () => {\n      audio.play();\n    });\n    audio.addEventListener(\"playing\", () => {\n      this._loadingExample = false;\n    });\n    audio.addEventListener(\"error\", () => {\n      showAlertDialog(this, { title: \"Error playing audio.\" });\n      this._loadingExample = false;\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --mdc-dialog-max-width: 500px;\n        }\n        ha-textarea,\n        ha-select {\n          width: 100%;\n        }\n        ha-select {\n          margin-top: 8px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-cloud-try-tts\": DialogTryTts;\n  }\n}\n"],"names":[],"sourceRoot":""}