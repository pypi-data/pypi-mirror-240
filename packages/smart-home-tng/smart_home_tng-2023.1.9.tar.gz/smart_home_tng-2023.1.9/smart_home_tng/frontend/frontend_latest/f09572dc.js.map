{"version":3,"file":"f09572dc.js","mappings":";;AA8FA;;AAGA;;AAIA;AACA;;;;AAMA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4IA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/views/hui-sidebar-view.ts"],"sourcesContent":["import { mdiArrowLeft, mdiArrowRight, mdiPlus } from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeRTL } from \"../../../common/util/compute_rtl\";\nimport type {\n  LovelaceViewConfig,\n  LovelaceViewElement,\n} from \"../../../data/lovelace\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { HuiErrorCard } from \"../cards/hui-error-card\";\nimport { HuiCardOptions } from \"../components/hui-card-options\";\nimport { replaceCard } from \"../editor/config-util\";\nimport type { Lovelace, LovelaceCard } from \"../types\";\n\nexport class SideBarView extends LitElement implements LovelaceViewElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public lovelace?: Lovelace;\n\n  @property({ type: Number }) public index?: number;\n\n  @property({ type: Boolean }) public isStrategy = false;\n\n  @property({ attribute: false }) public cards: Array<\n    LovelaceCard | HuiErrorCard\n  > = [];\n\n  @state() private _config?: LovelaceViewConfig;\n\n  private _mqlListenerRef?: () => void;\n\n  private _mql?: MediaQueryList;\n\n  public connectedCallback() {\n    super.connectedCallback();\n    this._mql = window.matchMedia(\"(min-width: 760px)\");\n    this._mqlListenerRef = this._createCards.bind(this);\n    this._mql.addListener(this._mqlListenerRef);\n  }\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    this._mql?.removeListener(this._mqlListenerRef!);\n    this._mqlListenerRef = undefined;\n    this._mql = undefined;\n  }\n\n  public setConfig(config: LovelaceViewConfig): void {\n    this._config = config;\n  }\n\n  public willUpdate(changedProperties: PropertyValues): void {\n    super.willUpdate(changedProperties);\n\n    if (this.lovelace?.editMode) {\n      import(\"./default-view-editable\");\n    }\n\n    if (changedProperties.has(\"cards\")) {\n      this._createCards();\n    }\n\n    if (\n      !changedProperties.has(\"lovelace\") &&\n      !changedProperties.has(\"_config\")\n    ) {\n      return;\n    }\n\n    const oldLovelace = changedProperties.get(\"lovelace\") as\n      | Lovelace\n      | undefined;\n\n    if (\n      (!changedProperties.has(\"cards\") &&\n        oldLovelace?.config !== this.lovelace?.config) ||\n      (oldLovelace && oldLovelace?.editMode !== this.lovelace?.editMode)\n    ) {\n      this._createCards();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"container\"></div>\n      ${this.lovelace?.editMode\n        ? html`\n            <ha-fab\n              .label=${this.hass!.localize(\n                \"ui.panel.lovelace.editor.edit_card.add\"\n              )}\n              extended\n              @click=${this._addCard}\n              class=${classMap({\n                rtl: computeRTL(this.hass!),\n              })}\n            >\n              <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n            </ha-fab>\n          `\n        : \"\"}\n    `;\n  }\n\n  private _addCard(): void {\n    fireEvent(this, \"ll-create-card\");\n  }\n\n  private _createCards(): void {\n    const mainDiv = document.createElement(\"div\");\n    mainDiv.id = \"main\";\n\n    let sidebarDiv: HTMLDivElement;\n    if (this._mql?.matches) {\n      sidebarDiv = document.createElement(\"div\");\n      sidebarDiv.id = \"sidebar\";\n    } else {\n      sidebarDiv = mainDiv;\n    }\n\n    if (this.hasUpdated) {\n      const oldMain = this.renderRoot.querySelector(\"#main\");\n      const oldSidebar = this.renderRoot.querySelector(\"#sidebar\");\n      const container = this.renderRoot.querySelector(\".container\")!;\n      if (oldMain) {\n        container.removeChild(oldMain);\n      }\n      if (oldSidebar) {\n        container.removeChild(oldSidebar);\n      }\n      container.appendChild(mainDiv);\n      container.appendChild(sidebarDiv);\n    } else {\n      this.updateComplete.then(() => {\n        const container = this.renderRoot.querySelector(\".container\")!;\n        container.appendChild(mainDiv);\n        container.appendChild(sidebarDiv);\n      });\n    }\n\n    this.cards.forEach((card: LovelaceCard, idx) => {\n      const cardConfig = this._config?.cards?.[idx];\n      let element: LovelaceCard | HuiCardOptions;\n      if (this.isStrategy || !this.lovelace?.editMode) {\n        card.editMode = false;\n        element = card;\n      } else {\n        element = document.createElement(\"hui-card-options\");\n        element.hass = this.hass;\n        element.lovelace = this.lovelace;\n        element.path = [this.index!, idx];\n        card.editMode = true;\n        const movePositionButton = document.createElement(\"ha-icon-button\");\n        movePositionButton.slot = \"buttons\";\n        const moveIcon = document.createElement(\"ha-svg-icon\");\n        moveIcon.path =\n          cardConfig?.view_layout?.position !== \"sidebar\"\n            ? mdiArrowRight\n            : mdiArrowLeft;\n        movePositionButton.appendChild(moveIcon);\n        movePositionButton.addEventListener(\"click\", () => {\n          this.lovelace!.saveConfig(\n            replaceCard(this.lovelace!.config, [this.index!, idx], {\n              ...cardConfig!,\n              view_layout: {\n                position:\n                  cardConfig?.view_layout?.position !== \"sidebar\"\n                    ? \"sidebar\"\n                    : \"main\",\n              },\n            })\n          );\n        });\n        element.appendChild(movePositionButton);\n        element.appendChild(card);\n      }\n      if (cardConfig?.view_layout?.position !== \"sidebar\") {\n        mainDiv.appendChild(element);\n      } else {\n        sidebarDiv.appendChild(element);\n      }\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        padding-top: 4px;\n        height: 100%;\n        box-sizing: border-box;\n      }\n\n      .container {\n        display: flex;\n        justify-content: center;\n        margin-left: 4px;\n        margin-right: 4px;\n      }\n\n      #main {\n        max-width: 1620px;\n        flex-grow: 2;\n      }\n\n      #sidebar {\n        flex-grow: 1;\n        flex-shrink: 0;\n        max-width: 380px;\n      }\n\n      .container > div {\n        min-width: 0;\n        box-sizing: border-box;\n      }\n\n      .container > div > *:not([hidden]) {\n        display: block;\n        margin: var(--masonry-view-card-margin, 4px 4px 8px);\n      }\n\n      @media (max-width: 500px) {\n        .container > div > * {\n          margin-left: 0;\n          margin-right: 0;\n        }\n      }\n\n      ha-fab {\n        position: sticky;\n        float: right;\n        right: calc(16px + env(safe-area-inset-right));\n        bottom: calc(16px + env(safe-area-inset-bottom));\n        z-index: 1;\n      }\n\n      ha-fab.rtl {\n        float: left;\n        right: auto;\n        left: calc(16px + env(safe-area-inset-left));\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-sidebar-view\": SideBarView;\n  }\n}\n\ncustomElements.define(\"hui-sidebar-view\", SideBarView);\n"],"names":[],"sourceRoot":""}