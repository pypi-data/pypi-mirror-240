{"version":3,"file":"06d94da1.js","mappings":";;AAyEA;;;;;AASA;;;;AAYA;AACA;;;AAIA;AAGA;;;AAGA;AACA;;;AAGA;AAIA;;;AAKA;;AAEA;;;AAIA;;;;;;AAOA;;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEA","sources":["webpack://home-assistant-frontend/./src/components/ha-gauge.ts"],"sourcesContent":["import { css, LitElement, PropertyValues, svg, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { formatNumber } from \"../common/number/format_number\";\nimport { blankBeforePercent } from \"../common/translations/blank_before_percent\";\nimport { afterNextRender } from \"../common/util/render-status\";\nimport { FrontendLocaleData } from \"../data/translation\";\nimport { getValueInPercentage, normalize } from \"../util/calculate\";\n\nconst getAngle = (value: number, min: number, max: number) => {\n  const percentage = getValueInPercentage(normalize(value, min, max), min, max);\n  return (percentage * 180) / 100;\n};\n\nexport interface LevelDefinition {\n  level: number;\n  stroke: string;\n  label?: string;\n}\n\n@customElement(\"ha-gauge\")\nexport class Gauge extends LitElement {\n  @property({ type: Number }) public min = 0;\n\n  @property({ type: Number }) public max = 100;\n\n  @property({ type: Number }) public value = 0;\n\n  @property({ type: String }) public valueText?: string;\n\n  @property() public locale!: FrontendLocaleData;\n\n  @property({ type: Boolean }) public needle?: boolean;\n\n  @property() public levels?: LevelDefinition[];\n\n  @property() public label = \"\";\n\n  @state() private _angle = 0;\n\n  @state() private _updated = false;\n\n  @state() private _segment_label? = \"\";\n\n  protected firstUpdated(changedProperties: PropertyValues) {\n    super.firstUpdated(changedProperties);\n    // Wait for the first render for the initial animation to work\n    afterNextRender(() => {\n      this._updated = true;\n      this._angle = getAngle(this.value, this.min, this.max);\n      this._segment_label = this.getSegmentLabel();\n      this._rescale_svg();\n    });\n  }\n\n  protected updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      !this._updated ||\n      (!changedProperties.has(\"value\") &&\n        !changedProperties.has(\"label\") &&\n        !changedProperties.has(\"_segment_label\"))\n    ) {\n      return;\n    }\n    this._angle = getAngle(this.value, this.min, this.max);\n    this._segment_label = this.getSegmentLabel();\n    this._rescale_svg();\n  }\n\n  protected render() {\n    return svg`\n      <svg viewBox=\"-50 -50 100 50\" class=\"gauge\">\n        ${\n          !this.needle || !this.levels\n            ? svg`<path\n          class=\"dial\"\n          d=\"M -40 0 A 40 40 0 0 1 40 0\"\n        ></path>`\n            : \"\"\n        }\n\n        ${\n          this.levels\n            ? this.levels\n                .sort((a, b) => a.level - b.level)\n                .map((level, idx) => {\n                  let firstPath: TemplateResult | undefined;\n                  if (idx === 0 && level.level !== this.min) {\n                    const angle = getAngle(this.min, this.min, this.max);\n                    firstPath = svg`<path\n                        stroke=\"var(--info-color)\"\n                        class=\"level\"\n                        d=\"M\n                          ${0 - 40 * Math.cos((angle * Math.PI) / 180)}\n                          ${0 - 40 * Math.sin((angle * Math.PI) / 180)}\n                         A 40 40 0 0 1 40 0\n                        \"\n                      ></path>`;\n                  }\n                  const angle = getAngle(level.level, this.min, this.max);\n                  return svg`${firstPath}<path\n                      stroke=\"${level.stroke}\"\n                      class=\"level\"\n                      d=\"M\n                        ${0 - 40 * Math.cos((angle * Math.PI) / 180)}\n                        ${0 - 40 * Math.sin((angle * Math.PI) / 180)}\n                       A 40 40 0 0 1 40 0\n                      \"\n                    ></path>`;\n                })\n            : \"\"\n        }\n        ${\n          this.needle\n            ? svg`<path\n                class=\"needle\"\n                d=\"M -25 -2.5 L -47.5 0 L -25 2.5 z\"\n                style=${styleMap({ transform: `rotate(${this._angle}deg)` })}\n              >\n              `\n            : svg`<path\n                class=\"value\"\n                d=\"M -40 0 A 40 40 0 1 0 40 0\"\n                style=${styleMap({ transform: `rotate(${this._angle}deg)` })}\n              >`\n        }\n        </path>\n      </svg>\n      <svg class=\"text\">\n        <text class=\"value-text\">\n          ${\n            this._segment_label\n              ? this._segment_label\n              : this.valueText || formatNumber(this.value, this.locale)\n          }${\n      this._segment_label\n        ? \"\"\n        : this.label === \"%\"\n        ? blankBeforePercent(this.locale) + \"%\"\n        : ` ${this.label}`\n    }\n        </text>\n      </svg>`;\n  }\n\n  private _rescale_svg() {\n    // Set the viewbox of the SVG containing the value to perfectly\n    // fit the text\n    // That way it will auto-scale correctly\n    const svgRoot = this.shadowRoot!.querySelector(\".text\")!;\n    const box = svgRoot.querySelector(\"text\")!.getBBox()!;\n    svgRoot.setAttribute(\n      \"viewBox\",\n      `${box.x} ${box!.y} ${box.width} ${box.height}`\n    );\n  }\n\n  private getSegmentLabel() {\n    if (this.levels) {\n      this.levels.sort((a, b) => a.level - b.level);\n      for (let i = this.levels.length - 1; i >= 0; i--) {\n        if (this.value >= this.levels[i].level) {\n          return this.levels[i].label;\n        }\n      }\n    }\n    return \"\";\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        position: relative;\n      }\n      .dial {\n        fill: none;\n        stroke: var(--primary-background-color);\n        stroke-width: 15;\n      }\n      .value {\n        fill: none;\n        stroke-width: 15;\n        stroke: var(--gauge-color);\n        transition: all 1s ease 0s;\n      }\n      .needle {\n        fill: var(--primary-text-color);\n        transition: all 1s ease 0s;\n      }\n      .level {\n        fill: none;\n        stroke-width: 15;\n      }\n      .gauge {\n        display: block;\n      }\n      .text {\n        position: absolute;\n        max-height: 40%;\n        max-width: 55%;\n        left: 50%;\n        bottom: -6%;\n        transform: translate(-50%, 0%);\n      }\n      .value-text {\n        font-size: 50px;\n        fill: var(--primary-text-color);\n        text-anchor: middle;\n      }\n    `;\n  }\n}\n"],"names":[],"sourceRoot":""}