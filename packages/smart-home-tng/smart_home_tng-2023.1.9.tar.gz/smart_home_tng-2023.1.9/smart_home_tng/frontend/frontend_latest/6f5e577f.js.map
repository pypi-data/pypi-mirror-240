{"version":3,"file":"6f5e577f.js","mappings":";;AAiCA;AACA;AACA;AACA;AAIA;;AAZA;;;;;;;;;AAkCA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;AAnBA;;;;;;;;;;;;;;AA0CA;;AChCA;AACA;AACA;AACA;AACA;;AATA;;;;;AAqBA;;ACPA;AACA;AACA;AAKA;AACA;AAIA;;AArBA;;AAEA;;AAwBA;;ACTA;AACA;AACA;AACA;AAIA;AAGA;AACA;;AApBA;;AAEA;;AAqBA;;;;;;;;;AAaA;;AC3BA;;AAWA;;AAEA;AACA;AACA;AAIA;;AAIA;;AApCA;;AAEA;;AAuCA;;;;;;;;;;;;;AAqBA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/elements/hui-icon-element.ts","webpack://home-assistant-frontend/./src/panels/lovelace/elements/hui-image-element.ts","webpack://home-assistant-frontend/./src/panels/lovelace/elements/hui-service-button-element.ts","webpack://home-assistant-frontend/./src/panels/lovelace/elements/hui-state-badge-element.ts","webpack://home-assistant-frontend/./src/panels/lovelace/elements/hui-state-icon-element.ts","webpack://home-assistant-frontend/./src/panels/lovelace/elements/hui-state-label-element.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport \"../../../components/ha-icon\";\nimport { ActionHandlerEvent } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\nimport { computeTooltip } from \"../common/compute-tooltip\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { handleAction } from \"../common/handle-action\";\nimport { hasAction } from \"../common/has-action\";\nimport { IconElementConfig, LovelaceElement } from \"./types\";\n\n@customElement(\"hui-icon-element\")\nexport class HuiIconElement extends LitElement implements LovelaceElement {\n  public hass?: HomeAssistant;\n\n  @state() private _config?: IconElementConfig;\n\n  public setConfig(config: IconElementConfig): void {\n    if (!config.icon) {\n      throw Error(\"Icon required\");\n    }\n\n    this._config = { hold_action: { action: \"more-info\" }, ...config };\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    return html`\n      <ha-icon\n        .icon=${this._config.icon}\n        .title=${computeTooltip(this.hass, this._config)}\n        @action=${this._handleAction}\n        .actionHandler=${actionHandler({\n          hasHold: hasAction(this._config!.hold_action),\n          hasDoubleClick: hasAction(this._config!.double_tap_action),\n        })}\n        tabindex=${ifDefined(\n          hasAction(this._config.tap_action) ? \"0\" : undefined\n        )}\n      ></ha-icon>\n    `;\n  }\n\n  private _handleAction(ev: ActionHandlerEvent) {\n    handleAction(this, this.hass!, this._config!, ev.detail.action!);\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        cursor: pointer;\n      }\n      ha-icon:focus {\n        outline: none;\n        background: var(--divider-color);\n        border-radius: 100%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-icon-element\": HuiIconElement;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { ActionHandlerEvent } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\nimport { computeTooltip } from \"../common/compute-tooltip\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { handleAction } from \"../common/handle-action\";\nimport { hasAction } from \"../common/has-action\";\nimport \"../components/hui-image\";\nimport { ImageElementConfig, LovelaceElement } from \"./types\";\n\n@customElement(\"hui-image-element\")\nexport class HuiImageElement extends LitElement implements LovelaceElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: ImageElementConfig;\n\n  public setConfig(config: ImageElementConfig): void {\n    if (!config) {\n      throw Error(\"Invalid configuration\");\n    }\n\n    this._config = { hold_action: { action: \"more-info\" }, ...config };\n\n    // eslint-disable-next-line wc/no-self-class\n    this.classList.toggle(\n      \"clickable\",\n      this._config.tap_action && this._config.tap_action.action !== \"none\"\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    return html`\n      <hui-image\n        .hass=${this.hass}\n        .entity=${this._config.entity}\n        .image=${this._config.image}\n        .stateImage=${this._config.state_image}\n        .cameraImage=${this._config.camera_image}\n        .filter=${this._config.filter}\n        .stateFilter=${this._config.state_filter}\n        .title=${computeTooltip(this.hass, this._config)}\n        .aspectRatio=${this._config.aspect_ratio}\n        @action=${this._handleAction}\n        .actionHandler=${actionHandler({\n          hasHold: hasAction(this._config!.hold_action),\n          hasDoubleClick: hasAction(this._config!.double_tap_action),\n        })}\n        tabindex=${ifDefined(\n          hasAction(this._config.tap_action) ? \"0\" : undefined\n        )}\n      ></hui-image>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host(.clickable) {\n        cursor: pointer;\n        overflow: hidden;\n        -webkit-touch-callout: none !important;\n      }\n      hui-image {\n        -webkit-user-select: none !important;\n      }\n      hui-image:focus {\n        outline: none;\n        background: var(--divider-color);\n        border-radius: 100%;\n      }\n    `;\n  }\n\n  private _handleAction(ev: ActionHandlerEvent) {\n    handleAction(this, this.hass!, this._config!, ev.detail.action!);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-image-element\": HuiImageElement;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, state } from \"lit/decorators\";\nimport \"../../../components/buttons/ha-call-service-button\";\nimport { HomeAssistant } from \"../../../types\";\nimport { LovelaceElement, ServiceButtonElementConfig } from \"./types\";\n\n@customElement(\"hui-service-button-element\")\nexport class HuiServiceButtonElement\n  extends LitElement\n  implements LovelaceElement\n{\n  public hass?: HomeAssistant;\n\n  @state() private _config?: ServiceButtonElementConfig;\n\n  private _domain?: string;\n\n  private _service?: string;\n\n  public setConfig(config: ServiceButtonElementConfig): void {\n    if (!config || !config.service) {\n      throw Error(\"Service required\");\n    }\n\n    [this._domain, this._service] = config.service.split(\".\", 2);\n\n    if (!this._domain) {\n      throw Error(\"Service does not have a service domain\");\n    }\n\n    if (!this._service) {\n      throw Error(\"Service does not have a service name\");\n    }\n\n    this._config = config;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    return html`\n      <ha-call-service-button\n        .hass=${this.hass}\n        .domain=${this._domain}\n        .service=${this._service}\n        .serviceData=${this._config.service_data}\n        >${this._config.title}</ha-call-service-button\n      >\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-call-service-button {\n        color: var(--primary-color);\n        white-space: nowrap;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-service-button-element\": HuiServiceButtonElement;\n  }\n}\n","import { html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport \"../../../components/entity/ha-state-label-badge\";\nimport { ActionHandlerEvent } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { handleAction } from \"../common/handle-action\";\nimport { hasAction } from \"../common/has-action\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport \"../components/hui-warning-element\";\nimport { LovelaceElement, StateBadgeElementConfig } from \"./types\";\n\n@customElement(\"hui-state-badge-element\")\nexport class HuiStateBadgeElement\n  extends LitElement\n  implements LovelaceElement\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: StateBadgeElementConfig;\n\n  public setConfig(config: StateBadgeElementConfig): void {\n    if (!config.entity) {\n      throw Error(\"Entity required\");\n    }\n\n    this._config = { hold_action: { action: \"more-info\" }, ...config };\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity!];\n\n    if (!stateObj) {\n      return html`\n        <hui-warning-element\n          .label=${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        ></hui-warning-element>\n      `;\n    }\n\n    return html`\n      <ha-state-label-badge\n        .hass=${this.hass}\n        .state=${stateObj}\n        .title=${this._config.title === undefined\n          ? computeStateName(stateObj)\n          : this._config.title === null\n          ? \"\"\n          : this._config.title}\n        @action=${this._handleAction}\n        .actionHandler=${actionHandler({\n          hasHold: hasAction(this._config!.hold_action),\n          hasDoubleClick: hasAction(this._config!.double_tap_action),\n        })}\n        tabindex=${ifDefined(\n          hasAction(this._config.tap_action) ? \"0\" : undefined\n        )}\n      ></ha-state-label-badge>\n    `;\n  }\n\n  private _handleAction(ev: ActionHandlerEvent) {\n    handleAction(this, this.hass!, this._config!, ev.detail.action!);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-state-badge-element\": HuiStateBadgeElement;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport \"../../../components/entity/state-badge\";\nimport { ActionHandlerEvent } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\nimport { computeTooltip } from \"../common/compute-tooltip\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { handleAction } from \"../common/handle-action\";\nimport { hasAction } from \"../common/has-action\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport \"../components/hui-warning-element\";\nimport { LovelaceElement, StateIconElementConfig } from \"./types\";\n\n@customElement(\"hui-state-icon-element\")\nexport class HuiStateIconElement extends LitElement implements LovelaceElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: StateIconElementConfig;\n\n  public setConfig(config: StateIconElementConfig): void {\n    if (!config.entity) {\n      throw Error(\"Entity required\");\n    }\n\n    this._config = {\n      state_color: true,\n      hold_action: { action: \"more-info\" },\n      ...config,\n    };\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity!];\n\n    if (!stateObj) {\n      return html`\n        <hui-warning-element\n          .label=${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        ></hui-warning-element>\n      `;\n    }\n\n    return html`\n      <state-badge\n        .stateObj=${stateObj}\n        .title=${computeTooltip(this.hass, this._config)}\n        @action=${this._handleAction}\n        .actionHandler=${actionHandler({\n          hasHold: hasAction(this._config!.hold_action),\n          hasDoubleClick: hasAction(this._config!.double_tap_action),\n        })}\n        tabindex=${ifDefined(\n          hasAction(this._config.tap_action) ? \"0\" : undefined\n        )}\n        .overrideIcon=${this._config.icon}\n        .stateColor=${this._config.state_color}\n      ></state-badge>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        cursor: pointer;\n      }\n      state-badge:focus {\n        outline: none;\n        background: var(--divider-color);\n        border-radius: 100%;\n      }\n    `;\n  }\n\n  private _handleAction(ev: ActionHandlerEvent) {\n    handleAction(this, this.hass!, this._config!, ev.detail.action!);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-state-icon-element\": HuiStateIconElement;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { computeStateDisplay } from \"../../../common/entity/compute_state_display\";\nimport { ActionHandlerEvent } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\nimport { computeTooltip } from \"../common/compute-tooltip\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { handleAction } from \"../common/handle-action\";\nimport { hasAction } from \"../common/has-action\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport \"../components/hui-warning-element\";\nimport { LovelaceElement, StateLabelElementConfig } from \"./types\";\n\n@customElement(\"hui-state-label-element\")\nclass HuiStateLabelElement extends LitElement implements LovelaceElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: StateLabelElementConfig;\n\n  public setConfig(config: StateLabelElementConfig): void {\n    if (!config.entity) {\n      throw Error(\"Entity required\");\n    }\n\n    this._config = { hold_action: { action: \"more-info\" }, ...config };\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity!];\n\n    if (!stateObj) {\n      return html`\n        <hui-warning-element\n          .label=${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        ></hui-warning-element>\n      `;\n    }\n\n    if (\n      this._config.attribute &&\n      !(this._config.attribute in stateObj.attributes)\n    ) {\n      return html`\n        <hui-warning-element\n          label=${this.hass.localize(\n            \"ui.panel.lovelace.warning.attribute_not_found\",\n            \"attribute\",\n            this._config.attribute,\n            \"entity\",\n            this._config.entity\n          )}\n        ></hui-warning-element>\n      `;\n    }\n\n    return html`\n      <div\n        .title=${computeTooltip(this.hass, this._config)}\n        @action=${this._handleAction}\n        .actionHandler=${actionHandler({\n          hasHold: hasAction(this._config!.hold_action),\n          hasDoubleClick: hasAction(this._config!.double_tap_action),\n        })}\n        tabindex=${ifDefined(\n          hasAction(this._config.tap_action) ? \"0\" : undefined\n        )}\n      >\n        ${this._config.prefix}${!this._config.attribute\n          ? computeStateDisplay(this.hass.localize, stateObj, this.hass.locale)\n          : stateObj.attributes[this._config.attribute]}${this._config.suffix}\n      </div>\n    `;\n  }\n\n  private _handleAction(ev: ActionHandlerEvent) {\n    handleAction(this, this.hass!, this._config!, ev.detail.action!);\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        cursor: pointer;\n      }\n      div {\n        padding: 8px;\n        white-space: nowrap;\n      }\n      div:focus {\n        outline: none;\n        background: var(--divider-color);\n        border-radius: 100%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-state-label-element\": HuiStateLabelElement;\n  }\n}\n"],"names":[],"sourceRoot":""}