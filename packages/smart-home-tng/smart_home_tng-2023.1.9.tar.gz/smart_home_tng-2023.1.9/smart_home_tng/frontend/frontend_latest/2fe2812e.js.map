{"version":3,"file":"2fe2812e.js","mappings":";AAuEA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAOA;AACA;AAEA;AAEA;AACA;AACA;AACA;;;AAIA;;;;;;;;;;AA+DA;;ACnBA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAIA;;;;AAiCA","sources":["webpack://home-assistant-frontend/./src/components/entity/ha-statistics-picker.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-statistics-graph-card-editor.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { PolymerChangedEvent } from \"../../polymer-types\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"./ha-statistic-picker\";\n\n@customElement(\"ha-statistics-picker\")\nclass HaStatisticsPicker extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ type: Array }) public value?: string[];\n\n  @property({ type: Array }) public statisticIds?: string[];\n\n  @property({ attribute: \"statistic-types\" })\n  public statisticTypes?: \"mean\" | \"sum\";\n\n  @property({ attribute: \"picked-statistic-label\" })\n  public pickedStatisticLabel?: string;\n\n  @property({ attribute: \"pick-statistic-label\" })\n  public pickStatisticLabel?: string;\n\n  /**\n   * Show only statistics natively stored with these units of measurements.\n   * @attr include-statistics-unit-of-measurement\n   */\n  @property({\n    attribute: \"include-statistics-unit-of-measurement\",\n  })\n  public includeStatisticsUnitOfMeasurement?: string[] | string;\n\n  /**\n   * Show only statistics displayed with these units of measurements.\n   * @attr include-display-unit-of-measurement\n   */\n  @property({ attribute: \"include-display-unit-of-measurement\" })\n  public includeDisplayUnitOfMeasurement?: string[] | string;\n\n  /**\n   * Ignore filtering of statistics type and units when only a single statistic is selected.\n   * @type {boolean}\n   * @attr ignore-restrictions-on-first-statistic\n   */\n  @property({\n    type: Boolean,\n    attribute: \"ignore-restrictions-on-first-statistic\",\n  })\n  public ignoreRestrictionsOnFirstStatistic = false;\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n\n    const ignoreRestriction =\n      this.ignoreRestrictionsOnFirstStatistic &&\n      this._currentStatistics.length <= 1;\n\n    const includeDisplayUnitCurrent = ignoreRestriction\n      ? undefined\n      : this.includeDisplayUnitOfMeasurement;\n    const includeStatisticsUnitCurrent = ignoreRestriction\n      ? undefined\n      : this.includeStatisticsUnitOfMeasurement;\n    const includeStatisticTypesCurrent = ignoreRestriction\n      ? undefined\n      : this.statisticTypes;\n\n    return html`\n      ${this._currentStatistics.map(\n        (statisticId) => html`\n          <div>\n            <ha-statistic-picker\n              .curValue=${statisticId}\n              .hass=${this.hass}\n              .includeDisplayUnitOfMeasurement=${includeDisplayUnitCurrent}\n              .includeStatisticsUnitOfMeasurement=${includeStatisticsUnitCurrent}\n              .value=${statisticId}\n              .statisticTypes=${includeStatisticTypesCurrent}\n              .statisticIds=${this.statisticIds}\n              .label=${this.pickedStatisticLabel}\n              @value-changed=${this._statisticChanged}\n            ></ha-statistic-picker>\n          </div>\n        `\n      )}\n      <div>\n        <ha-statistic-picker\n          .hass=${this.hass}\n          .includeDisplayUnitOfMeasurement=${this\n            .includeDisplayUnitOfMeasurement}\n          .includeStatisticsUnitOfMeasurement=${this\n            .includeStatisticsUnitOfMeasurement}\n          .statisticTypes=${this.statisticTypes}\n          .statisticIds=${this.statisticIds}\n          .label=${this.pickStatisticLabel}\n          @value-changed=${this._addStatistic}\n        ></ha-statistic-picker>\n      </div>\n    `;\n  }\n\n  private get _currentStatistics() {\n    return this.value || [];\n  }\n\n  private async _updateStatistics(entities) {\n    this.value = entities;\n\n    fireEvent(this, \"value-changed\", {\n      value: entities,\n    });\n  }\n\n  private _statisticChanged(event: PolymerChangedEvent<string>) {\n    event.stopPropagation();\n    const oldValue = (event.currentTarget as any).curValue;\n    const newValue = event.detail.value;\n    if (newValue === oldValue) {\n      return;\n    }\n    const currentStatistics = this._currentStatistics;\n    if (!newValue || currentStatistics.includes(newValue)) {\n      this._updateStatistics(\n        currentStatistics.filter((ent) => ent !== oldValue)\n      );\n      return;\n    }\n    this._updateStatistics(\n      currentStatistics.map((ent) => (ent === oldValue ? newValue : ent))\n    );\n  }\n\n  private async _addStatistic(event: PolymerChangedEvent<string>) {\n    event.stopPropagation();\n    const toAdd = event.detail.value;\n    if (!toAdd) {\n      return;\n    }\n    (event.currentTarget as any).value = \"\";\n    if (!toAdd) {\n      return;\n    }\n    const currentEntities = this._currentStatistics;\n    if (currentEntities.includes(toAdd)) {\n      return;\n    }\n\n    this._updateStatistics([...currentEntities, toAdd]);\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        width: 200px;\n        display: block;\n      }\n      ha-statistic-picker {\n        display: block;\n        width: 100%;\n        margin-top: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-statistics-picker\": HaStatisticsPicker;\n  }\n}\n","import \"../../../../components/ha-form/ha-form\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport {\n  array,\n  assert,\n  assign,\n  literal,\n  number,\n  object,\n  optional,\n  string,\n  union,\n} from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport type { LocalizeFunc } from \"../../../../common/translations/localize\";\nimport \"../../../../components/entity/ha-statistics-picker\";\nimport type { SchemaUnion } from \"../../../../components/ha-form/types\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { StatisticsGraphCardConfig } from \"../../cards/types\";\nimport { processConfigEntities } from \"../../common/process-config-entities\";\nimport type { LovelaceCardEditor } from \"../../types\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { entitiesConfigStruct } from \"../structs/entities-struct\";\n\nconst statTypeStruct = union([\n  literal(\"sum\"),\n  literal(\"min\"),\n  literal(\"max\"),\n  literal(\"mean\"),\n]);\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    entities: array(entitiesConfigStruct),\n    title: optional(string()),\n    days_to_show: optional(number()),\n    period: optional(\n      union([\n        literal(\"5minute\"),\n        literal(\"hour\"),\n        literal(\"day\"),\n        literal(\"month\"),\n      ])\n    ),\n    chart_type: optional(union([literal(\"bar\"), literal(\"line\")])),\n    stat_types: optional(union([array(statTypeStruct), statTypeStruct])),\n  })\n);\n\nconst periods = [\"5minute\", \"hour\", \"day\", \"month\"] as const;\n\n@customElement(\"hui-statistics-graph-card-editor\")\nexport class HuiStatisticsGraphCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: StatisticsGraphCardConfig;\n\n  @state() private _configEntities?: string[];\n\n  public setConfig(config: StatisticsGraphCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n    this._configEntities = config.entities\n      ? processConfigEntities(config.entities, false).map((cfg) => cfg.entity)\n      : [];\n  }\n\n  private _schema = memoizeOne(\n    (localize: LocalizeFunc) =>\n      [\n        { name: \"title\", selector: { text: {} } },\n        {\n          name: \"\",\n          type: \"grid\",\n          schema: [\n            {\n              name: \"period\",\n              required: true,\n              selector: {\n                select: {\n                  options: periods.map((period) => ({\n                    value: period,\n                    label: localize(\n                      `ui.panel.lovelace.editor.card.statistics-graph.periods.${period}`\n                    ),\n                  })),\n                },\n              },\n            },\n            {\n              name: \"days_to_show\",\n              required: true,\n              selector: { number: { min: 1, mode: \"box\" } },\n            },\n            {\n              name: \"stat_types\",\n              required: true,\n              type: \"multi_select\",\n              options: [\n                [\"mean\", \"Mean\"],\n                [\"min\", \"Min\"],\n                [\"max\", \"Max\"],\n                [\"sum\", \"Sum\"],\n              ],\n            },\n            {\n              name: \"chart_type\",\n              required: true,\n              type: \"select\",\n              options: [\n                [\"line\", \"Line\"],\n                [\"bar\", \"Bar\"],\n              ],\n            },\n          ],\n        },\n      ] as const\n  );\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const schema = this._schema(this.hass.localize);\n    const stat_types = this._config!.stat_types\n      ? Array.isArray(this._config!.stat_types)\n        ? this._config!.stat_types\n        : [this._config!.stat_types]\n      : [\"mean\", \"min\", \"max\", \"sum\"];\n    const data = {\n      chart_type: \"line\",\n      period: \"hour\",\n      days_to_show: 30,\n      ...this._config,\n      stat_types,\n    };\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${data}\n        .schema=${schema}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n        <ha-statistics-picker\n          .hass=${this.hass}\n          .pickStatisticLabel=${`Add a statistic`}\n          .pickedStatisticLabel=${`Statistic`}\n          .value=${this._configEntities}\n          .configValue=${\"entities\"}\n          @value-changed=${this._entitiesChanged}\n        ></ha-statistics-picker>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    fireEvent(this, \"config-changed\", { config: ev.detail.value });\n  }\n\n  private _entitiesChanged(ev: CustomEvent): void {\n    fireEvent(this, \"config-changed\", {\n      config: { ...this._config!, entities: ev.detail.value },\n    });\n  }\n\n  private _computeLabelCallback = (\n    schema: SchemaUnion<ReturnType<typeof this._schema>>\n  ) => {\n    switch (schema.name) {\n      case \"chart_type\":\n      case \"stat_types\":\n      case \"period\":\n        return this.hass!.localize(\n          `ui.panel.lovelace.editor.card.statistics-graph.${schema.name}`\n        );\n      default:\n        return this.hass!.localize(\n          `ui.panel.lovelace.editor.card.generic.${schema.name}`\n        );\n    }\n  };\n\n  static styles: CSSResultGroup = css`\n    ha-statistics-picker {\n      width: 100%;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-statistics-graph-card-editor\": HuiStatisticsGraphCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}