{"version":3,"file":"1ed6a861.js","mappings":";AAaA;;AAEA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;;;ACxDA;AACA;;;AAGA;;;AAKA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;;;AAIA;AACA;;;;;AAKA;;;AAWA;AAeA;;;;;;;;AAUA;AACA;;AAEA;;;;AAIA;AACA;;AAEA;;;AAIA;;;;;;;;;;;;;;;;;;;;AA2DA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/panels/config/devices/device-registry-detail/dialog-device-registry-detail.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-area-picker\";\nimport \"../../../../components/ha-dialog\";\nimport type { HaSwitch } from \"../../../../components/ha-switch\";\nimport \"../../../../components/ha-textfield\";\nimport {\n  computeDeviceName,\n  DeviceRegistryEntry,\n} from \"../../../../data/device_registry\";\nimport { haStyle, haStyleDialog } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { DeviceRegistryDetailDialogParams } from \"./show-dialog-device-registry-detail\";\nimport \"../../../../components/ha-alert\";\n\n@customElement(\"dialog-device-registry-detail\")\nclass DialogDeviceRegistryDetail extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _nameByUser!: string;\n\n  @state() private _error?: string;\n\n  @state() private _params?: DeviceRegistryDetailDialogParams;\n\n  @state() private _areaId!: string;\n\n  @state() private _disabledBy!: DeviceRegistryEntry[\"disabled_by\"];\n\n  @state() private _submitting = false;\n\n  public async showDialog(\n    params: DeviceRegistryDetailDialogParams\n  ): Promise<void> {\n    this._params = params;\n    this._error = undefined;\n    this._nameByUser = this._params.device.name_by_user || \"\";\n    this._areaId = this._params.device.area_id || \"\";\n    this._disabledBy = this._params.device.disabled_by;\n    await this.updateComplete;\n  }\n\n  public closeDialog(): void {\n    this._error = \"\";\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n    const device = this._params.device;\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${computeDeviceName(device, this.hass)}\n      >\n        <div>\n          ${this._error\n            ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert> `\n            : \"\"}\n          <div class=\"form\">\n            <ha-textfield\n              .value=${this._nameByUser}\n              @input=${this._nameChanged}\n              .label=${this.hass.localize(\"ui.panel.config.devices.name\")}\n              .placeholder=${device.name || \"\"}\n              .disabled=${this._submitting}\n              dialogInitialFocus\n            ></ha-textfield>\n            <ha-area-picker\n              .hass=${this.hass}\n              .value=${this._areaId}\n              @value-changed=${this._areaPicked}\n            ></ha-area-picker>\n            <div class=\"row\">\n              <ha-switch\n                .checked=${!this._disabledBy}\n                @change=${this._disabledByChanged}\n              >\n              </ha-switch>\n              <div>\n                <div>\n                  ${this.hass.localize(\n                    \"ui.panel.config.devices.enabled_label\",\n                    \"type\",\n                    this.hass.localize(\n                      `ui.panel.config.devices.type.${\n                        device.entry_type || \"device\"\n                      }`\n                    )\n                  )}\n                </div>\n                <div class=\"secondary\">\n                  ${this._disabledBy && this._disabledBy !== \"user\"\n                    ? this.hass.localize(\n                        \"ui.panel.config.devices.enabled_cause\",\n                        \"type\",\n                        this.hass.localize(\n                          `ui.panel.config.devices.type.${\n                            device.entry_type || \"device\"\n                          }`\n                        ),\n                        \"cause\",\n                        this.hass.localize(\n                          `config_entry.disabled_by.${this._disabledBy}`\n                        )\n                      )\n                    : \"\"}\n                  ${this.hass.localize(\n                    \"ui.panel.config.devices.enabled_description\"\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <mwc-button\n          slot=\"secondaryAction\"\n          @click=${this.closeDialog}\n          .disabled=${this._submitting}\n        >\n          ${this.hass.localize(\"ui.common.cancel\")}\n        </mwc-button>\n        <mwc-button\n          slot=\"primaryAction\"\n          @click=${this._updateEntry}\n          .disabled=${this._submitting}\n        >\n          ${this.hass.localize(\"ui.panel.config.devices.update\")}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _nameChanged(ev): void {\n    this._error = undefined;\n    this._nameByUser = ev.target.value;\n  }\n\n  private _areaPicked(event: CustomEvent): void {\n    this._areaId = event.detail.value;\n  }\n\n  private _disabledByChanged(ev: Event): void {\n    this._disabledBy = (ev.target as HaSwitch).checked ? null : \"user\";\n  }\n\n  private async _updateEntry(): Promise<void> {\n    this._submitting = true;\n    try {\n      await this._params!.updateEntry({\n        name_by_user: this._nameByUser.trim() || null,\n        area_id: this._areaId || null,\n        disabled_by: this._disabledBy || null,\n      });\n      this.closeDialog();\n    } catch (err: any) {\n      this._error =\n        err.message ||\n        this.hass.localize(\"ui.panel.config.devices.unknown_error\");\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      haStyleDialog,\n      css`\n        mwc-button.warning {\n          margin-right: auto;\n        }\n        ha-textfield {\n          display: block;\n          margin-bottom: 16px;\n        }\n        ha-switch {\n          margin-right: 16px;\n          margin-inline-end: 16px;\n          margin-inline-start: initial;\n          direction: var(--direction);\n        }\n        .row {\n          margin-top: 8px;\n          color: var(--primary-text-color);\n          display: flex;\n          align-items: center;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-device-registry-detail\": DialogDeviceRegistryDetail;\n  }\n}\n"],"names":[],"sourceRoot":""}