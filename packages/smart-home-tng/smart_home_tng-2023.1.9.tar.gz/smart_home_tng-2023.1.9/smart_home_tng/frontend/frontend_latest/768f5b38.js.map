{"version":3,"file":"768f5b38.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEA;AAIA;;AAKA;;;;;;ACvDA;;;;AAKA;;ACXA;;;;AAOA;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4FA;AC1GA;;AAIA;AAEA;;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;ACAA;AACA;AACA;;AAEA;;AAEA;;AAEA;;;AAGA;AACA;;AAGA;;AAIA;;;AAIA;;;;AAIA;;;;;AAKA;AAEA;;;AAGA;;AAEA;;;AAIA;;AAGA;AAGA;AACA;;;AAKA;;AAGA;;AAGA;;;;AAKA;;AAEA;;;;AAKA;;;;AAKA;;AAEA;;;;;AAMA;;;;;;;;;;;;;;;;;;;;AAyIA","sources":["webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/components/ha-fab.ts","webpack://home-assistant-frontend/./src/panels/config/ha-config-section.ts","webpack://home-assistant-frontend/./src/components/user/ha-person-badge.ts","webpack://home-assistant-frontend/./src/panels/config/person/ha-config-person.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public outlined = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        border-radius: var(--ha-card-border-radius, 4px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { FabBase } from \"@material/mwc-fab/mwc-fab-base\";\nimport { styles } from \"@material/mwc-fab/mwc-fab.css\";\nimport { customElement } from \"lit/decorators\";\nimport { css } from \"lit\";\n\n@customElement(\"ha-fab\")\nexport class HaFab extends FabBase {\n  protected firstUpdated(changedProperties) {\n    super.firstUpdated(changedProperties);\n    this.style.setProperty(\"--mdc-theme-secondary\", \"var(--primary-color)\");\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host .mdc-fab--extended .mdc-fab__icon {\n        margin-inline-start: -8px;\n        margin-inline-end: 12px;\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          :host .mdc-fab--extended .mdc-fab__icon {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-fab\": HaFab;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\n\n@customElement(\"ha-config-section\")\nexport class HaConfigSection extends LitElement {\n  @property() public isWide = false;\n\n  @property({ type: Boolean }) public vertical = false;\n\n  @property({ type: Boolean, attribute: \"full-width\" })\n  public fullWidth = false;\n\n  protected render() {\n    return html`\n      <div\n        class=\"content ${classMap({\n          narrow: !this.isWide,\n          \"full-width\": this.fullWidth,\n        })}\"\n      >\n        <div class=\"header\"><slot name=\"header\"></slot></div>\n        <div\n          class=\"together layout ${classMap({\n            narrow: !this.isWide,\n            vertical: this.vertical || !this.isWide,\n            horizontal: !this.vertical && this.isWide,\n          })}\"\n        >\n          <div class=\"intro\"><slot name=\"introduction\"></slot></div>\n          <div class=\"panel flex-auto\"><slot></slot></div>\n        </div>\n      </div>\n    `;\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: block;\n      }\n      .content {\n        padding: 28px 20px 0;\n        max-width: 1040px;\n        margin: 0 auto;\n      }\n\n      .layout {\n        display: flex;\n      }\n\n      .horizontal {\n        flex-direction: row;\n      }\n\n      .vertical {\n        flex-direction: column;\n      }\n\n      .flex-auto {\n        flex: 1 1 auto;\n      }\n\n      .header {\n        font-family: var(--paper-font-headline_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-headline_-_-webkit-font-smoothing\n        );\n        font-size: var(--paper-font-headline_-_font-size);\n        font-weight: var(--paper-font-headline_-_font-weight);\n        letter-spacing: var(--paper-font-headline_-_letter-spacing);\n        line-height: var(--paper-font-headline_-_line-height);\n        opacity: var(--dark-primary-opacity);\n      }\n\n      .together {\n        margin-top: 32px;\n      }\n\n      .intro {\n        font-family: var(--paper-font-subhead_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-subhead_-_-webkit-font-smoothing\n        );\n        font-weight: var(--paper-font-subhead_-_font-weight);\n        line-height: var(--paper-font-subhead_-_line-height);\n        width: 100%;\n        opacity: var(--dark-primary-opacity);\n        font-size: 14px;\n        padding-bottom: 20px;\n      }\n\n      .horizontal .intro {\n        max-width: 400px;\n        margin-right: 40px;\n      }\n\n      .panel {\n        margin-top: -24px;\n      }\n\n      .panel ::slotted(*) {\n        margin-top: 24px;\n        display: block;\n      }\n\n      .narrow.content {\n        max-width: 640px;\n      }\n      .narrow .together {\n        margin-top: 20px;\n      }\n      .narrow .intro {\n        padding-bottom: 20px;\n        margin-right: 0;\n        max-width: 500px;\n      }\n\n      .full-width {\n        padding: 0;\n      }\n\n      .full-width .layout {\n        flex-direction: column;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-section\": HaConfigSection;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { Person } from \"../../data/person\";\nimport { computeUserInitials } from \"../../data/user\";\n\n@customElement(\"ha-person-badge\")\nclass PersonBadge extends LitElement {\n  @property({ attribute: false }) public person?: Person;\n\n  protected render(): TemplateResult {\n    if (!this.person) {\n      return html``;\n    }\n\n    const picture = this.person.picture;\n\n    if (picture) {\n      return html`<div\n        style=${styleMap({ backgroundImage: `url(${picture})` })}\n        class=\"picture\"\n      ></div>`;\n    }\n    const initials = computeUserInitials(this.person.name);\n    return html`<div\n      class=\"initials ${classMap({ long: initials!.length > 2 })}\"\n    >\n      ${initials}\n    </div>`;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: contents;\n      }\n      .picture {\n        width: 40px;\n        height: 40px;\n        background-size: cover;\n        border-radius: 50%;\n      }\n      .initials {\n        display: inline-block;\n        box-sizing: border-box;\n        width: 40px;\n        line-height: 40px;\n        border-radius: 50%;\n        text-align: center;\n        background-color: var(--light-primary-color);\n        text-decoration: none;\n        color: var(--text-light-primary-color, var(--primary-text-color));\n        overflow: hidden;\n      }\n      .initials.long {\n        font-size: 80%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-person-badge\": PersonBadge;\n  }\n}\n","import { mdiPlus } from \"@mdi/js\";\nimport \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { stringCompare } from \"../../../common/string/compare\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-svg-icon\";\nimport \"../../../components/user/ha-person-badge\";\nimport {\n  createPerson,\n  deletePerson,\n  fetchPersons,\n  Person,\n  updatePerson,\n} from \"../../../data/person\";\nimport { fetchUsers, User } from \"../../../data/user\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-loading-screen\";\nimport \"../../../layouts/hass-tabs-subpage\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport \"../ha-config-section\";\nimport { configSections } from \"../ha-panel-config\";\nimport {\n  loadPersonDetailDialog,\n  showPersonDetailDialog,\n} from \"./show-dialog-person-detail\";\n\nclass HaConfigPerson extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public isWide?: boolean;\n\n  @property() public narrow?: boolean;\n\n  @property() public route!: Route;\n\n  @state() private _storageItems?: Person[];\n\n  @state() private _configItems?: Person[];\n\n  private _usersLoad?: Promise<User[]>;\n\n  protected render(): TemplateResult {\n    if (\n      !this.hass ||\n      this._storageItems === undefined ||\n      this._configItems === undefined\n    ) {\n      return html` <hass-loading-screen></hass-loading-screen> `;\n    }\n    const hass = this.hass;\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        back-path=\"/config\"\n        .tabs=${configSections.persons}\n      >\n        <ha-config-section .isWide=${this.isWide}>\n          <span slot=\"header\"\n            >${hass.localize(\"ui.panel.config.person.caption\")}</span\n          >\n          <span slot=\"introduction\">\n            <p>${hass.localize(\"ui.panel.config.person.introduction\")}</p>\n            ${this._configItems.length > 0\n              ? html`\n                  <p>\n                    ${hass.localize(\n                      \"ui.panel.config.person.note_about_persons_configured_in_yaml\"\n                    )}\n                  </p>\n                `\n              : \"\"}\n\n            <a\n              href=${documentationUrl(this.hass, \"/integrations/person/\")}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              ${this.hass.localize(\"ui.panel.config.person.learn_more\")}\n            </a>\n          </span>\n\n          <ha-card outlined class=\"storage\">\n            ${this._storageItems.map(\n              (entry) => html`\n                <paper-icon-item @click=${this._openEditEntry} .entry=${entry}>\n                  <ha-person-badge\n                    slot=\"item-icon\"\n                    .person=${entry}\n                  ></ha-person-badge>\n                  <paper-item-body> ${entry.name} </paper-item-body>\n                </paper-icon-item>\n              `\n            )}\n            ${this._storageItems.length === 0\n              ? html`\n                  <div class=\"empty\">\n                    ${hass.localize(\n                      \"ui.panel.config.person.no_persons_created_yet\"\n                    )}\n                    <mwc-button @click=${this._createPerson}>\n                      ${hass.localize(\n                        \"ui.panel.config.person.create_person\"\n                      )}</mwc-button\n                    >\n                  </div>\n                `\n              : html``}\n          </ha-card>\n          ${this._configItems.length > 0\n            ? html`\n                <ha-card outlined header=\"Configuration.yaml persons\">\n                  ${this._configItems.map(\n                    (entry) => html`\n                      <paper-icon-item>\n                        <ha-person-badge\n                          slot=\"item-icon\"\n                          .person=${entry}\n                        ></ha-person-badge>\n                        <paper-item-body> ${entry.name} </paper-item-body>\n                      </paper-icon-item>\n                    `\n                  )}\n                </ha-card>\n              `\n            : \"\"}\n        </ha-config-section>\n        <ha-fab\n          slot=\"fab\"\n          .label=${hass.localize(\"ui.panel.config.person.add_person\")}\n          extended\n          @click=${this._createPerson}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    this._fetchData();\n    loadPersonDetailDialog();\n  }\n\n  private async _fetchData() {\n    this._usersLoad = fetchUsers(this.hass!);\n    const personData = await fetchPersons(this.hass!);\n\n    this._storageItems = personData.storage.sort((ent1, ent2) =>\n      stringCompare(ent1.name, ent2.name)\n    );\n    this._configItems = personData.config.sort((ent1, ent2) =>\n      stringCompare(ent1.name, ent2.name)\n    );\n    this._openDialogIfPersonSpecifiedInRoute();\n  }\n\n  private _openDialogIfPersonSpecifiedInRoute() {\n    if (!this.route.path.includes(\"/edit/\")) {\n      return;\n    }\n\n    const routeSegments = this.route.path.split(\"/edit/\");\n    const personId = routeSegments.length > 1 ? routeSegments[1] : null;\n    if (!personId) {\n      return;\n    }\n\n    const personToEdit = this._storageItems!.find((p) => p.id === personId);\n    if (personToEdit) {\n      this._openDialog(personToEdit);\n    } else {\n      showAlertDialog(this, {\n        title: this.hass?.localize(\n          \"ui.panel.config.person.person_not_found_title\"\n        ),\n        text: this.hass?.localize(\"ui.panel.config.person.person_not_found\"),\n      });\n    }\n  }\n\n  private _createPerson() {\n    this._openDialog();\n  }\n\n  private _openEditEntry(ev: MouseEvent) {\n    const entry: Person = (ev.currentTarget! as any).entry;\n    this._openDialog(entry);\n  }\n\n  private _allowedUsers(users: User[], currentPerson?: Person) {\n    const used = new Set();\n    for (const coll of [this._configItems, this._storageItems]) {\n      for (const pers of coll!) {\n        if (pers.user_id) {\n          used.add(pers.user_id);\n        }\n      }\n    }\n    const currentUserId = currentPerson ? currentPerson.user_id : undefined;\n    return users.filter(\n      (user) => user.id === currentUserId || !used.has(user.id)\n    );\n  }\n\n  private async _openDialog(entry?: Person) {\n    const users = await this._usersLoad!;\n\n    showPersonDetailDialog(this, {\n      entry,\n      users: this._allowedUsers(users, entry),\n      createEntry: async (values) => {\n        const created = await createPerson(this.hass!, values);\n        this._storageItems = this._storageItems!.concat(created).sort(\n          (ent1, ent2) => stringCompare(ent1.name, ent2.name)\n        );\n      },\n      updateEntry: async (values) => {\n        const updated = await updatePerson(this.hass!, entry!.id, values);\n        this._storageItems = this._storageItems!.map((ent) =>\n          ent === entry ? updated : ent\n        );\n      },\n      removeEntry: async () => {\n        if (\n          !(await showConfirmationDialog(this, {\n            title: this.hass!.localize(\"ui.panel.config.person.confirm_delete\"),\n            text: this.hass!.localize(\"ui.panel.config.person.confirm_delete2\"),\n            dismissText: this.hass!.localize(\"ui.common.cancel\"),\n            confirmText: this.hass!.localize(\"ui.common.delete\"),\n          }))\n        ) {\n          return false;\n        }\n\n        try {\n          await deletePerson(this.hass!, entry!.id);\n          this._storageItems = this._storageItems!.filter(\n            (ent) => ent !== entry\n          );\n          return true;\n        } catch (err: any) {\n          return false;\n        }\n      },\n      refreshUsers: () => {\n        this._usersLoad = fetchUsers(this.hass!);\n      },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      a {\n        color: var(--primary-color);\n      }\n      ha-card {\n        max-width: 600px;\n        margin: 16px auto;\n        overflow: hidden;\n      }\n      .empty {\n        text-align: center;\n        padding: 8px;\n      }\n      paper-icon-item {\n        padding-top: 4px;\n        padding-bottom: 4px;\n      }\n      ha-card.storage paper-icon-item {\n        cursor: pointer;\n      }\n    `;\n  }\n}\n\ncustomElements.define(\"ha-config-person\", HaConfigPerson);\n"],"names":[],"sourceRoot":""}