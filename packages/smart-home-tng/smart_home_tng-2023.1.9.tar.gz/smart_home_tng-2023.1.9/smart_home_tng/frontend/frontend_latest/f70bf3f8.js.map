{"version":3,"file":"f70bf3f8.js","mappings":";;;;AAcA;;;;;;;;;;;;;;;;;;;;AC+BA;;;;;;;ACEA;AACA;AACA;AACA;;;;;AAKA;;AAIA;AACA;;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;;;AAGA;;;;;;;;AAUA;;;;;;;AAQA;AACA;AACA;AACA;;;;;AAMA;;;;;;;;;;;;;AAgEA;;;AC1HA;;;;;;;AAOA;AACA;AACA;;;;AAIA;AACA;;;;ACpDA;AACA;;;;;;AADA;;;;;;;;;;;;;;;;;;;;;AD2HA","sources":["webpack://home-assistant-frontend/./src/components/ha-checkbox.ts","webpack://home-assistant-frontend/./src/components/ha-switch.ts","webpack://home-assistant-frontend/./src/components/ha-analytics.ts","webpack://home-assistant-frontend/./src/panels/config/core/ha-config-analytics.ts","webpack://home-assistant-frontend/./src/components/ha-analytics-learn-more.ts"],"sourcesContent":["import { CheckboxBase } from \"@material/mwc-checkbox/mwc-checkbox-base\";\nimport { styles } from \"@material/mwc-checkbox/mwc-checkbox.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-checkbox\")\nexport class HaCheckbox extends CheckboxBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-checkbox\": HaCheckbox;\n  }\n}\n","import { SwitchBase } from \"@material/mwc-switch/deprecated/mwc-switch-base\";\nimport { styles } from \"@material/mwc-switch/deprecated/mwc-switch.css\";\nimport { css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { forwardHaptic } from \"../data/haptics\";\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends SwitchBase {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--switch-checked-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n        background-color: var(--switch-checked-button-color);\n        border-color: var(--switch-checked-button-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__track {\n        background-color: var(--switch-checked-track-color);\n        border-color: var(--switch-checked-track-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n        background-color: var(--switch-unchecked-button-color);\n        border-color: var(--switch-unchecked-button-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n        background-color: var(--switch-unchecked-track-color);\n        border-color: var(--switch-unchecked-track-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import \"@polymer/paper-tooltip/paper-tooltip\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport type { Analytics, AnalyticsPreferences } from \"../data/analytics\";\nimport { haStyle } from \"../resources/styles\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-settings-row\";\nimport \"./ha-switch\";\nimport type { HaSwitch } from \"./ha-switch\";\n\nconst ADDITIONAL_PREFERENCES = [\n  {\n    key: \"usage\",\n    title: \"Usage\",\n    description: \"Details of what you use with Home Assistant\",\n  },\n  {\n    key: \"statistics\",\n    title: \"Statistical data\",\n    description: \"Counts containing total number of datapoints\",\n  },\n];\n\ndeclare global {\n  interface HASSDomEvents {\n    \"analytics-preferences-changed\": { preferences: AnalyticsPreferences };\n  }\n}\n\n@customElement(\"ha-analytics\")\nexport class HaAnalytics extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public analytics?: Analytics;\n\n  protected render(): TemplateResult {\n    const loading = this.analytics === undefined;\n    const baseEnabled = !loading && this.analytics!.preferences.base;\n\n    return html`\n      <ha-settings-row>\n        <span slot=\"heading\" data-for=\"base\"> Basic analytics </span>\n        <span slot=\"description\" data-for=\"base\">\n          This includes information about your system.\n        </span>\n        <ha-switch\n          @change=${this._handleRowClick}\n          .checked=${baseEnabled}\n          .preference=${\"base\"}\n          .disabled=${loading}\n          name=\"base\"\n        >\n        </ha-switch>\n      </ha-settings-row>\n      ${ADDITIONAL_PREFERENCES.map(\n        (preference) =>\n          html`\n            <ha-settings-row>\n              <span slot=\"heading\" data-for=${preference.key}>\n                ${preference.title}\n              </span>\n              <span slot=\"description\" data-for=${preference.key}>\n                ${preference.description}\n              </span>\n              <span>\n                <ha-switch\n                  @change=${this._handleRowClick}\n                  .checked=${this.analytics?.preferences[preference.key]}\n                  .preference=${preference.key}\n                  name=${preference.key}\n                >\n                </ha-switch>\n                ${!baseEnabled\n                  ? html`\n                      <paper-tooltip animation-delay=\"0\" position=\"right\">\n                        You need to enable basic analytics for this option to be\n                        available\n                      </paper-tooltip>\n                    `\n                  : \"\"}\n              </span>\n            </ha-settings-row>\n          `\n      )}\n      <ha-settings-row>\n        <span slot=\"heading\" data-for=\"diagnostics\"> Diagnostics </span>\n        <span slot=\"description\" data-for=\"diagnostics\">\n          Share crash reports when unexpected errors occur.\n        </span>\n        <ha-switch\n          @change=${this._handleRowClick}\n          .checked=${this.analytics?.preferences.diagnostics}\n          .preference=${\"diagnostics\"}\n          .disabled=${loading}\n          name=\"diagnostics\"\n        >\n        </ha-switch>\n      </ha-settings-row>\n    `;\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n\n    this.shadowRoot!.querySelectorAll(\"*[data-for]\").forEach((el) => {\n      const forEl = (el as HTMLElement).dataset.for;\n      delete (el as HTMLElement).dataset.for;\n\n      el.addEventListener(\"click\", () => {\n        const toFocus = this.shadowRoot!.querySelector(\n          `*[name=${forEl}]`\n        ) as HTMLElement | null;\n\n        if (toFocus) {\n          toFocus.focus();\n          toFocus.click();\n        }\n      });\n    });\n  }\n\n  private _handleRowClick(ev: Event) {\n    const target = ev.currentTarget as HaSwitch;\n    const preference = (target as any).preference;\n    const preferences = this.analytics ? { ...this.analytics.preferences } : {};\n\n    if (preferences[preference] === target.checked) {\n      return;\n    }\n\n    preferences[preference] = target.checked;\n\n    if (\n      ADDITIONAL_PREFERENCES.some((entry) => entry.key === preference) &&\n      target.checked\n    ) {\n      preferences.base = true;\n    } else if (preference === \"base\" && !target.checked) {\n      preferences.usage = false;\n      preferences.statistics = false;\n    }\n\n    fireEvent(this, \"analytics-preferences-changed\", { preferences });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .error {\n          color: var(--error-color);\n        }\n\n        ha-settings-row {\n          padding: 0;\n        }\n\n        span[slot=\"heading\"],\n        span[slot=\"description\"] {\n          cursor: pointer;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-analytics\": HaAnalytics;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport \"../../../components/ha-analytics\";\nimport { analyticsLearnMore } from \"../../../components/ha-analytics-learn-more\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-checkbox\";\nimport \"../../../components/ha-settings-row\";\nimport {\n  Analytics,\n  getAnalyticsDetails,\n  setAnalyticsPreferences,\n} from \"../../../data/analytics\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\n\n@customElement(\"ha-config-analytics\")\nclass ConfigAnalytics extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _analyticsDetails?: Analytics;\n\n  @state() private _error?: string;\n\n  protected render(): TemplateResult {\n    const error = this._error\n      ? this._error\n      : !isComponentLoaded(this.hass, \"analytics\")\n      ? \"Analytics integration not loaded\"\n      : undefined;\n\n    return html`\n      <ha-card outlined>\n        <div class=\"card-content\">\n          ${error ? html`<div class=\"error\">${error}</div>` : \"\"}\n          <p>\n            Share anonymized information from your installation to help make\n            Home Assistant better and help us convince manufacturers to add\n            local control and privacy-focused features.\n          </p>\n          <ha-analytics\n            @analytics-preferences-changed=${this._preferencesChanged}\n            .hass=${this.hass}\n            .analytics=${this._analyticsDetails}\n          ></ha-analytics>\n        </div>\n        <div class=\"card-actions\">\n          <mwc-button @click=${this._save}>\n            ${this.hass.localize(\n              \"ui.panel.config.core.section.core.core_config.save_button\"\n            )}\n          </mwc-button>\n        </div>\n      </ha-card>\n      <div class=\"footer\">${analyticsLearnMore(this.hass)}</div>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    if (isComponentLoaded(this.hass, \"analytics\")) {\n      this._load();\n    }\n  }\n\n  private async _load() {\n    this._error = undefined;\n    try {\n      this._analyticsDetails = await getAnalyticsDetails(this.hass);\n    } catch (err: any) {\n      this._error = err.message || err;\n    }\n  }\n\n  private async _save() {\n    this._error = undefined;\n    try {\n      await setAnalyticsPreferences(\n        this.hass,\n        this._analyticsDetails?.preferences || {}\n      );\n    } catch (err: any) {\n      this._error = err.message || err;\n    }\n  }\n\n  private _preferencesChanged(event: CustomEvent): void {\n    this._analyticsDetails = {\n      ...this._analyticsDetails!,\n      preferences: event.detail.preferences,\n    };\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .error {\n          color: var(--error-color);\n        }\n\n        ha-settings-row {\n          padding: 0;\n        }\n        p {\n          margin-top: 0;\n        }\n        .card-actions {\n          display: flex;\n          flex-direction: row-reverse;\n          justify-content: space-between;\n          align-items: center;\n        }\n        .footer {\n          padding: 32px 0 16px;\n          text-align: center;\n        }\n      `, // row-reverse so we tab first to \"save\"\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-analytics\": ConfigAnalytics;\n  }\n}\n","import { html } from \"lit\";\nimport { HomeAssistant } from \"../types\";\nimport { documentationUrl } from \"../util/documentation-url\";\n\nexport const analyticsLearnMore = (hass: HomeAssistant) => html`<a\n  .href=${documentationUrl(hass, \"/integrations/analytics/\")}\n  target=\"_blank\"\n  rel=\"noreferrer\"\n>\n  How we process your data\n</a>`;\n"],"names":[],"sourceRoot":""}