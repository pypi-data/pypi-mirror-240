{"version":3,"file":"5582998b.js","mappings":";;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;;;ACdA;;AAKA;AACA;AACA;AACA;;;AARA;;AAgBA;;AAGA;AAGA;;;;AA3EA;;;;AAmFA;;AAGA;;AAKA;;AAGA;AAGA;AAOA;;AAEA;AAEA;;;AA5GA;AAiHA;AAGA;;;;AApHA;AAyHA;AAGA;;AAEA;AAEA;;;;;AAMA;AACA;AACA;;AAEA;;;AAKA;;;AAMA;;AAEA;AACA;;;AAGA;;AAEA;AAGA;;AAhKA;;;AAsKA;AAEA;;;AAMA;AACA;;;;AAIA;AACA;;AAEA;AAEA;;AAxLA;;;AA8LA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA","sources":["webpack://home-assistant-frontend/./src/components/ha-select.ts","webpack://home-assistant-frontend/./src/dialogs/more-info/controls/more-info-media_player.ts"],"sourcesContent":["import { SelectBase } from \"@material/mwc-select/mwc-select-base\";\nimport { styles } from \"@material/mwc-select/mwc-select.css\";\nimport { css, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { debounce } from \"../common/util/debounce\";\nimport { nextRender } from \"../common/util/render-status\";\n\n@customElement(\"ha-select\")\nexport class HaSelect extends SelectBase {\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  protected override renderLeadingIcon() {\n    if (!this.icon) {\n      return nothing;\n    }\n\n    return html`<span class=\"mdc-select__icon\"\n      ><slot name=\"icon\"></slot\n    ></span>`;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"translations-updated\", this._translationsUpdated);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\n      \"translations-updated\",\n      this._translationsUpdated\n    );\n  }\n\n  private _translationsUpdated = debounce(async () => {\n    await nextRender();\n    this.layoutOptions();\n  }, 500);\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-select:not(.mdc-select--disabled) .mdc-select__icon {\n        color: var(--secondary-text-color);\n      }\n      .mdc-select__anchor {\n        width: var(--ha-select-min-width, 200px);\n      }\n      .mdc-select--filled .mdc-floating-label {\n        inset-inline-start: 12px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select--filled.mdc-select--with-leading-icon .mdc-floating-label {\n        inset-inline-start: 48px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select .mdc-select__anchor {\n        padding-inline-start: 12px;\n        padding-inline-end: 0px;\n        direction: var(--direction);\n      }\n      .mdc-select__anchor .mdc-floating-label--float-above {\n        transform-origin: var(--float-start);\n      }\n    `,\n  ];\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-select\": HaSelect;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport {\n  mdiLoginVariant,\n  mdiMusicNote,\n  mdiPlayBoxMultiple,\n  mdiVolumeHigh,\n  mdiVolumeMinus,\n  mdiVolumeOff,\n  mdiVolumePlus,\n} from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { stopPropagation } from \"../../../common/dom/stop_propagation\";\nimport { supportsFeature } from \"../../../common/entity/supports-feature\";\nimport { computeRTLDirection } from \"../../../common/util/compute_rtl\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-select\";\nimport \"../../../components/ha-slider\";\nimport \"../../../components/ha-svg-icon\";\nimport { showMediaBrowserDialog } from \"../../../components/media-player/show-media-browser-dialog\";\nimport { UNAVAILABLE, UNKNOWN } from \"../../../data/entity\";\nimport {\n  computeMediaControls,\n  handleMediaControlClick,\n  MediaPickedEvent,\n  MediaPlayerEntity,\n  mediaPlayerPlayMedia,\n  SUPPORT_BROWSE_MEDIA,\n  SUPPORT_SELECT_SOUND_MODE,\n  SUPPORT_SELECT_SOURCE,\n  SUPPORT_VOLUME_BUTTONS,\n  SUPPORT_VOLUME_MUTE,\n  SUPPORT_VOLUME_SET,\n} from \"../../../data/media-player\";\nimport { HomeAssistant } from \"../../../types\";\n\n@customElement(\"more-info-media_player\")\nclass MoreInfoMediaPlayer extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj?: MediaPlayerEntity;\n\n  protected render(): TemplateResult {\n    if (!this.stateObj) {\n      return html``;\n    }\n\n    const stateObj = this.stateObj;\n    const controls = computeMediaControls(stateObj, true);\n\n    return html`\n      <div class=\"controls\">\n        <div class=\"basic-controls\">\n          ${!controls\n            ? \"\"\n            : controls.map(\n                (control) => html`\n                  <ha-icon-button\n                    action=${control.action}\n                    @click=${this._handleClick}\n                    .path=${control.icon}\n                    .label=${this.hass.localize(\n                      `ui.card.media_player.${control.action}`\n                    )}\n                  >\n                  </ha-icon-button>\n                `\n              )}\n        </div>\n        ${supportsFeature(stateObj, SUPPORT_BROWSE_MEDIA)\n          ? html`\n              <mwc-button\n                .label=${this.hass.localize(\n                  \"ui.card.media_player.browse_media\"\n                )}\n                @click=${this._showBrowseMedia}\n              >\n                <ha-svg-icon\n                  class=\"browse-media-icon\"\n                  .path=${mdiPlayBoxMultiple}\n                  slot=\"icon\"\n                ></ha-svg-icon>\n              </mwc-button>\n            `\n          : \"\"}\n      </div>\n      ${(supportsFeature(stateObj, SUPPORT_VOLUME_SET) ||\n        supportsFeature(stateObj, SUPPORT_VOLUME_BUTTONS)) &&\n      ![UNAVAILABLE, UNKNOWN, \"off\"].includes(stateObj.state)\n        ? html`\n            <div class=\"volume\">\n              ${supportsFeature(stateObj, SUPPORT_VOLUME_MUTE)\n                ? html`\n                    <ha-icon-button\n                      .path=${stateObj.attributes.is_volume_muted\n                        ? mdiVolumeOff\n                        : mdiVolumeHigh}\n                      .label=${this.hass.localize(\n                        `ui.card.media_player.${\n                          stateObj.attributes.is_volume_muted\n                            ? \"media_volume_unmute\"\n                            : \"media_volume_mute\"\n                        }`\n                      )}\n                      @click=${this._toggleMute}\n                    ></ha-icon-button>\n                  `\n                : \"\"}\n              ${supportsFeature(stateObj, SUPPORT_VOLUME_BUTTONS)\n                ? html`\n                    <ha-icon-button\n                      action=\"volume_down\"\n                      .path=${mdiVolumeMinus}\n                      .label=${this.hass.localize(\n                        \"ui.card.media_player.media_volume_down\"\n                      )}\n                      @click=${this._handleClick}\n                    ></ha-icon-button>\n                    <ha-icon-button\n                      action=\"volume_up\"\n                      .path=${mdiVolumePlus}\n                      .label=${this.hass.localize(\n                        \"ui.card.media_player.media_volume_up\"\n                      )}\n                      @click=${this._handleClick}\n                    ></ha-icon-button>\n                  `\n                : \"\"}\n              ${supportsFeature(stateObj, SUPPORT_VOLUME_SET)\n                ? html`\n                    <ha-slider\n                      id=\"input\"\n                      pin\n                      ignore-bar-touch\n                      .dir=${computeRTLDirection(this.hass!)}\n                      .value=${Number(stateObj.attributes.volume_level) * 100}\n                      @change=${this._selectedValueChanged}\n                    ></ha-slider>\n                  `\n                : \"\"}\n            </div>\n          `\n        : \"\"}\n      ${![UNAVAILABLE, UNKNOWN, \"off\"].includes(stateObj.state) &&\n      supportsFeature(stateObj, SUPPORT_SELECT_SOURCE) &&\n      stateObj.attributes.source_list?.length\n        ? html`\n            <div class=\"source-input\">\n              <ha-select\n                .label=${this.hass.localize(\"ui.card.media_player.source\")}\n                icon\n                .value=${stateObj.attributes.source!}\n                @selected=${this._handleSourceChanged}\n                fixedMenuPosition\n                naturalMenuWidth\n                @closed=${stopPropagation}\n              >\n                ${stateObj.attributes.source_list!.map(\n                  (source) =>\n                    html`\n                      <mwc-list-item .value=${source}>${source}</mwc-list-item>\n                    `\n                )}\n                <ha-svg-icon .path=${mdiLoginVariant} slot=\"icon\"></ha-svg-icon>\n              </ha-select>\n            </div>\n          `\n        : \"\"}\n      ${![UNAVAILABLE, UNKNOWN, \"off\"].includes(stateObj.state) &&\n      supportsFeature(stateObj, SUPPORT_SELECT_SOUND_MODE) &&\n      stateObj.attributes.sound_mode_list?.length\n        ? html`\n            <div class=\"sound-input\">\n              <ha-select\n                .label=${this.hass.localize(\"ui.card.media_player.sound_mode\")}\n                .value=${stateObj.attributes.sound_mode!}\n                icon\n                fixedMenuPosition\n                naturalMenuWidth\n                @selected=${this._handleSoundModeChanged}\n                @closed=${stopPropagation}\n              >\n                ${stateObj.attributes.sound_mode_list.map(\n                  (mode) => html`\n                    <mwc-list-item .value=${mode}>${mode}</mwc-list-item>\n                  `\n                )}\n                <ha-svg-icon .path=${mdiMusicNote} slot=\"icon\"></ha-svg-icon>\n              </ha-select>\n            </div>\n          `\n        : \"\"}\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-icon-button[action=\"turn_off\"],\n      ha-icon-button[action=\"turn_on\"],\n      ha-slider {\n        flex-grow: 1;\n      }\n\n      .controls {\n        display: flex;\n        flex-wrap: wrap;\n        align-items: center;\n        --mdc-theme-primary: currentColor;\n        direction: ltr;\n      }\n\n      .basic-controls {\n        display: inline-flex;\n        flex-grow: 1;\n      }\n\n      .volume {\n        direction: ltr;\n      }\n\n      .source-input,\n      .sound-input {\n        direction: var(--direction);\n      }\n\n      .volume,\n      .source-input,\n      .sound-input {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n      }\n\n      .source-input ha-select,\n      .sound-input ha-select {\n        margin-left: 10px;\n        flex-grow: 1;\n        margin-inline-start: 10px;\n        margin-inline-end: initial;\n        direction: var(--direction);\n      }\n\n      .tts {\n        margin-top: 16px;\n        font-style: italic;\n      }\n\n      mwc-button > ha-svg-icon {\n        vertical-align: text-bottom;\n      }\n\n      .browse-media-icon {\n        margin-left: 8px;\n      }\n    `;\n  }\n\n  private _handleClick(e: MouseEvent): void {\n    handleMediaControlClick(\n      this.hass!,\n      this.stateObj!,\n      (e.currentTarget as HTMLElement).getAttribute(\"action\")!\n    );\n  }\n\n  private _toggleMute() {\n    this.hass!.callService(\"media_player\", \"volume_mute\", {\n      entity_id: this.stateObj!.entity_id,\n      is_volume_muted: !this.stateObj!.attributes.is_volume_muted,\n    });\n  }\n\n  private _selectedValueChanged(e: Event): void {\n    this.hass!.callService(\"media_player\", \"volume_set\", {\n      entity_id: this.stateObj!.entity_id,\n      volume_level:\n        Number((e.currentTarget! as HTMLElement).getAttribute(\"value\")!) / 100,\n    });\n  }\n\n  private _handleSourceChanged(e) {\n    const newVal = e.target.value;\n\n    if (!newVal || this.stateObj!.attributes.source === newVal) {\n      return;\n    }\n\n    this.hass.callService(\"media_player\", \"select_source\", {\n      entity_id: this.stateObj!.entity_id,\n      source: newVal,\n    });\n  }\n\n  private _handleSoundModeChanged(e) {\n    const newVal = e.target.value;\n\n    if (!newVal || this.stateObj?.attributes.sound_mode === newVal) {\n      return;\n    }\n\n    this.hass.callService(\"media_player\", \"select_sound_mode\", {\n      entity_id: this.stateObj!.entity_id,\n      sound_mode: newVal,\n    });\n  }\n\n  private _showBrowseMedia(): void {\n    showMediaBrowserDialog(this, {\n      action: \"play\",\n      entityId: this.stateObj!.entity_id,\n      mediaPickedCallback: (pickedMedia: MediaPickedEvent) =>\n        mediaPlayerPlayMedia(\n          this.hass,\n          this.stateObj!.entity_id,\n          pickedMedia.item.media_content_id,\n          pickedMedia.item.media_content_type\n        ),\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"more-info-media_player\": MoreInfoMediaPlayer;\n  }\n}\n"],"names":[],"sourceRoot":""}