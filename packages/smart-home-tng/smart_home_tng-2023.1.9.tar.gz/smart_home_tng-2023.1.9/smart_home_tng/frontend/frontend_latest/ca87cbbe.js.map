{"version":3,"file":"ca87cbbe.js","mappings":";;AAsBA;AACA;AACA;AAEA;;;;;;;;;;AA0BA;ACvCA;;AAEA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;;AClEA;;;;;;AAeA;AACA;;;;AAIA;;;;;AAUA;;AAEA;;AAEA;;;AAGA;;AA1CA;;;;;;;;;;;;;;;AA6FA;;;;;;ACpGA;AAIA;;;AAGA;;;;AAhBA;;;;AA8BA","sources":["webpack://home-assistant-frontend/./src/components/ha-clickable-list-item.ts","webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/panels/config/repairs/integrations-startup-time.ts","webpack://home-assistant-frontend/./src/panels/config/repairs/dialog-integration-startup.ts"],"sourcesContent":["import { css, CSSResultGroup, html } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { HaListItem } from \"./ha-list-item\";\n\n@customElement(\"ha-clickable-list-item\")\nexport class HaClickableListItem extends HaListItem {\n  @property() public href?: string;\n\n  @property({ type: Boolean }) public disableHref = false;\n\n  @property({ type: Boolean, reflect: true }) public openNewTab = false;\n\n  @query(\"a\") private _anchor!: HTMLAnchorElement;\n\n  public render() {\n    const r = super.render();\n    const href = this.href || \"\";\n\n    return html`${this.disableHref\n      ? html`<a aria-role=\"option\">${r}</a>`\n      : html`<a\n          aria-role=\"option\"\n          target=${this.openNewTab ? \"_blank\" : \"\"}\n          href=${href}\n          >${r}</a\n        >`}`;\n  }\n\n  firstUpdated() {\n    super.firstUpdated();\n    this.addEventListener(\"keydown\", (ev) => {\n      if (ev.key === \"Enter\" || ev.key === \" \") {\n        this._anchor.click();\n      }\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      super.styles,\n      css`\n        a {\n          width: 100%;\n          height: 100%;\n          display: flex;\n          align-items: center;\n          padding-left: var(--mdc-list-side-padding, 20px);\n          padding-right: var(--mdc-list-side-padding, 20px);\n          overflow: hidden;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-clickable-list-item\": HaClickableListItem;\n  }\n}\n","import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@material/mwc-list/mwc-list\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-clickable-list-item\";\nimport {\n  domainToName,\n  fetchIntegrationManifests,\n  fetchIntegrationSetups,\n  IntegrationManifest,\n  IntegrationSetup,\n} from \"../../../data/integration\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { brandsUrl } from \"../../../util/brands-url\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\n\n@customElement(\"integrations-startup-time\")\nclass IntegrationsStartupTime extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @state() private _manifests?: {\n    [domain: string]: IntegrationManifest;\n  };\n\n  @state() private _setups?: IntegrationSetup[];\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    this._fetchManifests();\n    this._fetchSetups();\n  }\n\n  protected render(): TemplateResult {\n    if (!this._setups) {\n      return html``;\n    }\n\n    return html`\n      <mwc-list>\n        ${this._setups?.map((setup) => {\n          const manifest = this._manifests && this._manifests[setup.domain];\n          const docLink = manifest\n            ? manifest.is_built_in\n              ? documentationUrl(this.hass, `/integrations/${manifest.domain}`)\n              : manifest.documentation\n            : \"\";\n\n          const setupSeconds = setup.seconds?.toFixed(2);\n          return html`\n            <ha-clickable-list-item\n              graphic=\"avatar\"\n              twoline\n              hasMeta\n              openNewTab\n              @click=${this._entryClicked}\n              href=${docLink}\n            >\n              <img\n                loading=\"lazy\"\n                src=${brandsUrl({\n                  domain: setup.domain,\n                  type: \"icon\",\n                  useFallback: true,\n                  darkOptimized: this.hass.themes?.darkMode,\n                })}\n                referrerpolicy=\"no-referrer\"\n                slot=\"graphic\"\n              />\n              <span>\n                ${domainToName(this.hass.localize, setup.domain, manifest)}\n              </span>\n              <span slot=\"secondary\">${setup.domain}</span>\n              <div slot=\"meta\">\n                ${setupSeconds ? html`${setupSeconds} s` : \"\"}\n              </div>\n            </ha-clickable-list-item>\n          `;\n        })}\n      </mwc-list>\n    `;\n  }\n\n  private async _fetchManifests() {\n    const manifests = {};\n    for (const manifest of await fetchIntegrationManifests(this.hass)) {\n      manifests[manifest.domain] = manifest;\n    }\n    this._manifests = manifests;\n  }\n\n  private async _fetchSetups() {\n    const setups = await fetchIntegrationSetups(this.hass);\n    this._setups = setups.sort((a, b) => {\n      if (a.seconds === b.seconds) {\n        return 0;\n      }\n      if (a.seconds === undefined) {\n        return 1;\n      }\n      if (b.seconds === undefined) {\n        return 1;\n      }\n      return b.seconds - a.seconds;\n    });\n  }\n\n  private _entryClicked(ev) {\n    ev.currentTarget.blur();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-clickable-list-item {\n        --mdc-list-item-meta-size: 64px;\n        --mdc-typography-caption-font-size: 12px;\n      }\n      img {\n        display: block;\n        max-height: 40px;\n        max-width: 40px;\n      }\n      div[slot=\"meta\"] {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"integrations-startup-time\": IntegrationsStartupTime;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/ha-card\";\nimport { createCloseHeading } from \"../../../components/ha-dialog\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport \"./integrations-startup-time\";\n\n@customElement(\"dialog-integration-startup\")\nclass DialogIntegrationStartup extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _opened = false;\n\n  public showDialog(): void {\n    this._opened = true;\n  }\n\n  public closeDialog() {\n    this._opened = false;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._opened) {\n      return html``;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        escapeKeyAction\n        hideActions\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\"ui.panel.config.repairs.integration_startup_time\")\n        )}\n        @closed=${this.closeDialog}\n      >\n        <integrations-startup-time\n          .hass=${this.hass}\n          narrow\n        ></integrations-startup-time>\n      </ha-dialog>\n    `;\n  }\n\n  static styles: CSSResultGroup = [\n    haStyleDialog,\n    css`\n      ha-dialog {\n        --dialog-content-padding: 0;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-integration-startup\": DialogIntegrationStartup;\n  }\n}\n"],"names":[],"sourceRoot":""}