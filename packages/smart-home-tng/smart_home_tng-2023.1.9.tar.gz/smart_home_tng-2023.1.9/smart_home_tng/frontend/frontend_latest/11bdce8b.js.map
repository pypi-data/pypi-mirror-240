{"version":3,"file":"11bdce8b.js","mappings":";;AAkKA;AACA;AACA;AACA;;AAOA;AAEA;AAcA;;AAGA;;;AAOA;;AAMA;AAEA;;;;;;;AAeA;AChLA;AACA;AACA;;;AAGA;AACA;AAGA;;AAEA;AAEA;;;;AA4BA;;;;;;;;ACrEA;;ACHA;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;;AC7BA;AACA;;AAEA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoFA;;;;;;;;;;AAWA;;ACpGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;ACHA;;AAKA;;AAIA;AACA;AACA;;AAGA;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AAEA;;AAGA;AAKA;AACA;AACA;AACA;;AAEA;;AAIA;;;;;;;AAoCA","sources":["webpack://home-assistant-frontend/mwc-list-item-base.ts","webpack://home-assistant-frontend/./src/components/ha-date-input.ts","webpack://home-assistant-frontend/./src/components/ha-input-helper-text.ts","webpack://home-assistant-frontend/./src/components/ha-select.ts","webpack://home-assistant-frontend/./src/components/ha-textfield.ts","webpack://home-assistant-frontend/./src/components/ha-time-input.ts","webpack://home-assistant-frontend/./src/panels/lovelace/entity-rows/hui-input-datetime-entity-row.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n\nimport '@material/mwc-ripple/mwc-ripple';\n\nimport {observer} from '@material/mwc-base/observer';\nimport {Ripple} from '@material/mwc-ripple/mwc-ripple';\nimport {RippleHandlers} from '@material/mwc-ripple/ripple-handlers';\nimport {html, LitElement} from 'lit';\nimport {property, query, queryAsync, state} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\nexport type SelectionSource = 'interaction'|'property';\nexport interface RequestSelectedDetail {\n  selected: boolean;\n  source: SelectionSource;\n}\n\nexport interface Layoutable {\n  layout: (updateItems?: boolean) => void;\n  debouncedLayout?: (updateItems?: boolean) => void | undefined;\n}\n\nexport type GraphicType = 'avatar'|'icon'|'medium'|'large'|'control'|null;\n\n/**\n * @fires request-selected {RequestSelectedDetail}\n * @fires list-item-rendered\n */\nexport class ListItemBase extends LitElement {\n  @query('slot') protected slotElement!: HTMLSlotElement|null;\n  @queryAsync('mwc-ripple') ripple!: Promise<Ripple|null>;\n\n  @property({type: String}) value = '';\n  @property({type: String, reflect: true}) group: string|null = null;\n  @property({type: Number, reflect: true}) tabindex = -1;\n  @property({type: Boolean, reflect: true})\n  @observer(function(this: ListItemBase, value: boolean) {\n    if (value) {\n      this.setAttribute('aria-disabled', 'true');\n    } else {\n      this.setAttribute('aria-disabled', 'false');\n    }\n  })\n  disabled = false;\n  @property({type: Boolean, reflect: true}) twoline = false;\n  @property({type: Boolean, reflect: true}) activated = false;\n  @property({type: String, reflect: true}) graphic: GraphicType = null;\n  @property({type: Boolean}) multipleGraphics = false;\n  @property({type: Boolean}) hasMeta = false;\n  @property({type: Boolean, reflect: true})\n  @observer(function(this: ListItemBase, value: boolean) {\n    if (value) {\n      this.removeAttribute('aria-checked');\n      this.removeAttribute('mwc-list-item');\n      this.selected = false;\n      this.activated = false;\n      this.tabIndex = -1;\n    } else {\n      this.setAttribute('mwc-list-item', '');\n    }\n  })\n  noninteractive = false;\n  @property({type: Boolean, reflect: true})\n  @observer(function(this: ListItemBase, value: boolean) {\n    const role = this.getAttribute('role');\n    const isAriaSelectable = role === 'gridcell' || role === 'option' ||\n        role === 'row' || role === 'tab';\n\n    if (isAriaSelectable && value) {\n      this.setAttribute('aria-selected', 'true');\n    } else if (isAriaSelectable) {\n      this.setAttribute('aria-selected', 'false');\n    }\n\n    if (this._firstChanged) {\n      this._firstChanged = false;\n      return;\n    }\n\n    if (this._skipPropRequest) {\n      return;\n    }\n\n    this.fireRequestSelected(value, 'property');\n  })\n  selected = false;\n\n  @state() protected shouldRenderRipple = false;\n  @state() _managingList: Layoutable|null = null;\n\n  protected boundOnClick = this.onClick.bind(this);\n  protected _firstChanged = true;\n  protected _skipPropRequest = false;\n  protected rippleHandlers: RippleHandlers = new RippleHandlers(() => {\n    this.shouldRenderRipple = true;\n    return this.ripple;\n  });\n  protected listeners: ({\n    target: Element;\n    eventNames: string[];\n    cb: EventListenerOrEventListenerObject;\n  })[] =\n      [\n        {\n          target: this,\n          eventNames: ['click'],\n          cb:\n              () => {\n                this.onClick();\n              },\n        },\n        {\n          target: this,\n          eventNames: ['mouseenter'],\n          cb: this.rippleHandlers.startHover,\n        },\n        {\n          target: this,\n          eventNames: ['mouseleave'],\n          cb: this.rippleHandlers.endHover,\n        },\n        {\n          target: this,\n          eventNames: ['focus'],\n          cb: this.rippleHandlers.startFocus,\n        },\n        {\n          target: this,\n          eventNames: ['blur'],\n          cb: this.rippleHandlers.endFocus,\n        },\n        {\n          target: this,\n          eventNames: ['mousedown', 'touchstart'],\n          cb:\n              (e: Event) => {\n                const name = e.type;\n                this.onDown(name === 'mousedown' ? 'mouseup' : 'touchend', e);\n              },\n        },\n      ];\n\n  get text() {\n    const textContent = this.textContent;\n\n    return textContent ? textContent.trim() : '';\n  }\n\n  override render() {\n    const text = this.renderText();\n    const graphic = this.graphic ? this.renderGraphic() : html``;\n    const meta = this.hasMeta ? this.renderMeta() : html``;\n\n    return html`\n      ${this.renderRipple()}\n      ${graphic}\n      ${text}\n      ${meta}`;\n  }\n\n  protected renderRipple() {\n    if (this.shouldRenderRipple) {\n      return html`\n      <mwc-ripple\n        .activated=${this.activated}>\n      </mwc-ripple>`;\n    } else if (this.activated) {\n      return html`<div class=\"fake-activated-ripple\"></div>`;\n    } else {\n      return '';\n    }\n  }\n\n  protected renderGraphic() {\n    const graphicClasses = {\n      multi: this.multipleGraphics,\n    };\n\n    return html`\n      <span class=\"mdc-deprecated-list-item__graphic material-icons ${\n        classMap(graphicClasses)}\">\n        <slot name=\"graphic\"></slot>\n      </span>`;\n  }\n\n  protected renderMeta() {\n    return html`\n      <span class=\"mdc-deprecated-list-item__meta material-icons\">\n        <slot name=\"meta\"></slot>\n      </span>`;\n  }\n\n  protected renderText() {\n    const inner = this.twoline ? this.renderTwoline() : this.renderSingleLine();\n    return html`\n      <span class=\"mdc-deprecated-list-item__text\">\n        ${inner}\n      </span>`;\n  }\n\n  protected renderSingleLine() {\n    return html`<slot></slot>`;\n  }\n\n  protected renderTwoline() {\n    return html`\n      <span class=\"mdc-deprecated-list-item__primary-text\">\n        <slot></slot>\n      </span>\n      <span class=\"mdc-deprecated-list-item__secondary-text\">\n        <slot name=\"secondary\"></slot>\n      </span>\n    `;\n  }\n\n  protected onClick() {\n    this.fireRequestSelected(!this.selected, 'interaction');\n  }\n\n  protected onDown(upName: string, evt: Event) {\n    const onUp = () => {\n      window.removeEventListener(upName, onUp);\n      this.rippleHandlers.endPress();\n    };\n\n    window.addEventListener(upName, onUp);\n    this.rippleHandlers.startPress(evt);\n  }\n\n  protected fireRequestSelected(selected: boolean, source: SelectionSource) {\n    if (this.noninteractive) {\n      return;\n    }\n\n    const customEv = new CustomEvent<RequestSelectedDetail>(\n        'request-selected',\n        {bubbles: true, composed: true, detail: {source, selected}});\n\n    this.dispatchEvent(customEv);\n  }\n\n  override connectedCallback() {\n    super.connectedCallback();\n\n    if (!this.noninteractive) {\n      this.setAttribute('mwc-list-item', '');\n    }\n\n    for (const listener of this.listeners) {\n      for (const eventName of listener.eventNames) {\n        listener.target.addEventListener(\n            eventName, listener.cb, {passive: true});\n      }\n    }\n  }\n\n  override disconnectedCallback() {\n    super.disconnectedCallback();\n\n    for (const listener of this.listeners) {\n      for (const eventName of listener.eventNames) {\n        listener.target.removeEventListener(eventName, listener.cb);\n      }\n    }\n\n    if (this._managingList) {\n      this._managingList.debouncedLayout ?\n          this._managingList.debouncedLayout(true) :\n          this._managingList.layout(true);\n    }\n  }\n\n  // composed flag, event fire through shadow root and up through composed tree\n  protected override firstUpdated() {\n    const ev = new Event('list-item-rendered', {bubbles: true, composed: true});\n    this.dispatchEvent(ev);\n  }\n}\n","import { mdiCalendar } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { formatDateNumeric } from \"../common/datetime/format_date\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-svg-icon\";\nimport \"./ha-textfield\";\n\nconst loadDatePickerDialog = () => import(\"./ha-dialog-date-picker\");\n\nexport interface datePickerDialogParams {\n  value?: string;\n  min?: string;\n  max?: string;\n  locale?: string;\n  onChange: (value: string) => void;\n}\n\nconst showDatePickerDialog = (\n  element: HTMLElement,\n  dialogParams: datePickerDialogParams\n): void => {\n  fireEvent(element, \"show-dialog\", {\n    dialogTag: \"ha-dialog-date-picker\",\n    dialogImport: loadDatePickerDialog,\n    dialogParams,\n  });\n};\n@customElement(\"ha-date-input\")\nexport class HaDateInput extends LitElement {\n  @property({ attribute: false }) public locale!: HomeAssistant[\"locale\"];\n\n  @property() public value?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  render() {\n    return html`<ha-textfield\n      .label=${this.label}\n      .helper=${this.helper}\n      .disabled=${this.disabled}\n      iconTrailing\n      helperPersistent\n      @click=${this._openDialog}\n      .value=${this.value\n        ? formatDateNumeric(new Date(this.value), this.locale)\n        : \"\"}\n      .required=${this.required}\n    >\n      <ha-svg-icon slot=\"trailingIcon\" .path=${mdiCalendar}></ha-svg-icon>\n    </ha-textfield>`;\n  }\n\n  private _openDialog() {\n    if (this.disabled) {\n      return;\n    }\n    showDatePickerDialog(this, {\n      min: \"1970-01-01\",\n      value: this.value,\n      onChange: (value) => this._valueChanged(value),\n      locale: this.locale.language,\n    });\n  }\n\n  private _valueChanged(value: string) {\n    if (this.value !== value) {\n      this.value = value;\n      fireEvent(this, \"change\");\n      fireEvent(this, \"value-changed\", { value });\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-svg-icon {\n        color: var(--secondary-text-color);\n      }\n    `;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-date-input\": HaDateInput;\n  }\n}\n","import { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-input-helper-text\")\nclass InputHelperText extends LitElement {\n  protected render(): TemplateResult {\n    return html`<slot></slot>`;\n  }\n\n  static styles = css`\n    :host {\n      display: block;\n      color: var(--mdc-text-field-label-ink-color, rgba(0, 0, 0, 0.6));\n      font-size: 0.75rem;\n      padding-left: 16px;\n      padding-right: 16px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input-helper-text\": InputHelperText;\n  }\n}\n","import { SelectBase } from \"@material/mwc-select/mwc-select-base\";\nimport { styles } from \"@material/mwc-select/mwc-select.css\";\nimport { css, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { debounce } from \"../common/util/debounce\";\nimport { nextRender } from \"../common/util/render-status\";\n\n@customElement(\"ha-select\")\nexport class HaSelect extends SelectBase {\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  protected override renderLeadingIcon() {\n    if (!this.icon) {\n      return nothing;\n    }\n\n    return html`<span class=\"mdc-select__icon\"\n      ><slot name=\"icon\"></slot\n    ></span>`;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"translations-updated\", this._translationsUpdated);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\n      \"translations-updated\",\n      this._translationsUpdated\n    );\n  }\n\n  private _translationsUpdated = debounce(async () => {\n    await nextRender();\n    this.layoutOptions();\n  }, 500);\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-select:not(.mdc-select--disabled) .mdc-select__icon {\n        color: var(--secondary-text-color);\n      }\n      .mdc-select__anchor {\n        width: var(--ha-select-min-width, 200px);\n      }\n      .mdc-select--filled .mdc-floating-label {\n        inset-inline-start: 12px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select--filled.mdc-select--with-leading-icon .mdc-floating-label {\n        inset-inline-start: 48px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select .mdc-select__anchor {\n        padding-inline-start: 12px;\n        padding-inline-end: 0px;\n        direction: var(--direction);\n      }\n      .mdc-select__anchor .mdc-floating-label--float-above {\n        transform-origin: var(--float-start);\n      }\n    `,\n  ];\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-select\": HaSelect;\n  }\n}\n","import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { TemplateResult, html, PropertyValues, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public iconTrailing?: boolean;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      (changedProperties.has(\"invalid\") &&\n        (this.invalid || changedProperties.get(\"invalid\") !== undefined)) ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid ? this.errorMessage || \"Invalid\" : \"\"\n      );\n      this.reportValidity();\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n        padding-inline-start: var(--text-field-suffix-padding-left, 12px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 0px);\n        direction: var(--direction);\n      }\n      .mdc-text-field--with-leading-icon {\n        padding-inline-start: var(--text-field-suffix-padding-left, 0px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 16px);\n        direction: var(--direction);\n      }\n\n      .mdc-text-field:not(.mdc-text-field--disabled)\n        .mdc-text-field__affix--suffix {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon--leading {\n        margin-inline-start: 16px;\n        margin-inline-end: 8px;\n        direction: var(--direction);\n      }\n\n      input {\n        text-align: var(--text-field-text-align, start);\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n\n      .mdc-floating-label {\n        inset-inline-start: 16px !important;\n        inset-inline-end: initial !important;\n        transform-origin: var(--float-start);\n        direction: var(--direction);\n        transform-origin: var(--float-start);\n      }\n\n      .mdc-text-field--with-leading-icon.mdc-text-field--filled\n        .mdc-floating-label {\n        max-width: calc(100% - 48px);\n        inset-inline-start: 48px !important;\n        inset-inline-end: initial !important;\n        direction: var(--direction);\n      }\n\n      .mdc-text-field__input[type=\"number\"] {\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          .mdc-text-field__affix--suffix,\n          .mdc-text-field--with-leading-icon,\n          .mdc-text-field__icon--leading,\n          .mdc-floating-label,\n          .mdc-text-field--with-leading-icon.mdc-text-field--filled\n            .mdc-floating-label,\n          .mdc-text-field__input[type=\"number\"] {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { useAmPm } from \"../common/datetime/use_am_pm\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { FrontendLocaleData } from \"../data/translation\";\nimport \"./ha-base-time-input\";\nimport type { TimeChangedEvent } from \"./ha-base-time-input\";\n\n@customElement(\"ha-time-input\")\nexport class HaTimeInput extends LitElement {\n  @property({ attribute: false }) public locale!: FrontendLocaleData;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @property({ type: Boolean, attribute: \"enable-second\" })\n  public enableSecond = false;\n\n  protected render() {\n    const useAMPM = useAmPm(this.locale);\n\n    const parts = this.value?.split(\":\") || [];\n    let hours = parts[0];\n    const numberHours = Number(parts[0]);\n    if (numberHours && useAMPM && numberHours > 12 && numberHours < 24) {\n      hours = String(numberHours - 12).padStart(2, \"0\");\n    }\n    if (useAMPM && numberHours === 0) {\n      hours = \"12\";\n    }\n\n    return html`\n      <ha-base-time-input\n        .label=${this.label}\n        .hours=${Number(hours)}\n        .minutes=${Number(parts[1])}\n        .seconds=${Number(parts[2])}\n        .format=${useAMPM ? 12 : 24}\n        .amPm=${useAMPM && numberHours >= 12 ? \"PM\" : \"AM\"}\n        .disabled=${this.disabled}\n        @value-changed=${this._timeChanged}\n        .enableSecond=${this.enableSecond}\n        .required=${this.required}\n        .helper=${this.helper}\n      ></ha-base-time-input>\n    `;\n  }\n\n  private _timeChanged(ev: CustomEvent<{ value: TimeChangedEvent }>) {\n    ev.stopPropagation();\n    const eventValue = ev.detail.value;\n\n    const useAMPM = useAmPm(this.locale);\n    let hours = eventValue.hours || 0;\n    if (eventValue && useAMPM) {\n      if (eventValue.amPm === \"PM\" && hours < 12) {\n        hours += 12;\n      }\n      if (eventValue.amPm === \"AM\" && hours === 12) {\n        hours = 0;\n      }\n    }\n    const value = `${hours.toString().padStart(2, \"0\")}:${\n      eventValue.minutes ? eventValue.minutes.toString().padStart(2, \"0\") : \"00\"\n    }:${\n      eventValue.seconds ? eventValue.seconds.toString().padStart(2, \"0\") : \"00\"\n    }`;\n\n    if (value === this.value) {\n      return;\n    }\n\n    this.value = value;\n    fireEvent(this, \"change\");\n    fireEvent(this, \"value-changed\", {\n      value,\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-time-input\": HaTimeInput;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../../components/ha-date-input\";\nimport { UNAVAILABLE_STATES, UNKNOWN } from \"../../../data/entity\";\nimport {\n  setInputDateTimeValue,\n  stateToIsoDateString,\n} from \"../../../data/input_datetime\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport \"../components/hui-generic-entity-row\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport type { EntityConfig, LovelaceRow } from \"./types\";\nimport \"../../../components/ha-time-input\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\n\n@customElement(\"hui-input-datetime-entity-row\")\nclass HuiInputDatetimeEntityRow extends LitElement implements LovelaceRow {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: EntityConfig;\n\n  public setConfig(config: EntityConfig): void {\n    if (!config) {\n      throw new Error(\"Invalid configuration\");\n    }\n    this._config = config;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity];\n\n    if (!stateObj) {\n      return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        </hui-warning>\n      `;\n    }\n\n    const name = this._config.name || computeStateName(stateObj);\n\n    return html`\n      <hui-generic-entity-row\n        .hass=${this.hass}\n        .config=${this._config}\n        .hideName=${stateObj.attributes.has_date &&\n        stateObj.attributes.has_time}\n      >\n        ${stateObj.attributes.has_date\n          ? html`\n              <ha-date-input\n                .label=${stateObj.attributes.has_time ? name : undefined}\n                .locale=${this.hass.locale}\n                .disabled=${UNAVAILABLE_STATES.includes(stateObj.state)}\n                .value=${stateToIsoDateString(stateObj)}\n                @value-changed=${this._dateChanged}\n              >\n              </ha-date-input>\n            `\n          : ``}\n        ${stateObj.attributes.has_time\n          ? html`\n              <ha-time-input\n                .value=${stateObj.state === UNKNOWN\n                  ? \"\"\n                  : stateObj.attributes.has_date\n                  ? stateObj.state.split(\" \")[1]\n                  : stateObj.state}\n                .locale=${this.hass.locale}\n                .disabled=${UNAVAILABLE_STATES.includes(stateObj.state)}\n                @value-changed=${this._timeChanged}\n                @click=${this._stopEventPropagation}\n              ></ha-time-input>\n            `\n          : ``}\n      </hui-generic-entity-row>\n    `;\n  }\n\n  private _stopEventPropagation(ev: Event): void {\n    ev.stopPropagation();\n  }\n\n  private _timeChanged(ev: CustomEvent<{ value: string }>): void {\n    const stateObj = this.hass!.states[this._config!.entity];\n    setInputDateTimeValue(\n      this.hass!,\n      stateObj.entity_id,\n      ev.detail.value,\n      stateObj.attributes.has_date ? stateObj.state.split(\" \")[0] : undefined\n    );\n  }\n\n  private _dateChanged(ev: CustomEvent<{ value: string }>): void {\n    const stateObj = this.hass!.states[this._config!.entity];\n\n    setInputDateTimeValue(\n      this.hass!,\n      stateObj.entity_id,\n      stateObj.attributes.has_time ? stateObj.state.split(\" \")[1] : undefined,\n      ev.detail.value\n    );\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-date-input + ha-time-input {\n        margin-left: 4px;\n        margin-inline-start: 4px;\n        margin-inline-end: initial;\n        direction: var(--direction);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-input-datetime-entity-row\": HuiInputDatetimeEntityRow;\n  }\n}\n"],"names":[],"sourceRoot":""}