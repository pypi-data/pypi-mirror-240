{"version":3,"file":"ef99c68c.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEA;AAIA;;AAKA;;;;;;ACvDA;;;;AAKA;;;;ACVA;AACA;AACA;;AAGA;;;;;AASA;;;;AC2BA;;AAEA;;;;AAsBA;;AAEA;AAqCA;AAIA;;;;AAkBA;;AAEA;;;;AAsBA;;AAEA;;ACzJA;;;;AAOA;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4FA;;ACdA;AACA;AACA;AACA;;;;AAIA;AAtHA;AAwHA;;AAEA;;AAEA;;;;AAIA;;AAIA;;AAQA;;;AAKA;AAGA;;;;;AASA;;;;;AAMA;;AAGA;;AAGA;AACA;;;;;AAOA;;AAGA;AAGA;;AAIA;AAOA;;;AAQA;;;;;AAMA;;;AAGA;;;;AAIA;;;AAGA;;;AAKA;AAEA;;AAEA;;AAIA;;;;;;;AAQA;;AAIA;;;;AAIA;;AAIA;;;;AAIA;;AAIA;;;;AAIA;;AAIA;;;;AAIA;;;;;AAOA;;;AAKA;;;AAKA;;;;;AAKA;;;AAKA;;;AAKA;;;;;AAKA;;;AAKA;;;AAKA;;;;;AAKA;;;AAKA;;;AAKA;;;;;AAKA;;;AAKA;;AAIA;;;;AAIA;;;AAKA;;AAIA;;;;AAIA;;;AAKA;;;AAKA;;;;;AAKA;;;AAKA;;;AAKA;;;;;AAKA;;;AAKA;;;AAKA;;;;;;;;AAQA;AACA;;AAMA;;;AAKA;AACA;;AAEA;;AAIA;AACA;;;;;;;AASA;;AAGA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;AAKA;;AAIA;AACA;AACA;;AAleA;;;AA2eA;AAmBA;;;AAmBA;;AAQA;;AAzhBA;;AA8hBA;;AAEA;AACA;AACA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsMA","sources":["webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/components/ha-fab.ts","webpack://home-assistant-frontend/./src/components/ha-help-tooltip.ts","webpack://home-assistant-frontend/./src/dialogs/config-flow/show-dialog-options-flow.ts","webpack://home-assistant-frontend/./src/panels/config/ha-config-section.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zwave_js/zwave_js-config-dashboard.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public outlined = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        border-radius: var(--ha-card-border-radius, 4px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { FabBase } from \"@material/mwc-fab/mwc-fab-base\";\nimport { styles } from \"@material/mwc-fab/mwc-fab.css\";\nimport { customElement } from \"lit/decorators\";\nimport { css } from \"lit\";\n\n@customElement(\"ha-fab\")\nexport class HaFab extends FabBase {\n  protected firstUpdated(changedProperties) {\n    super.firstUpdated(changedProperties);\n    this.style.setProperty(\"--mdc-theme-secondary\", \"var(--primary-color)\");\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host .mdc-fab--extended .mdc-fab__icon {\n        margin-inline-start: -8px;\n        margin-inline-end: 12px;\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          :host .mdc-fab--extended .mdc-fab__icon {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-fab\": HaFab;\n  }\n}\n","import { mdiHelpCircle } from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-help-tooltip\")\nexport class HaHelpTooltip extends LitElement {\n  @property() public label!: string;\n\n  @property() public position = \"top\";\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-svg-icon .path=${mdiHelpCircle}></ha-svg-icon>\n      <paper-tooltip\n        offset=\"4\"\n        .position=${this.position}\n        .fitToVisibleBounds=${true}\n        >${this.label}</paper-tooltip\n      >\n    `;\n  }\n\n  static get styles() {\n    return css`\n      ha-svg-icon {\n        --mdc-icon-size: var(--ha-help-tooltip-size, 14px);\n        color: var(--ha-help-tooltip-color, var(--disabled-text-color));\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-help-tooltip\": HaHelpTooltip;\n  }\n}\n","import { html } from \"lit\";\nimport { ConfigEntry } from \"../../data/config_entries\";\nimport { domainToName, IntegrationManifest } from \"../../data/integration\";\nimport {\n  createOptionsFlow,\n  deleteOptionsFlow,\n  fetchOptionsFlow,\n  handleOptionsFlowStep,\n} from \"../../data/options_flow\";\nimport {\n  loadDataEntryFlowDialog,\n  showFlowDialog,\n} from \"./show-dialog-data-entry-flow\";\n\nexport const loadOptionsFlowDialog = loadDataEntryFlowDialog;\n\nexport const showOptionsFlowDialog = (\n  element: HTMLElement,\n  configEntry: ConfigEntry,\n  manifest?: IntegrationManifest | null\n): void =>\n  showFlowDialog(\n    element,\n    {\n      startFlowHandler: configEntry.entry_id,\n      domain: configEntry.domain,\n      manifest,\n    },\n    {\n      loadDevicesAndAreas: false,\n      createFlow: async (hass, handler) => {\n        const [step] = await Promise.all([\n          createOptionsFlow(hass, handler),\n          hass.loadBackendTranslation(\"options\", configEntry.domain),\n        ]);\n        return step;\n      },\n      fetchFlow: async (hass, flowId) => {\n        const [step] = await Promise.all([\n          fetchOptionsFlow(hass, flowId),\n          hass.loadBackendTranslation(\"options\", configEntry.domain),\n        ]);\n        return step;\n      },\n      handleFlowStep: handleOptionsFlowStep,\n      deleteFlow: deleteOptionsFlow,\n\n      renderAbortDescription(hass, step) {\n        const description = hass.localize(\n          `component.${configEntry.domain}.options.abort.${step.reason}`,\n          step.description_placeholders\n        );\n\n        return description\n          ? html`\n              <ha-markdown\n                breaks\n                allowsvg\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderShowFormStepHeader(hass, step) {\n        return (\n          hass.localize(\n            `component.${configEntry.domain}.options.step.${step.step_id}.title`\n          ) || hass.localize(`ui.dialogs.options_flow.form.header`)\n        );\n      },\n\n      renderShowFormStepDescription(hass, step) {\n        const description = hass.localize(\n          `component.${configEntry.domain}.options.step.${step.step_id}.description`,\n          step.description_placeholders\n        );\n        return description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderShowFormStepFieldLabel(hass, step, field) {\n        return hass.localize(\n          `component.${configEntry.domain}.options.step.${step.step_id}.data.${field.name}`\n        );\n      },\n\n      renderShowFormStepFieldHelper(hass, step, field) {\n        const description = hass.localize(\n          `component.${configEntry.domain}.options.step.${step.step_id}.data_description.${field.name}`,\n          step.description_placeholders\n        );\n        return description\n          ? html`<ha-markdown breaks .content=${description}></ha-markdown>`\n          : \"\";\n      },\n\n      renderShowFormStepFieldError(hass, step, error) {\n        return hass.localize(\n          `component.${configEntry.domain}.options.error.${error}`,\n          step.description_placeholders\n        );\n      },\n\n      renderExternalStepHeader(_hass, _step) {\n        return \"\";\n      },\n\n      renderExternalStepDescription(_hass, _step) {\n        return \"\";\n      },\n\n      renderCreateEntryDescription(hass, _step) {\n        return html`\n          <p>${hass.localize(`ui.dialogs.options_flow.success.description`)}</p>\n        `;\n      },\n\n      renderShowFormProgressHeader(hass, step) {\n        return (\n          hass.localize(\n            `component.${configEntry.domain}.options.step.${step.step_id}.title`\n          ) || hass.localize(`component.${configEntry.domain}.title`)\n        );\n      },\n\n      renderShowFormProgressDescription(hass, step) {\n        const description = hass.localize(\n          `component.${configEntry.domain}.options.progress.${step.progress_action}`,\n          step.description_placeholders\n        );\n        return description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderMenuHeader(hass, step) {\n        return (\n          hass.localize(\n            `component.${configEntry.domain}.options.step.${step.step_id}.title`\n          ) || hass.localize(`component.${configEntry.domain}.title`)\n        );\n      },\n\n      renderMenuDescription(hass, step) {\n        const description = hass.localize(\n          `component.${configEntry.domain}.options.step.${step.step_id}.description`,\n          step.description_placeholders\n        );\n        return description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderMenuOption(hass, step, option) {\n        return hass.localize(\n          `component.${configEntry.domain}.options.step.${step.step_id}.menu_options.${option}`,\n          step.description_placeholders\n        );\n      },\n\n      renderLoadingDescription(hass, reason) {\n        return (\n          hass.localize(`component.${configEntry.domain}.options.loading`) ||\n          hass.localize(`ui.dialogs.options_flow.loading.${reason}`, {\n            integration: domainToName(hass.localize, configEntry.domain),\n          })\n        );\n      },\n    }\n  );\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\n\n@customElement(\"ha-config-section\")\nexport class HaConfigSection extends LitElement {\n  @property() public isWide = false;\n\n  @property({ type: Boolean }) public vertical = false;\n\n  @property({ type: Boolean, attribute: \"full-width\" })\n  public fullWidth = false;\n\n  protected render() {\n    return html`\n      <div\n        class=\"content ${classMap({\n          narrow: !this.isWide,\n          \"full-width\": this.fullWidth,\n        })}\"\n      >\n        <div class=\"header\"><slot name=\"header\"></slot></div>\n        <div\n          class=\"together layout ${classMap({\n            narrow: !this.isWide,\n            vertical: this.vertical || !this.isWide,\n            horizontal: !this.vertical && this.isWide,\n          })}\"\n        >\n          <div class=\"intro\"><slot name=\"introduction\"></slot></div>\n          <div class=\"panel flex-auto\"><slot></slot></div>\n        </div>\n      </div>\n    `;\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: block;\n      }\n      .content {\n        padding: 28px 20px 0;\n        max-width: 1040px;\n        margin: 0 auto;\n      }\n\n      .layout {\n        display: flex;\n      }\n\n      .horizontal {\n        flex-direction: row;\n      }\n\n      .vertical {\n        flex-direction: column;\n      }\n\n      .flex-auto {\n        flex: 1 1 auto;\n      }\n\n      .header {\n        font-family: var(--paper-font-headline_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-headline_-_-webkit-font-smoothing\n        );\n        font-size: var(--paper-font-headline_-_font-size);\n        font-weight: var(--paper-font-headline_-_font-weight);\n        letter-spacing: var(--paper-font-headline_-_letter-spacing);\n        line-height: var(--paper-font-headline_-_line-height);\n        opacity: var(--dark-primary-opacity);\n      }\n\n      .together {\n        margin-top: 32px;\n      }\n\n      .intro {\n        font-family: var(--paper-font-subhead_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-subhead_-_-webkit-font-smoothing\n        );\n        font-weight: var(--paper-font-subhead_-_font-weight);\n        line-height: var(--paper-font-subhead_-_line-height);\n        width: 100%;\n        opacity: var(--dark-primary-opacity);\n        font-size: 14px;\n        padding-bottom: 20px;\n      }\n\n      .horizontal .intro {\n        max-width: 400px;\n        margin-right: 40px;\n      }\n\n      .panel {\n        margin-top: -24px;\n      }\n\n      .panel ::slotted(*) {\n        margin-top: 24px;\n        display: block;\n      }\n\n      .narrow.content {\n        max-width: 640px;\n      }\n      .narrow .together {\n        margin-top: 20px;\n      }\n      .narrow .intro {\n        padding-bottom: 20px;\n        margin-right: 0;\n        max-width: 500px;\n      }\n\n      .full-width {\n        padding: 0;\n      }\n\n      .full-width .layout {\n        flex-direction: column;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-section\": HaConfigSection;\n  }\n}\n","import \"@material/mwc-list/mwc-list\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport {\n  mdiAlertCircle,\n  mdiCheckCircle,\n  mdiCircle,\n  mdiPlus,\n  mdiRefresh,\n} from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport \"../../../../../components/ha-card\";\nimport \"../../../../../components/ha-icon-button\";\nimport \"../../../../../components/ha-expansion-panel\";\nimport \"../../../../../components/ha-fab\";\nimport \"../../../../../components/ha-help-tooltip\";\nimport \"../../../../../components/ha-icon-next\";\nimport \"../../../../../components/ha-svg-icon\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport {\n  fetchZwaveDataCollectionStatus,\n  fetchZwaveNetworkStatus,\n  fetchZwaveProvisioningEntries,\n  InclusionState,\n  setZwaveDataCollectionPreference,\n  stopZwaveExclusion,\n  stopZwaveInclusion,\n  subscribeZwaveControllerStatistics,\n  ZWaveJSClient,\n  ZWaveJSControllerStatisticsUpdatedMessage,\n  ZWaveJSNetwork,\n  ZwaveJSProvisioningEntry,\n} from \"../../../../../data/zwave_js\";\nimport {\n  ConfigEntry,\n  getConfigEntries,\n  ERROR_STATES,\n} from \"../../../../../data/config_entries\";\nimport \"../../../../../layouts/hass-tabs-subpage\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport type { HomeAssistant, Route } from \"../../../../../types\";\nimport \"../../../ha-config-section\";\nimport { showZWaveJSAddNodeDialog } from \"./show-dialog-zwave_js-add-node\";\nimport { showZWaveJSHealNetworkDialog } from \"./show-dialog-zwave_js-heal-network\";\nimport { showZWaveJSRemoveNodeDialog } from \"./show-dialog-zwave_js-remove-node\";\nimport { configTabs } from \"./zwave_js-config-router\";\nimport { showOptionsFlowDialog } from \"../../../../../dialogs/config-flow/show-dialog-options-flow\";\nimport { computeRTL } from \"../../../../../common/util/compute_rtl\";\nimport { SubscribeMixin } from \"../../../../../mixins/subscribe-mixin\";\n\n@customElement(\"zwave_js-config-dashboard\")\nclass ZWaveJSConfigDashboard extends SubscribeMixin(LitElement) {\n  @property({ type: Object }) public hass!: HomeAssistant;\n\n  @property({ type: Object }) public route!: Route;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property({ type: Boolean }) public isWide!: boolean;\n\n  @property() public configEntryId!: string;\n\n  @state() private _configEntry?: ConfigEntry;\n\n  @state() private _network?: ZWaveJSNetwork;\n\n  @state() private _provisioningEntries?: ZwaveJSProvisioningEntry[];\n\n  @state() private _status?: ZWaveJSClient[\"state\"];\n\n  @state() private _icon = mdiCircle;\n\n  @state() private _dataCollectionOptIn?: boolean;\n\n  @state()\n  private _statistics?: ZWaveJSControllerStatisticsUpdatedMessage;\n\n  protected firstUpdated() {\n    if (this.hass) {\n      this._fetchData();\n    }\n  }\n\n  public hassSubscribe(): Array<UnsubscribeFunc | Promise<UnsubscribeFunc>> {\n    return [\n      subscribeZwaveControllerStatistics(\n        this.hass,\n        this.configEntryId,\n        (message) => {\n          if (!this.hasUpdated) {\n            return;\n          }\n          this._statistics = message;\n        }\n      ),\n    ];\n  }\n\n  protected render(): TemplateResult {\n    if (!this._configEntry) {\n      return html``;\n    }\n\n    if (ERROR_STATES.includes(this._configEntry.state)) {\n      return this._renderErrorScreen();\n    }\n    const notReadyDevices =\n      this._network?.controller.nodes.filter((node) => !node.ready).length ?? 0;\n\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        .tabs=${configTabs}\n      >\n        <ha-icon-button\n          slot=\"toolbar-icon\"\n          @click=${this._fetchData}\n          .path=${mdiRefresh}\n          .label=${this.hass!.localize(\"ui.common.refresh\")}\n        ></ha-icon-button>\n        <ha-config-section .narrow=${this.narrow} .isWide=${this.isWide}>\n          <div slot=\"header\">\n            ${this.hass.localize(\"ui.panel.config.zwave_js.dashboard.header\")}\n          </div>\n\n          <div slot=\"introduction\">\n            ${this.hass.localize(\n              \"ui.panel.config.zwave_js.dashboard.introduction\"\n            )}\n          </div>\n          ${this._network &&\n          this._status === \"connected\" &&\n          (this._network?.controller.inclusion_state ===\n            InclusionState.Including ||\n            this._network?.controller.inclusion_state ===\n              InclusionState.Excluding)\n            ? html`\n                <ha-alert alert-type=\"info\">\n                  ${this.hass.localize(\n                    `ui.panel.config.zwave_js.common.in_progress_inclusion_exclusion`\n                  )}\n                  <mwc-button\n                    slot=\"action\"\n                    .label=${this.hass.localize(\n                      `ui.panel.config.zwave_js.common.cancel_inclusion_exclusion`\n                    )}\n                    @click=${this._network?.controller.inclusion_state ===\n                    InclusionState.Including\n                      ? this._cancelInclusion\n                      : this._cancelExclusion}\n                  >\n                  </mwc-button>\n                </ha-alert>\n              `\n            : \"\"}\n          ${this._network\n            ? html`\n                <ha-card class=\"content network-status\">\n                  <div class=\"card-content\">\n                    <div class=\"heading\">\n                      <div class=\"icon\">\n                        ${this._status === \"disconnected\"\n                          ? html`<ha-circular-progress\n                              active\n                            ></ha-circular-progress>`\n                          : html`\n                              <ha-svg-icon\n                                .path=${this._icon}\n                                class=\"network-status-icon ${classMap({\n                                  [this._status!]: true,\n                                })}\"\n                                slot=\"item-icon\"\n                              ></ha-svg-icon>\n                            `}\n                      </div>\n                      ${this._status !== \"disconnected\"\n                        ? html`\n                            <div class=\"details\">\n                              ${this.hass.localize(\n                                \"ui.panel.config.zwave_js.common.network\"\n                              )}\n                              ${this.hass.localize(\n                                `ui.panel.config.zwave_js.network_status.${this._status}`\n                              )}<br />\n                              <small>\n                                ${this.hass.localize(\n                                  `ui.panel.config.zwave_js.dashboard.devices`,\n                                  {\n                                    count:\n                                      this._network.controller.nodes.length,\n                                  }\n                                )}\n                                ${notReadyDevices > 0\n                                  ? html`(${this.hass.localize(\n                                      `ui.panel.config.zwave_js.dashboard.not_ready`,\n                                      { count: notReadyDevices }\n                                    )})`\n                                  : \"\"}\n                              </small>\n                            </div>\n                          `\n                        : ``}\n                    </div>\n                  </div>\n                  <div class=\"card-actions\">\n                    <a\n                      href=${`/config/devices/dashboard?historyBack=1&config_entry=${this.configEntryId}`}\n                    >\n                      <mwc-button>\n                        ${this.hass.localize(\"ui.panel.config.devices.caption\")}\n                      </mwc-button>\n                    </a>\n                    <a\n                      href=${`/config/entities/dashboard?historyBack=1&config_entry=${this.configEntryId}`}\n                    >\n                      <mwc-button>\n                        ${this.hass.localize(\n                          \"ui.panel.config.entities.caption\"\n                        )}\n                      </mwc-button>\n                    </a>\n                    ${this._provisioningEntries?.length\n                      ? html`<a\n                          href=${`provisioned?config_entry=${this.configEntryId}`}\n                          ><mwc-button>\n                            ${this.hass.localize(\n                              \"ui.panel.config.zwave_js.dashboard.provisioned_devices\"\n                            )}\n                          </mwc-button></a\n                        >`\n                      : \"\"}\n                  </div>\n                </ha-card>\n                <ha-card header=\"Diagnostics\">\n                  <div class=\"card-content\">\n                    <div class=\"row\">\n                      <span>\n                        ${this.hass.localize(\n                          \"ui.panel.config.zwave_js.dashboard.driver_version\"\n                        )}:\n                      </span>\n                      <span>${this._network.client.driver_version}</span>\n                    </div>\n                    <div class=\"row\">\n                      <span>\n                        ${this.hass.localize(\n                          \"ui.panel.config.zwave_js.dashboard.server_version\"\n                        )}:\n                      </span>\n                      <span>${this._network.client.server_version}</span>\n                    </div>\n                    <div class=\"row\">\n                      <span>\n                        ${this.hass.localize(\n                          \"ui.panel.config.zwave_js.dashboard.home_id\"\n                        )}:\n                      </span>\n                      <span>${this._network.controller.home_id}</span>\n                    </div>\n                    <div class=\"row\">\n                      <span>\n                        ${this.hass.localize(\n                          \"ui.panel.config.zwave_js.dashboard.server_url\"\n                        )}:\n                      </span>\n                      <span>${this._network.client.ws_server_url}</span>\n                    </div>\n                    <br />\n                    <ha-expansion-panel\n                      .header=${this.hass.localize(\n                        \"ui.panel.config.zwave_js.dashboard.statistics.title\"\n                      )}\n                    >\n                      <mwc-list noninteractive>\n                        <mwc-list-item twoline hasmeta>\n                          <span>\n                            ${this.hass.localize(\n                              \"ui.panel.config.zwave_js.dashboard.statistics.messages_tx.label\"\n                            )}\n                          </span>\n                          <span slot=\"secondary\">\n                            ${this.hass.localize(\n                              \"ui.panel.config.zwave_js.dashboard.statistics.messages_tx.tooltip\"\n                            )}\n                          </span>\n                          <span slot=\"meta\"\n                            >${this._statistics?.messages_tx ?? 0}</span\n                          >\n                        </mwc-list-item>\n                        <mwc-list-item twoline hasmeta>\n                          <span>\n                            ${this.hass.localize(\n                              \"ui.panel.config.zwave_js.dashboard.statistics.messages_rx.label\"\n                            )}\n                          </span>\n                          <span slot=\"secondary\">\n                            ${this.hass.localize(\n                              \"ui.panel.config.zwave_js.dashboard.statistics.messages_rx.tooltip\"\n                            )}\n                          </span>\n                          <span slot=\"meta\"\n                            >${this._statistics?.messages_rx ?? 0}</span\n                          >\n                        </mwc-list-item>\n                        <mwc-list-item twoline hasmeta>\n                          <span>\n                            ${this.hass.localize(\n                              \"ui.panel.config.zwave_js.dashboard.statistics.messages_dropped_tx.label\"\n                            )}\n                          </span>\n                          <span slot=\"secondary\">\n                            ${this.hass.localize(\n                              \"ui.panel.config.zwave_js.dashboard.statistics.messages_dropped_tx.tooltip\"\n                            )}\n                          </span>\n                          <span slot=\"meta\"\n                            >${this._statistics?.messages_dropped_tx ?? 0}</span\n                          >\n                        </mwc-list-item>\n                        <mwc-list-item twoline hasmeta>\n                          <span>\n                            ${this.hass.localize(\n                              \"ui.panel.config.zwave_js.dashboard.statistics.messages_dropped_rx.label\"\n                            )}\n                          </span>\n                          <span slot=\"secondary\">\n                            ${this.hass.localize(\n                              \"ui.panel.config.zwave_js.dashboard.statistics.messages_dropped_rx.tooltip\"\n                            )}\n                          </span>\n                          <span slot=\"meta\"\n                            >${this._statistics?.messages_dropped_rx ?? 0}</span\n                          >\n                        </mwc-list-item>\n                        <mwc-list-item twoline hasmeta>\n                          <span>\n                            ${this.hass.localize(\n                              \"ui.panel.config.zwave_js.dashboard.statistics.nak.label\"\n                            )}\n                          </span>\n                          <span slot=\"secondary\">\n                            ${this.hass.localize(\n                              \"ui.panel.config.zwave_js.dashboard.statistics.nak.tooltip\"\n                            )}\n                          </span>\n                          <span slot=\"meta\">${this._statistics?.nak ?? 0}</span>\n                        </mwc-list-item>\n                        <mwc-list-item twoline hasmeta>\n                          <span>\n                            ${this.hass.localize(\n                              \"ui.panel.config.zwave_js.dashboard.statistics.can.label\"\n                            )}\n                          </span>\n                          <span slot=\"secondary\">\n                            ${this.hass.localize(\n                              \"ui.panel.config.zwave_js.dashboard.statistics.can.tooltip\"\n                            )}\n                          </span>\n                          <span slot=\"meta\">${this._statistics?.can ?? 0}</span>\n                        </mwc-list-item>\n                        <mwc-list-item twoline hasmeta>\n                          <span>\n                            ${this.hass.localize(\n                              \"ui.panel.config.zwave_js.dashboard.statistics.timeout_ack.label\"\n                            )}\n                          </span>\n                          <span slot=\"secondary\">\n                            ${this.hass.localize(\n                              \"ui.panel.config.zwave_js.dashboard.statistics.timeout_ack.tooltip\"\n                            )}\n                          </span>\n                          <span slot=\"meta\"\n                            >${this._statistics?.timeout_ack ?? 0}</span\n                          >\n                        </mwc-list-item>\n                        <mwc-list-item twoline hasmeta>\n                          <span>\n                            ${this.hass.localize(\n                              \"ui.panel.config.zwave_js.dashboard.statistics.timeout_response.label\"\n                            )}\n                          </span>\n                          <span slot=\"secondary\">\n                            ${this.hass.localize(\n                              \"ui.panel.config.zwave_js.dashboard.statistics.timeout_response.tooltip\"\n                            )}\n                          </span>\n                          <span slot=\"meta\"\n                            >${this._statistics?.timeout_response ?? 0}</span\n                          >\n                        </mwc-list-item>\n                        <mwc-list-item twoline hasmeta>\n                          <span>\n                            ${this.hass.localize(\n                              \"ui.panel.config.zwave_js.dashboard.statistics.timeout_callback.label\"\n                            )}\n                          </span>\n                          <span slot=\"secondary\">\n                            ${this.hass.localize(\n                              \"ui.panel.config.zwave_js.dashboard.statistics.timeout_callback.tooltip\"\n                            )}\n                          </span>\n                          <span slot=\"meta\"\n                            >${this._statistics?.timeout_callback ?? 0}</span\n                          >\n                        </mwc-list-item>\n                      </mwc-list>\n                    </ha-expansion-panel>\n                  </div>\n                  <div class=\"card-actions\">\n                    <mwc-button\n                      @click=${this._removeNodeClicked}\n                      .disabled=${this._status !== \"connected\" ||\n                      (this._network?.controller.inclusion_state !==\n                        InclusionState.Idle &&\n                        this._network?.controller.inclusion_state !==\n                          InclusionState.SmartStart)}\n                    >\n                      ${this.hass.localize(\n                        \"ui.panel.config.zwave_js.common.remove_node\"\n                      )}\n                    </mwc-button>\n                    <mwc-button\n                      @click=${this._healNetworkClicked}\n                      .disabled=${this._status === \"disconnected\"}\n                    >\n                      ${this.hass.localize(\n                        \"ui.panel.config.zwave_js.common.heal_network\"\n                      )}\n                    </mwc-button>\n                    <mwc-button @click=${this._openOptionFlow}>\n                      ${this.hass.localize(\n                        \"ui.panel.config.zwave_js.common.reconfigure_server\"\n                      )}\n                    </mwc-button>\n                  </div>\n                </ha-card>\n                <ha-card>\n                  <div class=\"card-header\">\n                    <h1>Third-Party Data Reporting</h1>\n                    ${this._dataCollectionOptIn !== undefined\n                      ? html`\n                          <ha-switch\n                            .checked=${this._dataCollectionOptIn === true}\n                            @change=${this._dataCollectionToggled}\n                          ></ha-switch>\n                        `\n                      : html`\n                          <ha-circular-progress\n                            size=\"small\"\n                            active\n                          ></ha-circular-progress>\n                        `}\n                  </div>\n                  <div class=\"card-content\">\n                    <p>\n                      Enable the reporting of anonymized telemetry and\n                      statistics to the <em>Z-Wave JS organization</em>. This\n                      data will be used to focus development efforts and improve\n                      the user experience. Information about the data that is\n                      collected and how it is used, including an example of the\n                      data collected, can be found in the\n                      <a\n                        target=\"_blank\"\n                        href=\"https://zwave-js.github.io/node-zwave-js/#/data-collection/data-collection\"\n                        >Z-Wave JS data collection documentation</a\n                      >.\n                    </p>\n                  </div>\n                </ha-card>\n              `\n            : ``}\n        </ha-config-section>\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.zwave_js.common.add_node\"\n          )}\n          extended\n          ?rtl=${computeRTL(this.hass)}\n          @click=${this._addNodeClicked}\n          .disabled=${this._status !== \"connected\" ||\n          (this._network?.controller.inclusion_state !== InclusionState.Idle &&\n            this._network?.controller.inclusion_state !==\n              InclusionState.SmartStart)}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  private _renderErrorScreen() {\n    const item = this._configEntry!;\n    let stateText: Parameters<typeof this.hass.localize> | undefined;\n    let stateTextExtra: TemplateResult | string | undefined;\n\n    if (item.disabled_by) {\n      stateText = [\n        \"ui.panel.config.integrations.config_entry.disable.disabled_cause\",\n        {\n          cause:\n            this.hass.localize(\n              `ui.panel.config.integrations.config_entry.disable.disabled_by.${item.disabled_by}`\n            ) || item.disabled_by,\n        },\n      ];\n      if (item.state === \"failed_unload\") {\n        stateTextExtra = html`.\n        ${this.hass.localize(\n          \"ui.panel.config.integrations.config_entry.disable_restart_confirm\"\n        )}.`;\n      }\n    } else if (item.state === \"not_loaded\") {\n      stateText = [\"ui.panel.config.integrations.config_entry.not_loaded\"];\n    } else if (ERROR_STATES.includes(item.state)) {\n      stateText = [\n        `ui.panel.config.integrations.config_entry.state.${item.state}`,\n      ];\n      if (item.reason) {\n        this.hass.loadBackendTranslation(\"config\", item.domain);\n        stateTextExtra = html` ${this.hass.localize(\n          `component.${item.domain}.config.error.${item.reason}`\n        ) || item.reason}`;\n      } else {\n        stateTextExtra = html`\n          <br />\n          <a href=\"/config/logs?filter=zwave_js\"\n            >${this.hass.localize(\n              \"ui.panel.config.integrations.config_entry.check_the_logs\"\n            )}</a\n          >\n        `;\n      }\n    }\n\n    return html` ${stateText\n      ? html`\n          <div class=\"error-message\">\n            <ha-svg-icon .path=${mdiAlertCircle}></ha-svg-icon>\n            <h3>\n              ${this._configEntry!.title}: ${this.hass.localize(...stateText)}\n            </h3>\n            <p>${stateTextExtra}</p>\n            <mwc-button @click=${this._handleBack}>\n              ${this.hass?.localize(\"ui.common.back\")}\n            </mwc-button>\n          </div>\n        `\n      : \"\"}`;\n  }\n\n  private _handleBack(): void {\n    history.back();\n  }\n\n  private async _fetchData() {\n    if (!this.configEntryId) {\n      return;\n    }\n    const configEntries = await getConfigEntries(this.hass, {\n      domain: \"zwave_js\",\n    });\n    this._configEntry = configEntries.find(\n      (entry) => entry.entry_id === this.configEntryId\n    );\n\n    if (ERROR_STATES.includes(this._configEntry!.state)) {\n      return;\n    }\n\n    const [network, dataCollectionStatus, provisioningEntries] =\n      await Promise.all([\n        fetchZwaveNetworkStatus(this.hass!, { entry_id: this.configEntryId }),\n        fetchZwaveDataCollectionStatus(this.hass!, this.configEntryId),\n        fetchZwaveProvisioningEntries(this.hass!, this.configEntryId),\n      ]);\n\n    this._provisioningEntries = provisioningEntries;\n\n    this._network = network;\n\n    this._status = this._network.client.state;\n    if (this._status === \"connected\") {\n      this._icon = mdiCheckCircle;\n    }\n\n    this._dataCollectionOptIn =\n      dataCollectionStatus.opted_in === true ||\n      dataCollectionStatus.enabled === true;\n  }\n\n  private async _addNodeClicked() {\n    showZWaveJSAddNodeDialog(this, {\n      entry_id: this.configEntryId!,\n      addedCallback: () => this._fetchData(),\n    });\n  }\n\n  private async _removeNodeClicked() {\n    showZWaveJSRemoveNodeDialog(this, {\n      entry_id: this.configEntryId!,\n    });\n  }\n\n  private async _healNetworkClicked() {\n    showZWaveJSHealNetworkDialog(this, {\n      entry_id: this.configEntryId!,\n    });\n  }\n\n  private async _cancelInclusion() {\n    stopZwaveInclusion(this.hass!, this.configEntryId!);\n    await this._fetchData();\n  }\n\n  private async _cancelExclusion() {\n    stopZwaveExclusion(this.hass!, this.configEntryId!);\n    await this._fetchData();\n  }\n\n  private _dataCollectionToggled(ev) {\n    setZwaveDataCollectionPreference(\n      this.hass!,\n      this.configEntryId!,\n      ev.target.checked\n    );\n  }\n\n  private async _openOptionFlow() {\n    if (!this.configEntryId) {\n      return;\n    }\n    const configEntries = await getConfigEntries(this.hass, {\n      domain: \"zwave_js\",\n    });\n    const configEntry = configEntries.find(\n      (entry) => entry.entry_id === this.configEntryId\n    );\n    showOptionsFlowDialog(this, configEntry!);\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .secondary {\n          color: var(--secondary-text-color);\n        }\n        .connected {\n          color: green;\n        }\n        .starting {\n          color: orange;\n        }\n        .offline {\n          color: red;\n        }\n\n        .error-message {\n          display: flex;\n          color: var(--primary-text-color);\n          height: calc(100% - var(--header-height));\n          padding: 16px;\n          align-items: center;\n          justify-content: center;\n          flex-direction: column;\n        }\n\n        .error-message h3 {\n          text-align: center;\n          font-weight: bold;\n        }\n\n        .error-message ha-svg-icon {\n          color: var(--error-color);\n          width: 64px;\n          height: 64px;\n        }\n\n        .content {\n          margin-top: 24px;\n        }\n\n        .sectionHeader {\n          position: relative;\n          padding-right: 40px;\n        }\n\n        .row {\n          display: flex;\n          justify-content: space-between;\n        }\n\n        span[slot=\"meta\"] {\n          font-size: 0.95em;\n          color: var(--primary-text-color);\n        }\n\n        .network-status div.heading {\n          display: flex;\n          align-items: center;\n        }\n\n        .network-status div.heading .icon {\n          width: 48px;\n          height: 48px;\n          margin-right: 16px;\n        }\n        .network-status div.heading ha-svg-icon {\n          width: 48px;\n          height: 48px;\n        }\n        .network-status div.heading .details {\n          font-size: 1.5rem;\n        }\n\n        .network-status small {\n          font-size: 1rem;\n        }\n\n        mwc-list-item {\n          height: 60px;\n        }\n\n        .card-header {\n          display: flex;\n        }\n        .card-header h1 {\n          flex: 1;\n        }\n        .card-header ha-switch {\n          width: 48px;\n          margin-top: 16px;\n        }\n\n        ha-card {\n          margin: 0px auto 24px;\n          max-width: 600px;\n        }\n\n        [hidden] {\n          display: none;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"zwave_js-config-dashboard\": ZWaveJSConfigDashboard;\n  }\n}\n"],"names":[],"sourceRoot":""}