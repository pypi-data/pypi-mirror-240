{"version":3,"file":"2ee807d6.js","mappings":";AAgDA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAKA;;;;;;;;AA+CA;;;;;;ACxFA;;;;AAKA;;;;AC4BA;AACA;;;;;AAOA;AA7DA;;AAkEA;AACA;;;AAKA;AAxEA;;AA6EA;AACA;;AAEA;;;AAGA;AAnFA;;;AAyFA;;;AAKA;;;AAKA;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA","sources":["webpack://home-assistant-frontend/./src/components/ha-button-menu.ts","webpack://home-assistant-frontend/./src/components/ha-fab.ts","webpack://home-assistant-frontend/./src/panels/lovelace/components/hui-card-options.ts"],"sourcesContent":["import type { Button } from \"@material/mwc-button\";\nimport \"@material/mwc-menu\";\nimport type { Corner, Menu, MenuCorner } from \"@material/mwc-menu\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HaIconButton } from \"./ha-icon-button\";\n\n@customElement(\"ha-button-menu\")\nexport class HaButtonMenu extends LitElement {\n  protected readonly [FOCUS_TARGET];\n\n  @property() public corner: Corner = \"TOP_START\";\n\n  @property() public menuCorner: MenuCorner = \"START\";\n\n  @property({ type: Number }) public x: number | null = null;\n\n  @property({ type: Number }) public y: number | null = null;\n\n  @property({ type: Boolean }) public multi = false;\n\n  @property({ type: Boolean }) public activatable = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public fixed = false;\n\n  @query(\"mwc-menu\", true) private _menu?: Menu;\n\n  public get items() {\n    return this._menu?.items;\n  }\n\n  public get selected() {\n    return this._menu?.selected;\n  }\n\n  public override focus() {\n    if (this._menu?.open) {\n      this._menu.focusItemAtIndex(0);\n    } else {\n      this._triggerButton?.focus();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div @click=${this._handleClick}>\n        <slot name=\"trigger\" @slotchange=${this._setTriggerAria}></slot>\n      </div>\n      <mwc-menu\n        .corner=${this.corner}\n        .menuCorner=${this.menuCorner}\n        .fixed=${this.fixed}\n        .multi=${this.multi}\n        .activatable=${this.activatable}\n        .y=${this.y}\n        .x=${this.x}\n      >\n        <slot></slot>\n      </mwc-menu>\n    `;\n  }\n\n  protected firstUpdated(changedProps): void {\n    super.firstUpdated(changedProps);\n\n    if (document.dir === \"rtl\") {\n      this.updateComplete.then(() => {\n        this.querySelectorAll(\"mwc-list-item\").forEach((item) => {\n          const style = document.createElement(\"style\");\n          style.innerHTML =\n            \"span.material-icons:first-of-type { margin-left: var(--mdc-list-item-graphic-margin, 32px) !important; margin-right: 0px !important;}\";\n          item!.shadowRoot!.appendChild(style);\n        });\n      });\n    }\n  }\n\n  private _handleClick(): void {\n    if (this.disabled) {\n      return;\n    }\n    this._menu!.anchor = this;\n    this._menu!.show();\n  }\n\n  private get _triggerButton() {\n    return this.querySelector(\n      'ha-icon-button[slot=\"trigger\"], mwc-button[slot=\"trigger\"]'\n    ) as HaIconButton | Button | null;\n  }\n\n  private _setTriggerAria() {\n    if (this._triggerButton) {\n      this._triggerButton.ariaHasPopup = \"menu\";\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ::slotted([disabled]) {\n        color: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-menu\": HaButtonMenu;\n  }\n}\n","import { FabBase } from \"@material/mwc-fab/mwc-fab-base\";\nimport { styles } from \"@material/mwc-fab/mwc-fab.css\";\nimport { customElement } from \"lit/decorators\";\nimport { css } from \"lit\";\n\n@customElement(\"ha-fab\")\nexport class HaFab extends FabBase {\n  protected firstUpdated(changedProperties) {\n    super.firstUpdated(changedProperties);\n    this.style.setProperty(\"--mdc-theme-secondary\", \"var(--primary-color)\");\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host .mdc-fab--extended .mdc-fab__icon {\n        margin-inline-start: -8px;\n        margin-inline-end: 12px;\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          :host .mdc-fab--extended .mdc-fab__icon {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-fab\": HaFab;\n  }\n}\n","import \"@material/mwc-button\";\nimport { ActionDetail } from \"@material/mwc-list/mwc-list-foundation\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { mdiArrowDown, mdiArrowUp, mdiDotsVertical } from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, queryAssignedNodes } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-icon-button\";\nimport { saveConfig } from \"../../../data/lovelace\";\nimport { showAlertDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport { HomeAssistant } from \"../../../types\";\nimport { showSaveSuccessToast } from \"../../../util/toast-saved-success\";\nimport { computeCardSize } from \"../common/compute-card-size\";\nimport { showEditCardDialog } from \"../editor/card-editor/show-edit-card-dialog\";\nimport { addCard, deleteCard, moveCard, swapCard } from \"../editor/config-util\";\nimport { showSelectViewDialog } from \"../editor/select-view/show-select-view-dialog\";\nimport { Lovelace, LovelaceCard } from \"../types\";\n\n@customElement(\"hui-card-options\")\nexport class HuiCardOptions extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ attribute: false }) public lovelace?: Lovelace;\n\n  @property() public path?: [number, number];\n\n  @queryAssignedNodes() private _assignedNodes?: NodeListOf<LovelaceCard>;\n\n  public getCardSize() {\n    return this._assignedNodes ? computeCardSize(this._assignedNodes[0]) : 1;\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (!changedProps.has(\"path\") || !this.path) {\n      return;\n    }\n    this.classList.toggle(\n      \"panel\",\n      this.lovelace!.config.views[this.path![0]].panel\n    );\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"card\"><slot></slot></div>\n      <ha-card>\n        <div class=\"card-actions\">\n          <mwc-button @click=${this._editCard}\n            >${this.hass!.localize(\n              \"ui.panel.lovelace.editor.edit_card.edit\"\n            )}</mwc-button\n          >\n          <div>\n            <slot name=\"buttons\"></slot>\n            <ha-icon-button\n              .label=${this.hass!.localize(\n                \"ui.panel.lovelace.editor.edit_card.move_down\"\n              )}\n              .path=${mdiArrowDown}\n              class=\"move-arrow\"\n              @click=${this._cardDown}\n              .disabled=${this.lovelace!.config.views[this.path![0]].cards!\n                .length ===\n              this.path![1] + 1}\n            ></ha-icon-button>\n            <ha-icon-button\n              .label=${this.hass!.localize(\n                \"ui.panel.lovelace.editor.edit_card.move_up\"\n              )}\n              .path=${mdiArrowUp}\n              class=\"move-arrow\"\n              @click=${this._cardUp}\n              ?disabled=${this.path![1] === 0}\n            ></ha-icon-button>\n            <ha-button-menu corner=\"BOTTOM_START\" @action=${this._handleAction}>\n              <ha-icon-button\n                slot=\"trigger\"\n                .label=${this.hass!.localize(\n                  \"ui.panel.lovelace.editor.edit_card.options\"\n                )}\n                .path=${mdiDotsVertical}\n              ></ha-icon-button>\n              <mwc-list-item>\n                ${this.hass!.localize(\n                  \"ui.panel.lovelace.editor.edit_card.move\"\n                )}</mwc-list-item\n              >\n              <mwc-list-item\n                >${this.hass!.localize(\n                  \"ui.panel.lovelace.editor.edit_card.duplicate\"\n                )}</mwc-list-item\n              >\n              <mwc-list-item class=\"delete-item\">\n                ${this.hass!.localize(\n                  \"ui.panel.lovelace.editor.edit_card.delete\"\n                )}</mwc-list-item\n              >\n            </ha-button-menu>\n          </div>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host(:hover) {\n        outline: 2px solid var(--primary-color);\n      }\n\n      :host(:not(.panel)) ::slotted(*) {\n        display: block;\n      }\n\n      :host(.panel) .card {\n        height: calc(100% - 59px);\n      }\n\n      ha-card {\n        border-top-right-radius: 0;\n        border-top-left-radius: 0;\n      }\n\n      .card-actions {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n\n      ha-icon-button {\n        color: var(--primary-text-color);\n      }\n\n      ha-icon-button.move-arrow[disabled] {\n        color: var(--disabled-text-color);\n      }\n\n      mwc-list-item {\n        cursor: pointer;\n        white-space: nowrap;\n      }\n\n      mwc-list-item.delete-item {\n        color: var(--error-color);\n      }\n    `;\n  }\n\n  private _handleAction(ev: CustomEvent<ActionDetail>) {\n    switch (ev.detail.index) {\n      case 0:\n        this._moveCard();\n        break;\n      case 1:\n        this._duplicateCard();\n        break;\n      case 2:\n        this._deleteCard();\n        break;\n    }\n  }\n\n  private _duplicateCard(): void {\n    const path = this.path!;\n    const cardConfig = this.lovelace!.config.views[path[0]].cards![path[1]];\n    showEditCardDialog(this, {\n      lovelaceConfig: this.lovelace!.config,\n      cardConfig,\n      saveConfig: this.lovelace!.saveConfig,\n      path: [path[0]],\n    });\n  }\n\n  private _editCard(): void {\n    fireEvent(this, \"ll-edit-card\", { path: this.path! });\n  }\n\n  private _cardUp(): void {\n    const lovelace = this.lovelace!;\n    const path = this.path!;\n    lovelace.saveConfig(\n      swapCard(lovelace.config, path, [path[0], path[1] - 1])\n    );\n  }\n\n  private _cardDown(): void {\n    const lovelace = this.lovelace!;\n    const path = this.path!;\n    lovelace.saveConfig(\n      swapCard(lovelace.config, path, [path[0], path[1] + 1])\n    );\n  }\n\n  private _moveCard(): void {\n    showSelectViewDialog(this, {\n      lovelaceConfig: this.lovelace!.config,\n      urlPath: this.lovelace!.urlPath,\n      allowDashboardChange: true,\n      header: this.hass!.localize(\"ui.panel.lovelace.editor.move_card.header\"),\n      viewSelectedCallback: async (urlPath, selectedDashConfig, viewIndex) => {\n        if (urlPath === this.lovelace!.urlPath) {\n          this.lovelace!.saveConfig(\n            moveCard(this.lovelace!.config, this.path!, [viewIndex])\n          );\n          showSaveSuccessToast(this, this.hass!);\n          return;\n        }\n        try {\n          await saveConfig(\n            this.hass!,\n            urlPath,\n            addCard(\n              selectedDashConfig,\n              [viewIndex],\n              this.lovelace!.config.views[this.path![0]].cards![this.path![1]]\n            )\n          );\n          this.lovelace!.saveConfig(\n            deleteCard(this.lovelace!.config, this.path!)\n          );\n          showSaveSuccessToast(this, this.hass!);\n        } catch (err: any) {\n          showAlertDialog(this, {\n            text: `Moving failed: ${err.message}`,\n          });\n        }\n      },\n    });\n  }\n\n  private _deleteCard(): void {\n    fireEvent(this, \"ll-delete-card\", { path: this.path! });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-card-options\": HuiCardOptions;\n  }\n}\n"],"names":[],"sourceRoot":""}