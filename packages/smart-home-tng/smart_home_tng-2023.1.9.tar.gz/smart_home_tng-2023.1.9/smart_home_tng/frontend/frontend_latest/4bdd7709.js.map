{"version":3,"file":"4bdd7709.js","mappings":";AAwCA;;AAEA;AACA;;;AAkOA;AACA;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAhBA;AC/IA;;AAGA;;AAEA;AACA;;AAGA;AACA;;;AAbA;;AAsBA;AAYA;AAYA;;AAaA;;;;AAOA;AACA;;;;;AAKA;;;;;AAKA;;;;;;;AASA;AACA;;;;;AAKA;;;;;AAKA;;;;;;;AASA;AACA;;;;;AAKA;;;;;AAKA;;;;;;AAQA;AAIA;;AAoBA;;AAIA;;AAGA;AACA;AAEA;;AAGA;AACA;;;AAIA;;;AAGA;;;;;AAOA;AAtSA;;AA2SA;AACA;AACA;;;AAGA;;;;;;;;AAUA;AA1TA;;AA6TA;AACA;AACA;;;AAGA;;;;AAOA;;AAOA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;;AAGA;;AAGA;;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;;AAGA;;AAGA;;AAEA;AACA;AAGA;AACA;AACA;AACA;;;AAKA;AA0LA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FA","sources":["webpack://home-assistant-frontend/./src/components/device/ha-device-picker.ts","webpack://home-assistant-frontend/./src/components/ha-target-picker.ts"],"sourcesContent":["import \"@material/mwc-list/mwc-list-item\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { ComboBoxLitRenderer } from \"@vaadin/combo-box/lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeDomain } from \"../../common/entity/compute_domain\";\nimport { stringCompare } from \"../../common/string/compare\";\nimport {\n  AreaRegistryEntry,\n  subscribeAreaRegistry,\n} from \"../../data/area_registry\";\nimport {\n  computeDeviceName,\n  DeviceEntityLookup,\n  DeviceRegistryEntry,\n  subscribeDeviceRegistry,\n} from \"../../data/device_registry\";\nimport {\n  EntityRegistryEntry,\n  subscribeEntityRegistry,\n} from \"../../data/entity_registry\";\nimport { SubscribeMixin } from \"../../mixins/subscribe-mixin\";\nimport { PolymerChangedEvent } from \"../../polymer-types\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-combo-box\";\nimport type { HaComboBox } from \"../ha-combo-box\";\n\ninterface Device {\n  name: string;\n  area: string;\n  id: string;\n}\n\nexport type HaDevicePickerDeviceFilterFunc = (\n  device: DeviceRegistryEntry\n) => boolean;\n\nconst rowRenderer: ComboBoxLitRenderer<Device> = (item) => html`<mwc-list-item\n  .twoline=${!!item.area}\n>\n  <span>${item.name}</span>\n  <span slot=\"secondary\">${item.area}</span>\n</mwc-list-item>`;\n\n@customElement(\"ha-device-picker\")\nexport class HaDevicePicker extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property() public helper?: string;\n\n  @property() public devices?: DeviceRegistryEntry[];\n\n  @property() public areas?: AreaRegistryEntry[];\n\n  @property() public entities?: EntityRegistryEntry[];\n\n  /**\n   * Show only devices with entities from specific domains.\n   * @type {Array}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no devices with entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  /**\n   * Show only devices with entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  @property() public deviceFilter?: HaDevicePickerDeviceFilterFunc;\n\n  @property({ type: Boolean }) public disabled?: boolean;\n\n  @property({ type: Boolean }) public required?: boolean;\n\n  @state() private _opened?: boolean;\n\n  @query(\"ha-combo-box\", true) public comboBox!: HaComboBox;\n\n  private _init = false;\n\n  private _getDevices = memoizeOne(\n    (\n      devices: DeviceRegistryEntry[],\n      areas: AreaRegistryEntry[],\n      entities: EntityRegistryEntry[],\n      includeDomains: this[\"includeDomains\"],\n      excludeDomains: this[\"excludeDomains\"],\n      includeDeviceClasses: this[\"includeDeviceClasses\"],\n      deviceFilter: this[\"deviceFilter\"]\n    ): Device[] => {\n      if (!devices.length) {\n        return [\n          {\n            id: \"no_devices\",\n            area: \"\",\n            name: this.hass.localize(\"ui.components.device-picker.no_devices\"),\n          },\n        ];\n      }\n\n      const deviceEntityLookup: DeviceEntityLookup = {};\n\n      if (includeDomains || excludeDomains || includeDeviceClasses) {\n        for (const entity of entities) {\n          if (!entity.device_id) {\n            continue;\n          }\n          if (!(entity.device_id in deviceEntityLookup)) {\n            deviceEntityLookup[entity.device_id] = [];\n          }\n          deviceEntityLookup[entity.device_id].push(entity);\n        }\n      }\n\n      const areaLookup: { [areaId: string]: AreaRegistryEntry } = {};\n      for (const area of areas) {\n        areaLookup[area.area_id] = area;\n      }\n\n      let inputDevices = devices.filter(\n        (device) => device.id === this.value || !device.disabled_by\n      );\n\n      if (includeDomains) {\n        inputDevices = inputDevices.filter((device) => {\n          const devEntities = deviceEntityLookup[device.id];\n          if (!devEntities || !devEntities.length) {\n            return false;\n          }\n          return deviceEntityLookup[device.id].some((entity) =>\n            includeDomains.includes(computeDomain(entity.entity_id))\n          );\n        });\n      }\n\n      if (excludeDomains) {\n        inputDevices = inputDevices.filter((device) => {\n          const devEntities = deviceEntityLookup[device.id];\n          if (!devEntities || !devEntities.length) {\n            return true;\n          }\n          return entities.every(\n            (entity) =>\n              !excludeDomains.includes(computeDomain(entity.entity_id))\n          );\n        });\n      }\n\n      if (includeDeviceClasses) {\n        inputDevices = inputDevices.filter((device) => {\n          const devEntities = deviceEntityLookup[device.id];\n          if (!devEntities || !devEntities.length) {\n            return false;\n          }\n          return deviceEntityLookup[device.id].some((entity) => {\n            const stateObj = this.hass.states[entity.entity_id];\n            if (!stateObj) {\n              return false;\n            }\n            return (\n              stateObj.attributes.device_class &&\n              includeDeviceClasses.includes(stateObj.attributes.device_class)\n            );\n          });\n        });\n      }\n\n      if (deviceFilter) {\n        inputDevices = inputDevices.filter(\n          (device) =>\n            // We always want to include the device of the current value\n            device.id === this.value || deviceFilter!(device)\n        );\n      }\n\n      const outputDevices = inputDevices.map((device) => ({\n        id: device.id,\n        name: computeDeviceName(\n          device,\n          this.hass,\n          deviceEntityLookup[device.id]\n        ),\n        area:\n          device.area_id && areaLookup[device.area_id]\n            ? areaLookup[device.area_id].name\n            : this.hass.localize(\"ui.components.device-picker.no_area\"),\n      }));\n      if (!outputDevices.length) {\n        return [\n          {\n            id: \"no_devices\",\n            area: \"\",\n            name: this.hass.localize(\"ui.components.device-picker.no_match\"),\n          },\n        ];\n      }\n      if (outputDevices.length === 1) {\n        return outputDevices;\n      }\n      return outputDevices.sort((a, b) =>\n        stringCompare(a.name || \"\", b.name || \"\")\n      );\n    }\n  );\n\n  public open() {\n    this.comboBox?.open();\n  }\n\n  public focus() {\n    this.comboBox?.focus();\n  }\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeDeviceRegistry(this.hass.connection!, (devices) => {\n        this.devices = devices;\n      }),\n      subscribeAreaRegistry(this.hass.connection!, (areas) => {\n        this.areas = areas;\n      }),\n      subscribeEntityRegistry(this.hass.connection!, (entities) => {\n        this.entities = entities;\n      }),\n    ];\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (\n      (!this._init && this.devices && this.areas && this.entities) ||\n      (changedProps.has(\"_opened\") && this._opened)\n    ) {\n      this._init = true;\n      (this.comboBox as any).items = this._getDevices(\n        this.devices!,\n        this.areas!,\n        this.entities!,\n        this.includeDomains,\n        this.excludeDomains,\n        this.includeDeviceClasses,\n        this.deviceFilter\n      );\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this.devices || !this.areas || !this.entities) {\n      return html``;\n    }\n    return html`\n      <ha-combo-box\n        .hass=${this.hass}\n        .label=${this.label === undefined && this.hass\n          ? this.hass.localize(\"ui.components.device-picker.device\")\n          : this.label}\n        .value=${this._value}\n        .helper=${this.helper}\n        .renderer=${rowRenderer}\n        .disabled=${this.disabled}\n        .required=${this.required}\n        item-value-path=\"id\"\n        item-label-path=\"name\"\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._deviceChanged}\n      ></ha-combo-box>\n    `;\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  private _deviceChanged(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    let newValue = ev.detail.value;\n\n    if (newValue === \"no_devices\") {\n      newValue = \"\";\n    }\n\n    if (newValue !== this._value) {\n      this._setValue(newValue);\n    }\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    setTimeout(() => {\n      fireEvent(this, \"value-changed\", { value });\n      fireEvent(this, \"change\");\n    }, 0);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-device-picker\": HaDevicePicker;\n  }\n}\n","// @ts-ignore\nimport chipStyles from \"@material/chips/dist/mdc.chips.min.css\";\nimport \"@material/mwc-button/mwc-button\";\nimport {\n  mdiClose,\n  mdiDevices,\n  mdiPlus,\n  mdiSofa,\n  mdiUnfoldMoreVertical,\n} from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport {\n  HassEntity,\n  HassServiceTarget,\n  UnsubscribeFunc,\n} from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, unsafeCSS } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { ensureArray } from \"../common/ensure-array\";\nimport { computeDomain } from \"../common/entity/compute_domain\";\nimport { computeStateName } from \"../common/entity/compute_state_name\";\nimport {\n  AreaRegistryEntry,\n  subscribeAreaRegistry,\n} from \"../data/area_registry\";\nimport {\n  computeDeviceName,\n  DeviceRegistryEntry,\n  subscribeDeviceRegistry,\n} from \"../data/device_registry\";\nimport {\n  EntityRegistryEntry,\n  subscribeEntityRegistry,\n} from \"../data/entity_registry\";\nimport { SubscribeMixin } from \"../mixins/subscribe-mixin\";\nimport { HomeAssistant } from \"../types\";\nimport \"./device/ha-device-picker\";\nimport type { HaDevicePickerDeviceFilterFunc } from \"./device/ha-device-picker\";\nimport \"./entity/ha-entity-picker\";\nimport type { HaEntityPickerEntityFilterFunc } from \"./entity/ha-entity-picker\";\nimport \"./ha-area-picker\";\nimport \"./ha-icon-button\";\nimport \"./ha-input-helper-text\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-target-picker\")\nexport class HaTargetPicker extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public value?: HassServiceTarget;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  /**\n   * Show only targets with entities from specific domains.\n   * @type {Array}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show only targets with entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  @property() public deviceFilter?: HaDevicePickerDeviceFilterFunc;\n\n  @property() public entityRegFilter?: (entity: EntityRegistryEntry) => boolean;\n\n  @property() public entityFilter?: HaEntityPickerEntityFilterFunc;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean }) public horizontal = false;\n\n  @state() private _areas?: { [areaId: string]: AreaRegistryEntry };\n\n  @state() private _devices?: {\n    [deviceId: string]: DeviceRegistryEntry;\n  };\n\n  @state() private _entities?: EntityRegistryEntry[];\n\n  @state() private _addMode?: \"area_id\" | \"entity_id\" | \"device_id\";\n\n  @query(\"#input\") private _inputElement?;\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeAreaRegistry(this.hass.connection!, (areas) => {\n        const areaLookup: { [areaId: string]: AreaRegistryEntry } = {};\n        for (const area of areas) {\n          areaLookup[area.area_id] = area;\n        }\n        this._areas = areaLookup;\n      }),\n      subscribeDeviceRegistry(this.hass.connection!, (devices) => {\n        const deviceLookup: { [deviceId: string]: DeviceRegistryEntry } = {};\n        for (const device of devices) {\n          deviceLookup[device.id] = device;\n        }\n        this._devices = deviceLookup;\n      }),\n      subscribeEntityRegistry(this.hass.connection!, (entities) => {\n        this._entities = entities;\n      }),\n    ];\n  }\n\n  protected render() {\n    if (!this._areas || !this._devices || !this._entities) {\n      return html``;\n    }\n    return html`\n      ${this.horizontal\n        ? html`\n            <div class=\"horizontal-container\">\n              ${this._renderChips()} ${this._renderPicker()}\n            </div>\n            ${this._renderItems()}\n          `\n        : html`\n            <div>\n              ${this._renderItems()} ${this._renderPicker()}\n              ${this._renderChips()}\n            </div>\n          `}\n    `;\n  }\n\n  private _renderItems() {\n    return html`\n      <div class=\"mdc-chip-set items\">\n        ${this.value?.area_id\n          ? ensureArray(this.value.area_id).map((area_id) => {\n              const area = this._areas![area_id];\n              return this._renderChip(\n                \"area_id\",\n                area_id,\n                area?.name || area_id,\n                undefined,\n                mdiSofa\n              );\n            })\n          : \"\"}\n        ${this.value?.device_id\n          ? ensureArray(this.value.device_id).map((device_id) => {\n              const device = this._devices![device_id];\n              return this._renderChip(\n                \"device_id\",\n                device_id,\n                device ? computeDeviceName(device, this.hass) : device_id,\n                undefined,\n                mdiDevices\n              );\n            })\n          : \"\"}\n        ${this.value?.entity_id\n          ? ensureArray(this.value.entity_id).map((entity_id) => {\n              const entity = this.hass.states[entity_id];\n              return this._renderChip(\n                \"entity_id\",\n                entity_id,\n                entity ? computeStateName(entity) : entity_id,\n                entity\n              );\n            })\n          : \"\"}\n      </div>\n    `;\n  }\n\n  private _renderChips() {\n    return html`\n      <div class=\"mdc-chip-set\">\n        <div\n          class=\"mdc-chip area_id add\"\n          .type=${\"area_id\"}\n          @click=${this._showPicker}\n        >\n          <div class=\"mdc-chip__ripple\"></div>\n          <ha-svg-icon\n            class=\"mdc-chip__icon mdc-chip__icon--leading\"\n            .path=${mdiPlus}\n          ></ha-svg-icon>\n          <span role=\"gridcell\">\n            <span role=\"button\" tabindex=\"0\" class=\"mdc-chip__primary-action\">\n              <span class=\"mdc-chip__text\"\n                >${this.hass.localize(\n                  \"ui.components.target-picker.add_area_id\"\n                )}</span\n              >\n            </span>\n          </span>\n        </div>\n        <div\n          class=\"mdc-chip device_id add\"\n          .type=${\"device_id\"}\n          @click=${this._showPicker}\n        >\n          <div class=\"mdc-chip__ripple\"></div>\n          <ha-svg-icon\n            class=\"mdc-chip__icon mdc-chip__icon--leading\"\n            .path=${mdiPlus}\n          ></ha-svg-icon>\n          <span role=\"gridcell\">\n            <span role=\"button\" tabindex=\"0\" class=\"mdc-chip__primary-action\">\n              <span class=\"mdc-chip__text\"\n                >${this.hass.localize(\n                  \"ui.components.target-picker.add_device_id\"\n                )}</span\n              >\n            </span>\n          </span>\n        </div>\n        <div\n          class=\"mdc-chip entity_id add\"\n          .type=${\"entity_id\"}\n          @click=${this._showPicker}\n        >\n          <div class=\"mdc-chip__ripple\"></div>\n          <ha-svg-icon\n            class=\"mdc-chip__icon mdc-chip__icon--leading\"\n            .path=${mdiPlus}\n          ></ha-svg-icon>\n          <span role=\"gridcell\">\n            <span role=\"button\" tabindex=\"0\" class=\"mdc-chip__primary-action\">\n              <span class=\"mdc-chip__text\"\n                >${this.hass.localize(\n                  \"ui.components.target-picker.add_entity_id\"\n                )}</span\n              >\n            </span>\n          </span>\n        </div>\n      </div>\n      ${this.helper\n        ? html`<ha-input-helper-text>${this.helper}</ha-input-helper-text>`\n        : \"\"}\n    `;\n  }\n\n  private async _showPicker(ev) {\n    this._addMode = ev.currentTarget.type;\n    await this.updateComplete;\n    setTimeout(() => {\n      this._inputElement?.open();\n      this._inputElement?.focus();\n    }, 0);\n  }\n\n  private _renderChip(\n    type: \"area_id\" | \"device_id\" | \"entity_id\",\n    id: string,\n    name: string,\n    entityState?: HassEntity,\n    iconPath?: string\n  ) {\n    return html`\n      <div\n        class=\"mdc-chip ${classMap({\n          [type]: true,\n        })}\"\n      >\n        ${iconPath\n          ? html`<ha-svg-icon\n              class=\"mdc-chip__icon mdc-chip__icon--leading\"\n              .path=${iconPath}\n            ></ha-svg-icon>`\n          : \"\"}\n        ${entityState\n          ? html`<ha-state-icon\n              class=\"mdc-chip__icon mdc-chip__icon--leading\"\n              .state=${entityState}\n            ></ha-state-icon>`\n          : \"\"}\n        <span role=\"gridcell\">\n          <span role=\"button\" tabindex=\"0\" class=\"mdc-chip__primary-action\">\n            <span class=\"mdc-chip__text\">${name}</span>\n          </span>\n        </span>\n        ${type === \"entity_id\"\n          ? \"\"\n          : html` <span role=\"gridcell\">\n              <ha-icon-button\n                class=\"expand-btn mdc-chip__icon mdc-chip__icon--trailing\"\n                tabindex=\"-1\"\n                role=\"button\"\n                .label=${this.hass.localize(\n                  \"ui.components.target-picker.expand\"\n                )}\n                .path=${mdiUnfoldMoreVertical}\n                hideTooltip\n                .id=${id}\n                .type=${type}\n                @click=${this._handleExpand}\n              ></ha-icon-button>\n              <paper-tooltip class=\"expand\" animation-delay=\"0\"\n                >${this.hass.localize(\n                  `ui.components.target-picker.expand_${type}`\n                )}</paper-tooltip\n              >\n            </span>`}\n        <span role=\"gridcell\">\n          <ha-icon-button\n            class=\"mdc-chip__icon mdc-chip__icon--trailing\"\n            tabindex=\"-1\"\n            role=\"button\"\n            .label=${this.hass.localize(\"ui.components.target-picker.remove\")}\n            .path=${mdiClose}\n            hideTooltip\n            .id=${id}\n            .type=${type}\n            @click=${this._handleRemove}\n          ></ha-icon-button>\n          <paper-tooltip animation-delay=\"0\"\n            >${this.hass.localize(\n              `ui.components.target-picker.remove_${type}`\n            )}</paper-tooltip\n          >\n        </span>\n      </div>\n    `;\n  }\n\n  private _renderPicker() {\n    switch (this._addMode) {\n      case \"area_id\":\n        return html`\n          <ha-area-picker\n            .hass=${this.hass}\n            id=\"input\"\n            .type=${\"area_id\"}\n            .label=${this.hass.localize(\n              \"ui.components.target-picker.add_area_id\"\n            )}\n            no-add\n            .deviceFilter=${this.deviceFilter}\n            .entityFilter=${this.entityRegFilter}\n            .includeDeviceClasses=${this.includeDeviceClasses}\n            .includeDomains=${this.includeDomains}\n            @value-changed=${this._targetPicked}\n          ></ha-area-picker>\n        `;\n      case \"device_id\":\n        return html`\n          <ha-device-picker\n            .hass=${this.hass}\n            id=\"input\"\n            .type=${\"device_id\"}\n            .label=${this.hass.localize(\n              \"ui.components.target-picker.add_device_id\"\n            )}\n            .deviceFilter=${this.deviceFilter}\n            .entityFilter=${this.entityRegFilter}\n            .includeDeviceClasses=${this.includeDeviceClasses}\n            .includeDomains=${this.includeDomains}\n            @value-changed=${this._targetPicked}\n          ></ha-device-picker>\n        `;\n      case \"entity_id\":\n        return html`\n          <ha-entity-picker\n            .hass=${this.hass}\n            id=\"input\"\n            .type=${\"entity_id\"}\n            .label=${this.hass.localize(\n              \"ui.components.target-picker.add_entity_id\"\n            )}\n            .entityFilter=${this.entityFilter}\n            .includeDeviceClasses=${this.includeDeviceClasses}\n            .includeDomains=${this.includeDomains}\n            @value-changed=${this._targetPicked}\n            allow-custom-entity\n          ></ha-entity-picker>\n        `;\n    }\n    return html``;\n  }\n\n  private _targetPicked(ev) {\n    ev.stopPropagation();\n    if (!ev.detail.value) {\n      return;\n    }\n    const value = ev.detail.value;\n    const target = ev.currentTarget;\n    target.value = \"\";\n    this._addMode = undefined;\n    fireEvent(this, \"value-changed\", {\n      value: this.value\n        ? {\n            ...this.value,\n            [target.type]: this.value[target.type]\n              ? [...ensureArray(this.value[target.type]), value]\n              : value,\n          }\n        : { [target.type]: value },\n    });\n  }\n\n  private _handleExpand(ev) {\n    const target = ev.currentTarget as any;\n    const newDevices: string[] = [];\n    const newEntities: string[] = [];\n    if (target.type === \"area_id\") {\n      Object.values(this._devices!).forEach((device) => {\n        if (\n          device.area_id === target.id &&\n          !this.value!.device_id?.includes(device.id) &&\n          this._deviceMeetsFilter(device)\n        ) {\n          newDevices.push(device.id);\n        }\n      });\n      this._entities!.forEach((entity) => {\n        if (\n          entity.area_id === target.id &&\n          !this.value!.entity_id?.includes(entity.entity_id) &&\n          this._entityRegMeetsFilter(entity)\n        ) {\n          newEntities.push(entity.entity_id);\n        }\n      });\n    } else if (target.type === \"device_id\") {\n      this._entities!.forEach((entity) => {\n        if (\n          entity.device_id === target.id &&\n          !this.value!.entity_id?.includes(entity.entity_id) &&\n          this._entityRegMeetsFilter(entity)\n        ) {\n          newEntities.push(entity.entity_id);\n        }\n      });\n    } else {\n      return;\n    }\n    let value = this.value;\n    if (newEntities.length) {\n      value = this._addItems(value, \"entity_id\", newEntities);\n    }\n    if (newDevices.length) {\n      value = this._addItems(value, \"device_id\", newDevices);\n    }\n    value = this._removeItem(value, target.type, target.id);\n    fireEvent(this, \"value-changed\", { value });\n  }\n\n  private _handleRemove(ev) {\n    const target = ev.currentTarget as any;\n    fireEvent(this, \"value-changed\", {\n      value: this._removeItem(this.value, target.type, target.id),\n    });\n  }\n\n  private _addItems(\n    value: this[\"value\"],\n    type: string,\n    ids: string[]\n  ): this[\"value\"] {\n    return {\n      ...value,\n      [type]: value![type] ? ensureArray(value![type])!.concat(ids) : ids,\n    };\n  }\n\n  private _removeItem(\n    value: this[\"value\"],\n    type: string,\n    id: string\n  ): this[\"value\"] {\n    const newVal = ensureArray(value![type])!.filter(\n      (val) => String(val) !== id\n    );\n    if (newVal.length) {\n      return {\n        ...value,\n        [type]: newVal,\n      };\n    }\n    const val = { ...value }!;\n    delete val[type];\n    if (Object.keys(val).length) {\n      return val;\n    }\n    return undefined;\n  }\n\n  private _deviceMeetsFilter(device: DeviceRegistryEntry): boolean {\n    const devEntities = this._entities?.filter(\n      (entity) => entity.device_id === device.id\n    );\n    if (this.includeDomains) {\n      if (!devEntities || !devEntities.length) {\n        return false;\n      }\n      if (\n        !devEntities.some((entity) =>\n          this.includeDomains!.includes(computeDomain(entity.entity_id))\n        )\n      ) {\n        return false;\n      }\n    }\n\n    if (this.includeDeviceClasses) {\n      if (!devEntities || !devEntities.length) {\n        return false;\n      }\n      if (\n        !devEntities.some((entity) => {\n          const stateObj = this.hass.states[entity.entity_id];\n          if (!stateObj) {\n            return false;\n          }\n          return (\n            stateObj.attributes.device_class &&\n            this.includeDeviceClasses!.includes(\n              stateObj.attributes.device_class\n            )\n          );\n        })\n      ) {\n        return false;\n      }\n    }\n\n    if (this.deviceFilter) {\n      return this.deviceFilter(device);\n    }\n    return true;\n  }\n\n  private _entityRegMeetsFilter(entity: EntityRegistryEntry): boolean {\n    if (entity.entity_category) {\n      return false;\n    }\n    if (\n      this.includeDomains &&\n      !this.includeDomains.includes(computeDomain(entity.entity_id))\n    ) {\n      return false;\n    }\n    if (this.includeDeviceClasses) {\n      const stateObj = this.hass.states[entity.entity_id];\n      if (!stateObj) {\n        return false;\n      }\n      if (\n        !stateObj.attributes.device_class ||\n        !this.includeDeviceClasses!.includes(stateObj.attributes.device_class)\n      ) {\n        return false;\n      }\n    }\n    if (this.entityRegFilter) {\n      return this.entityRegFilter(entity);\n    }\n    return true;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ${unsafeCSS(chipStyles)}\n      .horizontal-container {\n        display: flex;\n        flex-wrap: wrap;\n        min-height: 56px;\n        align-items: center;\n      }\n      .mdc-chip {\n        color: var(--primary-text-color);\n      }\n      .items {\n        z-index: 2;\n      }\n      .mdc-chip-set {\n        padding: 4px 0;\n      }\n      .mdc-chip.add {\n        color: rgba(0, 0, 0, 0.87);\n      }\n      .mdc-chip:not(.add) {\n        cursor: default;\n      }\n      .mdc-chip ha-icon-button {\n        --mdc-icon-button-size: 24px;\n        display: flex;\n        align-items: center;\n        outline: none;\n      }\n      .mdc-chip ha-icon-button ha-svg-icon {\n        border-radius: 50%;\n        background: var(--secondary-text-color);\n      }\n      .mdc-chip__icon.mdc-chip__icon--trailing {\n        width: 16px;\n        height: 16px;\n        --mdc-icon-size: 14px;\n        color: var(--secondary-text-color);\n        margin-inline-start: 4px !important;\n        margin-inline-end: -4px !important;\n        direction: var(--direction);\n      }\n      .mdc-chip__icon--leading {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        --mdc-icon-size: 20px;\n        border-radius: 50%;\n        padding: 6px;\n        margin-left: -14px !important;\n        margin-inline-start: -14px !important;\n        margin-inline-end: 4px !important;\n        direction: var(--direction);\n      }\n      .expand-btn {\n        margin-right: 0;\n      }\n      .mdc-chip.area_id:not(.add) {\n        border: 2px solid #fed6a4;\n        background: var(--card-background-color);\n      }\n      .mdc-chip.area_id:not(.add) .mdc-chip__icon--leading,\n      .mdc-chip.area_id.add {\n        background: #fed6a4;\n      }\n      .mdc-chip.device_id:not(.add) {\n        border: 2px solid #a8e1fb;\n        background: var(--card-background-color);\n      }\n      .mdc-chip.device_id:not(.add) .mdc-chip__icon--leading,\n      .mdc-chip.device_id.add {\n        background: #a8e1fb;\n      }\n      .mdc-chip.entity_id:not(.add) {\n        border: 2px solid #d2e7b9;\n        background: var(--card-background-color);\n      }\n      .mdc-chip.entity_id:not(.add) .mdc-chip__icon--leading,\n      .mdc-chip.entity_id.add {\n        background: #d2e7b9;\n      }\n      .mdc-chip:hover {\n        z-index: 5;\n      }\n      paper-tooltip.expand {\n        min-width: 200px;\n      }\n      :host([disabled]) .mdc-chip {\n        opacity: var(--light-disabled-opacity);\n        pointer-events: none;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-target-picker\": HaTargetPicker;\n  }\n}\n"],"names":[],"sourceRoot":""}