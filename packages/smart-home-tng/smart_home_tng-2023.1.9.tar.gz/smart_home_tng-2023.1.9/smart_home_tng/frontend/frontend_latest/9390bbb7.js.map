{"version":3,"file":"9390bbb7.js","mappings":";;AA0EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AAEA;AAkCA;AACA;AC3CA;;;AAGA;AAEA;AClDA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AC4GA;AACA;AACA;AACA;;AAOA;AAEA;AAcA;;AAGA;;;AAOA;;AAMA;AAEA;;;;;;;AAeA","sources":["webpack://home-assistant-frontend/mwc-fab-base.ts","webpack://home-assistant-frontend/mwc-formfield-base.ts","webpack://home-assistant-frontend/mwc-check-list-item-base.ts","webpack://home-assistant-frontend/mwc-list-item-base.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\nimport '@material/mwc-ripple/mwc-ripple';\n\nimport {Ripple} from '@material/mwc-ripple/mwc-ripple';\nimport {RippleHandlers} from '@material/mwc-ripple/ripple-handlers';\nimport {html, LitElement, TemplateResult} from 'lit';\nimport {eventOptions, property, queryAsync, state} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\n/**\n * Fab Base class logic and template definition\n * @soyCompatible\n */\nexport class FabBase extends LitElement {\n  static override shadowRootOptions:\n      ShadowRootInit = {mode: 'open', delegatesFocus: true};\n\n  @queryAsync('mwc-ripple') ripple!: Promise<Ripple|null>;\n\n  @property({type: Boolean}) mini = false;\n\n  @property({type: Boolean}) exited = false;\n\n  @property({type: Boolean}) disabled = false;\n\n  @property({type: Boolean}) extended = false;\n\n  @property({type: Boolean}) showIconAtEnd = false;\n\n  @property({type: Boolean}) reducedTouchTarget = false;\n\n  @property() icon = '';\n\n  @property() label = '';\n\n  @state() protected shouldRenderRipple = false;\n\n  @state() protected useStateLayerCustomProperties = false;\n\n  protected rippleHandlers = new RippleHandlers(() => {\n    this.shouldRenderRipple = true;\n    return this.ripple;\n  });\n\n  /**\n   * @soyTemplate\n   * @soyClasses fabClasses: .mdc-fab\n   */\n  protected override render(): TemplateResult {\n    const hasTouchTarget = this.mini && !this.reducedTouchTarget;\n    /** @classMap */\n    const classes = {\n      'mdc-fab--mini': this.mini,\n      'mdc-fab--touch': hasTouchTarget,\n      'mdc-fab--exited': this.exited,\n      'mdc-fab--extended': this.extended,\n      'icon-end': this.showIconAtEnd,\n    };\n\n    const ariaLabel = this.label ? this.label : this.icon;\n\n    /*\n     * Some internal styling is sensitive to whitespace in this template, take\n     * care when modifying it.\n     */\n    return html`<button\n          class=\"mdc-fab ${classMap(classes)}\"\n          ?disabled=\"${this.disabled}\"\n          aria-label=\"${ariaLabel}\"\n          @mouseenter=${this.handleRippleMouseEnter}\n          @mouseleave=${this.handleRippleMouseLeave}\n          @focus=${this.handleRippleFocus}\n          @blur=${this.handleRippleBlur}\n          @mousedown=${this.handleRippleActivate}\n          @touchstart=${this.handleRippleStartPress}\n          @touchend=${this.handleRippleDeactivate}\n          @touchcancel=${this.handleRippleDeactivate}><!--\n        -->${this.renderBeforeRipple()}<!--\n        -->${this.renderRipple()}<!--\n        -->${this.showIconAtEnd ? this.renderLabel() : ''}<!--\n        --><span class=\"material-icons mdc-fab__icon\"><!--\n          --><slot name=\"icon\">${this.icon}</slot><!--\n       --></span><!--\n        -->${!this.showIconAtEnd ? this.renderLabel() : ''}<!--\n        -->${this.renderTouchTarget()}<!--\n      --></button>`;\n  }\n\n  /** @soyTemplate */\n  protected renderIcon(): TemplateResult {\n    // TODO(b/191914389): reimplement once Wit issue is resolved\n    return html``;\n  }\n\n  /** @soyTemplate */\n  protected renderTouchTarget(): TemplateResult {\n    const hasTouchTarget = this.mini && !this.reducedTouchTarget;\n\n    return html`${\n        hasTouchTarget ? html`<div class=\"mdc-fab__touch\"></div>` : ''}`;\n  }\n\n  /** @soyTemplate */\n  protected renderLabel(): TemplateResult {\n    const showLabel = this.label !== '' && this.extended;\n\n    return html`${\n        showLabel ? html`<span class=\"mdc-fab__label\">${this.label}</span>` :\n                    ''}`;\n  }\n\n  /** @soyTemplate */\n  protected renderBeforeRipple(): TemplateResult {\n    return html``;\n  }\n\n  /** @soyTemplate */\n  protected renderRipple(): TemplateResult|string {\n    return this.shouldRenderRipple ? html`<mwc-ripple class=\"ripple\"\n        .internalUseStateLayerCustomProperties=\"${\n                                         this.useStateLayerCustomProperties}\"\n         ></mwc-ripple>` :\n                                     '';\n  }\n\n  protected handleRippleActivate(event?: Event) {\n    const onUp = () => {\n      window.removeEventListener('mouseup', onUp);\n\n      this.handleRippleDeactivate();\n    };\n\n    window.addEventListener('mouseup', onUp);\n    this.handleRippleStartPress(event);\n  }\n\n  @eventOptions({passive: true})\n  protected handleRippleStartPress(event?: Event) {\n    this.rippleHandlers.startPress(event);\n  }\n\n  protected handleRippleDeactivate() {\n    this.rippleHandlers.endPress();\n  }\n\n  protected handleRippleMouseEnter() {\n    this.rippleHandlers.startHover();\n  }\n\n  protected handleRippleMouseLeave() {\n    this.rippleHandlers.endHover();\n  }\n\n  protected handleRippleFocus() {\n    this.rippleHandlers.startFocus();\n  }\n\n  protected handleRippleBlur() {\n    this.rippleHandlers.endFocus();\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n// tslint:disable:no-new-decorators\n\nimport {MDCFormFieldAdapter} from '@material/form-field/adapter';\nimport MDCFormFieldFoundation from '@material/form-field/foundation';\nimport {BaseElement, EventType, SpecificEventListener} from '@material/mwc-base/base-element';\nimport {FormElement} from '@material/mwc-base/form-element';\nimport {observer} from '@material/mwc-base/observer';\nimport {html} from 'lit';\nimport {property, query, queryAssignedNodes} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\n\nexport class FormfieldBase extends BaseElement {\n  @property({type: Boolean}) alignEnd = false;\n  @property({type: Boolean}) spaceBetween = false;\n  @property({type: Boolean}) nowrap = false;\n\n  @property({type: String})\n  @observer(async function(this: FormfieldBase, label: string) {\n    this.input?.setAttribute('aria-label', label);\n  })\n  label = '';\n\n  @query('.mdc-form-field') protected mdcRoot!: HTMLElement;\n\n  protected mdcFoundation!: MDCFormFieldFoundation;\n\n  protected readonly mdcFoundationClass = MDCFormFieldFoundation;\n\n  protected createAdapter(): MDCFormFieldAdapter {\n    return {\n      registerInteractionHandler:\n          <K extends EventType>(type: K, handler: SpecificEventListener<K>) => {\n            this.labelEl.addEventListener(type, handler);\n          },\n      deregisterInteractionHandler:\n          <K extends EventType>(type: K, handler: SpecificEventListener<K>) => {\n            this.labelEl.removeEventListener(type, handler);\n          },\n      activateInputRipple: async () => {\n        const input = this.input;\n        if (input instanceof FormElement) {\n          const ripple = await input.ripple;\n          if (ripple) {\n            ripple.startPress();\n          }\n        }\n      },\n      deactivateInputRipple: async () => {\n        const input = this.input;\n        if (input instanceof FormElement) {\n          const ripple = await input.ripple;\n          if (ripple) {\n            ripple.endPress();\n          }\n        }\n      },\n    };\n  }\n\n  @queryAssignedNodes('', true, '*')\n  protected slottedInputs!: HTMLElement[]|null;\n\n  @query('label') protected labelEl!: HTMLLabelElement;\n\n  protected get input() {\n    return this.slottedInputs?.[0] ?? null;\n  }\n\n  protected override render() {\n    const classes = {\n      'mdc-form-field--align-end': this.alignEnd,\n      'mdc-form-field--space-between': this.spaceBetween,\n      'mdc-form-field--nowrap': this.nowrap\n    };\n\n    return html`\n      <div class=\"mdc-form-field ${classMap(classes)}\">\n        <slot></slot>\n        <label class=\"mdc-label\"\n               @click=\"${this._labelClick}\">${this.label}</label>\n      </div>`;\n  }\n\n  override click() {\n    this._labelClick();\n  }\n\n  protected _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      input.click();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n\nimport '@material/mwc-checkbox';\n\nimport {Checkbox} from '@material/mwc-checkbox';\nimport {html} from 'lit';\nimport {property, query} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\nimport {GraphicType, ListItemBase} from './mwc-list-item-base';\n\nexport class CheckListItemBase extends ListItemBase {\n  @query('slot') protected override slotElement!: HTMLSlotElement|null;\n  @query('mwc-checkbox') protected checkboxElement!: Checkbox;\n\n  @property({type: Boolean}) left = false;\n  @property({type: String, reflect: true})\n  override graphic: GraphicType = 'control';\n\n  override render() {\n    const checkboxClasses = {\n      'mdc-deprecated-list-item__graphic': this.left,\n      'mdc-deprecated-list-item__meta': !this.left,\n    };\n\n    const text = this.renderText();\n    const graphic = this.graphic && this.graphic !== 'control' && !this.left ?\n        this.renderGraphic() :\n        html``;\n    const meta = this.hasMeta && this.left ? this.renderMeta() : html``;\n    const ripple = this.renderRipple();\n\n    return html`\n      ${ripple}\n      ${graphic}\n      ${this.left ? '' : text}\n      <span class=${classMap(checkboxClasses)}>\n        <mwc-checkbox\n            reducedTouchTarget\n            tabindex=${this.tabindex}\n            .checked=${this.selected}\n            ?disabled=${this.disabled}\n            @change=${this.onChange}>\n        </mwc-checkbox>\n      </span>\n      ${this.left ? text : ''}\n      ${meta}`;\n  }\n\n  protected async onChange(evt: Event) {\n    const checkbox = evt.target as Checkbox;\n    const changeFromProp = this.selected === checkbox.checked;\n\n    if (!changeFromProp) {\n      this._skipPropRequest = true;\n      this.selected = checkbox.checked;\n      await this.updateComplete;\n      this._skipPropRequest = false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n\nimport '@material/mwc-ripple/mwc-ripple';\n\nimport {observer} from '@material/mwc-base/observer';\nimport {Ripple} from '@material/mwc-ripple/mwc-ripple';\nimport {RippleHandlers} from '@material/mwc-ripple/ripple-handlers';\nimport {html, LitElement} from 'lit';\nimport {property, query, queryAsync, state} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\nexport type SelectionSource = 'interaction'|'property';\nexport interface RequestSelectedDetail {\n  selected: boolean;\n  source: SelectionSource;\n}\n\nexport interface Layoutable {\n  layout: (updateItems?: boolean) => void;\n  debouncedLayout?: (updateItems?: boolean) => void | undefined;\n}\n\nexport type GraphicType = 'avatar'|'icon'|'medium'|'large'|'control'|null;\n\n/**\n * @fires request-selected {RequestSelectedDetail}\n * @fires list-item-rendered\n */\nexport class ListItemBase extends LitElement {\n  @query('slot') protected slotElement!: HTMLSlotElement|null;\n  @queryAsync('mwc-ripple') ripple!: Promise<Ripple|null>;\n\n  @property({type: String}) value = '';\n  @property({type: String, reflect: true}) group: string|null = null;\n  @property({type: Number, reflect: true}) tabindex = -1;\n  @property({type: Boolean, reflect: true})\n  @observer(function(this: ListItemBase, value: boolean) {\n    if (value) {\n      this.setAttribute('aria-disabled', 'true');\n    } else {\n      this.setAttribute('aria-disabled', 'false');\n    }\n  })\n  disabled = false;\n  @property({type: Boolean, reflect: true}) twoline = false;\n  @property({type: Boolean, reflect: true}) activated = false;\n  @property({type: String, reflect: true}) graphic: GraphicType = null;\n  @property({type: Boolean}) multipleGraphics = false;\n  @property({type: Boolean}) hasMeta = false;\n  @property({type: Boolean, reflect: true})\n  @observer(function(this: ListItemBase, value: boolean) {\n    if (value) {\n      this.removeAttribute('aria-checked');\n      this.removeAttribute('mwc-list-item');\n      this.selected = false;\n      this.activated = false;\n      this.tabIndex = -1;\n    } else {\n      this.setAttribute('mwc-list-item', '');\n    }\n  })\n  noninteractive = false;\n  @property({type: Boolean, reflect: true})\n  @observer(function(this: ListItemBase, value: boolean) {\n    const role = this.getAttribute('role');\n    const isAriaSelectable = role === 'gridcell' || role === 'option' ||\n        role === 'row' || role === 'tab';\n\n    if (isAriaSelectable && value) {\n      this.setAttribute('aria-selected', 'true');\n    } else if (isAriaSelectable) {\n      this.setAttribute('aria-selected', 'false');\n    }\n\n    if (this._firstChanged) {\n      this._firstChanged = false;\n      return;\n    }\n\n    if (this._skipPropRequest) {\n      return;\n    }\n\n    this.fireRequestSelected(value, 'property');\n  })\n  selected = false;\n\n  @state() protected shouldRenderRipple = false;\n  @state() _managingList: Layoutable|null = null;\n\n  protected boundOnClick = this.onClick.bind(this);\n  protected _firstChanged = true;\n  protected _skipPropRequest = false;\n  protected rippleHandlers: RippleHandlers = new RippleHandlers(() => {\n    this.shouldRenderRipple = true;\n    return this.ripple;\n  });\n  protected listeners: ({\n    target: Element;\n    eventNames: string[];\n    cb: EventListenerOrEventListenerObject;\n  })[] =\n      [\n        {\n          target: this,\n          eventNames: ['click'],\n          cb:\n              () => {\n                this.onClick();\n              },\n        },\n        {\n          target: this,\n          eventNames: ['mouseenter'],\n          cb: this.rippleHandlers.startHover,\n        },\n        {\n          target: this,\n          eventNames: ['mouseleave'],\n          cb: this.rippleHandlers.endHover,\n        },\n        {\n          target: this,\n          eventNames: ['focus'],\n          cb: this.rippleHandlers.startFocus,\n        },\n        {\n          target: this,\n          eventNames: ['blur'],\n          cb: this.rippleHandlers.endFocus,\n        },\n        {\n          target: this,\n          eventNames: ['mousedown', 'touchstart'],\n          cb:\n              (e: Event) => {\n                const name = e.type;\n                this.onDown(name === 'mousedown' ? 'mouseup' : 'touchend', e);\n              },\n        },\n      ];\n\n  get text() {\n    const textContent = this.textContent;\n\n    return textContent ? textContent.trim() : '';\n  }\n\n  override render() {\n    const text = this.renderText();\n    const graphic = this.graphic ? this.renderGraphic() : html``;\n    const meta = this.hasMeta ? this.renderMeta() : html``;\n\n    return html`\n      ${this.renderRipple()}\n      ${graphic}\n      ${text}\n      ${meta}`;\n  }\n\n  protected renderRipple() {\n    if (this.shouldRenderRipple) {\n      return html`\n      <mwc-ripple\n        .activated=${this.activated}>\n      </mwc-ripple>`;\n    } else if (this.activated) {\n      return html`<div class=\"fake-activated-ripple\"></div>`;\n    } else {\n      return '';\n    }\n  }\n\n  protected renderGraphic() {\n    const graphicClasses = {\n      multi: this.multipleGraphics,\n    };\n\n    return html`\n      <span class=\"mdc-deprecated-list-item__graphic material-icons ${\n        classMap(graphicClasses)}\">\n        <slot name=\"graphic\"></slot>\n      </span>`;\n  }\n\n  protected renderMeta() {\n    return html`\n      <span class=\"mdc-deprecated-list-item__meta material-icons\">\n        <slot name=\"meta\"></slot>\n      </span>`;\n  }\n\n  protected renderText() {\n    const inner = this.twoline ? this.renderTwoline() : this.renderSingleLine();\n    return html`\n      <span class=\"mdc-deprecated-list-item__text\">\n        ${inner}\n      </span>`;\n  }\n\n  protected renderSingleLine() {\n    return html`<slot></slot>`;\n  }\n\n  protected renderTwoline() {\n    return html`\n      <span class=\"mdc-deprecated-list-item__primary-text\">\n        <slot></slot>\n      </span>\n      <span class=\"mdc-deprecated-list-item__secondary-text\">\n        <slot name=\"secondary\"></slot>\n      </span>\n    `;\n  }\n\n  protected onClick() {\n    this.fireRequestSelected(!this.selected, 'interaction');\n  }\n\n  protected onDown(upName: string, evt: Event) {\n    const onUp = () => {\n      window.removeEventListener(upName, onUp);\n      this.rippleHandlers.endPress();\n    };\n\n    window.addEventListener(upName, onUp);\n    this.rippleHandlers.startPress(evt);\n  }\n\n  protected fireRequestSelected(selected: boolean, source: SelectionSource) {\n    if (this.noninteractive) {\n      return;\n    }\n\n    const customEv = new CustomEvent<RequestSelectedDetail>(\n        'request-selected',\n        {bubbles: true, composed: true, detail: {source, selected}});\n\n    this.dispatchEvent(customEv);\n  }\n\n  override connectedCallback() {\n    super.connectedCallback();\n\n    if (!this.noninteractive) {\n      this.setAttribute('mwc-list-item', '');\n    }\n\n    for (const listener of this.listeners) {\n      for (const eventName of listener.eventNames) {\n        listener.target.addEventListener(\n            eventName, listener.cb, {passive: true});\n      }\n    }\n  }\n\n  override disconnectedCallback() {\n    super.disconnectedCallback();\n\n    for (const listener of this.listeners) {\n      for (const eventName of listener.eventNames) {\n        listener.target.removeEventListener(eventName, listener.cb);\n      }\n    }\n\n    if (this._managingList) {\n      this._managingList.debouncedLayout ?\n          this._managingList.debouncedLayout(true) :\n          this._managingList.layout(true);\n    }\n  }\n\n  // composed flag, event fire through shadow root and up through composed tree\n  protected override firstUpdated() {\n    const ev = new Event('list-item-rendered', {bubbles: true, composed: true});\n    this.dispatchEvent(ev);\n  }\n}\n"],"names":[],"sourceRoot":""}