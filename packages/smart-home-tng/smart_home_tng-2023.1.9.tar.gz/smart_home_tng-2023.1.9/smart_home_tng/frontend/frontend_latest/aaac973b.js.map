{"version":3,"file":"aaac973b.js","mappings":";;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;ACvCA;;;;;AAKA;AAGA;;;;;;;AAOA;AAGA;;;;;AAMA;;;;;;;;;;;;;;;;;;;;AA6EA;;ACpDA;;;AAcA;AACA;;AAGA;;AAEA;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;;AAMA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;AAKA;;AAGA;;;AAGA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;AAKA;;;;;AAMA;AACA;;;AAGA;AACA;;AAEA;AAKA;AACA;;;;;;;AAQA;;;AAIA;AACA;;;AAGA;AACA;;AAEA;AAEA;AACA;;;;;AAQA;AAEA;;;AAIA;AACA;;;AAGA;AACA;;AAEA;AAEA;AACA;;;;;AAQA;AAEA;;;AAIA;AACA;;;AAGA;AACA;;AAEA;AAEA;;;;AAKA;AAEA;;;;AAKA;;;AAGA;AACA;;;;AAIA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6LA","sources":["webpack://home-assistant-frontend/./src/components/ha-select.ts","webpack://home-assistant-frontend/./src/components/ha-climate-control.ts","webpack://home-assistant-frontend/./src/dialogs/more-info/controls/more-info-climate.ts"],"sourcesContent":["import { SelectBase } from \"@material/mwc-select/mwc-select-base\";\nimport { styles } from \"@material/mwc-select/mwc-select.css\";\nimport { css, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { debounce } from \"../common/util/debounce\";\nimport { nextRender } from \"../common/util/render-status\";\n\n@customElement(\"ha-select\")\nexport class HaSelect extends SelectBase {\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  protected override renderLeadingIcon() {\n    if (!this.icon) {\n      return nothing;\n    }\n\n    return html`<span class=\"mdc-select__icon\"\n      ><slot name=\"icon\"></slot\n    ></span>`;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"translations-updated\", this._translationsUpdated);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\n      \"translations-updated\",\n      this._translationsUpdated\n    );\n  }\n\n  private _translationsUpdated = debounce(async () => {\n    await nextRender();\n    this.layoutOptions();\n  }, 500);\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-select:not(.mdc-select--disabled) .mdc-select__icon {\n        color: var(--secondary-text-color);\n      }\n      .mdc-select__anchor {\n        width: var(--ha-select-min-width, 200px);\n      }\n      .mdc-select--filled .mdc-floating-label {\n        inset-inline-start: 12px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select--filled.mdc-select--with-leading-icon .mdc-floating-label {\n        inset-inline-start: 48px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select .mdc-select__anchor {\n        padding-inline-start: 12px;\n        padding-inline-end: 0px;\n        direction: var(--direction);\n      }\n      .mdc-select__anchor .mdc-floating-label--float-above {\n        transform-origin: var(--float-start);\n      }\n    `,\n  ];\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-select\": HaSelect;\n  }\n}\n","import { mdiChevronDown, mdiChevronUp } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { conditionalClamp } from \"../common/number/clamp\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-icon\";\nimport \"./ha-icon-button\";\n\n@customElement(\"ha-climate-control\")\nclass HaClimateControl extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public value!: number;\n\n  @property() public unit = \"\";\n\n  @property() public min?: number;\n\n  @property() public max?: number;\n\n  @property() public step = 1;\n\n  private _lastChanged?: number;\n\n  @query(\"#target_temperature\") private _targetTemperature!: HTMLElement;\n\n  protected render(): TemplateResult {\n    return html`\n      <div id=\"target_temperature\">${this.value} ${this.unit}</div>\n      <div class=\"control-buttons\">\n        <div>\n          <ha-icon-button\n            .path=${mdiChevronUp}\n            .label=${this.hass.localize(\n              \"ui.components.climate-control.temperature_up\"\n            )}\n            @click=${this._incrementValue}\n          >\n          </ha-icon-button>\n        </div>\n        <div>\n          <ha-icon-button\n            .path=${mdiChevronDown}\n            .label=${this.hass.localize(\n              \"ui.components.climate-control.temperature_down\"\n            )}\n            @click=${this._decrementValue}\n          >\n          </ha-icon-button>\n        </div>\n      </div>\n    `;\n  }\n\n  protected updated(changedProperties) {\n    if (changedProperties.has(\"value\")) {\n      this._valueChanged();\n    }\n  }\n\n  private _temperatureStateInFlux(inFlux) {\n    this._targetTemperature.classList.toggle(\"in-flux\", inFlux);\n  }\n\n  private _round(value) {\n    // Round value to precision derived from step.\n    // Inspired by https://github.com/soundar24/roundSlider/blob/master/src/roundslider.js\n    const s = this.step.toString().split(\".\");\n    return s[1] ? parseFloat(value.toFixed(s[1].length)) : Math.round(value);\n  }\n\n  private _incrementValue() {\n    const newValue = this._round(this.value + this.step);\n    this._processNewValue(newValue);\n  }\n\n  private _decrementValue() {\n    const newValue = this._round(this.value - this.step);\n    this._processNewValue(newValue);\n  }\n\n  private _processNewValue(value) {\n    const newValue = conditionalClamp(value, this.min, this.max);\n\n    if (this.value !== newValue) {\n      this.value = newValue;\n      this._lastChanged = Date.now();\n      this._temperatureStateInFlux(true);\n    }\n  }\n\n  private _valueChanged() {\n    // When the last_changed timestamp is changed,\n    // trigger a potential event fire in the future,\n    // as long as last_changed is far enough in the past.\n    if (this._lastChanged) {\n      window.setTimeout(() => {\n        const now = Date.now();\n        if (now - this._lastChanged! >= 2000) {\n          fireEvent(this, \"change\");\n          this._temperatureStateInFlux(false);\n          this._lastChanged = undefined;\n        }\n      }, 2010);\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n        justify-content: space-between;\n      }\n      .in-flux {\n        color: var(--error-color);\n      }\n      #target_temperature {\n        align-self: center;\n        font-size: 28px;\n        direction: ltr;\n      }\n      .control-buttons {\n        font-size: 24px;\n        text-align: right;\n      }\n      ha-icon-button {\n        --mdc-icon-size: 32px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-climate-control\": HaClimateControl;\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { stopPropagation } from \"../../../common/dom/stop_propagation\";\nimport { supportsFeature } from \"../../../common/entity/supports-feature\";\nimport { computeRTLDirection } from \"../../../common/util/compute_rtl\";\nimport \"../../../components/ha-climate-control\";\nimport \"../../../components/ha-select\";\nimport \"../../../components/ha-slider\";\nimport \"../../../components/ha-switch\";\nimport {\n  ClimateEntity,\n  CLIMATE_SUPPORT_AUX_HEAT,\n  CLIMATE_SUPPORT_FAN_MODE,\n  CLIMATE_SUPPORT_PRESET_MODE,\n  CLIMATE_SUPPORT_SWING_MODE,\n  CLIMATE_SUPPORT_TARGET_HUMIDITY,\n  CLIMATE_SUPPORT_TARGET_TEMPERATURE,\n  CLIMATE_SUPPORT_TARGET_TEMPERATURE_RANGE,\n  compareClimateHvacModes,\n} from \"../../../data/climate\";\nimport { HomeAssistant } from \"../../../types\";\n\nclass MoreInfoClimate extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public stateObj?: ClimateEntity;\n\n  private _resizeDebounce?: number;\n\n  protected render(): TemplateResult {\n    if (!this.stateObj) {\n      return html``;\n    }\n\n    const hass = this.hass;\n    const stateObj = this.stateObj;\n\n    const supportTargetTemperature = supportsFeature(\n      stateObj,\n      CLIMATE_SUPPORT_TARGET_TEMPERATURE\n    );\n    const supportTargetTemperatureRange = supportsFeature(\n      stateObj,\n      CLIMATE_SUPPORT_TARGET_TEMPERATURE_RANGE\n    );\n    const supportTargetHumidity = supportsFeature(\n      stateObj,\n      CLIMATE_SUPPORT_TARGET_HUMIDITY\n    );\n    const supportFanMode = supportsFeature(stateObj, CLIMATE_SUPPORT_FAN_MODE);\n    const supportPresetMode = supportsFeature(\n      stateObj,\n      CLIMATE_SUPPORT_PRESET_MODE\n    );\n    const supportSwingMode = supportsFeature(\n      stateObj,\n      CLIMATE_SUPPORT_SWING_MODE\n    );\n    const supportAuxHeat = supportsFeature(stateObj, CLIMATE_SUPPORT_AUX_HEAT);\n\n    const temperatureStepSize =\n      stateObj.attributes.target_temp_step ||\n      (hass.config.unit_system.temperature.indexOf(\"F\") === -1 ? 0.5 : 1);\n\n    const rtlDirection = computeRTLDirection(hass);\n\n    return html`\n      <div\n        class=${classMap({\n          \"has-current_temperature\":\n            \"current_temperature\" in stateObj.attributes,\n          \"has-current_humidity\": \"current_humidity\" in stateObj.attributes,\n          \"has-target_temperature\": supportTargetTemperature,\n          \"has-target_temperature_range\": supportTargetTemperatureRange,\n          \"has-target_humidity\": supportTargetHumidity,\n          \"has-fan_mode\": supportFanMode,\n          \"has-swing_mode\": supportSwingMode,\n          \"has-aux_heat\": supportAuxHeat,\n          \"has-preset_mode\": supportPresetMode,\n        })}\n      >\n        <div class=\"container-temperature\">\n          <div class=${stateObj.state}>\n            ${supportTargetTemperature || supportTargetTemperatureRange\n              ? html`\n                  <div>\n                    ${hass.localize(\"ui.card.climate.target_temperature\")}\n                  </div>\n                `\n              : \"\"}\n            ${stateObj.attributes.temperature !== undefined &&\n            stateObj.attributes.temperature !== null\n              ? html`\n                  <ha-climate-control\n                    .hass=${this.hass}\n                    .value=${stateObj.attributes.temperature}\n                    .unit=${hass.config.unit_system.temperature}\n                    .step=${temperatureStepSize}\n                    .min=${stateObj.attributes.min_temp}\n                    .max=${stateObj.attributes.max_temp}\n                    @change=${this._targetTemperatureChanged}\n                  ></ha-climate-control>\n                `\n              : \"\"}\n            ${(stateObj.attributes.target_temp_low !== undefined &&\n              stateObj.attributes.target_temp_low !== null) ||\n            (stateObj.attributes.target_temp_high !== undefined &&\n              stateObj.attributes.target_temp_high !== null)\n              ? html`\n                  <ha-climate-control\n                    .hass=${this.hass}\n                    .value=${stateObj.attributes.target_temp_low}\n                    .unit=${hass.config.unit_system.temperature}\n                    .step=${temperatureStepSize}\n                    .min=${stateObj.attributes.min_temp}\n                    .max=${stateObj.attributes.target_temp_high}\n                    class=\"range-control-left\"\n                    @change=${this._targetTemperatureLowChanged}\n                  ></ha-climate-control>\n                  <ha-climate-control\n                    .hass=${this.hass}\n                    .value=${stateObj.attributes.target_temp_high}\n                    .unit=${hass.config.unit_system.temperature}\n                    .step=${temperatureStepSize}\n                    .min=${stateObj.attributes.target_temp_low}\n                    .max=${stateObj.attributes.max_temp}\n                    class=\"range-control-right\"\n                    @change=${this._targetTemperatureHighChanged}\n                  ></ha-climate-control>\n                `\n              : \"\"}\n          </div>\n        </div>\n\n        ${supportTargetHumidity\n          ? html`\n              <div class=\"container-humidity\">\n                <div>${hass.localize(\"ui.card.climate.target_humidity\")}</div>\n                <div class=\"single-row\">\n                  <div class=\"target-humidity\">\n                    ${stateObj.attributes.humidity} %\n                  </div>\n                  <ha-slider\n                    step=\"1\"\n                    pin\n                    ignore-bar-touch\n                    dir=${rtlDirection}\n                    .min=${stateObj.attributes.min_humidity}\n                    .max=${stateObj.attributes.max_humidity}\n                    .value=${stateObj.attributes.humidity}\n                    @change=${this._targetHumiditySliderChanged}\n                  >\n                  </ha-slider>\n                </div>\n              </div>\n            `\n          : \"\"}\n\n        <div class=\"container-hvac_modes\">\n          <div class=\"controls\">\n            <ha-select\n              .label=${hass.localize(\"ui.card.climate.operation\")}\n              .value=${stateObj.state}\n              fixedMenuPosition\n              naturalMenuWidth\n              @selected=${this._handleOperationmodeChanged}\n              @closed=${stopPropagation}\n            >\n              ${stateObj.attributes.hvac_modes\n                .concat()\n                .sort(compareClimateHvacModes)\n                .map(\n                  (mode) => html`\n                    <mwc-list-item .value=${mode}>\n                      ${hass.localize(`component.climate.state._.${mode}`)}\n                    </mwc-list-item>\n                  `\n                )}\n            </ha-select>\n          </div>\n        </div>\n\n        ${supportPresetMode && stateObj.attributes.preset_modes\n          ? html`\n              <div class=\"container-preset_modes\">\n                <ha-select\n                  .label=${hass.localize(\"ui.card.climate.preset_mode\")}\n                  .value=${stateObj.attributes.preset_mode}\n                  fixedMenuPosition\n                  naturalMenuWidth\n                  @selected=${this._handlePresetmodeChanged}\n                  @closed=${stopPropagation}\n                >\n                  ${stateObj.attributes.preset_modes!.map(\n                    (mode) => html`\n                      <mwc-list-item .value=${mode}>\n                        ${hass.localize(\n                          `state_attributes.climate.preset_mode.${mode}`\n                        ) || mode}\n                      </mwc-list-item>\n                    `\n                  )}\n                </ha-select>\n              </div>\n            `\n          : \"\"}\n        ${supportFanMode && stateObj.attributes.fan_modes\n          ? html`\n              <div class=\"container-fan_list\">\n                <ha-select\n                  .label=${hass.localize(\"ui.card.climate.fan_mode\")}\n                  .value=${stateObj.attributes.fan_mode}\n                  fixedMenuPosition\n                  naturalMenuWidth\n                  @selected=${this._handleFanmodeChanged}\n                  @closed=${stopPropagation}\n                >\n                  ${stateObj.attributes.fan_modes!.map(\n                    (mode) => html`\n                      <mwc-list-item .value=${mode}>\n                        ${hass.localize(\n                          `state_attributes.climate.fan_mode.${mode}`\n                        ) || mode}\n                      </mwc-list-item>\n                    `\n                  )}\n                </ha-select>\n              </div>\n            `\n          : \"\"}\n        ${supportSwingMode && stateObj.attributes.swing_modes\n          ? html`\n              <div class=\"container-swing_list\">\n                <ha-select\n                  .label=${hass.localize(\"ui.card.climate.swing_mode\")}\n                  .value=${stateObj.attributes.swing_mode}\n                  fixedMenuPosition\n                  naturalMenuWidth\n                  @selected=${this._handleSwingmodeChanged}\n                  @closed=${stopPropagation}\n                >\n                  ${stateObj.attributes.swing_modes!.map(\n                    (mode) => html`\n                      <mwc-list-item .value=${mode}>${mode}</mwc-list-item>\n                    `\n                  )}\n                </ha-select>\n              </div>\n            `\n          : \"\"}\n        ${supportAuxHeat\n          ? html`\n              <div class=\"container-aux_heat\">\n                <div class=\"center horizontal layout single-row\">\n                  <div class=\"flex\">\n                    ${hass.localize(\"ui.card.climate.aux_heat\")}\n                  </div>\n                  <ha-switch\n                    .checked=${stateObj.attributes.aux_heat === \"on\"}\n                    @change=${this._auxToggleChanged}\n                  ></ha-switch>\n                </div>\n              </div>\n            `\n          : \"\"}\n      </div>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    if (!changedProps.has(\"stateObj\") || !this.stateObj) {\n      return;\n    }\n\n    if (this._resizeDebounce) {\n      clearTimeout(this._resizeDebounce);\n    }\n    this._resizeDebounce = window.setTimeout(() => {\n      fireEvent(this, \"iron-resize\");\n      this._resizeDebounce = undefined;\n    }, 500);\n  }\n\n  private _targetTemperatureChanged(ev) {\n    const newVal = ev.target.value;\n    this._callServiceHelper(\n      this.stateObj!.attributes.temperature,\n      newVal,\n      \"set_temperature\",\n      { temperature: newVal }\n    );\n  }\n\n  private _targetTemperatureLowChanged(ev) {\n    const newVal = ev.currentTarget.value;\n    this._callServiceHelper(\n      this.stateObj!.attributes.target_temp_low,\n      newVal,\n      \"set_temperature\",\n      {\n        target_temp_low: newVal,\n        target_temp_high: this.stateObj!.attributes.target_temp_high,\n      }\n    );\n  }\n\n  private _targetTemperatureHighChanged(ev) {\n    const newVal = ev.currentTarget.value;\n    this._callServiceHelper(\n      this.stateObj!.attributes.target_temp_high,\n      newVal,\n      \"set_temperature\",\n      {\n        target_temp_low: this.stateObj!.attributes.target_temp_low,\n        target_temp_high: newVal,\n      }\n    );\n  }\n\n  private _targetHumiditySliderChanged(ev) {\n    const newVal = ev.target.value;\n    this._callServiceHelper(\n      this.stateObj!.attributes.humidity,\n      newVal,\n      \"set_humidity\",\n      { humidity: newVal }\n    );\n  }\n\n  private _auxToggleChanged(ev) {\n    const newVal = ev.target.checked;\n    this._callServiceHelper(\n      this.stateObj!.attributes.aux_heat === \"on\",\n      newVal,\n      \"set_aux_heat\",\n      { aux_heat: newVal }\n    );\n  }\n\n  private _handleFanmodeChanged(ev) {\n    const newVal = ev.target.value;\n    this._callServiceHelper(\n      this.stateObj!.attributes.fan_mode,\n      newVal,\n      \"set_fan_mode\",\n      { fan_mode: newVal }\n    );\n  }\n\n  private _handleOperationmodeChanged(ev) {\n    const newVal = ev.target.value;\n    this._callServiceHelper(this.stateObj!.state, newVal, \"set_hvac_mode\", {\n      hvac_mode: newVal,\n    });\n  }\n\n  private _handleSwingmodeChanged(ev) {\n    const newVal = ev.target.value;\n    this._callServiceHelper(\n      this.stateObj!.attributes.swing_mode,\n      newVal,\n      \"set_swing_mode\",\n      { swing_mode: newVal }\n    );\n  }\n\n  private _handlePresetmodeChanged(ev) {\n    const newVal = ev.target.value || null;\n    this._callServiceHelper(\n      this.stateObj!.attributes.preset_mode,\n      newVal,\n      \"set_preset_mode\",\n      { preset_mode: newVal }\n    );\n  }\n\n  private async _callServiceHelper(\n    oldVal: unknown,\n    newVal: unknown,\n    service: string,\n    data: {\n      entity_id?: string;\n      [key: string]: unknown;\n    }\n  ) {\n    if (oldVal === newVal) {\n      return;\n    }\n\n    data.entity_id = this.stateObj!.entity_id;\n    const curState = this.stateObj;\n\n    await this.hass.callService(\"climate\", service, data);\n\n    // We reset stateObj to re-sync the inputs with the state. It will be out\n    // of sync if our service call did not result in the entity to be turned\n    // on. Since the state is not changing, the resync is not called automatic.\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n\n    // No need to resync if we received a new state.\n    if (this.stateObj !== curState) {\n      return;\n    }\n\n    this.stateObj = undefined;\n    await this.updateComplete;\n    // Only restore if not set yet by a state change\n    if (this.stateObj === undefined) {\n      this.stateObj = curState;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        color: var(--primary-text-color);\n      }\n\n      ha-select {\n        width: 100%;\n        margin-top: 8px;\n      }\n\n      ha-slider {\n        width: 100%;\n      }\n\n      .container-humidity .single-row {\n        display: flex;\n        height: 50px;\n      }\n\n      .target-humidity {\n        width: 90px;\n        font-size: 200%;\n        margin: auto;\n        direction: ltr;\n      }\n\n      ha-climate-control.range-control-left,\n      ha-climate-control.range-control-right {\n        float: left;\n        width: 46%;\n      }\n      ha-climate-control.range-control-left {\n        margin-right: 4%;\n      }\n      ha-climate-control.range-control-right {\n        margin-left: 4%;\n      }\n\n      .single-row {\n        padding: 8px 0;\n      }\n    `;\n  }\n}\n\ncustomElements.define(\"more-info-climate\", MoreInfoClimate);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"more-info-climate\": MoreInfoClimate;\n  }\n}\n"],"names":[],"sourceRoot":""}