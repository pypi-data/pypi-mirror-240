{"version":3,"file":"637634b5.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqFA;AACA;;;AAGA;;;AAKA;;;AAKA;;AAGA;;;AAIA;AACA;;;AAGA;;AAMA;AACA;;;;AAMA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;;;AAIA;;AAGA;AAGA;;;;AAKA;AACA;AACA;AACA;AACA;;;;;;AAMA;AAGA;AACA;AACA;AACA;;;;;AAKA;;;AAKA;;;;AAMA;AAKA;AAGA;AACA;AACA;;;;AAIA;;;AAIA;AACA;;;;;AAxHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2RA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-conditional-card-editor.ts"],"sourcesContent":["import \"@material/mwc-list/mwc-list-item\";\nimport \"@material/mwc-tab-bar/mwc-tab-bar\";\nimport \"@material/mwc-tab/mwc-tab\";\nimport type { MDCTabBarActivatedEvent } from \"@material/tab-bar\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport {\n  any,\n  array,\n  assert,\n  assign,\n  object,\n  optional,\n  string,\n} from \"superstruct\";\nimport { fireEvent, HASSDomEvent } from \"../../../../common/dom/fire_event\";\nimport { stopPropagation } from \"../../../../common/dom/stop_propagation\";\nimport \"../../../../components/entity/ha-entity-picker\";\nimport \"../../../../components/ha-select\";\nimport \"../../../../components/ha-textfield\";\nimport type {\n  LovelaceCardConfig,\n  LovelaceConfig,\n} from \"../../../../data/lovelace\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { ConditionalCardConfig } from \"../../cards/types\";\nimport type { LovelaceCardEditor } from \"../../types\";\nimport \"../card-editor/hui-card-element-editor\";\nimport type { HuiCardElementEditor } from \"../card-editor/hui-card-element-editor\";\nimport \"../card-editor/hui-card-picker\";\nimport \"../hui-element-editor\";\nimport type { ConfigChangedEvent } from \"../hui-element-editor\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport type { GUIModeChangedEvent } from \"../types\";\nimport { configElementStyle } from \"./config-elements-style\";\n\nconst conditionStruct = object({\n  entity: string(),\n  state: optional(string()),\n  state_not: optional(string()),\n});\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    card: any(),\n    conditions: optional(array(conditionStruct)),\n  })\n);\n\n@customElement(\"hui-conditional-card-editor\")\nexport class HuiConditionalCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ attribute: false }) public lovelace?: LovelaceConfig;\n\n  @state() private _config?: ConditionalCardConfig;\n\n  @state() private _GUImode = true;\n\n  @state() private _guiModeAvailable? = true;\n\n  @state() private _cardTab = false;\n\n  @query(\"hui-card-element-editor\")\n  private _cardEditorEl?: HuiCardElementEditor;\n\n  public setConfig(config: ConditionalCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n  }\n\n  public focusYamlEditor() {\n    this._cardEditorEl?.focusYamlEditor();\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    return html`\n      <mwc-tab-bar\n        .activeIndex=${this._cardTab ? 1 : 0}\n        @MDCTabBar:activated=${this._selectTab}\n      >\n        <mwc-tab\n          .label=${this.hass!.localize(\n            \"ui.panel.lovelace.editor.card.conditional.conditions\"\n          )}\n        ></mwc-tab>\n        <mwc-tab\n          .label=${this.hass!.localize(\n            \"ui.panel.lovelace.editor.card.conditional.card\"\n          )}\n        ></mwc-tab>\n      </mwc-tab-bar>\n      ${this._cardTab\n        ? html`\n            <div class=\"card\">\n              ${this._config.card.type !== undefined\n                ? html`\n                    <div class=\"card-options\">\n                      <mwc-button\n                        @click=${this._toggleMode}\n                        .disabled=${!this._guiModeAvailable}\n                        class=\"gui-mode-button\"\n                      >\n                        ${this.hass!.localize(\n                          !this._cardEditorEl || this._GUImode\n                            ? \"ui.panel.lovelace.editor.edit_card.show_code_editor\"\n                            : \"ui.panel.lovelace.editor.edit_card.show_visual_editor\"\n                        )}\n                      </mwc-button>\n                      <mwc-button @click=${this._handleReplaceCard}\n                        >${this.hass!.localize(\n                          \"ui.panel.lovelace.editor.card.conditional.change_type\"\n                        )}</mwc-button\n                      >\n                    </div>\n                    <hui-card-element-editor\n                      .hass=${this.hass}\n                      .value=${this._config.card}\n                      .lovelace=${this.lovelace}\n                      @config-changed=${this._handleCardChanged}\n                      @GUImode-changed=${this._handleGUIModeChanged}\n                    ></hui-card-element-editor>\n                  `\n                : html`\n                    <hui-card-picker\n                      .hass=${this.hass}\n                      .lovelace=${this.lovelace}\n                      @config-changed=${this._handleCardPicked}\n                    ></hui-card-picker>\n                  `}\n            </div>\n          `\n        : html`\n            <div class=\"conditions\">\n              ${this.hass!.localize(\n                \"ui.panel.lovelace.editor.card.conditional.condition_explanation\"\n              )}\n              ${this._config.conditions.map(\n                (cond, idx) => html`\n                  <div class=\"condition\">\n                    <div class=\"entity\">\n                      <ha-entity-picker\n                        .hass=${this.hass}\n                        .value=${cond.entity}\n                        .idx=${idx}\n                        .configValue=${\"entity\"}\n                        @change=${this._changeCondition}\n                        allow-custom-entity\n                      ></ha-entity-picker>\n                    </div>\n                    <div class=\"state\">\n                      <ha-select\n                        .value=${cond.state_not !== undefined\n                          ? \"true\"\n                          : \"false\"}\n                        .idx=${idx}\n                        .configValue=${\"invert\"}\n                        @selected=${this._changeCondition}\n                        @closed=${stopPropagation}\n                        naturalMenuWidth\n                        fixedMenuPosition\n                      >\n                        <mwc-list-item value=\"false\">\n                          ${this.hass!.localize(\n                            \"ui.panel.lovelace.editor.card.conditional.state_equal\"\n                          )}\n                        </mwc-list-item>\n                        <mwc-list-item value=\"true\">\n                          ${this.hass!.localize(\n                            \"ui.panel.lovelace.editor.card.conditional.state_not_equal\"\n                          )}\n                        </mwc-list-item>\n                      </ha-select>\n                      <ha-textfield\n                        .label=\"${this.hass!.localize(\n                          \"ui.panel.lovelace.editor.card.generic.state\"\n                        )} (${this.hass!.localize(\n                          \"ui.panel.lovelace.editor.card.conditional.current_state\"\n                        )}: ${this.hass?.states[cond.entity].state})\"\n                        .value=${cond.state_not !== undefined\n                          ? cond.state_not\n                          : cond.state}\n                        .idx=${idx}\n                        .configValue=${\"state\"}\n                        @input=${this._changeCondition}\n                      ></ha-textfield>\n                    </div>\n                  </div>\n                `\n              )}\n              <div class=\"condition\">\n                <ha-entity-picker\n                  .hass=${this.hass}\n                  @change=${this._addCondition}\n                ></ha-entity-picker>\n              </div>\n            </div>\n          `}\n    `;\n  }\n\n  private _selectTab(ev: MDCTabBarActivatedEvent): void {\n    this._cardTab = ev.detail.index === 1;\n  }\n\n  private _toggleMode(): void {\n    this._cardEditorEl?.toggleMode();\n  }\n\n  private _setMode(value: boolean): void {\n    this._GUImode = value;\n    if (this._cardEditorEl) {\n      this._cardEditorEl.GUImode = value;\n    }\n  }\n\n  private _handleGUIModeChanged(ev: HASSDomEvent<GUIModeChangedEvent>): void {\n    ev.stopPropagation();\n    this._GUImode = ev.detail.guiMode;\n    this._guiModeAvailable = ev.detail.guiModeAvailable;\n  }\n\n  private _handleCardPicked(ev: CustomEvent): void {\n    ev.stopPropagation();\n    if (!this._config) {\n      return;\n    }\n    this._setMode(true);\n    this._guiModeAvailable = true;\n    this._config = { ...this._config, card: ev.detail.config };\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _handleCardChanged(ev: HASSDomEvent<ConfigChangedEvent>): void {\n    ev.stopPropagation();\n    if (!this._config) {\n      return;\n    }\n    this._config = {\n      ...this._config,\n      card: ev.detail.config as LovelaceCardConfig,\n    };\n    this._guiModeAvailable = ev.detail.guiModeAvailable;\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _handleReplaceCard(): void {\n    if (!this._config) {\n      return;\n    }\n    // @ts-ignore\n    this._config = { ...this._config, card: {} };\n    // @ts-ignore\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _addCondition(ev: Event): void {\n    const target = ev.target! as any;\n    if (target.value === \"\" || !this._config) {\n      return;\n    }\n    const conditions = [...this._config.conditions];\n    conditions.push({\n      entity: target.value,\n      state: \"\",\n    });\n    this._config = { ...this._config, conditions };\n    target.value = \"\";\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _changeCondition(ev: Event): void {\n    const target = ev.target as any;\n    if (!this._config || !target) {\n      return;\n    }\n    const conditions = [...this._config.conditions];\n    if (target.configValue === \"entity\" && target.value === \"\") {\n      conditions.splice(target.idx, 1);\n    } else {\n      const condition = { ...conditions[target.idx] };\n      if (target.configValue === \"entity\") {\n        condition.entity = target.value;\n      } else if (target.configValue === \"state\") {\n        if (condition.state_not !== undefined) {\n          condition.state_not = target.value;\n        } else {\n          condition.state = target.value;\n        }\n      } else if (target.configValue === \"invert\") {\n        if (target.value === \"true\") {\n          if (condition.state) {\n            condition.state_not = condition.state;\n            delete condition.state;\n          }\n        } else if (condition.state_not) {\n          condition.state = condition.state_not;\n          delete condition.state_not;\n        }\n      }\n      conditions[target.idx] = condition;\n    }\n    this._config = { ...this._config, conditions };\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      configElementStyle,\n      css`\n        mwc-tab-bar {\n          border-bottom: 1px solid var(--divider-color);\n        }\n        .conditions {\n          margin-top: 8px;\n        }\n        .condition {\n          margin-top: 8px;\n          border: 1px solid var(--divider-color);\n          padding: 12px;\n        }\n        .condition .state {\n          display: flex;\n          align-items: flex-end;\n        }\n        .condition .state ha-select {\n          margin-right: 16px;\n          margin-inline-end: 16px;\n          margin-inline-start: initial;\n          direction: var(--direction);\n        }\n        .condition .state ha-textfield {\n          flex-grow: 1;\n        }\n\n        .card {\n          margin-top: 8px;\n          border: 1px solid var(--divider-color);\n          padding: 12px;\n        }\n        @media (max-width: 450px) {\n          .card,\n          .condition {\n            margin: 8px -12px 0;\n          }\n        }\n        .card .card-options {\n          display: flex;\n          justify-content: flex-end;\n          width: 100%;\n        }\n        .gui-mode-button {\n          margin-right: auto;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-conditional-card-editor\": HuiConditionalCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}