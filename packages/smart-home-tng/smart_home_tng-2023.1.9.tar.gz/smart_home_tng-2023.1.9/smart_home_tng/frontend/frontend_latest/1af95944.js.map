{"version":3,"file":"1af95944.js","mappings":";AAaA;;AAEA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;;;;ACvDA;AACA;;;AAMA;AAGA;AACA;AACA;;AAEA;;;AAGA;;;AAGA;;;;AAMA;AAEA;AACA;;;;AAOA;;AAGA;;;AAKA;AACA;;;;AAIA;;AAGA;AACA;;AAEA;AACA;;;AA/DA;;;;;AA2GA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/panels/config/automation/automation-mode-dialog/dialog-automation-mode.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@material/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { createCloseHeading } from \"../../../../components/ha-dialog\";\nimport \"../../../../components/ha-textfield\";\nimport \"../../../../components/ha-select\";\nimport { HassDialog } from \"../../../../dialogs/make-dialog-manager\";\nimport { haStyle, haStyleDialog } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { AutomationModeDialog } from \"./show-dialog-automation-mode\";\nimport {\n  AUTOMATION_DEFAULT_MAX,\n  AUTOMATION_DEFAULT_MODE,\n} from \"../../../../data/automation\";\nimport { documentationUrl } from \"../../../../util/documentation-url\";\nimport { isMaxMode, MODES } from \"../../../../data/script\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { stopPropagation } from \"../../../../common/dom/stop_propagation\";\n\n@customElement(\"ha-dialog-automation-mode\")\nclass DialogAutomationMode extends LitElement implements HassDialog {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _opened = false;\n\n  private _params!: AutomationModeDialog;\n\n  @state() private _newMode: typeof MODES[number] = AUTOMATION_DEFAULT_MODE;\n\n  @state() private _newMax?: number;\n\n  public showDialog(params: AutomationModeDialog): void {\n    this._opened = true;\n    this._params = params;\n    this._newMode = params.config.mode || AUTOMATION_DEFAULT_MODE;\n    this._newMax = isMaxMode(this._newMode)\n      ? params.config.max || AUTOMATION_DEFAULT_MAX\n      : undefined;\n  }\n\n  public closeDialog(): void {\n    this._params.onClose();\n\n    if (this._opened) {\n      fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n    }\n    this._opened = false;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._opened) {\n      return html``;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\"ui.panel.config.automation.editor.change_mode\")\n        )}\n      >\n        <ha-select\n          .label=${this.hass.localize(\n            \"ui.panel.config.automation.editor.modes.label\"\n          )}\n          .value=${this._newMode}\n          @selected=${this._modeChanged}\n          @closed=${stopPropagation}\n          fixedMenuPosition\n          .helper=${html`\n            <a\n              style=\"color: var(--secondary-text-color)\"\n              href=${documentationUrl(this.hass, \"/docs/automation/modes/\")}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              >${this.hass.localize(\n                \"ui.panel.config.automation.editor.modes.learn_more\"\n              )}</a\n            >\n          `}\n        >\n          ${MODES.map(\n            (mode) => html`\n              <mwc-list-item .value=${mode}>\n                ${this.hass.localize(\n                  `ui.panel.config.automation.editor.modes.${mode}`\n                ) || mode}\n              </mwc-list-item>\n            `\n          )}\n        </ha-select>\n        ${isMaxMode(this._newMode)\n          ? html`\n              <br /><ha-textfield\n                .label=${this.hass.localize(\n                  `ui.panel.config.automation.editor.max.${this._newMode}`\n                )}\n                type=\"number\"\n                name=\"max\"\n                .value=${this._newMax?.toString() ?? \"\"}\n                @change=${this._valueChanged}\n                class=\"max\"\n              >\n              </ha-textfield>\n            `\n          : html``}\n\n        <mwc-button @click=${this.closeDialog} slot=\"secondaryAction\">\n          ${this.hass.localize(\"ui.dialogs.generic.cancel\")}\n        </mwc-button>\n        <mwc-button @click=${this._save} slot=\"primaryAction\">\n          ${this.hass.localize(\"ui.panel.config.automation.editor.change_mode\")}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _modeChanged(ev) {\n    const mode = ev.target.value;\n    this._newMode = mode;\n    if (!isMaxMode(mode)) {\n      this._newMax = undefined;\n    } else if (!this._newMax) {\n      this._newMax = AUTOMATION_DEFAULT_MAX;\n    }\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const target = ev.target as any;\n    if (target.name === \"max\") {\n      this._newMax = Number(target.value);\n    }\n  }\n\n  private _save(): void {\n    this._params.updateAutomation({\n      ...this._params.config,\n      mode: this._newMode,\n      max: this._newMax,\n    });\n    this.closeDialog();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      haStyleDialog,\n      css`\n        ha-select,\n        ha-textfield {\n          display: block;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog-automation-mode\": DialogAutomationMode;\n  }\n}\n"],"names":[],"sourceRoot":""}