{"version":3,"file":"ed648a62.js","mappings":";;AAuCA;AACA;;AAEA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoFA;;;;;;;;;;AAWA;AC7GA;;;;AAMA;;AAEA;;;AARA;AAeA;;AAIA;;AAKA;AACA;;AAEA;;AAIA;;;;;;AAWA;;AAMA;AACA;;;AAGA;;;;AAxDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkIA","sources":["webpack://home-assistant-frontend/./src/components/ha-textfield.ts","webpack://home-assistant-frontend/./src/dialogs/more-info/controls/more-info-alarm_control_panel.ts"],"sourcesContent":["import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { TemplateResult, html, PropertyValues, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public iconTrailing?: boolean;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      (changedProperties.has(\"invalid\") &&\n        (this.invalid || changedProperties.get(\"invalid\") !== undefined)) ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid ? this.errorMessage || \"Invalid\" : \"\"\n      );\n      this.reportValidity();\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n        padding-inline-start: var(--text-field-suffix-padding-left, 12px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 0px);\n        direction: var(--direction);\n      }\n      .mdc-text-field--with-leading-icon {\n        padding-inline-start: var(--text-field-suffix-padding-left, 0px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 16px);\n        direction: var(--direction);\n      }\n\n      .mdc-text-field:not(.mdc-text-field--disabled)\n        .mdc-text-field__affix--suffix {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon--leading {\n        margin-inline-start: 16px;\n        margin-inline-end: 8px;\n        direction: var(--direction);\n      }\n\n      input {\n        text-align: var(--text-field-text-align, start);\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n\n      .mdc-floating-label {\n        inset-inline-start: 16px !important;\n        inset-inline-end: initial !important;\n        transform-origin: var(--float-start);\n        direction: var(--direction);\n        transform-origin: var(--float-start);\n      }\n\n      .mdc-text-field--with-leading-icon.mdc-text-field--filled\n        .mdc-floating-label {\n        max-width: calc(100% - 48px);\n        inset-inline-start: 48px !important;\n        inset-inline-end: initial !important;\n        direction: var(--direction);\n      }\n\n      .mdc-text-field__input[type=\"number\"] {\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          .mdc-text-field__affix--suffix,\n          .mdc-text-field--with-leading-icon,\n          .mdc-text-field__icon--leading,\n          .mdc-floating-label,\n          .mdc-text-field--with-leading-icon.mdc-text-field--filled\n            .mdc-floating-label,\n          .mdc-text-field__input[type=\"number\"] {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n","import \"@material/mwc-button\";\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport \"../../../components/ha-textfield\";\nimport type { HaTextField } from \"../../../components/ha-textfield\";\nimport {\n  callAlarmAction,\n  FORMAT_NUMBER,\n} from \"../../../data/alarm_control_panel\";\nimport type { HomeAssistant } from \"../../../types\";\n\nconst BUTTONS = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\", \"0\", \"clear\"];\nconst ARM_ACTIONS = [\"arm_home\", \"arm_away\"];\nconst DISARM_ACTIONS = [\"disarm\"];\n\n@customElement(\"more-info-alarm_control_panel\")\nexport class MoreInfoAlarmControlPanel extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj?: HassEntity;\n\n  @query(\"#alarmCode\") private _input?: HaTextField;\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this.stateObj) {\n      return html``;\n    }\n\n    return html`\n      ${!this.stateObj.attributes.code_format\n        ? \"\"\n        : html`\n            <div class=\"center\">\n              <ha-textfield\n                id=\"alarmCode\"\n                .label=${this.hass.localize(\"ui.card.alarm_control_panel.code\")}\n                type=\"password\"\n                .inputMode=${this.stateObj.attributes.code_format ===\n                FORMAT_NUMBER\n                  ? \"numeric\"\n                  : \"text\"}\n              ></ha-textfield>\n            </div>\n          `}\n      ${this.stateObj.attributes.code_format !== FORMAT_NUMBER\n        ? \"\"\n        : html`\n            <div id=\"keypad\">\n              ${BUTTONS.map((value) =>\n                value === \"\"\n                  ? html`<mwc-button disabled></mwc-button>`\n                  : html`\n                      <mwc-button\n                        .value=${value}\n                        @click=${this._handlePadClick}\n                        outlined\n                        class=${classMap({\n                          numberkey: value !== \"clear\",\n                        })}\n                      >\n                        ${value === \"clear\"\n                          ? this.hass!.localize(\n                              `ui.card.alarm_control_panel.clear_code`\n                            )\n                          : value}\n                      </mwc-button>\n                    `\n              )}\n            </div>\n          `}\n      <div class=\"actions\">\n        ${(this.stateObj.state === \"disarmed\"\n          ? ARM_ACTIONS\n          : DISARM_ACTIONS\n        ).map(\n          (stateAction) => html`\n            <mwc-button\n              .action=${stateAction}\n              @click=${this._handleActionClick}\n              outlined\n            >\n              ${this.hass!.localize(\n                `ui.card.alarm_control_panel.${stateAction}`\n              )}\n            </mwc-button>\n          `\n        )}\n      </div>\n    `;\n  }\n\n  private _handlePadClick(e: MouseEvent): void {\n    const val = (e.currentTarget! as any).value;\n    this._input!.value = val === \"clear\" ? \"\" : this._input!.value + val;\n  }\n\n  private _handleActionClick(e: MouseEvent): void {\n    const input = this._input;\n    callAlarmAction(\n      this.hass!,\n      this.stateObj!.entity_id,\n      (e.currentTarget! as any).action,\n      input?.value || undefined\n    );\n    if (input) {\n      input.value = \"\";\n    }\n  }\n\n  static styles = css`\n    ha-textfield {\n      display: block;\n      margin: 8px;\n      max-width: 150px;\n      text-align: center;\n    }\n\n    #keypad {\n      display: flex;\n      justify-content: center;\n      flex-wrap: wrap;\n      margin: auto;\n      width: 100%;\n      max-width: 300px;\n    }\n\n    #keypad mwc-button {\n      padding: 8px;\n      width: 30%;\n      box-sizing: border-box;\n    }\n\n    .actions {\n      margin: 0;\n      display: flex;\n      flex-wrap: wrap;\n      justify-content: center;\n    }\n\n    .actions mwc-button {\n      margin: 0 4px 4px;\n    }\n\n    mwc-button#disarm {\n      color: var(--error-color);\n    }\n\n    mwc-button.numberkey {\n      --mdc-typography-button-font-size: var(--keypad-font-size, 0.875rem);\n    }\n\n    .center {\n      display: flex;\n      justify-content: center;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"more-info-alarm_control_panel\": MoreInfoAlarmControlPanel;\n  }\n}\n"],"names":[],"sourceRoot":""}