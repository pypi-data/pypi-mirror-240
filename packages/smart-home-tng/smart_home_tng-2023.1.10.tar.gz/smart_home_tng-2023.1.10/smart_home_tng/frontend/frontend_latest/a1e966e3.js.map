{"version":3,"file":"a1e966e3.js","mappings":";;AAsCA;;;AAKA;;;;AAKA;AACA;AACA;AACA;;;;AAIA;AAMA;;;;;AAKA;;;AAQA;AAEA;AAGA;AAEA;AAKA;AAKA;;AAOA;;AAIA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA;;;;ACnGA;;AAEA;;;;AA2BA;;AAEA;AA2CA;AAIA;;;;AAsBA;;AAEA;;;;AA0BA;;AAEA","sources":["webpack://home-assistant-frontend/./src/panels/config/repairs/ha-config-repairs.ts","webpack://home-assistant-frontend/./src/panels/config/repairs/show-dialog-repair-flow.ts"],"sourcesContent":["import \"@material/mwc-list/mwc-list\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { relativeTime } from \"../../../common/datetime/relative_time\";\nimport { capitalizeFirstLetter } from \"../../../common/string/capitalize-first-letter\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-list-item\";\nimport \"../../../components/ha-svg-icon\";\nimport { domainToName } from \"../../../data/integration\";\nimport type { RepairsIssue } from \"../../../data/repairs\";\nimport \"../../../layouts/hass-subpage\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { brandsUrl } from \"../../../util/brands-url\";\nimport { showRepairsFlowDialog } from \"./show-dialog-repair-flow\";\nimport { showRepairsIssueDialog } from \"./show-repair-issue-dialog\";\n\n@customElement(\"ha-config-repairs\")\nclass HaConfigRepairs extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property({ attribute: false })\n  public repairsIssues?: RepairsIssue[];\n\n  @property({ type: Number })\n  public total?: number;\n\n  protected render(): TemplateResult {\n    if (!this.repairsIssues?.length) {\n      return html``;\n    }\n\n    const issues = this.repairsIssues;\n\n    return html`\n      <div class=\"title\">\n        ${this.hass.localize(\"ui.panel.config.repairs.title\", {\n          count: this.total || this.repairsIssues.length,\n        })}\n      </div>\n      <mwc-list>\n        ${issues.map(\n          (issue) => html`\n            <ha-list-item\n              twoline\n              graphic=\"medium\"\n              .hasMeta=${!this.narrow}\n              .issue=${issue}\n              class=${issue.ignored ? \"ignored\" : \"\"}\n              @click=${this._openShowMoreDialog}\n            >\n              <img\n                loading=\"lazy\"\n                src=${brandsUrl({\n                  domain: issue.issue_domain || issue.domain,\n                  type: \"icon\",\n                  useFallback: true,\n                  darkOptimized: this.hass.themes?.darkMode,\n                })}\n                .title=${domainToName(this.hass.localize, issue.domain)}\n                referrerpolicy=\"no-referrer\"\n                slot=\"graphic\"\n              />\n              <span\n                >${this.hass.localize(\n                  `component.${issue.domain}.issues.${\n                    issue.translation_key || issue.issue_id\n                  }.title`,\n                  issue.translation_placeholders || {}\n                )}</span\n              >\n              <span slot=\"secondary\" class=\"secondary\">\n                ${issue.severity === \"critical\" || issue.severity === \"error\"\n                  ? html`<span class=\"error\"\n                      >${this.hass.localize(\n                        `ui.panel.config.repairs.${issue.severity}`\n                      )}</span\n                    >`\n                  : \"\"}\n                ${(issue.severity === \"critical\" ||\n                  issue.severity === \"error\") &&\n                issue.created\n                  ? \" - \"\n                  : \"\"}\n                ${issue.created\n                  ? capitalizeFirstLetter(\n                      relativeTime(new Date(issue.created), this.hass.locale)\n                    )\n                  : \"\"}\n                ${issue.ignored\n                  ? ` - ${this.hass.localize(\n                      \"ui.panel.config.repairs.dialog.ignored_in_version_short\",\n                      { version: issue.dismissed_version }\n                    )}`\n                  : \"\"}\n              </span>\n              ${!this.narrow\n                ? html`<ha-icon-next slot=\"meta\"></ha-icon-next>`\n                : \"\"}\n            </ha-list-item>\n          `\n        )}\n      </mwc-list>\n    `;\n  }\n\n  private _openShowMoreDialog(ev): void {\n    const issue = ev.currentTarget.issue as RepairsIssue;\n    if (issue.is_fixable) {\n      showRepairsFlowDialog(this, issue);\n    } else {\n      showRepairsIssueDialog(this, {\n        issue,\n      });\n    }\n  }\n\n  static styles = css`\n    :host {\n      --mdc-list-vertical-padding: 0;\n    }\n    .title {\n      font-size: 16px;\n      padding: 16px;\n      padding-bottom: 0;\n    }\n    .ignored {\n      opacity: var(--light-secondary-opacity);\n    }\n    ha-list-item {\n      --mdc-list-item-graphic-size: 40px;\n    }\n    button.show-more {\n      color: var(--primary-color);\n      text-align: left;\n      cursor: pointer;\n      background: none;\n      border-width: initial;\n      border-style: none;\n      border-color: initial;\n      border-image: initial;\n      padding: 16px;\n      font: inherit;\n    }\n    button.show-more:focus {\n      outline: none;\n      text-decoration: underline;\n    }\n    ha-list-item {\n      cursor: pointer;\n      font-size: 16px;\n    }\n    .error {\n      color: var(--error-color);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-repairs\": HaConfigRepairs;\n  }\n}\n","import { html } from \"lit\";\nimport { domainToName } from \"../../../data/integration\";\nimport {\n  createRepairsFlow,\n  deleteRepairsFlow,\n  fetchRepairsFlow,\n  handleRepairsFlowStep,\n  RepairsIssue,\n} from \"../../../data/repairs\";\nimport {\n  loadDataEntryFlowDialog,\n  showFlowDialog,\n} from \"../../../dialogs/config-flow/show-dialog-data-entry-flow\";\n\nexport const loadRepairFlowDialog = loadDataEntryFlowDialog;\n\nexport const showRepairsFlowDialog = (\n  element: HTMLElement,\n  issue: RepairsIssue,\n  dialogClosedCallback?: (params: { flowFinished: boolean }) => void\n): void =>\n  showFlowDialog(\n    element,\n    {\n      startFlowHandler: issue.domain,\n      domain: issue.domain,\n      dialogClosedCallback,\n    },\n    {\n      loadDevicesAndAreas: false,\n      createFlow: async (hass, handler) => {\n        const [step] = await Promise.all([\n          createRepairsFlow(hass, handler, issue.issue_id),\n          hass.loadBackendTranslation(\"issues\", issue.domain),\n        ]);\n        return step;\n      },\n      fetchFlow: async (hass, flowId) => {\n        const [step] = await Promise.all([\n          fetchRepairsFlow(hass, flowId),\n          hass.loadBackendTranslation(\"issues\", issue.domain),\n        ]);\n        return step;\n      },\n      handleFlowStep: handleRepairsFlowStep,\n      deleteFlow: deleteRepairsFlow,\n\n      renderAbortDescription(hass, step) {\n        const description = hass.localize(\n          `component.${issue.domain}.issues.abort.${step.reason}`,\n          step.description_placeholders\n        );\n\n        return description\n          ? html`\n              <ha-markdown\n                breaks\n                allowsvg\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderShowFormStepHeader(hass, step) {\n        return (\n          hass.localize(\n            `component.${issue.domain}.issues.${\n              issue.translation_key || issue.issue_id\n            }.fix_flow.step.${step.step_id}.title`,\n            step.description_placeholders\n          ) || hass.localize(\"ui.dialogs.repair_flow.form.header\")\n        );\n      },\n\n      renderShowFormStepDescription(hass, step) {\n        const description = hass.localize(\n          `component.${issue.domain}.issues.${\n            issue.translation_key || issue.issue_id\n          }.fix_flow.step.${step.step_id}.description`,\n          step.description_placeholders\n        );\n        return description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderShowFormStepFieldLabel(hass, step, field) {\n        return hass.localize(\n          `component.${issue.domain}.issues.${\n            issue.translation_key || issue.issue_id\n          }.fix_flow.step.${step.step_id}.data.${field.name}`\n        );\n      },\n\n      renderShowFormStepFieldHelper(hass, step, field) {\n        const description = hass.localize(\n          `component.${issue.domain}.issues.${\n            issue.translation_key || issue.issue_id\n          }.fix_flow.step.${step.step_id}.data_description.${field.name}`,\n          step.description_placeholders\n        );\n        return description\n          ? html`<ha-markdown breaks .content=${description}></ha-markdown>`\n          : \"\";\n      },\n\n      renderShowFormStepFieldError(hass, step, error) {\n        return hass.localize(\n          `component.${issue.domain}.issues.${\n            issue.translation_key || issue.issue_id\n          }.fix_flow.error.${error}`,\n          step.description_placeholders\n        );\n      },\n\n      renderExternalStepHeader(_hass, _step) {\n        return \"\";\n      },\n\n      renderExternalStepDescription(_hass, _step) {\n        return \"\";\n      },\n\n      renderCreateEntryDescription(hass, _step) {\n        return html`\n          <p>${hass.localize(\"ui.dialogs.repair_flow.success.description\")}</p>\n        `;\n      },\n\n      renderShowFormProgressHeader(hass, step) {\n        return (\n          hass.localize(\n            `component.${issue.domain}.issues.step.${\n              issue.translation_key || issue.issue_id\n            }.fix_flow.${step.step_id}.title`\n          ) || hass.localize(`component.${issue.domain}.title`)\n        );\n      },\n\n      renderShowFormProgressDescription(hass, step) {\n        const description = hass.localize(\n          `component.${issue.domain}.issues.${\n            issue.translation_key || issue.issue_id\n          }.fix_flow.progress.${step.progress_action}`,\n          step.description_placeholders\n        );\n        return description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderMenuHeader(hass, step) {\n        return (\n          hass.localize(\n            `component.${issue.domain}.issues.${\n              issue.translation_key || issue.issue_id\n            }.fix_flow.step.${step.step_id}.title`\n          ) || hass.localize(`component.${issue.domain}.title`)\n        );\n      },\n\n      renderMenuDescription(hass, step) {\n        const description = hass.localize(\n          `component.${issue.domain}.issues.${\n            issue.translation_key || issue.issue_id\n          }.fix_flow.step.${step.step_id}.description`,\n          step.description_placeholders\n        );\n        return description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderMenuOption(hass, step, option) {\n        return hass.localize(\n          `component.${issue.domain}.issues.${\n            issue.translation_key || issue.issue_id\n          }.fix_flow.step.${step.step_id}.menu_issues.${option}`,\n          step.description_placeholders\n        );\n      },\n\n      renderLoadingDescription(hass, reason) {\n        return (\n          hass.localize(\n            `component.${issue.domain}.issues.${\n              issue.translation_key || issue.issue_id\n            }.fix_flow.loading`\n          ) ||\n          hass.localize(`ui.dialogs.repair_flow.loading.${reason}`, {\n            integration: domainToName(hass.localize, issue.domain),\n          })\n        );\n      },\n    }\n  );\n"],"names":[],"sourceRoot":""}