{"version":3,"file":"b7015854.js","mappings":";;AA8DA;;AAKA;;AAQA;AAGA;AACA;AAIA;;AAEA;;;AAIA;;;;;AAKA;AAGA;AACA;;AAKA;;;AAGA;AAGA;AACA;;;AAMA;AASA;AAIA;;;;AAIA;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuEA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/entity-rows/hui-weather-entity-row.ts"],"sourcesContent":["import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { computeStateDisplay } from \"../../../common/entity/compute_state_display\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { formatNumber } from \"../../../common/number/format_number\";\nimport \"../../../components/entity/state-badge\";\nimport { UNAVAILABLE_STATES } from \"../../../data/entity\";\nimport { ActionHandlerEvent } from \"../../../data/lovelace\";\nimport {\n  getSecondaryWeatherAttribute,\n  getWeatherStateIcon,\n  getWeatherUnit,\n  WeatherEntity,\n  weatherSVGStyles,\n} from \"../../../data/weather\";\nimport type { HomeAssistant } from \"../../../types\";\nimport type { EntitiesCardEntityConfig } from \"../cards/types\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { handleAction } from \"../common/handle-action\";\nimport { hasAction } from \"../common/has-action\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport \"../components/hui-generic-entity-row\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport type { LovelaceRow } from \"./types\";\n\n@customElement(\"hui-weather-entity-row\")\nclass HuiWeatherEntityRow extends LitElement implements LovelaceRow {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: EntitiesCardEntityConfig;\n\n  public setConfig(config: EntitiesCardEntityConfig): void {\n    if (!config?.entity) {\n      throw new Error(\"Entity must be specified\");\n    }\n\n    this._config = config;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity] as WeatherEntity;\n\n    if (!stateObj) {\n      return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        </hui-warning>\n      `;\n    }\n\n    const pointer = !(\n      this._config.tap_action && this._config.tap_action.action !== \"none\"\n    );\n\n    const weatherStateIcon = getWeatherStateIcon(stateObj.state, this);\n\n    return html`\n      <div\n        class=\"icon-image ${classMap({\n          pointer,\n        })}\"\n        @action=${this._handleAction}\n        .actionHandler=${actionHandler({\n          hasHold: hasAction(this._config!.hold_action),\n          hasDoubleClick: hasAction(this._config!.double_tap_action),\n        })}\n        tabindex=${ifDefined(pointer ? \"0\" : undefined)}\n      >\n        ${weatherStateIcon ||\n        html`\n          <ha-state-icon\n            class=\"weather-icon\"\n            .state=${stateObj}\n          ></ha-state-icon>\n        `}\n      </div>\n      <div\n        class=\"info ${classMap({\n          pointer,\n        })}\"\n        @action=${this._handleAction}\n        .actionHandler=${actionHandler({\n          hasHold: hasAction(this._config!.hold_action),\n          hasDoubleClick: hasAction(this._config!.double_tap_action),\n        })}\n      >\n        ${this._config.name || computeStateName(stateObj)}\n      </div>\n      <div\n        class=\"attributes ${classMap({\n          pointer,\n        })}\"\n        @action=${this._handleAction}\n        .actionHandler=${actionHandler({\n          hasHold: hasAction(this._config!.hold_action),\n          hasDoubleClick: hasAction(this._config!.double_tap_action),\n        })}\n      >\n        <div>\n          ${UNAVAILABLE_STATES.includes(stateObj.state) ||\n          stateObj.attributes.temperature === undefined ||\n          stateObj.attributes.temperature === null\n            ? computeStateDisplay(\n                this.hass.localize,\n                stateObj,\n                this.hass.locale\n              )\n            : html`\n                ${formatNumber(\n                  stateObj.attributes.temperature,\n                  this.hass.locale\n                )}\n                ${getWeatherUnit(this.hass, stateObj, \"temperature\")}\n              `}\n        </div>\n        <div class=\"secondary\">\n          ${getSecondaryWeatherAttribute(this.hass!, stateObj)}\n        </div>\n      </div>\n    `;\n  }\n\n  private _handleAction(ev: ActionHandlerEvent) {\n    handleAction(this, this.hass!, this._config!, ev.detail.action!);\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      weatherSVGStyles,\n      css`\n        :host {\n          display: flex;\n          align-items: center;\n          flex-direction: row;\n        }\n\n        .info {\n          margin-left: 16px;\n          flex: 1 0 60px;\n        }\n\n        .info,\n        .info > * {\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n\n        .icon-image {\n          display: flex;\n          align-items: center;\n          min-width: 40px;\n        }\n\n        .icon-image > * {\n          flex: 0 0 40px;\n          height: 40px;\n        }\n\n        .icon-image:focus {\n          outline: none;\n          background-color: var(--divider-color);\n          border-radius: 50%;\n        }\n\n        .weather-icon {\n          --mdc-icon-size: 40px;\n        }\n\n        :host([rtl]) .flex {\n          margin-left: 0;\n          margin-right: 16px;\n        }\n\n        .pointer {\n          cursor: pointer;\n        }\n\n        .attributes {\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          text-align: right;\n          margin-left: 8px;\n        }\n\n        .secondary {\n          color: var(--secondary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-weather-entity-row\": HuiWeatherEntityRow;\n  }\n}\n"],"names":[],"sourceRoot":""}