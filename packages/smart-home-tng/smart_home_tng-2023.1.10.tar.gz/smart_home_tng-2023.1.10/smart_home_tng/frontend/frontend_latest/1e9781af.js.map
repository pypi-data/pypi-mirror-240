{"version":3,"file":"1e9781af.js","mappings":";;AAqGA;;;;AAKA;;AAIA;;;;;;;AASA;AACA;AAKA;AACA;;;;;AAKA;;AAQA;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/cards/energy/hui-energy-grid-neutrality-gauge-card.ts"],"sourcesContent":["import { mdiInformation } from \"@mdi/js\";\nimport \"@polymer/paper-tooltip\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { formatNumber } from \"../../../../common/number/format_number\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-svg-icon\";\nimport \"../../../../components/ha-gauge\";\nimport type { LevelDefinition } from \"../../../../components/ha-gauge\";\nimport {\n  EnergyData,\n  getEnergyDataCollection,\n  GridSourceTypeEnergyPreference,\n} from \"../../../../data/energy\";\nimport { calculateStatisticsSumGrowth } from \"../../../../data/recorder\";\nimport { SubscribeMixin } from \"../../../../mixins/subscribe-mixin\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { LovelaceCard } from \"../../types\";\nimport type { EnergyGridGaugeCardConfig } from \"../types\";\n\nconst LEVELS: LevelDefinition[] = [\n  { level: -1, stroke: \"var(--energy-grid-consumption-color)\" },\n  { level: 0, stroke: \"var(--energy-grid-return-color)\" },\n];\n\n@customElement(\"hui-energy-grid-neutrality-gauge-card\")\nclass HuiEnergyGridGaugeCard\n  extends SubscribeMixin(LitElement)\n  implements LovelaceCard\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: EnergyGridGaugeCardConfig;\n\n  @state() private _data?: EnergyData;\n\n  protected hassSubscribeRequiredHostProps = [\"_config\"];\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      getEnergyDataCollection(this.hass!, {\n        key: this._config?.collection_key,\n      }).subscribe((data) => {\n        this._data = data;\n      }),\n    ];\n  }\n\n  public getCardSize(): number {\n    return 4;\n  }\n\n  public setConfig(config: EnergyGridGaugeCardConfig): void {\n    this._config = config;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    if (!this._data) {\n      return html`${this.hass.localize(\n        \"ui.panel.lovelace.cards.energy.loading\"\n      )}`;\n    }\n\n    const prefs = this._data.prefs;\n    const gridSource = prefs.energy_sources.find(\n      (src) => src.type === \"grid\"\n    ) as GridSourceTypeEnergyPreference | undefined;\n\n    let value: number | undefined;\n\n    if (!gridSource) {\n      return html``;\n    }\n\n    const consumedFromGrid = calculateStatisticsSumGrowth(\n      this._data.stats,\n      gridSource.flow_from.map((flow) => flow.stat_energy_from)\n    );\n\n    const returnedToGrid = calculateStatisticsSumGrowth(\n      this._data.stats,\n      gridSource.flow_to.map((flow) => flow.stat_energy_to)\n    );\n\n    if (consumedFromGrid !== null && returnedToGrid !== null) {\n      if (returnedToGrid > consumedFromGrid) {\n        value = 1 - consumedFromGrid / returnedToGrid;\n      } else if (returnedToGrid < consumedFromGrid) {\n        value = (1 - returnedToGrid / consumedFromGrid) * -1;\n      } else {\n        value = 0;\n      }\n    }\n\n    return html`\n      <ha-card>\n        ${value !== undefined\n          ? html`\n              <ha-svg-icon id=\"info\" .path=${mdiInformation}></ha-svg-icon>\n              <paper-tooltip animation-delay=\"0\" for=\"info\" position=\"left\">\n                <span>\n                  ${this.hass.localize(\n                    \"ui.panel.lovelace.cards.energy.grid_neutrality_gauge.energy_dependency\"\n                  )}\n                  <br /><br />\n                  ${this.hass.localize(\n                    \"ui.panel.lovelace.cards.energy.grid_neutrality_gauge.color_explain\"\n                  )}\n                </span>\n              </paper-tooltip>\n\n              <ha-gauge\n                min=\"-1\"\n                max=\"1\"\n                .value=${value}\n                .valueText=${formatNumber(\n                  Math.abs(returnedToGrid! - consumedFromGrid!),\n                  this.hass.locale,\n                  { maximumFractionDigits: 2 }\n                )}\n                .locale=${this.hass!.locale}\n                .levels=${LEVELS}\n                label=\"kWh\"\n                needle\n              ></ha-gauge>\n              <div class=\"name\">\n                ${returnedToGrid! >= consumedFromGrid!\n                  ? this.hass.localize(\n                      \"ui.panel.lovelace.cards.energy.grid_neutrality_gauge.net_returned_grid\"\n                    )\n                  : this.hass.localize(\n                      \"ui.panel.lovelace.cards.energy.grid_neutrality_gauge.net_consumed_grid\"\n                    )}\n              </div>\n            `\n          : this.hass.localize(\n              \"ui.panel.lovelace.cards.energy.grid_neutrality_gauge.grid_neutrality_not_calculated\"\n            )}\n      </ha-card>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-card {\n        height: 100%;\n        overflow: hidden;\n        padding: 16px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-direction: column;\n        box-sizing: border-box;\n      }\n\n      ha-gauge {\n        width: 100%;\n        max-width: 250px;\n        direction: ltr;\n      }\n\n      .name {\n        text-align: center;\n        line-height: initial;\n        color: var(--primary-text-color);\n        width: 100%;\n        font-size: 15px;\n        margin-top: 8px;\n      }\n\n      ha-svg-icon {\n        position: absolute;\n        right: 4px;\n        top: 4px;\n        color: var(--secondary-text-color);\n      }\n      paper-tooltip > span {\n        font-size: 12px;\n        line-height: 12px;\n      }\n      paper-tooltip {\n        width: 80%;\n        max-width: 250px;\n        top: 8px !important;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-energy-grid-neutrality-gauge-card\": HuiEnergyGridGaugeCard;\n  }\n}\n"],"names":[],"sourceRoot":""}