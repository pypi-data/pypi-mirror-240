{"version":3,"file":"7f9c056e.js","mappings":";;AAuDA;;;AAOA;AAKA;;;AAGA;AACA;AACA;AACA;;;;;;;;AAUA;AACA;;AAlCA;;;;;;;;;;;;;;;;;;;;;;AA+JA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/components/hui-entity-editor.ts"],"sourcesContent":["import { mdiDrag } from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { guard } from \"lit/directives/guard\";\nimport type { SortableEvent } from \"sortablejs\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/entity/ha-entity-picker\";\nimport type { HaEntityPicker } from \"../../../components/entity/ha-entity-picker\";\nimport \"../../../components/ha-icon-button\";\nimport { sortableStyles } from \"../../../resources/ha-sortable-style\";\nimport {\n  loadSortable,\n  SortableInstance,\n} from \"../../../resources/sortable.ondemand\";\nimport { HomeAssistant } from \"../../../types\";\nimport { EntityConfig } from \"../entity-rows/types\";\n\n@customElement(\"hui-entity-editor\")\nexport class HuiEntityEditor extends LitElement {\n  @property({ attribute: false }) protected hass?: HomeAssistant;\n\n  @property({ attribute: false }) protected entities?: EntityConfig[];\n\n  @property() protected label?: string;\n\n  @state() private _attached = false;\n\n  @state() private _renderEmptySortable = false;\n\n  private _sortable?: SortableInstance;\n\n  public connectedCallback() {\n    super.connectedCallback();\n    this._attached = true;\n  }\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    this._attached = false;\n  }\n\n  protected render(): TemplateResult {\n    if (!this.entities) {\n      return html``;\n    }\n\n    return html`\n      <h3>\n        ${this.label ||\n        this.hass!.localize(\"ui.panel.lovelace.editor.card.generic.entities\") +\n          \" (\" +\n          this.hass!.localize(\"ui.panel.lovelace.editor.card.config.required\") +\n          \")\"}\n      </h3>\n      <div class=\"entities\">\n        ${guard([this.entities, this._renderEmptySortable], () =>\n          this._renderEmptySortable\n            ? \"\"\n            : this.entities!.map(\n                (entityConf, index) => html`\n                  <div class=\"entity\" data-entity-id=${entityConf.entity}>\n                    <ha-svg-icon .path=${mdiDrag}></ha-svg-icon>\n                    <ha-entity-picker\n                      .hass=${this.hass}\n                      .value=${entityConf.entity}\n                      .index=${index}\n                      @value-changed=${this._valueChanged}\n                      allow-custom-entity\n                    ></ha-entity-picker>\n                  </div>\n                `\n              )\n        )}\n      </div>\n      <ha-entity-picker\n        class=\"add-entity\"\n        .hass=${this.hass}\n        @value-changed=${this._addEntity}\n      ></ha-entity-picker>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n\n    const attachedChanged = changedProps.has(\"_attached\");\n    const entitiesChanged = changedProps.has(\"entities\");\n\n    if (!entitiesChanged && !attachedChanged) {\n      return;\n    }\n\n    if (attachedChanged && !this._attached) {\n      // Tear down sortable, if available\n      this._sortable?.destroy();\n      this._sortable = undefined;\n      return;\n    }\n\n    if (!this._sortable && this.entities) {\n      this._createSortable();\n      return;\n    }\n\n    if (entitiesChanged) {\n      this._handleEntitiesChanged();\n    }\n  }\n\n  private async _handleEntitiesChanged() {\n    this._renderEmptySortable = true;\n    await this.updateComplete;\n    const container = this.shadowRoot!.querySelector(\".entities\")!;\n    while (container.lastElementChild) {\n      container.removeChild(container.lastElementChild);\n    }\n    this._renderEmptySortable = false;\n  }\n\n  private async _createSortable() {\n    const Sortable = await loadSortable();\n\n    this._sortable = new Sortable(\n      this.shadowRoot!.querySelector(\".entities\")!,\n      {\n        animation: 150,\n        fallbackClass: \"sortable-fallback\",\n        handle: \"ha-svg-icon\",\n        dataIdAttr: \"data-entity-id\",\n        onEnd: async (evt: SortableEvent) => this._entityMoved(evt),\n      }\n    );\n  }\n\n  private async _addEntity(ev: CustomEvent): Promise<void> {\n    const value = ev.detail.value;\n    if (value === \"\") {\n      return;\n    }\n    const newConfigEntities = this.entities!.concat({\n      entity: value as string,\n    });\n    (ev.target as HaEntityPicker).value = \"\";\n    fireEvent(this, \"entities-changed\", { entities: newConfigEntities });\n  }\n\n  private _entityMoved(ev: SortableEvent): void {\n    if (ev.oldIndex === ev.newIndex) {\n      return;\n    }\n\n    const newEntities = this.entities!.concat();\n\n    newEntities.splice(ev.newIndex!, 0, newEntities.splice(ev.oldIndex!, 1)[0]);\n\n    fireEvent(this, \"entities-changed\", { entities: newEntities });\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    const value = ev.detail.value;\n    const index = (ev.target as any).index;\n    const newConfigEntities = this.entities!.concat();\n\n    if (value === \"\" || value === undefined) {\n      newConfigEntities.splice(index, 1);\n    } else {\n      newConfigEntities[index] = {\n        ...newConfigEntities[index],\n        entity: value!,\n      };\n    }\n\n    fireEvent(this, \"entities-changed\", { entities: newConfigEntities });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      sortableStyles,\n      css`\n        ha-entity-picker {\n          margin-top: 8px;\n        }\n        .add-entity {\n          display: block;\n          margin-left: 31px;\n          margin-inline-start: 31px;\n          margin-inline-end: initial;\n          direction: var(--direction);\n        }\n        .entity {\n          display: flex;\n          align-items: center;\n        }\n        .entity ha-svg-icon {\n          padding-right: 8px;\n          cursor: move;\n        }\n        .entity ha-entity-picker {\n          flex-grow: 1;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-entity-editor\": HuiEntityEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}