{"version":3,"file":"f10e5a56.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEA;AAIA;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACqBA;;;;;ACjCA;AACA;;AAEA;;AAnEA;AAsEA;AACA;;;;;;;AAOA;;AAEA;;AAIA;;AAEA;AAGA;AACA;AAGA;;;;;;;AAQA;AACA;AACA;AACA;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8HA","sources":["webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/layouts/ha-app-layout.js","webpack://home-assistant-frontend/./src/panels/calendar/ha-panel-calendar.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public outlined = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        border-radius: var(--ha-card-border-radius, 4px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","/* eslint-plugin-disable lit */\n/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\nThis code is copied from app-header-layout.\n'fullbleed' support is removed as Home Assisstant doesn't use it.\ntransform: translate(0) is added.\n*/\n/*\n  FIXME(polymer-modulizer): the above comments were extracted\n  from HTML and may be out of place here. Review them and\n  then delete this comment!\n*/\nimport \"@polymer/app-layout/app-header-layout/app-header-layout\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport \"@polymer/polymer/polymer-element\";\n\nclass HaAppLayout extends customElements.get(\"app-header-layout\") {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n          /**\n         * Force app-header-layout to have its own stacking context so that its parent can\n         * control the stacking of it relative to other elements (e.g. app-drawer-layout).\n         * This could be done using \\`isolation: isolate\\`, but that's not well supported\n         * across browsers.\n         */\n          position: relative;\n          z-index: 0;\n        }\n\n        #wrapper ::slotted([slot=\"header\"]) {\n          @apply --layout-fixed-top;\n          z-index: 1;\n        }\n\n        #wrapper.initializing ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) {\n          height: 100%;\n        }\n\n        :host([has-scrolling-region]) #wrapper ::slotted([slot=\"header\"]) {\n          position: absolute;\n        }\n\n        :host([has-scrolling-region])\n          #wrapper.initializing\n          ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) #wrapper #contentContainer {\n          @apply --layout-fit;\n          overflow-y: auto;\n          -webkit-overflow-scrolling: touch;\n        }\n\n        :host([has-scrolling-region]) #wrapper.initializing #contentContainer {\n          position: relative;\n        }\n\n        #contentContainer {\n          /* Create a stacking context here so that all children appear below the header. */\n          position: relative;\n          z-index: 0;\n          /* Using 'transform' will cause 'position: fixed' elements to behave like\n           'position: absolute' relative to this element. */\n          transform: translate(0);\n          margin-left: env(safe-area-inset-left);\n          margin-right: env(safe-area-inset-right);\n        }\n\n        @media print {\n          :host([has-scrolling-region]) #wrapper #contentContainer {\n            overflow-y: visible;\n          }\n        }\n      </style>\n\n      <div id=\"wrapper\" class=\"initializing\">\n        <slot id=\"headerSlot\" name=\"header\"></slot>\n\n        <div id=\"contentContainer\"><slot></slot></div>\n        <slot id=\"fab\" name=\"fab\"></slot>\n      </div>\n    `;\n  }\n}\ncustomElements.define(\"ha-app-layout\", HaAppLayout);\n","import \"@material/mwc-checkbox\";\nimport \"@material/mwc-formfield\";\nimport { mdiRefresh } from \"@mdi/js\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { LocalStorage } from \"../../common/decorators/local-storage\";\nimport { HASSDomEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-card\";\nimport \"../../components/ha-icon-button\";\nimport \"../../components/ha-menu-button\";\nimport {\n  Calendar,\n  fetchCalendarEvents,\n  getCalendars,\n} from \"../../data/calendar\";\nimport \"../../layouts/ha-app-layout\";\nimport { haStyle } from \"../../resources/styles\";\nimport type {\n  CalendarEvent,\n  CalendarViewChanged,\n  HomeAssistant,\n} from \"../../types\";\nimport \"./ha-full-calendar\";\n\n@customElement(\"ha-panel-calendar\")\nclass PanelCalendar extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true })\n  public narrow!: boolean;\n\n  @state() private _calendars: Calendar[] = [];\n\n  @state() private _events: CalendarEvent[] = [];\n\n  @LocalStorage(\"deSelectedCalendars\", true)\n  private _deSelectedCalendars: string[] = [];\n\n  private _start?: Date;\n\n  private _end?: Date;\n\n  public willUpdate(changedProps: PropertyValues): void {\n    super.willUpdate(changedProps);\n    if (!this.hasUpdated) {\n      this._calendars = getCalendars(this.hass);\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-app-layout>\n        <app-header fixed slot=\"header\">\n          <app-toolbar>\n            <ha-menu-button\n              .hass=${this.hass}\n              .narrow=${this.narrow}\n            ></ha-menu-button>\n            <div main-title>${this.hass.localize(\"panel.calendar\")}</div>\n            <ha-icon-button\n              .path=${mdiRefresh}\n              .label=${this.hass.localize(\"ui.common.refresh\")}\n              @click=${this._handleRefresh}\n            ></ha-icon-button>\n          </app-toolbar>\n        </app-header>\n        <div class=\"content\">\n          <div class=\"calendar-list\">\n            <div class=\"calendar-list-header\">\n              ${this.hass.localize(\"ui.components.calendar.my_calendars\")}\n            </div>\n            ${this._calendars.map(\n              (selCal) =>\n                html`\n                  <div>\n                    <mwc-formfield .label=${selCal.name}>\n                      <mwc-checkbox\n                        style=${styleMap({\n                          \"--mdc-theme-secondary\": selCal.backgroundColor!,\n                        })}\n                        .value=${selCal.entity_id}\n                        .checked=${!this._deSelectedCalendars.includes(\n                          selCal.entity_id\n                        )}\n                        @change=${this._handleToggle}\n                      ></mwc-checkbox>\n                    </mwc-formfield>\n                  </div>\n                `\n            )}\n          </div>\n          <ha-full-calendar\n            .events=${this._events}\n            .narrow=${this.narrow}\n            .hass=${this.hass}\n            @view-changed=${this._handleViewChanged}\n          ></ha-full-calendar>\n        </div>\n      </ha-app-layout>\n    `;\n  }\n\n  private get _selectedCalendars(): Calendar[] {\n    return this._calendars\n      .filter((selCal) => !this._deSelectedCalendars.includes(selCal.entity_id))\n      .map((cal) => cal);\n  }\n\n  private async _fetchEvents(\n    start: Date,\n    end: Date,\n    calendars: Calendar[]\n  ): Promise<CalendarEvent[]> {\n    if (!calendars.length) {\n      return [];\n    }\n\n    return fetchCalendarEvents(this.hass, start, end, calendars);\n  }\n\n  private async _handleToggle(ev): Promise<void> {\n    const results = this._calendars.map(async (cal) => {\n      if (ev.target.value !== cal.entity_id) {\n        return cal;\n      }\n\n      const checked = ev.target.checked;\n\n      if (checked) {\n        const events = await this._fetchEvents(this._start!, this._end!, [cal]);\n        this._events = [...this._events, ...events];\n        this._deSelectedCalendars = this._deSelectedCalendars.filter(\n          (deCal) => deCal !== cal.entity_id\n        );\n      } else {\n        this._events = this._events.filter(\n          (event) => event.calendar !== cal.entity_id\n        );\n        this._deSelectedCalendars = [\n          ...this._deSelectedCalendars,\n          cal.entity_id,\n        ];\n      }\n\n      return cal;\n    });\n\n    this._calendars = await Promise.all(results);\n  }\n\n  private async _handleViewChanged(\n    ev: HASSDomEvent<CalendarViewChanged>\n  ): Promise<void> {\n    this._start = ev.detail.start;\n    this._end = ev.detail.end;\n    this._events = await this._fetchEvents(\n      this._start,\n      this._end,\n      this._selectedCalendars\n    );\n  }\n\n  private async _handleRefresh(): Promise<void> {\n    this._events = await this._fetchEvents(\n      this._start!,\n      this._end!,\n      this._selectedCalendars\n    );\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .content {\n          padding: 16px;\n          display: flex;\n          box-sizing: border-box;\n        }\n\n        :host(:not([narrow])) .content {\n          height: calc(100vh - var(--header-height));\n        }\n\n        .calendar-list {\n          padding-right: 16px;\n          padding-inline-end: 16px;\n          padding-inline-start: initial;\n          min-width: 170px;\n          flex: 0 0 15%;\n          overflow: hidden;\n          --mdc-theme-text-primary-on-background: var(--primary-text-color);\n          direction: var(--direction);\n        }\n\n        .calendar-list > div {\n          white-space: nowrap;\n          text-overflow: ellipsis;\n          overflow: hidden;\n        }\n\n        .calendar-list-header {\n          font-size: 16px;\n          padding: 16px 16px 8px 8px;\n        }\n\n        ha-full-calendar {\n          flex-grow: 1;\n        }\n\n        :host([narrow]) ha-full-calendar {\n          height: calc(100vh - 72px);\n        }\n\n        :host([narrow]) .content {\n          flex-direction: column-reverse;\n          padding: 8px 0 0 0;\n        }\n\n        :host([narrow]) .calendar-list {\n          margin-bottom: 24px;\n          width: 100%;\n          padding-right: 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-panel-calendar\": PanelCalendar;\n  }\n}\n"],"names":[],"sourceRoot":""}