{"version":3,"file":"2662a4d6.js","mappings":";;;;;;AAsBA;;;;AAKA;AC6CA;AAEA;AAEA;AACA;;AAEA;AAEA;AAWA;AAEA;AACA;;AAEA;AAKA;AAMA;AACA;AACA;AACA;AAIA;AAIA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AACA;AAGA;;AAoCA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;;;;AAIA;;AAEA;;AAEA;;;AAIA;;AA0BA;;;;AAOA;;;;;AAQA;;;;AAIA;;;AAKA;;;;AChNA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA","sources":["webpack://home-assistant-frontend/./src/components/ha-fab.ts","webpack://home-assistant-frontend/./src/panels/config/tags/ha-config-tags.ts","webpack://home-assistant-frontend/./src/panels/config/tags/tag-image.ts"],"sourcesContent":["import { FabBase } from \"@material/mwc-fab/mwc-fab-base\";\nimport { styles } from \"@material/mwc-fab/mwc-fab.css\";\nimport { customElement } from \"lit/decorators\";\nimport { css } from \"lit\";\n\n@customElement(\"ha-fab\")\nexport class HaFab extends FabBase {\n  protected firstUpdated(changedProperties) {\n    super.firstUpdated(changedProperties);\n    this.style.setProperty(\"--mdc-theme-secondary\", \"var(--primary-color)\");\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host .mdc-fab--extended .mdc-fab__icon {\n        margin-inline-start: -8px;\n        margin-inline-end: 12px;\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          :host .mdc-fab--extended .mdc-fab__icon {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-fab\": HaFab;\n  }\n}\n","import {\n  mdiCog,\n  mdiContentDuplicate,\n  mdiHelpCircle,\n  mdiPlus,\n  mdiRobot,\n} from \"@mdi/js\";\nimport { html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { DataTableColumnContainer } from \"../../../components/data-table/ha-data-table\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-relative-time\";\nimport { showAutomationEditor, TagTrigger } from \"../../../data/automation\";\nimport {\n  createTag,\n  deleteTag,\n  EVENT_TAG_SCANNED,\n  fetchTags,\n  Tag,\n  TagScannedEvent,\n  updateTag,\n  UpdateTagParams,\n} from \"../../../data/tag\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-tabs-subpage-data-table\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport { configSections } from \"../ha-panel-config\";\nimport { showTagDetailDialog } from \"./show-dialog-tag-detail\";\nimport \"./tag-image\";\n\nexport interface TagRowData extends Tag {\n  last_scanned_datetime: Date | null;\n}\n\n@customElement(\"ha-config-tags\")\nexport class HaConfigTags extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public isWide!: boolean;\n\n  @property() public narrow!: boolean;\n\n  @property() public route!: Route;\n\n  @state() private _tags: Tag[] = [];\n\n  private get _canWriteTags() {\n    return this.hass.auth.external?.config.canWriteTag;\n  }\n\n  private _columns = memoizeOne(\n    (narrow: boolean, _language): DataTableColumnContainer => {\n      const columns: DataTableColumnContainer = {\n        icon: {\n          title: \"\",\n          label: this.hass.localize(\"ui.panel.config.tag.headers.icon\"),\n          type: \"icon\",\n          template: (_icon, tag) => html`<tag-image .tag=${tag}></tag-image>`,\n        },\n        display_name: {\n          title: this.hass.localize(\"ui.panel.config.tag.headers.name\"),\n          sortable: true,\n          filterable: true,\n          grows: true,\n          template: (name, tag: any) => html`${name}\n          ${narrow\n            ? html`<div class=\"secondary\">\n                ${tag.last_scanned_datetime\n                  ? html`<ha-relative-time\n                      .hass=${this.hass}\n                      .datetime=${tag.last_scanned_datetime}\n                      capitalize\n                    ></ha-relative-time>`\n                  : this.hass.localize(\"ui.panel.config.tag.never_scanned\")}\n              </div>`\n            : \"\"}`,\n        },\n      };\n      if (!narrow) {\n        columns.last_scanned_datetime = {\n          title: this.hass.localize(\"ui.panel.config.tag.headers.last_scanned\"),\n          sortable: true,\n          direction: \"desc\",\n          width: \"20%\",\n          template: (last_scanned_datetime) => html`\n            ${last_scanned_datetime\n              ? html`<ha-relative-time\n                  .hass=${this.hass}\n                  .datetime=${last_scanned_datetime}\n                  capitalize\n                ></ha-relative-time>`\n              : this.hass.localize(\"ui.panel.config.tag.never_scanned\")}\n          `,\n        };\n      }\n      if (this._canWriteTags) {\n        columns.write = {\n          title: \"\",\n          label: this.hass.localize(\"ui.panel.config.tag.headers.write\"),\n          type: \"icon-button\",\n          template: (_write, tag: any) => html` <ha-icon-button\n            .tag=${tag}\n            @click=${this._handleWriteClick}\n            .label=${this.hass.localize(\"ui.panel.config.tag.write\")}\n            .path=${mdiContentDuplicate}\n          ></ha-icon-button>`,\n        };\n      }\n      columns.automation = {\n        title: \"\",\n        type: \"icon-button\",\n        template: (_automation, tag: any) => html` <ha-icon-button\n          .tag=${tag}\n          @click=${this._handleAutomationClick}\n          .label=${this.hass.localize(\"ui.panel.config.tag.create_automation\")}\n          .path=${mdiRobot}\n        ></ha-icon-button>`,\n      };\n      columns.edit = {\n        title: \"\",\n        type: \"icon-button\",\n        template: (_settings, tag: any) => html` <ha-icon-button\n          .tag=${tag}\n          @click=${this._handleEditClick}\n          .label=${this.hass.localize(\"ui.panel.config.tag.edit\")}\n          .path=${mdiCog}\n        ></ha-icon-button>`,\n      };\n      return columns;\n    }\n  );\n\n  private _data = memoizeOne((tags: Tag[]): TagRowData[] =>\n    tags.map((tag) => ({\n      ...tag,\n      display_name: tag.name || tag.id,\n      last_scanned_datetime: tag.last_scanned\n        ? new Date(tag.last_scanned)\n        : null,\n    }))\n  );\n\n  protected firstUpdated(changedProperties: PropertyValues) {\n    super.firstUpdated(changedProperties);\n    this._fetchTags();\n  }\n\n  protected hassSubscribe() {\n    return [\n      this.hass.connection.subscribeEvents<TagScannedEvent>((ev) => {\n        const foundTag = this._tags.find((tag) => tag.id === ev.data.tag_id);\n        if (!foundTag) {\n          this._fetchTags();\n          return;\n        }\n        foundTag.last_scanned = ev.time_fired;\n        this._tags = [...this._tags];\n      }, EVENT_TAG_SCANNED),\n    ];\n  }\n\n  protected render() {\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        back-path=\"/config\"\n        .route=${this.route}\n        .tabs=${configSections.tags}\n        .columns=${this._columns(this.narrow, this.hass.language)}\n        .data=${this._data(this._tags)}\n        .noDataText=${this.hass.localize(\"ui.panel.config.tag.no_tags\")}\n        hasFab\n      >\n        <ha-icon-button\n          slot=\"toolbar-icon\"\n          @click=${this._showHelp}\n          .label=${this.hass.localize(\"ui.common.help\")}\n          .path=${mdiHelpCircle}\n        ></ha-icon-button>\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\"ui.panel.config.tag.add_tag\")}\n          extended\n          @click=${this._addTag}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  private _handleWriteClick = (ev: Event) =>\n    this._openWrite((ev.currentTarget as any).tag);\n\n  private _handleAutomationClick = (ev: Event) => {\n    const tag = (ev.currentTarget as any).tag;\n    const data = {\n      alias: this.hass.localize(\n        \"ui.panel.config.tag.automation_title\",\n        \"name\",\n        tag.name || tag.id\n      ),\n      trigger: [{ platform: \"tag\", tag_id: tag.id } as TagTrigger],\n    };\n    showAutomationEditor(data);\n  };\n\n  private _handleEditClick = (ev: Event) =>\n    this._openDialog((ev.currentTarget as any).tag);\n\n  private _showHelp() {\n    showAlertDialog(this, {\n      title: this.hass.localize(\"ui.panel.config.tag.caption\"),\n      text: html`\n        <p>\n          ${this.hass.localize(\n            \"ui.panel.config.tag.detail.usage\",\n            \"companion_link\",\n            html`<a\n              href=\"https://companion.home-assistant.io/\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              >${this.hass!.localize(\n                \"ui.panel.config.tag.detail.companion_apps\"\n              )}</a\n            >`\n          )}\n        </p>\n        <p>\n          <a\n            href=${documentationUrl(this.hass, \"/integrations/tag/\")}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            ${this.hass.localize(\"ui.panel.config.tag.learn_more\")}\n          </a>\n        </p>\n      `,\n    });\n  }\n\n  private async _fetchTags() {\n    this._tags = await fetchTags(this.hass);\n  }\n\n  private _openWrite(tag: Tag) {\n    this.hass.auth.external!.fireMessage({\n      type: \"tag/write\",\n      payload: { name: tag.name || null, tag: tag.id },\n    });\n  }\n\n  private _addTag() {\n    this._openDialog();\n  }\n\n  private _openDialog(entry?: Tag) {\n    showTagDetailDialog(this, {\n      entry,\n      openWrite: this._canWriteTags ? (tag) => this._openWrite(tag) : undefined,\n      createEntry: (values, tagId) => this._createTag(values, tagId),\n      updateEntry: entry\n        ? (values) => this._updateTag(entry, values)\n        : undefined,\n      removeEntry: entry ? () => this._removeTag(entry) : undefined,\n    });\n  }\n\n  private async _createTag(\n    values: Partial<UpdateTagParams>,\n    tagId?: string\n  ): Promise<Tag> {\n    const newTag = await createTag(this.hass, values, tagId);\n    this._tags = [...this._tags, newTag];\n    return newTag;\n  }\n\n  private async _updateTag(\n    selectedTag: Tag,\n    values: Partial<UpdateTagParams>\n  ): Promise<Tag> {\n    const updated = await updateTag(this.hass, selectedTag.id, values);\n    this._tags = this._tags.map((tag) =>\n      tag.id === selectedTag.id ? updated : tag\n    );\n    return updated;\n  }\n\n  private async _removeTag(selectedTag: Tag) {\n    if (\n      !(await showConfirmationDialog(this, {\n        title: this.hass!.localize(\"ui.panel.config.tag.confirm_remove_title\"),\n        text: this.hass.localize(\n          \"ui.panel.config.tag.confirm_remove\",\n          \"tag\",\n          selectedTag.name || selectedTag.id\n        ),\n        dismissText: this.hass!.localize(\"ui.common.cancel\"),\n        confirmText: this.hass!.localize(\"ui.common.remove\"),\n      }))\n    ) {\n      return false;\n    }\n    try {\n      await deleteTag(this.hass, selectedTag.id);\n      this._tags = this._tags.filter((tag) => tag.id !== selectedTag.id);\n      return true;\n    } catch (err: any) {\n      return false;\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-tags\": HaConfigTags;\n  }\n}\n","import { mdiNfcVariant } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../../../components/ha-svg-icon\";\nimport { TagRowData } from \"./ha-config-tags\";\n\n@customElement(\"tag-image\")\nexport class HaTagImage extends LitElement {\n  @property() public tag?: TagRowData;\n\n  private _timeout?: number;\n\n  protected updated() {\n    const msSinceLastScaned = this.tag?.last_scanned_datetime\n      ? new Date().getTime() - this.tag.last_scanned_datetime.getTime()\n      : undefined;\n\n    if (msSinceLastScaned && msSinceLastScaned < 1000) {\n      if (this._timeout) {\n        clearTimeout(this._timeout);\n        this._timeout = undefined;\n        this.classList.remove(\"just-scanned\");\n        requestAnimationFrame(() => this.classList.add(\"just-scanned\"));\n      } else {\n        this.classList.add(\"just-scanned\");\n      }\n      this._timeout = window.setTimeout(() => {\n        this.classList.remove(\"just-scanned\");\n        this._timeout = undefined;\n      }, 10000);\n    } else if (!msSinceLastScaned || msSinceLastScaned > 10000) {\n      clearTimeout(this._timeout);\n      this._timeout = undefined;\n      this.classList.remove(\"just-scanned\");\n    }\n  }\n\n  protected render() {\n    if (!this.tag) {\n      return html``;\n    }\n    return html`<div class=\"container\">\n      <div class=\"image\">\n        <ha-svg-icon .path=${mdiNfcVariant}></ha-svg-icon>\n      </div>\n    </div>`;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .image {\n        height: 100%;\n        width: 100%;\n        background-size: cover;\n        border-radius: 50%;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n      .container {\n        height: 40px;\n        width: 40px;\n        border-radius: 50%;\n      }\n      :host(.just-scanned) .container {\n        animation: glow 10s;\n      }\n      @keyframes glow {\n        0% {\n          box-shadow: 0px 0px 24px 0px rgba(var(--rgb-primary-color), 0);\n        }\n        10% {\n          box-shadow: 0px 0px 24px 0px rgba(var(--rgb-primary-color), 1);\n        }\n        100% {\n          box-shadow: 0px 0px 24px 0px rgba(var(--rgb-primary-color), 0);\n        }\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"tag-image\": HaTagImage;\n  }\n}\n"],"names":[],"sourceRoot":""}