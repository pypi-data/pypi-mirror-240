{"version":3,"file":"bb082fda.js","mappings":";;;;AAmUA;AACA;;;AAWA;;AAKA;AACA;;;AAUA;AACA;AAGA","sources":["webpack://home-assistant-frontend/./src/panels/my/ha-panel-my.ts"],"sourcesContent":["import { sanitizeUrl } from \"@braintree/sanitize-url\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../common/config/is_component_loaded\";\nimport { navigate } from \"../../common/navigate\";\nimport {\n  createSearchParam,\n  extractSearchParamsObject,\n} from \"../../common/url/search-params\";\nimport { domainToName } from \"../../data/integration\";\nimport \"../../layouts/hass-error-screen\";\nimport { HomeAssistant, Route } from \"../../types\";\nimport { documentationUrl } from \"../../util/documentation-url\";\n\nexport const getMyRedirects = (hasSupervisor: boolean): Redirects => ({\n  application_credentials: {\n    redirect: \"/config/application_credentials\",\n  },\n  developer_states: {\n    redirect: \"/developer-tools/state\",\n  },\n  developer_services: {\n    redirect: \"/developer-tools/service\",\n  },\n  developer_call_service: {\n    redirect: \"/developer-tools/service\",\n    params: {\n      service: \"string\",\n    },\n  },\n  developer_template: {\n    redirect: \"/developer-tools/template\",\n  },\n  developer_events: {\n    redirect: \"/developer-tools/event\",\n  },\n  developer_statistics: {\n    redirect: \"/developer-tools/statistics\",\n  },\n  server_controls: {\n    redirect: \"/developer-tools/yaml\",\n  },\n  config: {\n    redirect: \"/config/dashboard\",\n  },\n  cloud: {\n    component: \"cloud\",\n    redirect: \"/config/cloud\",\n  },\n  config_flow_start: {\n    redirect: \"/config/integrations/add\",\n    params: {\n      domain: \"string\",\n    },\n  },\n  integrations: {\n    redirect: \"/config/integrations\",\n  },\n  config_mqtt: {\n    component: \"mqtt\",\n    redirect: \"/config/mqtt\",\n  },\n  config_zha: {\n    component: \"zha\",\n    redirect: \"/config/zha/dashboard\",\n  },\n  config_zwave_js: {\n    component: \"zwave_js\",\n    redirect: \"/config/zwave_js/dashboard\",\n  },\n  config_energy: {\n    component: \"energy\",\n    redirect: \"/config/energy/dashboard\",\n  },\n  devices: {\n    redirect: \"/config/devices/dashboard\",\n  },\n  entities: {\n    redirect: \"/config/entities\",\n  },\n  energy: {\n    component: \"energy\",\n    redirect: \"/energy\",\n  },\n  areas: {\n    redirect: \"/config/areas/dashboard\",\n  },\n  blueprint_import: {\n    component: \"blueprint\",\n    redirect: \"/config/blueprint/dashboard/import\",\n    params: {\n      blueprint_url: \"url\",\n    },\n  },\n  blueprints: {\n    component: \"blueprint\",\n    redirect: \"/config/blueprint/dashboard\",\n  },\n  automations: {\n    component: \"automation\",\n    redirect: \"/config/automation/dashboard\",\n  },\n  scenes: {\n    component: \"scene\",\n    redirect: \"/config/scene/dashboard\",\n  },\n  scripts: {\n    component: \"script\",\n    redirect: \"/config/script/dashboard\",\n  },\n  helpers: {\n    redirect: \"/config/helpers\",\n  },\n  tags: {\n    component: \"tag\",\n    redirect: \"/config/tags\",\n  },\n  lovelace_dashboards: {\n    component: \"lovelace\",\n    redirect: \"/config/lovelace/dashboards\",\n  },\n  lovelace_resources: {\n    component: \"lovelace\",\n    redirect: \"/config/lovelace/resources\",\n  },\n  oauth: {\n    redirect: \"/auth/external/callback\",\n    navigate_outside_spa: true,\n    params: {\n      error: \"string?\",\n      code: \"string?\",\n      state: \"string\",\n    },\n  },\n  people: {\n    component: \"person\",\n    redirect: \"/config/person\",\n  },\n  zones: {\n    component: \"zone\",\n    redirect: \"/config/zone\",\n  },\n  users: {\n    redirect: \"/config/users\",\n  },\n  general: {\n    redirect: \"/config/general\",\n  },\n  logs: {\n    redirect: \"/config/logs\",\n  },\n  repairs: {\n    component: \"repairs\",\n    redirect: \"/config/repairs\",\n  },\n  info: {\n    redirect: \"/config/info\",\n  },\n  system_health: {\n    redirect: \"/config/repairs?dialog=system-health\",\n  },\n  hardware: {\n    redirect: \"/config/hardware\",\n  },\n  storage: {\n    redirect: \"/config/storage\",\n  },\n  network: {\n    redirect: \"/config/network\",\n  },\n  analytics: {\n    redirect: \"/config/analytics\",\n  },\n  updates: {\n    redirect: \"/config/updates\",\n  },\n  system_dashboard: {\n    redirect: \"/config/system\",\n  },\n  customize: {\n    // customize was removed in 2021.12, fallback to dashboard\n    redirect: \"/config/dashboard\",\n  },\n  profile: {\n    redirect: \"/profile\",\n  },\n  logbook: {\n    component: \"logbook\",\n    redirect: \"/logbook\",\n  },\n  history: {\n    component: \"history\",\n    redirect: \"/history\",\n  },\n  media_browser: {\n    component: \"media_source\",\n    redirect: \"/media-browser\",\n  },\n  backup: {\n    component: hasSupervisor ? \"hassio\" : \"backup\",\n    redirect: hasSupervisor ? \"/hassio/backups\" : \"/config/backup\",\n  },\n  supervisor_snapshots: {\n    component: hasSupervisor ? \"hassio\" : \"backup\",\n    redirect: hasSupervisor ? \"/hassio/backups\" : \"/config/backup\",\n  },\n  supervisor_backups: {\n    component: hasSupervisor ? \"hassio\" : \"backup\",\n    redirect: hasSupervisor ? \"/hassio/backups\" : \"/config/backup\",\n  },\n  supervisor_system: {\n    // Moved from Supervisor panel in 2022.5\n    redirect: \"/config/system\",\n  },\n  supervisor_logs: {\n    // Moved from Supervisor panel in 2022.5\n    redirect: \"/config/logs\",\n  },\n  supervisor_info: {\n    // Moved from Supervisor panel in 2022.5\n    redirect: \"/config/info\",\n  },\n  hacs_repository: {\n    component: \"hacs\",\n    redirect: \"/hacs/_my_redirect/hacs_repository\",\n    params: {\n      owner: \"string\",\n      repository: \"string\",\n      category: \"string?\",\n    },\n  },\n});\n\nconst getRedirect = (\n  path: string,\n  hasSupervisor: boolean\n): Redirect | undefined => getMyRedirects(hasSupervisor)?.[path];\n\nexport type ParamType = \"url\" | \"string\" | \"string?\";\n\nexport type Redirects = { [key: string]: Redirect };\nexport interface Redirect {\n  redirect: string;\n  // Set to True to use browser redirect instead of frontend navigation\n  navigate_outside_spa?: boolean;\n  component?: string;\n  params?: {\n    [key: string]: ParamType;\n  };\n  optional_params?: {\n    [key: string]: ParamType;\n  };\n}\n\n@customElement(\"ha-panel-my\")\nclass HaPanelMy extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public route!: Route;\n\n  @state() public _error?: string;\n\n  private _redirect?: Redirect;\n\n  connectedCallback() {\n    super.connectedCallback();\n    const path = this.route.path.substring(1);\n    const hasSupervisor = isComponentLoaded(this.hass, \"hassio\");\n\n    this._redirect = getRedirect(path, hasSupervisor);\n\n    if (path.startsWith(\"supervisor\") && this._redirect === undefined) {\n      if (!hasSupervisor) {\n        this._error = \"no_supervisor\";\n        return;\n      }\n      navigate(`/hassio/_my_redirect/${path}${window.location.search}`, {\n        replace: true,\n      });\n      return;\n    }\n\n    if (!this._redirect) {\n      this._error = \"not_supported\";\n      return;\n    }\n\n    if (\n      this._redirect.component &&\n      !isComponentLoaded(this.hass, this._redirect.component)\n    ) {\n      this._error = \"no_component\";\n      return;\n    }\n\n    let url: string;\n    try {\n      url = this._createRedirectUrl();\n    } catch (err: any) {\n      this._error = \"url_error\";\n      return;\n    }\n\n    if (this._redirect.navigate_outside_spa) {\n      location.assign(url);\n    } else {\n      navigate(url, { replace: true });\n    }\n  }\n\n  protected render() {\n    if (this._error) {\n      let error: string;\n      switch (this._error) {\n        case \"not_supported\":\n          error =\n            this.hass.localize(\n              \"ui.panel.my.not_supported\",\n              \"link\",\n              html`<a\n                target=\"_blank\"\n                rel=\"noreferrer noopener\"\n                href=\"https://my.home-assistant.io/faq.html#supported-pages\"\n                >${this.hass.localize(\"ui.panel.my.faq_link\")}</a\n              >`\n            ) || \"This redirect is not supported.\";\n          break;\n        case \"no_component\":\n          error =\n            this.hass.localize(\n              \"ui.panel.my.component_not_loaded\",\n              \"integration\",\n              html`<a\n                target=\"_blank\"\n                rel=\"noreferrer noopener\"\n                href=${documentationUrl(\n                  this.hass,\n                  `/integrations/${this._redirect!.component!}`\n                )}\n              >\n                ${domainToName(this.hass.localize, this._redirect!.component!)}\n              </a>`\n            ) || \"This redirect is not supported.\";\n          break;\n        case \"no_supervisor\":\n          error = this.hass.localize(\n            \"ui.panel.my.no_supervisor\",\n            \"docs_link\",\n            html`<a\n              target=\"_blank\"\n              rel=\"noreferrer noopener\"\n              href=${documentationUrl(this.hass, \"/installation\")}\n              >${this.hass.localize(\"ui.panel.my.documentation\")}</a\n            >`\n          );\n          break;\n        default:\n          error = this.hass.localize(\"ui.panel.my.error\") || \"Unknown error\";\n      }\n      return html`<hass-error-screen .error=${error}></hass-error-screen>`;\n    }\n    return html``;\n  }\n\n  private _createRedirectUrl(): string {\n    const params = this._createRedirectParams();\n    return `${this._redirect!.redirect}${params}`;\n  }\n\n  private _createRedirectParams(): string {\n    const params = extractSearchParamsObject();\n    if (!this._redirect!.params && !Object.keys(params).length) {\n      return \"\";\n    }\n    const resultParams = {};\n    for (const [key, type] of Object.entries(this._redirect!.params || {})) {\n      if (!params[key] && type.endsWith(\"?\")) {\n        continue;\n      }\n      if (!params[key] || !this._checkParamType(type, params[key])) {\n        throw Error();\n      }\n      resultParams[key] = params[key];\n    }\n    return `?${createSearchParam(resultParams)}`;\n  }\n\n  private _checkParamType(type: ParamType, value: string) {\n    if (type === \"string\" || type === \"string?\") {\n      return true;\n    }\n    if (type === \"url\") {\n      return value && value === sanitizeUrl(value);\n    }\n    return false;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-panel-my\": HaPanelMy;\n  }\n}\n"],"names":[],"sourceRoot":""}