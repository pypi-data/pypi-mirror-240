{"version":3,"file":"174d7e89.js","mappings":";;AA6FA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;;AAGA;;;;AAOA;;;AAOA;;;;AAcA;;AAEA;;;AAGA;;;AAnBA;;AAGA;;AAEA;;;;;AAsBA;;;AAIA;;AAIA;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkHA","sources":["webpack://home-assistant-frontend/./src/panels/config/application_credentials/ha-config-application-credentials.ts"],"sourcesContent":["import { mdiDelete, mdiPlus } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport memoizeOne from \"memoize-one\";\nimport type { HASSDomEvent } from \"../../../common/dom/fire_event\";\nimport { LocalizeFunc } from \"../../../common/translations/localize\";\nimport {\n  DataTableColumnContainer,\n  SelectionChangedEvent,\n} from \"../../../components/data-table/ha-data-table\";\nimport \"../../../components/data-table/ha-data-table-icon\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-help-tooltip\";\nimport \"../../../components/ha-svg-icon\";\nimport {\n  ApplicationCredential,\n  deleteApplicationCredential,\n  fetchApplicationCredentials,\n} from \"../../../data/application_credential\";\nimport { domainToName } from \"../../../data/integration\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-tabs-subpage-data-table\";\nimport type { HaTabsSubpageDataTable } from \"../../../layouts/hass-tabs-subpage-data-table\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { configSections } from \"../ha-panel-config\";\nimport { showAddApplicationCredentialDialog } from \"./show-dialog-add-application-credential\";\n\n@customElement(\"ha-config-application-credentials\")\nexport class HaConfigApplicationCredentials extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() public _applicationCredentials: ApplicationCredential[] = [];\n\n  @property() public isWide!: boolean;\n\n  @property() public narrow!: boolean;\n\n  @property() public route!: Route;\n\n  @state() private _selected: string[] = [];\n\n  @query(\"hass-tabs-subpage-data-table\", true)\n  private _dataTable!: HaTabsSubpageDataTable;\n\n  private _columns = memoizeOne(\n    (narrow: boolean, localize: LocalizeFunc): DataTableColumnContainer => {\n      const columns: DataTableColumnContainer<ApplicationCredential> = {\n        name: {\n          title: localize(\n            \"ui.panel.config.application_credentials.picker.headers.name\"\n          ),\n          direction: \"asc\",\n          grows: true,\n          template: (_, entry: ApplicationCredential) => html`${entry.name}`,\n        },\n        clientId: {\n          title: localize(\n            \"ui.panel.config.application_credentials.picker.headers.client_id\"\n          ),\n          width: \"30%\",\n          direction: \"asc\",\n          hidden: narrow,\n          template: (_, entry: ApplicationCredential) =>\n            html`${entry.client_id}`,\n        },\n        application: {\n          title: localize(\n            \"ui.panel.config.application_credentials.picker.headers.application\"\n          ),\n          sortable: true,\n          width: \"30%\",\n          direction: \"asc\",\n          template: (_, entry) => html`${domainToName(localize, entry.domain)}`,\n        },\n      };\n\n      return columns;\n    }\n  );\n\n  protected firstUpdated(changedProperties: PropertyValues) {\n    super.firstUpdated(changedProperties);\n    this._loadTranslations();\n    this._fetchApplicationCredentials();\n  }\n\n  protected render() {\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        backPath=\"/config\"\n        .tabs=${configSections.devices}\n        .columns=${this._columns(this.narrow, this.hass.localize)}\n        .data=${this._applicationCredentials}\n        hasFab\n        selectable\n        @selection-changed=${this._handleSelectionChanged}\n      >\n        ${this._selected.length\n          ? html`\n              <div\n                class=${classMap({\n                  \"header-toolbar\": this.narrow,\n                  \"table-header\": !this.narrow,\n                })}\n                slot=\"header\"\n              >\n                <p class=\"selected-txt\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.application_credentials.picker.selected\",\n                    \"number\",\n                    this._selected.length\n                  )}\n                </p>\n                <div class=\"header-btns\">\n                  ${!this.narrow\n                    ? html`\n                        <mwc-button\n                          @click=${this._removeSelected}\n                          class=\"warning\"\n                          >${this.hass.localize(\n                            \"ui.panel.config.application_credentials.picker.remove_selected.button\"\n                          )}</mwc-button\n                        >\n                      `\n                    : html`\n                        <ha-icon-button\n                          class=\"warning\"\n                          id=\"remove-btn\"\n                          @click=${this._removeSelected}\n                          .path=${mdiDelete}\n                          .label=${this.hass.localize(\"ui.common.remove\")}\n                        ></ha-icon-button>\n                        <ha-help-tooltip\n                          .label=${this.hass.localize(\n                            \"ui.panel.config.application_credentials.picker.remove_selected.button\"\n                          )}\n                        >\n                        </ha-help-tooltip>\n                      `}\n                </div>\n              </div>\n            `\n          : html``}\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.application_credentials.picker.add_application_credential\"\n          )}\n          extended\n          @click=${this._addApplicationCredential}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  private _handleSelectionChanged(\n    ev: HASSDomEvent<SelectionChangedEvent>\n  ): void {\n    this._selected = ev.detail.value;\n  }\n\n  private _removeSelected() {\n    showConfirmationDialog(this, {\n      title: this.hass.localize(\n        `ui.panel.config.application_credentials.picker.remove_selected.confirm_title`,\n        \"number\",\n        this._selected.length\n      ),\n      text: this.hass.localize(\n        \"ui.panel.config.application_credentials.picker.remove_selected.confirm_text\"\n      ),\n      confirmText: this.hass.localize(\"ui.common.remove\"),\n      dismissText: this.hass.localize(\"ui.common.cancel\"),\n      confirm: async () => {\n        try {\n          await Promise.all(\n            this._selected.map(async (applicationCredential) => {\n              await deleteApplicationCredential(\n                this.hass,\n                applicationCredential\n              );\n            })\n          );\n        } catch (err: any) {\n          showAlertDialog(this, {\n            title: this.hass.localize(\n              \"ui.panel.config.application_credentials.picker.remove_selected.error_title\"\n            ),\n            text: err.message,\n          });\n          return;\n        }\n        this._dataTable.clearSelection();\n        this._fetchApplicationCredentials();\n      },\n    });\n  }\n\n  private async _loadTranslations() {\n    await this.hass.loadBackendTranslation(\"title\", undefined, true);\n  }\n\n  private async _fetchApplicationCredentials() {\n    this._applicationCredentials = await fetchApplicationCredentials(this.hass);\n  }\n\n  private _addApplicationCredential() {\n    showAddApplicationCredentialDialog(this, {\n      applicationCredentialAddedCallback: async (\n        applicationCredential: ApplicationCredential\n      ) => {\n        if (applicationCredential) {\n          this._applicationCredentials = [\n            ...this._applicationCredentials,\n            applicationCredential,\n          ];\n        }\n      },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .table-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        height: 56px;\n        background-color: var(--mdc-text-field-fill-color, whitesmoke);\n        border-bottom: 1px solid\n          var(--mdc-text-field-idle-line-color, rgba(0, 0, 0, 0.42));\n        box-sizing: border-box;\n      }\n      .header-toolbar {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        color: var(--secondary-text-color);\n        position: relative;\n        top: -4px;\n      }\n      .selected-txt {\n        font-weight: bold;\n        padding-left: 16px;\n        padding-inline-start: 16px;\n        direction: var(--direction);\n      }\n      .table-header .selected-txt {\n        margin-top: 20px;\n      }\n      .header-toolbar .selected-txt {\n        font-size: 16px;\n      }\n      .header-toolbar .header-btns {\n        margin-right: -12px;\n      }\n      .header-btns {\n        display: flex;\n      }\n      .header-btns > mwc-button,\n      .header-btns > ha-icon-button {\n        margin: 8px;\n      }\n      ha-button-menu {\n        margin-left: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-application-credentials\": HaConfigApplicationCredentials;\n  }\n}\n"],"names":[],"sourceRoot":""}