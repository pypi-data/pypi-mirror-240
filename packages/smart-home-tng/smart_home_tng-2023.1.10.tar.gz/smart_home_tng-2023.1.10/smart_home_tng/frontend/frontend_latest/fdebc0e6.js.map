{"version":3,"file":"fdebc0e6.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkGA;;;;;ACzCA;AACA;;AAEA;AACA;;AAGA;AAGA;AACA;;AAEA;;;;AAKA;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA","sources":["webpack://home-assistant-frontend/./src/layouts/ha-app-layout.js","webpack://home-assistant-frontend/./src/panels/shopping-list/ha-panel-shopping-list.ts"],"sourcesContent":["/* eslint-plugin-disable lit */\n/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\nThis code is copied from app-header-layout.\n'fullbleed' support is removed as Home Assisstant doesn't use it.\ntransform: translate(0) is added.\n*/\n/*\n  FIXME(polymer-modulizer): the above comments were extracted\n  from HTML and may be out of place here. Review them and\n  then delete this comment!\n*/\nimport \"@polymer/app-layout/app-header-layout/app-header-layout\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport \"@polymer/polymer/polymer-element\";\n\nclass HaAppLayout extends customElements.get(\"app-header-layout\") {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n          /**\n         * Force app-header-layout to have its own stacking context so that its parent can\n         * control the stacking of it relative to other elements (e.g. app-drawer-layout).\n         * This could be done using \\`isolation: isolate\\`, but that's not well supported\n         * across browsers.\n         */\n          position: relative;\n          z-index: 0;\n        }\n\n        #wrapper ::slotted([slot=\"header\"]) {\n          @apply --layout-fixed-top;\n          z-index: 1;\n        }\n\n        #wrapper.initializing ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) {\n          height: 100%;\n        }\n\n        :host([has-scrolling-region]) #wrapper ::slotted([slot=\"header\"]) {\n          position: absolute;\n        }\n\n        :host([has-scrolling-region])\n          #wrapper.initializing\n          ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) #wrapper #contentContainer {\n          @apply --layout-fit;\n          overflow-y: auto;\n          -webkit-overflow-scrolling: touch;\n        }\n\n        :host([has-scrolling-region]) #wrapper.initializing #contentContainer {\n          position: relative;\n        }\n\n        #contentContainer {\n          /* Create a stacking context here so that all children appear below the header. */\n          position: relative;\n          z-index: 0;\n          /* Using 'transform' will cause 'position: fixed' elements to behave like\n           'position: absolute' relative to this element. */\n          transform: translate(0);\n          margin-left: env(safe-area-inset-left);\n          margin-right: env(safe-area-inset-right);\n        }\n\n        @media print {\n          :host([has-scrolling-region]) #wrapper #contentContainer {\n            overflow-y: visible;\n          }\n        }\n      </style>\n\n      <div id=\"wrapper\" class=\"initializing\">\n        <slot id=\"headerSlot\" name=\"header\"></slot>\n\n        <div id=\"contentContainer\"><slot></slot></div>\n        <slot id=\"fab\" name=\"fab\"></slot>\n      </div>\n    `;\n  }\n}\ncustomElements.define(\"ha-app-layout\", HaAppLayout);\n","import { mdiMicrophone } from \"@mdi/js\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../common/config/is_component_loaded\";\nimport \"../../components/ha-icon-button\";\nimport \"../../components/ha-menu-button\";\nimport { showVoiceCommandDialog } from \"../../dialogs/voice-command-dialog/show-ha-voice-command-dialog\";\nimport \"../../layouts/ha-app-layout\";\nimport { haStyle } from \"../../resources/styles\";\nimport { HomeAssistant } from \"../../types\";\nimport { HuiErrorCard } from \"../lovelace/cards/hui-error-card\";\nimport { createCardElement } from \"../lovelace/create-element/create-card-element\";\nimport { LovelaceCard } from \"../lovelace/types\";\n\n@customElement(\"ha-panel-shopping-list\")\nclass PanelShoppingList extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @state() private _card!: LovelaceCard | HuiErrorCard;\n\n  private _conversation = memoizeOne((_components) =>\n    isComponentLoaded(this.hass, \"conversation\")\n  );\n\n  protected firstUpdated(changedProperties: PropertyValues): void {\n    super.firstUpdated(changedProperties);\n\n    this._card = createCardElement({ type: \"shopping-list\" }) as LovelaceCard;\n    this._card.hass = this.hass;\n  }\n\n  protected updated(changedProperties: PropertyValues): void {\n    super.updated(changedProperties);\n\n    if (changedProperties.has(\"hass\")) {\n      this._card.hass = this.hass;\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-app-layout>\n        <app-header fixed slot=\"header\">\n          <app-toolbar>\n            <ha-menu-button\n              .hass=${this.hass}\n              .narrow=${this.narrow}\n            ></ha-menu-button>\n            <div main-title>${this.hass.localize(\"panel.shopping_list\")}</div>\n            ${this._conversation(this.hass.config.components)\n              ? html`\n                  <ha-icon-button\n                    .label=${this.hass!.localize(\n                      \"ui.panel.shopping_list.start_conversation\"\n                    )}\n                    .path=${mdiMicrophone}\n                    @click=${this._showVoiceCommandDialog}\n                  ></ha-icon-button>\n                `\n              : \"\"}\n          </app-toolbar>\n        </app-header>\n        <div id=\"columns\">\n          <div class=\"column\">${this._card}</div>\n        </div>\n      </ha-app-layout>\n    `;\n  }\n\n  private _showVoiceCommandDialog(): void {\n    showVoiceCommandDialog(this);\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          display: block;\n          height: 100%;\n        }\n        app-header {\n          --mdc-theme-primary: var(--app-header-text-color);\n        }\n        :host([narrow]) app-toolbar mwc-button {\n          width: 65px;\n        }\n        .heading {\n          overflow: hidden;\n          white-space: nowrap;\n          margin-top: 4px;\n        }\n        #columns {\n          display: flex;\n          flex-direction: row;\n          justify-content: center;\n          margin-left: 4px;\n          margin-right: 4px;\n        }\n        .column {\n          flex: 1 0 0;\n          max-width: 500px;\n          min-width: 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-panel-shopping-list\": PanelShoppingList;\n  }\n}\n"],"names":[],"sourceRoot":""}