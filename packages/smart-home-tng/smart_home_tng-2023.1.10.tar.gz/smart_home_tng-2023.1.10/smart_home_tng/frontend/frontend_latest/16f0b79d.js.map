{"version":3,"file":"16f0b79d.js","mappings":";;;;AAgBA;;;;ACFA;ACQA;AACA;;AAGA;;;;;;;AAQA;;AAGA;;AAIA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;ACnEA;;AAEA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;;;;;;;;ACjGA;;;;ACHA;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;;AC7BA;AACA;;AAEA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoFA;;;;;;;;;;AAWA;ACnFA;;AAIA;AAEA;;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;;ACGA;AACA;AACA;AACA;;AAGA;AAGA;AAEA;;AAGA;;AAIA;;AAGA;;AAGA;AACA;;;;AAKA;;AAGA;AACA;AACA;;AAGA;;AAIA;AACA;AACA;;AAGA;;;;;AAUA;AACA;;;AAGA;;;;AAIA;AACA;;;AAGA;;;AAKA;;;AAKA;;;;AAMA;AACA;;;;AAKA;;AAEA;;AAIA;AAEA;AACA;;;;AAIA;AACA;;AAEA;;;;AAKA;AAEA;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiNA;;AC7VA;AACA;AACA;AACA;AACA;;AAGA;;ACvCA;;AAIA;;;;AAKA;AACA;;AAEA;;;AAGA;AACA;AACA;;;;AAtBA;;;;AAkFA","sources":["webpack://home-assistant-frontend/./src/components/ha-check-list-item.ts","webpack://home-assistant-frontend/./src/components/ha-checkbox.ts","webpack://home-assistant-frontend/./src/components/ha-chip.ts","webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-input-helper-text.ts","webpack://home-assistant-frontend/./src/components/ha-radio.ts","webpack://home-assistant-frontend/./src/components/ha-select.ts","webpack://home-assistant-frontend/./src/components/ha-textfield.ts","webpack://home-assistant-frontend/./src/components/user/ha-user-badge.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/view-editor/hui-dialog-edit-view.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/view-editor/hui-view-editor.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/view-editor/hui-view-visibility-editor.ts"],"sourcesContent":["import { css } from \"lit\";\nimport { CheckListItemBase } from \"@material/mwc-list/mwc-check-list-item-base\";\nimport { styles as controlStyles } from \"@material/mwc-list/mwc-control-list-item.css\";\nimport { styles } from \"@material/mwc-list/mwc-list-item.css\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-check-list-item\")\nexport class HaCheckListItem extends CheckListItemBase {\n  static override styles = [\n    styles,\n    controlStyles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-check-list-item\": HaCheckListItem;\n  }\n}\n","import { CheckboxBase } from \"@material/mwc-checkbox/mwc-checkbox-base\";\nimport { styles } from \"@material/mwc-checkbox/mwc-checkbox.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-checkbox\")\nexport class HaCheckbox extends CheckboxBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-checkbox\": HaCheckbox;\n  }\n}\n","// @ts-ignore\nimport chipStyles from \"@material/chips/dist/mdc.chips.min.css\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  TemplateResult,\n  unsafeCSS,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-chip\")\nexport class HaChip extends LitElement {\n  @property({ type: Boolean }) public hasIcon = false;\n\n  @property({ type: Boolean }) public hasTrailingIcon = false;\n\n  @property({ type: Boolean }) public noText = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"mdc-chip ${this.noText ? \"no-text\" : \"\"}\">\n        ${this.hasIcon\n          ? html`<div class=\"mdc-chip__icon mdc-chip__icon--leading\">\n              <slot name=\"icon\"></slot>\n            </div>`\n          : null}\n        <div class=\"mdc-chip__ripple\"></div>\n        <span role=\"gridcell\">\n          <span role=\"button\" tabindex=\"0\" class=\"mdc-chip__primary-action\">\n            <span class=\"mdc-chip__text\"><slot></slot></span>\n          </span>\n        </span>\n        ${this.hasTrailingIcon\n          ? html`<div class=\"mdc-chip__icon mdc-chip__icon--trailing\">\n              <slot name=\"trailing-icon\"></slot>\n            </div>`\n          : null}\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ${unsafeCSS(chipStyles)}\n      .mdc-chip {\n        background-color: var(\n          --ha-chip-background-color,\n          rgba(var(--rgb-primary-text-color), 0.15)\n        );\n        color: var(--ha-chip-text-color, var(--primary-text-color));\n      }\n\n      .mdc-chip.no-text {\n        padding: 0 10px;\n      }\n\n      .mdc-chip:hover {\n        color: var(--ha-chip-text-color, var(--primary-text-color));\n      }\n\n      .mdc-chip__icon--leading,\n      .mdc-chip__icon--trailing {\n        --mdc-icon-size: 18px;\n        line-height: 14px;\n        color: var(--ha-chip-icon-color, var(--ha-chip-text-color));\n      }\n      .mdc-chip.mdc-chip--selected .mdc-chip__checkmark,\n      .mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden) {\n        margin-right: -4px;\n        margin-inline-start: -4px;\n        margin-inline-end: 4px;\n        direction: var(--direction);\n      }\n\n      span[role=\"gridcell\"] {\n        line-height: 14px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-chip\": HaChip;\n  }\n}\n","import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-input-helper-text\")\nclass InputHelperText extends LitElement {\n  protected render(): TemplateResult {\n    return html`<slot></slot>`;\n  }\n\n  static styles = css`\n    :host {\n      display: block;\n      color: var(--mdc-text-field-label-ink-color, rgba(0, 0, 0, 0.6));\n      font-size: 0.75rem;\n      padding-left: 16px;\n      padding-right: 16px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input-helper-text\": InputHelperText;\n  }\n}\n","import { RadioBase } from \"@material/mwc-radio/mwc-radio-base\";\nimport { styles } from \"@material/mwc-radio/mwc-radio.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-radio\")\nexport class HaRadio extends RadioBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-radio\": HaRadio;\n  }\n}\n","import { SelectBase } from \"@material/mwc-select/mwc-select-base\";\nimport { styles } from \"@material/mwc-select/mwc-select.css\";\nimport { css, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { debounce } from \"../common/util/debounce\";\nimport { nextRender } from \"../common/util/render-status\";\n\n@customElement(\"ha-select\")\nexport class HaSelect extends SelectBase {\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  protected override renderLeadingIcon() {\n    if (!this.icon) {\n      return nothing;\n    }\n\n    return html`<span class=\"mdc-select__icon\"\n      ><slot name=\"icon\"></slot\n    ></span>`;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"translations-updated\", this._translationsUpdated);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\n      \"translations-updated\",\n      this._translationsUpdated\n    );\n  }\n\n  private _translationsUpdated = debounce(async () => {\n    await nextRender();\n    this.layoutOptions();\n  }, 500);\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-select:not(.mdc-select--disabled) .mdc-select__icon {\n        color: var(--secondary-text-color);\n      }\n      .mdc-select__anchor {\n        width: var(--ha-select-min-width, 200px);\n      }\n      .mdc-select--filled .mdc-floating-label {\n        inset-inline-start: 12px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select--filled.mdc-select--with-leading-icon .mdc-floating-label {\n        inset-inline-start: 48px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select .mdc-select__anchor {\n        padding-inline-start: 12px;\n        padding-inline-end: 0px;\n        direction: var(--direction);\n      }\n      .mdc-select__anchor .mdc-floating-label--float-above {\n        transform-origin: var(--float-start);\n      }\n    `,\n  ];\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-select\": HaSelect;\n  }\n}\n","import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { TemplateResult, html, PropertyValues, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public iconTrailing?: boolean;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      (changedProperties.has(\"invalid\") &&\n        (this.invalid || changedProperties.get(\"invalid\") !== undefined)) ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid ? this.errorMessage || \"Invalid\" : \"\"\n      );\n      this.reportValidity();\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n        padding-inline-start: var(--text-field-suffix-padding-left, 12px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 0px);\n        direction: var(--direction);\n      }\n      .mdc-text-field--with-leading-icon {\n        padding-inline-start: var(--text-field-suffix-padding-left, 0px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 16px);\n        direction: var(--direction);\n      }\n\n      .mdc-text-field:not(.mdc-text-field--disabled)\n        .mdc-text-field__affix--suffix {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon--leading {\n        margin-inline-start: 16px;\n        margin-inline-end: 8px;\n        direction: var(--direction);\n      }\n\n      input {\n        text-align: var(--text-field-text-align, start);\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n\n      .mdc-floating-label {\n        inset-inline-start: 16px !important;\n        inset-inline-end: initial !important;\n        transform-origin: var(--float-start);\n        direction: var(--direction);\n        transform-origin: var(--float-start);\n      }\n\n      .mdc-text-field--with-leading-icon.mdc-text-field--filled\n        .mdc-floating-label {\n        max-width: calc(100% - 48px);\n        inset-inline-start: 48px !important;\n        inset-inline-end: initial !important;\n        direction: var(--direction);\n      }\n\n      .mdc-text-field__input[type=\"number\"] {\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          .mdc-text-field__affix--suffix,\n          .mdc-text-field--with-leading-icon,\n          .mdc-text-field__icon--leading,\n          .mdc-floating-label,\n          .mdc-text-field--with-leading-icon.mdc-text-field--filled\n            .mdc-floating-label,\n          .mdc-text-field__input[type=\"number\"] {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { computeStateDomain } from \"../../common/entity/compute_state_domain\";\nimport { computeUserInitials, User } from \"../../data/user\";\nimport { CurrentUser, HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-user-badge\")\nclass UserBadge extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public user?: User | CurrentUser;\n\n  @state() private _personPicture?: string;\n\n  private _personEntityId?: string;\n\n  public willUpdate(changedProps: PropertyValues<this>) {\n    super.willUpdate(changedProps);\n    if (changedProps.has(\"user\")) {\n      this._getPersonPicture();\n      return;\n    }\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (\n      this._personEntityId &&\n      oldHass &&\n      this.hass.states[this._personEntityId] !==\n        oldHass.states[this._personEntityId]\n    ) {\n      const entityState = this.hass.states[this._personEntityId];\n      if (entityState) {\n        this._personPicture = entityState.attributes.entity_picture;\n      } else {\n        this._getPersonPicture();\n      }\n    } else if (!this._personEntityId && oldHass) {\n      this._getPersonPicture();\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this.user) {\n      return html``;\n    }\n    const picture = this._personPicture;\n\n    if (picture) {\n      return html`<div\n        style=${styleMap({ backgroundImage: `url(${picture})` })}\n        class=\"picture\"\n      ></div>`;\n    }\n    const initials = computeUserInitials(this.user.name);\n    return html`<div\n      class=\"initials ${classMap({ long: initials!.length > 2 })}\"\n    >\n      ${initials}\n    </div>`;\n  }\n\n  private _getPersonPicture() {\n    this._personEntityId = undefined;\n    this._personPicture = undefined;\n    if (!this.hass || !this.user) {\n      return;\n    }\n    for (const entity of Object.values(this.hass.states)) {\n      if (\n        entity.attributes.user_id === this.user.id &&\n        computeStateDomain(entity) === \"person\"\n      ) {\n        this._personEntityId = entity.entity_id;\n        this._personPicture = entity.attributes.entity_picture;\n        break;\n      }\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: contents;\n      }\n      .picture {\n        width: 40px;\n        height: 40px;\n        background-size: cover;\n        border-radius: 50%;\n      }\n      .initials {\n        display: inline-block;\n        box-sizing: border-box;\n        width: 40px;\n        line-height: 40px;\n        border-radius: 50%;\n        text-align: center;\n        background-color: var(--light-primary-color);\n        text-decoration: none;\n        color: var(--text-light-primary-color, var(--primary-text-color));\n        overflow: hidden;\n      }\n      .initials.long {\n        font-size: 80%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-user-badge\": UserBadge;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-tabs/paper-tab\";\nimport \"@polymer/paper-tabs/paper-tabs\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent, HASSDomEvent } from \"../../../../common/dom/fire_event\";\nimport { navigate } from \"../../../../common/navigate\";\nimport \"../../../../components/ha-circular-progress\";\nimport \"../../../../components/ha-dialog\";\nimport \"../../../../components/ha-alert\";\nimport type {\n  LovelaceBadgeConfig,\n  LovelaceCardConfig,\n  LovelaceViewConfig,\n} from \"../../../../data/lovelace\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyleDialog } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport \"../../components/hui-entity-editor\";\nimport { addView, deleteView, replaceView } from \"../config-util\";\nimport \"../hui-badge-preview\";\nimport { processEditorEntities } from \"../process-editor-entities\";\nimport {\n  EntitiesEditorEvent,\n  ViewEditEvent,\n  ViewVisibilityChangeEvent,\n} from \"../types\";\nimport \"./hui-view-editor\";\nimport \"./hui-view-visibility-editor\";\nimport { EditViewDialogParams } from \"./show-edit-view-dialog\";\nimport {\n  DEFAULT_VIEW_LAYOUT,\n  PANEL_VIEW_LAYOUT,\n  VIEWS_NO_BADGE_SUPPORT,\n} from \"../../views/const\";\nimport { deepEqual } from \"../../../../common/util/deep-equal\";\n\n@customElement(\"hui-dialog-edit-view\")\nexport class HuiDialogEditView extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _params?: EditViewDialogParams;\n\n  @state() private _config?: LovelaceViewConfig;\n\n  @state() private _badges?: LovelaceBadgeConfig[];\n\n  @state() private _cards?: LovelaceCardConfig[];\n\n  @state() private _saving = false;\n\n  @state() private _curTab?: string;\n\n  @state() private _dirty = false;\n\n  private _curTabIndex = 0;\n\n  get _type(): string {\n    if (!this._config) {\n      return DEFAULT_VIEW_LAYOUT;\n    }\n    return this._config.panel\n      ? PANEL_VIEW_LAYOUT\n      : this._config.type || DEFAULT_VIEW_LAYOUT;\n  }\n\n  public showDialog(params: EditViewDialogParams): void {\n    this._params = params;\n\n    if (this._params.viewIndex === undefined) {\n      this._config = {};\n      this._badges = [];\n      this._cards = [];\n      this._dirty = false;\n    } else {\n      const { cards, badges, ...viewConfig } =\n        this._params.lovelace!.config.views[this._params.viewIndex];\n      this._config = viewConfig;\n      this._badges = badges ? processEditorEntities(badges) : [];\n      this._cards = cards;\n    }\n  }\n\n  public closeDialog(): void {\n    this._curTabIndex = 0;\n    this._params = undefined;\n    this._config = {};\n    this._badges = [];\n    this._dirty = false;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  private get _viewConfigTitle(): string {\n    if (!this._config || !this._config.title) {\n      return this.hass!.localize(\"ui.panel.lovelace.editor.edit_view.header\");\n    }\n\n    return this.hass!.localize(\n      \"ui.panel.lovelace.editor.edit_view.header_name\",\n      \"name\",\n      this._config.title\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n\n    let content;\n    switch (this._curTab) {\n      case \"tab-settings\":\n        content = html`\n          <hui-view-editor\n            .isNew=${this._params.viewIndex === undefined}\n            .hass=${this.hass}\n            .config=${this._config}\n            @view-config-changed=${this._viewConfigChanged}\n          ></hui-view-editor>\n        `;\n        break;\n      case \"tab-badges\":\n        content = html`\n          ${this._badges?.length\n            ? html`\n                ${VIEWS_NO_BADGE_SUPPORT.includes(this._type)\n                  ? html`\n                      <ha-alert alert-type=\"warning\">\n                        ${this.hass!.localize(\n                          \"ui.panel.lovelace.editor.edit_badges.view_no_badges\"\n                        )}\n                      </ha-alert>\n                    `\n                  : \"\"}\n                <div class=\"preview-badges\">\n                  ${this._badges.map(\n                    (badgeConfig) => html`\n                      <hui-badge-preview\n                        .hass=${this.hass}\n                        .config=${badgeConfig}\n                      ></hui-badge-preview>\n                    `\n                  )}\n                </div>\n              `\n            : \"\"}\n          <hui-entity-editor\n            .hass=${this.hass}\n            .entities=${this._badges}\n            @entities-changed=${this._badgesChanged}\n          ></hui-entity-editor>\n        `;\n        break;\n      case \"tab-visibility\":\n        content = html`\n          <hui-view-visibility-editor\n            .hass=${this.hass}\n            .config=${this._config}\n            @view-visibility-changed=${this._viewVisibilityChanged}\n          ></hui-view-visibility-editor>\n        `;\n        break;\n      case \"tab-cards\":\n        content = html` Cards `;\n        break;\n    }\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        escapeKeyAction\n        @closed=${this.closeDialog}\n        .heading=${this._viewConfigTitle}\n      >\n        <div slot=\"heading\">\n          <h2>${this._viewConfigTitle}</h2>\n          <paper-tabs\n            scrollable\n            hide-scroll-buttons\n            .selected=${this._curTabIndex}\n            @selected-item-changed=${this._handleTabSelected}\n          >\n            <paper-tab id=\"tab-settings\" dialogInitialFocus\n              >${this.hass!.localize(\n                \"ui.panel.lovelace.editor.edit_view.tab_settings\"\n              )}</paper-tab\n            >\n            <paper-tab id=\"tab-badges\"\n              >${this.hass!.localize(\n                \"ui.panel.lovelace.editor.edit_view.tab_badges\"\n              )}</paper-tab\n            >\n            <paper-tab id=\"tab-visibility\"\n              >${this.hass!.localize(\n                \"ui.panel.lovelace.editor.edit_view.tab_visibility\"\n              )}</paper-tab\n            >\n          </paper-tabs>\n        </div>\n        ${content}\n        ${this._params.viewIndex !== undefined\n          ? html`\n              <mwc-button\n                class=\"warning\"\n                slot=\"secondaryAction\"\n                @click=${this._deleteConfirm}\n              >\n                ${this.hass!.localize(\n                  \"ui.panel.lovelace.editor.edit_view.delete\"\n                )}\n              </mwc-button>\n            `\n          : \"\"}\n        <mwc-button @click=${this.closeDialog} slot=\"primaryAction\"\n          >${this.hass!.localize(\"ui.common.cancel\")}</mwc-button\n        >\n        <mwc-button\n          slot=\"primaryAction\"\n          ?disabled=${!this._config || this._saving || !this._dirty}\n          @click=${this._save}\n        >\n          ${this._saving\n            ? html`<ha-circular-progress\n                active\n                size=\"small\"\n                title=\"Saving\"\n              ></ha-circular-progress>`\n            : \"\"}\n          ${this.hass!.localize(\"ui.common.save\")}</mwc-button\n        >\n      </ha-dialog>\n    `;\n  }\n\n  private async _delete(): Promise<void> {\n    if (!this._params) {\n      return;\n    }\n    try {\n      await this._params.lovelace!.saveConfig(\n        deleteView(this._params.lovelace!.config, this._params.viewIndex!)\n      );\n      this.closeDialog();\n      navigate(`/${window.location.pathname.split(\"/\")[1]}`);\n    } catch (err: any) {\n      showAlertDialog(this, {\n        text: `Deleting failed: ${err.message}`,\n      });\n    }\n  }\n\n  private _deleteConfirm(): void {\n    showConfirmationDialog(this, {\n      title: this.hass!.localize(\n        `ui.panel.lovelace.views.confirm_delete${\n          this._cards?.length ? `_existing_cards` : \"\"\n        }`\n      ),\n      text: this.hass!.localize(\n        `ui.panel.lovelace.views.confirm_delete${\n          this._cards?.length ? \"_existing_cards\" : \"\"\n        }_text`,\n        \"name\",\n        this._config?.title || \"Unnamed view\",\n        \"number\",\n        this._cards?.length || 0\n      ),\n      confirm: () => this._delete(),\n    });\n  }\n\n  private _handleTabSelected(ev: CustomEvent): void {\n    if (!ev.detail.value) {\n      return;\n    }\n    this._curTab = ev.detail.value.id;\n  }\n\n  private async _save(): Promise<void> {\n    if (!this._params || !this._config) {\n      return;\n    }\n    if (!this._isConfigChanged()) {\n      this.closeDialog();\n      return;\n    }\n\n    this._saving = true;\n\n    const viewConf: LovelaceViewConfig = {\n      ...this._config,\n      badges: this._badges,\n      cards: this._cards,\n    };\n\n    const lovelace = this._params.lovelace!;\n\n    try {\n      await lovelace.saveConfig(\n        this._creatingView\n          ? addView(lovelace.config, viewConf)\n          : replaceView(lovelace.config, this._params.viewIndex!, viewConf)\n      );\n      if (this._params.saveCallback) {\n        this._params.saveCallback(\n          this._params.viewIndex || lovelace.config.views.length,\n          viewConf\n        );\n      }\n      this.closeDialog();\n    } catch (err: any) {\n      showAlertDialog(this, {\n        text: `Saving failed: ${err.message}`,\n      });\n    } finally {\n      this._saving = false;\n    }\n  }\n\n  private _viewConfigChanged(ev: ViewEditEvent): void {\n    if (\n      ev.detail &&\n      ev.detail.config &&\n      !deepEqual(this._config, ev.detail.config)\n    ) {\n      this._config = ev.detail.config;\n      this._dirty = true;\n    }\n  }\n\n  private _viewVisibilityChanged(\n    ev: HASSDomEvent<ViewVisibilityChangeEvent>\n  ): void {\n    if (ev.detail.visible && this._config) {\n      this._config.visible = ev.detail.visible;\n    }\n    this._dirty = true;\n  }\n\n  private _badgesChanged(ev: EntitiesEditorEvent): void {\n    if (!this._badges || !this.hass || !ev.detail || !ev.detail.entities) {\n      return;\n    }\n    this._badges = processEditorEntities(ev.detail.entities);\n    this._dirty = true;\n  }\n\n  private _isConfigChanged(): boolean {\n    return (\n      this._creatingView ||\n      JSON.stringify(this._config) !==\n        JSON.stringify(\n          this._params!.lovelace!.config.views[this._params!.viewIndex!]\n        )\n    );\n  }\n\n  private get _creatingView(): boolean {\n    return this._params!.viewIndex === undefined;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        h2 {\n          display: block;\n          color: var(--primary-text-color);\n          line-height: normal;\n          -moz-osx-font-smoothing: grayscale;\n          -webkit-font-smoothing: antialiased;\n          font-family: Roboto, sans-serif;\n          font-family: var(\n            --mdc-typography-headline6-font-family,\n            var(--mdc-typography-font-family, Roboto, sans-serif)\n          );\n          font-size: 1.25rem;\n          font-size: var(--mdc-typography-headline6-font-size, 1.25rem);\n          line-height: 2rem;\n          line-height: var(--mdc-typography-headline6-line-height, 2rem);\n          font-weight: 500;\n          font-weight: var(--mdc-typography-headline6-font-weight, 500);\n          letter-spacing: 0.0125em;\n          letter-spacing: var(\n            --mdc-typography-headline6-letter-spacing,\n            0.0125em\n          );\n          text-decoration: inherit;\n          text-decoration: var(\n            --mdc-typography-headline6-text-decoration,\n            inherit\n          );\n          text-transform: inherit;\n          text-transform: var(\n            --mdc-typography-headline6-text-transform,\n            inherit\n          );\n          position: relative;\n          flex-shrink: 0;\n          box-sizing: border-box;\n          margin: 0;\n          padding: 20px 24px 9px;\n          border-bottom: 1px solid transparent;\n        }\n        paper-tabs {\n          --paper-tabs-selection-bar-color: var(--primary-color);\n          color: var(--primary-text-color);\n          text-transform: uppercase;\n          border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n          padding: 0 20px;\n        }\n        mwc-button.warning {\n          margin-right: auto;\n        }\n        ha-circular-progress {\n          display: none;\n        }\n        ha-circular-progress[active] {\n          display: block;\n        }\n        .hidden {\n          display: none;\n        }\n        .error {\n          color: var(--error-color);\n          border-bottom: 1px solid var(--error-color);\n        }\n        .preview-badges {\n          display: flex;\n          justify-content: center;\n          margin: 12px 16px;\n          flex-wrap: wrap;\n        }\n\n        @media all and (min-width: 600px) {\n          ha-dialog {\n            --mdc-dialog-min-width: 600px;\n          }\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-dialog-edit-view\": HuiDialogEditView;\n  }\n}\n","import \"../../../../components/ha-form/ha-form\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { slugify } from \"../../../../common/string/slugify\";\nimport type { LocalizeFunc } from \"../../../../common/translations/localize\";\nimport type { SchemaUnion } from \"../../../../components/ha-form/types\";\nimport type { LovelaceViewConfig } from \"../../../../data/lovelace\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport {\n  DEFAULT_VIEW_LAYOUT,\n  PANEL_VIEW_LAYOUT,\n  SIDEBAR_VIEW_LAYOUT,\n} from \"../../views/const\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"view-config-changed\": {\n      config: LovelaceViewConfig;\n    };\n  }\n}\n\n@customElement(\"hui-view-editor\")\nexport class HuiViewEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public isNew!: boolean;\n\n  @state() private _config!: LovelaceViewConfig;\n\n  private _suggestedPath = false;\n\n  private _schema = memoizeOne(\n    (localize: LocalizeFunc) =>\n      [\n        { name: \"title\", selector: { text: {} } },\n        {\n          name: \"icon\",\n          selector: {\n            icon: {},\n          },\n        },\n        { name: \"path\", selector: { text: {} } },\n        { name: \"theme\", selector: { theme: {} } },\n        {\n          name: \"type\",\n          selector: {\n            select: {\n              options: (\n                [\n                  DEFAULT_VIEW_LAYOUT,\n                  SIDEBAR_VIEW_LAYOUT,\n                  PANEL_VIEW_LAYOUT,\n                ] as const\n              ).map((type) => ({\n                value: type,\n                label: localize(\n                  `ui.panel.lovelace.editor.edit_view.types.${type}`\n                ),\n              })),\n            },\n          },\n        },\n      ] as const\n  );\n\n  set config(config: LovelaceViewConfig) {\n    this._config = config;\n  }\n\n  get _type(): string {\n    if (!this._config) {\n      return DEFAULT_VIEW_LAYOUT;\n    }\n    return this._config.panel\n      ? PANEL_VIEW_LAYOUT\n      : this._config.type || DEFAULT_VIEW_LAYOUT;\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n\n    const schema = this._schema(this.hass.localize);\n    const data = {\n      theme: \"Backend-selected\",\n      ...this._config,\n      type: this._type,\n    };\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${data}\n        .schema=${schema}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    const config = ev.detail.value;\n\n    if (config.type === \"masonry\") {\n      delete config.type;\n    }\n\n    if (\n      this.isNew &&\n      !this._suggestedPath &&\n      config.title &&\n      (!this._config.path ||\n        config.path === slugify(this._config.title || \"\", \"-\"))\n    ) {\n      config.path = slugify(config.title, \"-\");\n    }\n\n    fireEvent(this, \"view-config-changed\", { config });\n  }\n\n  private _computeLabelCallback = (\n    schema: SchemaUnion<ReturnType<typeof this._schema>>\n  ) => {\n    switch (schema.name) {\n      case \"path\":\n        return this.hass!.localize(\"ui.panel.lovelace.editor.card.generic.url\");\n      case \"type\":\n        return this.hass.localize(\"ui.panel.lovelace.editor.edit_view.type\");\n      default:\n        return this.hass!.localize(\n          `ui.panel.lovelace.editor.card.generic.${schema.name}`\n        );\n    }\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-view-editor\": HuiViewEditor;\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { stringCompare } from \"../../../../common/string/compare\";\nimport { HaSwitch } from \"../../../../components/ha-switch\";\nimport \"../../../../components/user/ha-user-badge\";\nimport { LovelaceViewConfig, ShowViewConfig } from \"../../../../data/lovelace\";\nimport { fetchUsers, User } from \"../../../../data/user\";\nimport { HomeAssistant } from \"../../../../types\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"view-visibility-changed\": {\n      visible: ShowViewConfig[];\n    };\n  }\n}\n\n@customElement(\"hui-view-visibility-editor\")\nexport class HuiViewVisibilityEditor extends LitElement {\n  set config(config: LovelaceViewConfig) {\n    this._config = config;\n    this._visible =\n      this._config.visible === undefined ? true : this._config.visible;\n  }\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public _config!: LovelaceViewConfig;\n\n  @state() private _users!: User[];\n\n  @state() private _visible!: boolean | ShowViewConfig[];\n\n  private _sortedUsers = memoizeOne((users: User[]) =>\n    users.sort((a, b) => stringCompare(a.name, b.name))\n  );\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n\n    fetchUsers(this.hass).then((users) => {\n      this._users = users.filter((user) => !user.system_generated);\n      fireEvent(this, \"iron-resize\");\n    });\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._users) {\n      return html``;\n    }\n\n    return html`\n      <p>\n        ${this.hass.localize(\n          \"ui.panel.lovelace.editor.edit_view.visibility.select_users\"\n        )}\n      </p>\n      ${this._sortedUsers(this._users).map(\n        (user) => html`\n          <mwc-list-item graphic=\"avatar\" hasMeta>\n            <ha-user-badge\n              slot=\"graphic\"\n              .hass=${this.hass}\n              .user=${user}\n            ></ha-user-badge>\n            <span>${user.name}</span>\n            <ha-switch\n              slot=\"meta\"\n              .userId=${user.id}\n              @change=${this.valChange}\n              .checked=${this.checkUser(user.id)}\n            ></ha-switch>\n          </mwc-list-item>\n        `\n      )}\n    `;\n  }\n\n  protected checkUser(userId: string): boolean {\n    if (this._visible === undefined) {\n      return true;\n    }\n    if (typeof this._visible === \"boolean\") {\n      return this._visible as boolean;\n    }\n    return (this._visible as ShowViewConfig[]).some((u) => u.user === userId);\n  }\n\n  private valChange(ev: Event): void {\n    const userId = (ev.currentTarget as any).userId;\n    const checked = (ev.currentTarget as HaSwitch).checked;\n\n    let newVisible: ShowViewConfig[] = [];\n\n    if (typeof this._visible === \"boolean\") {\n      const lastValue = this._visible as boolean;\n      if (lastValue) {\n        newVisible = this._users.map((u) => ({\n          user: u.id,\n        }));\n      }\n    } else {\n      newVisible = [...this._visible];\n    }\n\n    if (checked === true) {\n      const newEntry: ShowViewConfig = {\n        user: userId,\n      };\n      newVisible.push(newEntry);\n    } else {\n      newVisible = (newVisible as ShowViewConfig[]).filter(\n        (c) => c.user !== userId\n      );\n    }\n\n    // this removes users that doesn't exists in system but had view permissions\n    this._visible = newVisible.filter((c) =>\n      this._users.some((u) => u.id === c.user)\n    );\n\n    fireEvent(this, \"view-visibility-changed\", { visible: this._visible });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-view-visibility-editor\": HuiViewVisibilityEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}