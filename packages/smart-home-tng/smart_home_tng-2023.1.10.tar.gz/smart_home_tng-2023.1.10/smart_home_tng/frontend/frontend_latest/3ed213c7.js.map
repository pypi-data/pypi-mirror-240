{"version":3,"file":"3ed213c7.js","mappings":";;AAsBA;AACA;AACA;AAEA;;;;;;;;;;AA0BA;;;;;;AC9BA;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;ACOA;;;ACgCA;AACA;;AAMA;AAYA;AACA;;;;;;AAOA;;AAIA;AAGA;AAEA;;AAEA;;AAMA;AAgBA;AAKA;;;AA+CA;AACA;AACA;;AAIA;AAEA;AACA;;AAOA;;AAsDA;AACA;;AAEA;AACA;AACA;AAKA;AACA;;;;;AAKA;;;;;;;;AASA;;;;AAIA;;AAEA;;AAIA;;;AAKA;;;AAIA;;AAIA;;;;;AArDA","sources":["webpack://home-assistant-frontend/./src/components/ha-clickable-list-item.ts","webpack://home-assistant-frontend/./src/components/ha-fab.ts","webpack://home-assistant-frontend/./src/components/ha-list-item.ts","webpack://home-assistant-frontend/./src/panels/config/lovelace/dashboards/ha-config-lovelace-dashboards.ts"],"sourcesContent":["import { css, CSSResultGroup, html } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { HaListItem } from \"./ha-list-item\";\n\n@customElement(\"ha-clickable-list-item\")\nexport class HaClickableListItem extends HaListItem {\n  @property() public href?: string;\n\n  @property({ type: Boolean }) public disableHref = false;\n\n  @property({ type: Boolean, reflect: true }) public openNewTab = false;\n\n  @query(\"a\") private _anchor!: HTMLAnchorElement;\n\n  public render() {\n    const r = super.render();\n    const href = this.href || \"\";\n\n    return html`${this.disableHref\n      ? html`<a aria-role=\"option\">${r}</a>`\n      : html`<a\n          aria-role=\"option\"\n          target=${this.openNewTab ? \"_blank\" : \"\"}\n          href=${href}\n          >${r}</a\n        >`}`;\n  }\n\n  firstUpdated() {\n    super.firstUpdated();\n    this.addEventListener(\"keydown\", (ev) => {\n      if (ev.key === \"Enter\" || ev.key === \" \") {\n        this._anchor.click();\n      }\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      super.styles,\n      css`\n        a {\n          width: 100%;\n          height: 100%;\n          display: flex;\n          align-items: center;\n          padding-left: var(--mdc-list-side-padding, 20px);\n          padding-right: var(--mdc-list-side-padding, 20px);\n          overflow: hidden;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-clickable-list-item\": HaClickableListItem;\n  }\n}\n","import { FabBase } from \"@material/mwc-fab/mwc-fab-base\";\nimport { styles } from \"@material/mwc-fab/mwc-fab.css\";\nimport { customElement } from \"lit/decorators\";\nimport { css } from \"lit\";\n\n@customElement(\"ha-fab\")\nexport class HaFab extends FabBase {\n  protected firstUpdated(changedProperties) {\n    super.firstUpdated(changedProperties);\n    this.style.setProperty(\"--mdc-theme-secondary\", \"var(--primary-color)\");\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host .mdc-fab--extended .mdc-fab__icon {\n        margin-inline-start: -8px;\n        margin-inline-end: 12px;\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          :host .mdc-fab--extended .mdc-fab__icon {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-fab\": HaFab;\n  }\n}\n","import { ListItemBase } from \"@material/mwc-list/mwc-list-item-base\";\nimport { styles } from \"@material/mwc-list/mwc-list-item.css\";\nimport { css, CSSResultGroup } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-list-item\")\nexport class HaListItem extends ListItemBase {\n  static get styles(): CSSResultGroup {\n    return [\n      styles,\n      css`\n        :host {\n          padding-left: var(--mdc-list-side-padding, 20px);\n          padding-right: var(--mdc-list-side-padding, 20px);\n        }\n        :host([graphic=\"avatar\"]:not([twoLine])),\n        :host([graphic=\"icon\"]:not([twoLine])) {\n          height: 48px;\n        }\n        span.material-icons:first-of-type {\n          margin-inline-start: 0px !important;\n          margin-inline-end: var(\n            --mdc-list-item-graphic-margin,\n            16px\n          ) !important;\n          direction: var(--direction);\n        }\n        span.material-icons:last-of-type {\n          margin-inline-start: auto !important;\n          margin-inline-end: 0px !important;\n          direction: var(--direction);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-list-item\": HaListItem;\n  }\n}\n","import {\n  mdiCheck,\n  mdiCheckCircleOutline,\n  mdiDotsVertical,\n  mdiOpenInNew,\n  mdiPlus,\n} from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport { html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport memoize from \"memoize-one\";\nimport { isComponentLoaded } from \"../../../../common/config/is_component_loaded\";\nimport { navigate } from \"../../../../common/navigate\";\nimport { stringCompare } from \"../../../../common/string/compare\";\nimport {\n  DataTableColumnContainer,\n  RowClickedEvent,\n} from \"../../../../components/data-table/ha-data-table\";\nimport \"../../../../components/ha-clickable-list-item\";\nimport \"../../../../components/ha-fab\";\nimport \"../../../../components/ha-icon\";\nimport \"../../../../components/ha-icon-button\";\nimport \"../../../../components/ha-svg-icon\";\nimport {\n  createDashboard,\n  deleteDashboard,\n  fetchDashboards,\n  LovelaceDashboard,\n  LovelaceDashboardCreateParams,\n  LovelacePanelConfig,\n  updateDashboard,\n} from \"../../../../data/lovelace\";\nimport { showConfirmationDialog } from \"../../../../dialogs/generic/show-dialog-box\";\nimport \"../../../../layouts/hass-loading-screen\";\nimport \"../../../../layouts/hass-tabs-subpage-data-table\";\nimport { HomeAssistant, Route } from \"../../../../types\";\nimport { lovelaceTabs } from \"../ha-config-lovelace\";\nimport { showDashboardDetailDialog } from \"./show-dialog-lovelace-dashboard-detail\";\n\n@customElement(\"ha-config-lovelace-dashboards\")\nexport class HaConfigLovelaceDashboards extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public isWide!: boolean;\n\n  @property() public narrow!: boolean;\n\n  @property() public route!: Route;\n\n  @state() private _dashboards: LovelaceDashboard[] = [];\n\n  private _columns = memoize(\n    (narrow: boolean, _language, dashboards): DataTableColumnContainer => {\n      const columns: DataTableColumnContainer = {\n        icon: {\n          title: \"\",\n          label: this.hass.localize(\n            \"ui.panel.config.lovelace.dashboards.picker.headers.icon\"\n          ),\n          type: \"icon\",\n          template: (icon, dashboard) =>\n            icon\n              ? html`\n                  <ha-icon\n                    slot=\"item-icon\"\n                    .icon=${icon}\n                    style=${ifDefined(\n                      dashboard.iconColor\n                        ? `color: ${dashboard.iconColor}`\n                        : undefined\n                    )}\n                  ></ha-icon>\n                `\n              : html``,\n        },\n        title: {\n          title: this.hass.localize(\n            \"ui.panel.config.lovelace.dashboards.picker.headers.title\"\n          ),\n          sortable: true,\n          filterable: true,\n          grows: true,\n          template: (title, dashboard: any) => {\n            const titleTemplate = html`\n              ${title}\n              ${dashboard.default\n                ? html`\n                    <ha-svg-icon\n                      style=\"padding-left: 10px; padding-inline-start: 10px; direction: var(--direction);\"\n                      .path=${mdiCheckCircleOutline}\n                    ></ha-svg-icon>\n                    <paper-tooltip animation-delay=\"0\">\n                      ${this.hass.localize(\n                        `ui.panel.config.lovelace.dashboards.default_dashboard`\n                      )}\n                    </paper-tooltip>\n                  `\n                : \"\"}\n            `;\n            return narrow\n              ? html`\n                  ${titleTemplate}\n                  <div class=\"secondary\">\n                    ${this.hass.localize(\n                      `ui.panel.config.lovelace.dashboards.conf_mode.${dashboard.mode}`\n                    )}${dashboard.filename\n                      ? html` â€“ ${dashboard.filename} `\n                      : \"\"}\n                  </div>\n                `\n              : titleTemplate;\n          },\n        },\n      };\n\n      if (!narrow) {\n        columns.mode = {\n          title: this.hass.localize(\n            \"ui.panel.config.lovelace.dashboards.picker.headers.conf_mode\"\n          ),\n          sortable: true,\n          filterable: true,\n          width: \"20%\",\n          template: (mode) =>\n            html`\n              ${this.hass.localize(\n                `ui.panel.config.lovelace.dashboards.conf_mode.${mode}`\n              ) || mode}\n            `,\n        };\n        if (dashboards.some((dashboard) => dashboard.filename)) {\n          columns.filename = {\n            title: this.hass.localize(\n              \"ui.panel.config.lovelace.dashboards.picker.headers.filename\"\n            ),\n            width: \"15%\",\n            sortable: true,\n            filterable: true,\n          };\n        }\n        columns.require_admin = {\n          title: this.hass.localize(\n            \"ui.panel.config.lovelace.dashboards.picker.headers.require_admin\"\n          ),\n          sortable: true,\n          type: \"icon\",\n          width: \"100px\",\n          template: (requireAdmin: boolean) =>\n            requireAdmin\n              ? html`<ha-svg-icon .path=${mdiCheck}></ha-svg-icon>`\n              : html`â€”`,\n        };\n        columns.show_in_sidebar = {\n          title: this.hass.localize(\n            \"ui.panel.config.lovelace.dashboards.picker.headers.sidebar\"\n          ),\n          type: \"icon\",\n          width: \"121px\",\n          template: (sidebar) =>\n            sidebar\n              ? html`<ha-svg-icon .path=${mdiCheck}></ha-svg-icon>`\n              : html`â€”`,\n        };\n      }\n\n      columns.url_path = {\n        title: \"\",\n        label: this.hass.localize(\n          \"ui.panel.config.lovelace.dashboards.picker.headers.url\"\n        ),\n        filterable: true,\n        width: \"100px\",\n        template: (urlPath) =>\n          narrow\n            ? html`\n                <ha-icon-button\n                  .path=${mdiOpenInNew}\n                  .urlPath=${urlPath}\n                  @click=${this._navigate}\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.lovelace.dashboards.picker.open\"\n                  )}\n                ></ha-icon-button>\n              `\n            : html`\n                <mwc-button .urlPath=${urlPath} @click=${this._navigate}\n                  >${this.hass.localize(\n                    \"ui.panel.config.lovelace.dashboards.picker.open\"\n                  )}</mwc-button\n                >\n              `,\n      };\n\n      return columns;\n    }\n  );\n\n  private _getItems = memoize((dashboards: LovelaceDashboard[]) => {\n    const defaultMode = (\n      this.hass.panels?.lovelace?.config as LovelacePanelConfig\n    ).mode;\n    const defaultUrlPath = this.hass.defaultPanel;\n    const isDefault = defaultUrlPath === \"lovelace\";\n    const result: Record<string, any>[] = [\n      {\n        icon: \"hass:view-dashboard\",\n        title: this.hass.localize(\"panel.states\"),\n        default: isDefault,\n        show_in_sidebar: isDefault,\n        require_admin: false,\n        url_path: \"lovelace\",\n        mode: defaultMode,\n        filename: defaultMode === \"yaml\" ? \"ui-lovelace.yaml\" : \"\",\n        iconColor: \"var(--primary-color)\",\n      },\n    ];\n    if (isComponentLoaded(this.hass, \"energy\")) {\n      result.push({\n        icon: \"hass:lightning-bolt\",\n        title: this.hass.localize(`ui.panel.config.dashboard.energy.main`),\n        show_in_sidebar: true,\n        mode: \"storage\",\n        url_path: \"energy\",\n        filename: \"\",\n        iconColor: \"var(--label-badge-yellow)\",\n      });\n    }\n\n    result.push(\n      ...dashboards\n        .sort((a, b) => stringCompare(a.title, b.title))\n        .map((dashboard) => ({\n          filename: \"\",\n          ...dashboard,\n          default: defaultUrlPath === dashboard.url_path,\n        }))\n    );\n    return result;\n  });\n\n  protected render(): TemplateResult {\n    if (!this.hass || this._dashboards === undefined) {\n      return html` <hass-loading-screen></hass-loading-screen> `;\n    }\n\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        back-path=\"/config\"\n        .route=${this.route}\n        .tabs=${lovelaceTabs}\n        .columns=${this._columns(\n          this.narrow,\n          this.hass.language,\n          this._dashboards\n        )}\n        .data=${this._getItems(this._dashboards)}\n        @row-click=${this._editDashboard}\n        id=\"url_path\"\n        hasFab\n        clickable\n      >\n        ${this.hass.userData?.showAdvanced\n          ? html`\n              <ha-button-menu\n                corner=\"BOTTOM_START\"\n                slot=\"toolbar-icon\"\n                activatable\n              >\n                <ha-icon-button\n                  slot=\"trigger\"\n                  .label=${this.hass.localize(\"ui.common.menu\")}\n                  .path=${mdiDotsVertical}\n                ></ha-icon-button>\n                <ha-clickable-list-item\n                  @click=${this._entryClicked}\n                  href=\"/config/lovelace/resources\"\n                  aria-label=${this.hass.localize(\n                    \"ui.panel.config.lovelace.resources.caption\"\n                  )}\n                >\n                  ${this.hass.localize(\n                    \"ui.panel.config.lovelace.resources.caption\"\n                  )}\n                </ha-clickable-list-item>\n              </ha-button-menu>\n            `\n          : \"\"}\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.lovelace.dashboards.picker.add_dashboard\"\n          )}\n          extended\n          @click=${this._addDashboard}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    this._getDashboards();\n  }\n\n  private async _getDashboards() {\n    this._dashboards = await fetchDashboards(this.hass);\n  }\n\n  private _navigate(ev: Event) {\n    ev.stopPropagation();\n    navigate(`/${(ev.target as any).urlPath}`);\n  }\n\n  private _editDashboard(ev: CustomEvent) {\n    const urlPath = (ev.detail as RowClickedEvent).id;\n\n    if (urlPath === \"energy\") {\n      navigate(\"/config/energy\");\n      return;\n    }\n    const dashboard = this._dashboards.find((res) => res.url_path === urlPath);\n    this._openDialog(dashboard, urlPath);\n  }\n\n  private _addDashboard() {\n    this._openDialog();\n  }\n\n  private async _openDialog(\n    dashboard?: LovelaceDashboard,\n    urlPath?: string\n  ): Promise<void> {\n    showDashboardDetailDialog(this, {\n      dashboard,\n      urlPath,\n      createDashboard: async (values: LovelaceDashboardCreateParams) => {\n        const created = await createDashboard(this.hass!, values);\n        this._dashboards = this._dashboards!.concat(created).sort(\n          (res1, res2) => stringCompare(res1.url_path, res2.url_path)\n        );\n      },\n      updateDashboard: async (values) => {\n        const updated = await updateDashboard(\n          this.hass!,\n          dashboard!.id,\n          values\n        );\n        this._dashboards = this._dashboards!.map((res) =>\n          res === dashboard ? updated : res\n        );\n      },\n      removeDashboard: async () => {\n        if (\n          !(await showConfirmationDialog(this, {\n            title: this.hass!.localize(\n              \"ui.panel.config.lovelace.dashboards.confirm_delete_title\",\n              { dashboard_title: dashboard!.title }\n            ),\n            text: this.hass!.localize(\n              \"ui.panel.config.lovelace.dashboards.confirm_delete_text\"\n            ),\n            confirmText: this.hass!.localize(\"ui.common.delete\"),\n          }))\n        ) {\n          return false;\n        }\n\n        try {\n          await deleteDashboard(this.hass!, dashboard!.id);\n          this._dashboards = this._dashboards!.filter(\n            (res) => res !== dashboard\n          );\n          return true;\n        } catch (err: any) {\n          return false;\n        }\n      },\n    });\n  }\n\n  private _entryClicked(ev) {\n    ev.currentTarget.blur();\n  }\n}\n"],"names":[],"sourceRoot":""}