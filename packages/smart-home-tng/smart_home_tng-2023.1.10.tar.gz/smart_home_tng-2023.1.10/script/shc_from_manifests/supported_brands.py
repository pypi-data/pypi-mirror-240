"""
Code Generator for Smart Home - The Next Generation.

Generates helper code from component manifests.

Smart Home - TNG is a Home Automation framework for observing the state
of entities and react to changes. It is based on Home Assistant from
home-assistant.io and the Home Assistant Community.

Copyright (c) 2022, Andreas Nixdorf

This program is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation, either version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program.  If not, see
http://www.gnu.org/licenses/.
"""

import json
import typing

from .code_generator import CodeGenerator
from .config import Config
from .integration import Integration


_NAME: typing.Final = "ssdp"
_BASE: typing.Final = """
\"\"\"Automatically generated by shc_from_manifests.

To update, run python3 -m script.shc_from_manifests.
\"\"\"

import typing

# fmt: off

# pylint: disable=unused-variable
HAS_SUPPORTED_BRANDS: typing.Final = ({})
""".strip()


# pylint: disable=unused-variable
class SupportedBrandsGenerator(CodeGenerator):
    """Generate ssdp file."""

    def __init__(self):
        super().__init__(_NAME)

    def generate_and_validate(self, integrations: dict[str, Integration], config: Config) -> str:
        """Validate and generate supported_brands data."""

        brands = []
        for domain, integration in sorted(integrations.items()):
            if integration.manifest is None:
                config.add_error(
                    "supported_brands",
                    f"manifest.json for domain {domain} not found",
                    fixable=False
                )
            if integration.manifest and integration.supported_brands:
                brands.append(integration.supported_brands)

        return _BASE.format(json.dumps(brands, indent=4)[1:-1])

    def validate(self, integrations: dict[str, Integration], config: Config) -> None:
        """Validate supported_brands data."""
        supported_brands_path = config.root / "smart_home_tng/generated/supported_brands.py"
        config.cache["supported_brands"] = content = self.generate_and_validate(
            integrations, config
        )

        if config.specific_integrations:
            return
        if not supported_brands_path.is_file():
            config.add_error(
                "supported_brands",
                (
                    "File supported_brands.py is not up to date. "
                    + "Run python3 -m script.shc_from_manifests"
                ),
                fixable=True,
            )
            return

        with open(str(supported_brands_path), encoding="utf-8") as fp:
            if fp.read().strip() != content:
                config.add_error(
                    "supported_brands",
                    (
                        "File supported_brands.py is not up to date. "
                        + "Run python3 -m script.shc_from_manifests"
                    ),
                    fixable=True,
                )
            return

    def generate(self, integrations: dict[str, Integration], config: Config):
        """Generate supported_brands data."""
        supported_brands_path = config.root / "smart_home_tng/core/generated/supported_brands.py"
        with open(str(supported_brands_path), "w", encoding="utf-8") as fp:
            fp.write(f"{config.cache['supported_brands']}\n")
