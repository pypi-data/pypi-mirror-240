{"version":3,"file":"1836b31f.js","mappings":";AA0DA;;AAEA;AACA;;;;AAYA;AACA;AACA;AACA;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkFA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/special-rows/hui-cast-row.ts"],"sourcesContent":["import \"@material/mwc-button/mwc-button\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { CastManager } from \"../../../cast/cast_manager\";\nimport {\n  castSendShowLovelaceView,\n  ensureConnectedCastSession,\n} from \"../../../cast/receiver_messages\";\nimport \"../../../components/ha-icon\";\nimport { HomeAssistant } from \"../../../types\";\nimport { CastConfig, LovelaceRow } from \"../entity-rows/types\";\n\n@customElement(\"hui-cast-row\")\nclass HuiCastRow extends LitElement implements LovelaceRow {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _config?: CastConfig;\n\n  @state() private _castManager?: CastManager | null;\n\n  @state() private _noHTTPS = false;\n\n  public setConfig(config: CastConfig): void {\n    if (!config || config.view === undefined || config.view === null) {\n      throw new Error(\"View required\");\n    }\n\n    this._config = {\n      icon: \"hass:television\",\n      name: \"Home Assistant Cast\",\n      ...config,\n    };\n  }\n\n  protected shouldUpdate(changedProperties: PropertyValues) {\n    return !(changedProperties.size === 1 && changedProperties.has(\"hass\"));\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config) {\n      return html``;\n    }\n\n    const active =\n      this._castManager &&\n      this._castManager.status &&\n      this._config.view === this._castManager.status.lovelacePath &&\n      this._config.dashboard === this._castManager.status.urlPath;\n\n    return html`\n      <ha-icon .icon=${this._config.icon}></ha-icon>\n      <div class=\"flex\">\n        <div class=\"name\">${this._config.name}</div>\n        ${this._noHTTPS\n          ? html` Cast requires HTTPS `\n          : this._castManager === undefined\n          ? html``\n          : this._castManager === null\n          ? html` Cast API unavailable `\n          : this._castManager.castState === \"NO_DEVICES_AVAILABLE\"\n          ? html` No devices found `\n          : html`\n              <div class=\"controls\">\n                <google-cast-launcher></google-cast-launcher>\n                <mwc-button\n                  @click=${this._sendLovelace}\n                  class=${classMap({ inactive: !active })}\n                  .unelevated=${active}\n                  .disabled=${!this._castManager.status}\n                >\n                  SHOW\n                </mwc-button>\n              </div>\n            `}\n      </div>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    if (location.protocol === \"http:\" && location.hostname !== \"localhost\") {\n      this._noHTTPS = true;\n    }\n    import(\"../../../cast/cast_manager\").then(({ getCastManager }) =>\n      getCastManager(this.hass.auth).then(\n        (mgr) => {\n          this._castManager = mgr;\n          mgr.addEventListener(\"connection-changed\", () => {\n            this.requestUpdate();\n          });\n          mgr.addEventListener(\"state-changed\", () => {\n            this.requestUpdate();\n          });\n        },\n        () => {\n          this._castManager = null;\n        }\n      )\n    );\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    if (this._config && this._config.hide_if_unavailable) {\n      this.style.display =\n        !this._castManager ||\n        this._castManager.castState === \"NO_DEVICES_AVAILABLE\"\n          ? \"none\"\n          : \"\";\n    }\n  }\n\n  private async _sendLovelace() {\n    await ensureConnectedCastSession(this._castManager!, this.hass.auth);\n    castSendShowLovelaceView(\n      this._castManager!,\n      this._config!.view,\n      this._config!.dashboard\n    );\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n        align-items: center;\n      }\n      ha-icon {\n        padding: 8px;\n        color: var(--paper-item-icon-color);\n      }\n      .flex {\n        flex: 1;\n        margin-left: 16px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n      .name {\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n      .controls {\n        display: flex;\n        align-items: center;\n      }\n      google-cast-launcher {\n        margin-right: 0.57em;\n        cursor: pointer;\n        display: inline-block;\n        height: 24px;\n        width: 24px;\n      }\n      .inactive {\n        padding: 0 4px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-cast-row\": HuiCastRow;\n  }\n}\n"],"names":[],"sourceRoot":""}