{"version":3,"file":"6e3e29d8.js","mappings":";;;;AAiBA;AACA;AACA;;AAGA;;;;;AASA;;ACQA;AACA;;AAEA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoFA;;;;;;;;;;AAWA;;;AChFA;AACA;AACA;AACA;AACA;;;;;AAKA;;AAIA;AAEA;AACA;;;;AAOA;AAEA;AACA;;AAGA;;AAGA;AAGA;AACA;AACA;;AAEA;AAEA;;AAGA;AAGA;AACA;AACA;;AAEA;AAEA;;AAGA;AACA;AACA;;AAEA;;AAEA;AApEA;;;;;;;;;;;;;;;;;;;;;;AAqKA","sources":["webpack://home-assistant-frontend/./src/components/ha-help-tooltip.ts","webpack://home-assistant-frontend/./src/components/ha-textfield.ts","webpack://home-assistant-frontend/./src/panels/lovelace/components/hui-action-editor.ts"],"sourcesContent":["import { mdiHelpCircle } from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-help-tooltip\")\nexport class HaHelpTooltip extends LitElement {\n  @property() public label!: string;\n\n  @property() public position = \"top\";\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-svg-icon .path=${mdiHelpCircle}></ha-svg-icon>\n      <paper-tooltip\n        offset=\"4\"\n        .position=${this.position}\n        .fitToVisibleBounds=${true}\n        >${this.label}</paper-tooltip\n      >\n    `;\n  }\n\n  static get styles() {\n    return css`\n      ha-svg-icon {\n        --mdc-icon-size: var(--ha-help-tooltip-size, 14px);\n        color: var(--ha-help-tooltip-color, var(--disabled-text-color));\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-help-tooltip\": HaHelpTooltip;\n  }\n}\n","import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { TemplateResult, html, PropertyValues, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public iconTrailing?: boolean;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      (changedProperties.has(\"invalid\") &&\n        (this.invalid || changedProperties.get(\"invalid\") !== undefined)) ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid ? this.errorMessage || \"Invalid\" : \"\"\n      );\n      this.reportValidity();\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n        padding-inline-start: var(--text-field-suffix-padding-left, 12px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 0px);\n        direction: var(--direction);\n      }\n      .mdc-text-field--with-leading-icon {\n        padding-inline-start: var(--text-field-suffix-padding-left, 0px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 16px);\n        direction: var(--direction);\n      }\n\n      .mdc-text-field:not(.mdc-text-field--disabled)\n        .mdc-text-field__affix--suffix {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon--leading {\n        margin-inline-start: 16px;\n        margin-inline-end: 8px;\n        direction: var(--direction);\n      }\n\n      input {\n        text-align: var(--text-field-text-align, start);\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n\n      .mdc-floating-label {\n        inset-inline-start: 16px !important;\n        inset-inline-end: initial !important;\n        transform-origin: var(--float-start);\n        direction: var(--direction);\n        transform-origin: var(--float-start);\n      }\n\n      .mdc-text-field--with-leading-icon.mdc-text-field--filled\n        .mdc-floating-label {\n        max-width: calc(100% - 48px);\n        inset-inline-start: 48px !important;\n        inset-inline-end: initial !important;\n        direction: var(--direction);\n      }\n\n      .mdc-text-field__input[type=\"number\"] {\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          .mdc-text-field__affix--suffix,\n          .mdc-text-field--with-leading-icon,\n          .mdc-text-field__icon--leading,\n          .mdc-floating-label,\n          .mdc-text-field--with-leading-icon.mdc-text-field--filled\n            .mdc-floating-label,\n          .mdc-text-field__input[type=\"number\"] {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { stopPropagation } from \"../../../common/dom/stop_propagation\";\nimport \"../../../components/ha-help-tooltip\";\nimport \"../../../components/ha-service-control\";\nimport {\n  ActionConfig,\n  CallServiceActionConfig,\n  NavigateActionConfig,\n  UrlActionConfig,\n} from \"../../../data/lovelace\";\nimport { ServiceAction } from \"../../../data/script\";\nimport { HomeAssistant } from \"../../../types\";\nimport { EditorTarget } from \"../editor/types\";\n\n@customElement(\"hui-action-editor\")\nexport class HuiActionEditor extends LitElement {\n  @property() public config?: ActionConfig;\n\n  @property() public label?: string;\n\n  @property() public actions?: string[];\n\n  @property() public tooltipText?: string;\n\n  @property() protected hass?: HomeAssistant;\n\n  get _navigation_path(): string {\n    const config = this.config as NavigateActionConfig | undefined;\n    return config?.navigation_path || \"\";\n  }\n\n  get _url_path(): string {\n    const config = this.config as UrlActionConfig | undefined;\n    return config?.url_path || \"\";\n  }\n\n  get _service(): string {\n    const config = this.config as CallServiceActionConfig;\n    return config?.service || \"\";\n  }\n\n  private _serviceAction = memoizeOne(\n    (config: CallServiceActionConfig): ServiceAction => ({\n      service: this._service,\n      data: config.data ?? config.service_data,\n      target: config.target,\n    })\n  );\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this.actions) {\n      return html``;\n    }\n\n    return html`\n      <div class=\"dropdown\">\n        <ha-select\n          .label=${this.label}\n          .configValue=${\"action\"}\n          @selected=${this._actionPicked}\n          .value=${this.config?.action ?? \"default\"}\n          @closed=${stopPropagation}\n          fixedMenuPosition\n          naturalMenuWidt\n        >\n          <mwc-list-item value=\"default\">\n            ${this.hass!.localize(\n              \"ui.panel.lovelace.editor.action-editor.actions.default_action\"\n            )}\n          </mwc-list-item>\n          ${this.actions.map(\n            (action) => html`\n              <mwc-list-item .value=${action}>\n                ${this.hass!.localize(\n                  `ui.panel.lovelace.editor.action-editor.actions.${action}`\n                )}\n              </mwc-list-item>\n            `\n          )}\n        </ha-select>\n        ${this.tooltipText\n          ? html`\n              <ha-help-tooltip .label=${this.tooltipText}></ha-help-tooltip>\n            `\n          : \"\"}\n      </div>\n      ${this.config?.action === \"navigate\"\n        ? html`\n            <ha-textfield\n              label=${this.hass!.localize(\n                \"ui.panel.lovelace.editor.action-editor.navigation_path\"\n              )}\n              .value=${this._navigation_path}\n              .configValue=${\"navigation_path\"}\n              @input=${this._valueChanged}\n            ></ha-textfield>\n          `\n        : \"\"}\n      ${this.config?.action === \"url\"\n        ? html`\n            <ha-textfield\n              .label=${this.hass!.localize(\n                \"ui.panel.lovelace.editor.action-editor.url_path\"\n              )}\n              .value=${this._url_path}\n              .configValue=${\"url_path\"}\n              @input=${this._valueChanged}\n            ></ha-textfield>\n          `\n        : \"\"}\n      ${this.config?.action === \"call-service\"\n        ? html`\n            <ha-service-control\n              .hass=${this.hass}\n              .value=${this._serviceAction(this.config)}\n              .showAdvanced=${this.hass.userData?.showAdvanced}\n              narrow\n              @value-changed=${this._serviceValueChanged}\n            ></ha-service-control>\n          `\n        : \"\"}\n    `;\n  }\n\n  private _actionPicked(ev): void {\n    ev.stopPropagation();\n    if (!this.hass) {\n      return;\n    }\n    const value = ev.target.value;\n    if (this.config?.action === value) {\n      return;\n    }\n    if (value === \"default\") {\n      fireEvent(this, \"value-changed\", { value: undefined });\n      return;\n    }\n\n    let data;\n    switch (value) {\n      case \"url\": {\n        data = { url_path: this._url_path };\n        break;\n      }\n      case \"call-service\": {\n        data = { service: this._service };\n        break;\n      }\n      case \"navigate\": {\n        data = { navigation_path: this._navigation_path };\n        break;\n      }\n    }\n\n    fireEvent(this, \"value-changed\", {\n      value: { action: value, ...data },\n    });\n  }\n\n  private _valueChanged(ev): void {\n    ev.stopPropagation();\n    if (!this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n    const value = ev.target.value;\n    if (this[`_${target.configValue}`] === value) {\n      return;\n    }\n    if (target.configValue) {\n      fireEvent(this, \"value-changed\", {\n        value: { ...this.config!, [target.configValue!]: value },\n      });\n    }\n  }\n\n  private _serviceValueChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const value = {\n      ...this.config!,\n      service: ev.detail.value.service || \"\",\n      data: ev.detail.value.data || {},\n      target: ev.detail.value.target || {},\n    };\n    // \"service_data\" is allowed for backwards compatibility but replaced with \"data\" on write\n    if (\"service_data\" in value) {\n      delete value.service_data;\n    }\n\n    fireEvent(this, \"value-changed\", { value });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .dropdown {\n        position: relative;\n      }\n      ha-help-tooltip {\n        position: absolute;\n        right: 40px;\n        top: 16px;\n        inset-inline-start: initial;\n        inset-inline-end: 40px;\n        direction: var(--direction);\n      }\n      ha-select,\n      ha-textfield {\n        width: 100%;\n      }\n      ha-textfield {\n        margin-top: 8px;\n      }\n      ha-service-control {\n        --service-control-padding: 0;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-action-editor\": HuiActionEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}