{"version":3,"file":"8be490bb.js","mappings":";AAsBA;AACA;;AAGA;;;;;;;AAQA;;AAGA;;AAIA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;ACnEA;;AAEA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;;;;;;;;ACjGA;;;;ACHA;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;ACoCA;AACA;AArGA;AAuGA;AAIA;;;AAGA;;;AAKA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AAKA;AACA;AACA;;AAIA;;;AASA;AACA;;AAKA;;AAiDA;;;;AAaA;;;AAIA;;AAOA;AACA;;;AAIA;AACA;;;;AAIA;;;;AAgBA;AAEA;AAGA;AAEA;;AAIA;AA9GA;;AAeA;;;AAeA;;AAcA;AA5CA;;AAIA;;AAOA;;;AAuGA;;;;;;;;;;;;;;;;;;;AA6JA","sources":["webpack://home-assistant-frontend/./src/components/ha-chip.ts","webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-input-helper-text.ts","webpack://home-assistant-frontend/./src/components/ha-radio.ts","webpack://home-assistant-frontend/./src/components/ha-select.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zwave_js/dialog-zwave_js-update-firmware-node.ts"],"sourcesContent":["// @ts-ignore\nimport chipStyles from \"@material/chips/dist/mdc.chips.min.css\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  TemplateResult,\n  unsafeCSS,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-chip\")\nexport class HaChip extends LitElement {\n  @property({ type: Boolean }) public hasIcon = false;\n\n  @property({ type: Boolean }) public hasTrailingIcon = false;\n\n  @property({ type: Boolean }) public noText = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"mdc-chip ${this.noText ? \"no-text\" : \"\"}\">\n        ${this.hasIcon\n          ? html`<div class=\"mdc-chip__icon mdc-chip__icon--leading\">\n              <slot name=\"icon\"></slot>\n            </div>`\n          : null}\n        <div class=\"mdc-chip__ripple\"></div>\n        <span role=\"gridcell\">\n          <span role=\"button\" tabindex=\"0\" class=\"mdc-chip__primary-action\">\n            <span class=\"mdc-chip__text\"><slot></slot></span>\n          </span>\n        </span>\n        ${this.hasTrailingIcon\n          ? html`<div class=\"mdc-chip__icon mdc-chip__icon--trailing\">\n              <slot name=\"trailing-icon\"></slot>\n            </div>`\n          : null}\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ${unsafeCSS(chipStyles)}\n      .mdc-chip {\n        background-color: var(\n          --ha-chip-background-color,\n          rgba(var(--rgb-primary-text-color), 0.15)\n        );\n        color: var(--ha-chip-text-color, var(--primary-text-color));\n      }\n\n      .mdc-chip.no-text {\n        padding: 0 10px;\n      }\n\n      .mdc-chip:hover {\n        color: var(--ha-chip-text-color, var(--primary-text-color));\n      }\n\n      .mdc-chip__icon--leading,\n      .mdc-chip__icon--trailing {\n        --mdc-icon-size: 18px;\n        line-height: 14px;\n        color: var(--ha-chip-icon-color, var(--ha-chip-text-color));\n      }\n      .mdc-chip.mdc-chip--selected .mdc-chip__checkmark,\n      .mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden) {\n        margin-right: -4px;\n        margin-inline-start: -4px;\n        margin-inline-end: 4px;\n        direction: var(--direction);\n      }\n\n      span[role=\"gridcell\"] {\n        line-height: 14px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-chip\": HaChip;\n  }\n}\n","import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-input-helper-text\")\nclass InputHelperText extends LitElement {\n  protected render(): TemplateResult {\n    return html`<slot></slot>`;\n  }\n\n  static styles = css`\n    :host {\n      display: block;\n      color: var(--mdc-text-field-label-ink-color, rgba(0, 0, 0, 0.6));\n      font-size: 0.75rem;\n      padding-left: 16px;\n      padding-right: 16px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input-helper-text\": InputHelperText;\n  }\n}\n","import { RadioBase } from \"@material/mwc-radio/mwc-radio-base\";\nimport { styles } from \"@material/mwc-radio/mwc-radio.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-radio\")\nexport class HaRadio extends RadioBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-radio\": HaRadio;\n  }\n}\n","import { SelectBase } from \"@material/mwc-select/mwc-select-base\";\nimport { styles } from \"@material/mwc-select/mwc-select.css\";\nimport { css, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { debounce } from \"../common/util/debounce\";\nimport { nextRender } from \"../common/util/render-status\";\n\n@customElement(\"ha-select\")\nexport class HaSelect extends SelectBase {\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  protected override renderLeadingIcon() {\n    if (!this.icon) {\n      return nothing;\n    }\n\n    return html`<span class=\"mdc-select__icon\"\n      ><slot name=\"icon\"></slot\n    ></span>`;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"translations-updated\", this._translationsUpdated);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\n      \"translations-updated\",\n      this._translationsUpdated\n    );\n  }\n\n  private _translationsUpdated = debounce(async () => {\n    await nextRender();\n    this.layoutOptions();\n  }, 500);\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-select:not(.mdc-select--disabled) .mdc-select__icon {\n        color: var(--secondary-text-color);\n      }\n      .mdc-select__anchor {\n        width: var(--ha-select-min-width, 200px);\n      }\n      .mdc-select--filled .mdc-floating-label {\n        inset-inline-start: 12px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select--filled.mdc-select--with-leading-icon .mdc-floating-label {\n        inset-inline-start: 48px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select .mdc-select__anchor {\n        padding-inline-start: 12px;\n        padding-inline-end: 0px;\n        direction: var(--direction);\n      }\n      .mdc-select__anchor .mdc-floating-label--float-above {\n        transform-origin: var(--float-start);\n      }\n    `,\n  ];\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-select\": HaSelect;\n  }\n}\n","import \"../../../../../components/ha-file-upload\";\nimport \"../../../../../components/ha-form/ha-form\";\nimport \"../../../../../components/ha-svg-icon\";\nimport \"@material/mwc-button/mwc-button\";\nimport \"@material/mwc-linear-progress/mwc-linear-progress\";\nimport { mdiCheckCircle, mdiCloseCircle, mdiFileUpload } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { createCloseHeading } from \"../../../../../components/ha-dialog\";\nimport {\n  DeviceRegistryEntry,\n  computeDeviceName,\n} from \"../../../../../data/device_registry\";\nimport {\n  abortZwaveNodeFirmwareUpdate,\n  fetchZwaveIsNodeFirmwareUpdateInProgress,\n  fetchZwaveNodeStatus,\n  FirmwareUpdateStatus,\n  NodeStatus,\n  subscribeZwaveNodeStatus,\n  subscribeZwaveNodeFirmwareUpdate,\n  uploadFirmwareAndBeginUpdate,\n  ZWaveJSNodeFirmwareUpdateFinishedMessage,\n  ZWaveJSNodeFirmwareUpdateProgressMessage,\n  ZWaveJSNodeStatusUpdatedMessage,\n  ZWaveJSNodeStatus,\n} from \"../../../../../data/zwave_js\";\nimport { haStyleDialog } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { ZWaveJSUpdateFirmwareNodeDialogParams } from \"./show-dialog-zwave_js-update-firmware-node\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../../../dialogs/generic/show-dialog-box\";\nimport { HaFormIntegerSchema } from \"../../../../../components/ha-form/types\";\n\n@customElement(\"dialog-zwave_js-update-firmware-node\")\nclass DialogZWaveJSUpdateFirmwareNode extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private device?: DeviceRegistryEntry;\n\n  @state() private _uploading = false;\n\n  @state()\n  private _updateFinishedMessage?: ZWaveJSNodeFirmwareUpdateFinishedMessage;\n\n  @state()\n  private _updateProgressMessage?: ZWaveJSNodeFirmwareUpdateProgressMessage;\n\n  @state() private _updateInProgress = false;\n\n  @state() private _firmwareFile?: File;\n\n  @state() private _nodeStatus?: ZWaveJSNodeStatus;\n\n  @state() private _firmwareTarget? = 0;\n\n  private _subscribedNodeStatus?: Promise<UnsubscribeFunc>;\n\n  private _subscribedNodeFirmwareUpdate?: Promise<UnsubscribeFunc>;\n\n  private _deviceName?: string;\n\n  public showDialog(params: ZWaveJSUpdateFirmwareNodeDialogParams): void {\n    this._deviceName = computeDeviceName(params.device, this.hass!);\n    this.device = params.device;\n    this._fetchData();\n    this._subscribeNodeStatus();\n  }\n\n  public closeDialog(): void {\n    this._unsubscribeNodeFirmwareUpdate();\n    this._unsubscribeNodeStatus();\n    this.device =\n      this._updateProgressMessage =\n      this._updateFinishedMessage =\n      this._firmwareFile =\n      this._nodeStatus =\n        undefined;\n    this._firmwareTarget = 0;\n    this._uploading = this._updateInProgress = false;\n\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (\n      !this.device ||\n      !this._nodeStatus ||\n      this._updateInProgress === undefined\n    ) {\n      return html``;\n    }\n\n    const schema: HaFormIntegerSchema = {\n      name: \"firmware_target\",\n      type: \"integer\",\n      valueMin: 0,\n    };\n\n    const beginFirmwareUpdateHTML = html`<ha-file-upload\n        .hass=${this.hass}\n        .uploading=${this._uploading}\n        .icon=${mdiFileUpload}\n        label=${this._firmwareFile?.name ??\n        this.hass.localize(\n          \"ui.panel.config.zwave_js.update_firmware.upload_firmware\"\n        )}\n        @file-picked=${this._uploadFile}\n      ></ha-file-upload>\n      <p>\n        ${this.hass.localize(\n          \"ui.panel.config.zwave_js.update_firmware.firmware_target_intro\"\n        )}\n      </p>\n      <ha-form\n        .hass=${this.hass}\n        .data=${{ firmware_target: this._firmwareTarget }}\n        .schema=${[schema]}\n        @value-changed=${this._firmwareTargetChanged}\n      ></ha-form>\n      <mwc-button\n        slot=\"primaryAction\"\n        @click=${this._beginFirmwareUpdate}\n        .disabled=${this._firmwareFile === undefined}\n      >\n        ${this.hass.localize(\n          \"ui.panel.config.zwave_js.update_firmware.begin_update\"\n        )}\n      </mwc-button>`;\n\n    const abortFirmwareUpdateButton = html`\n      <mwc-button slot=\"primaryAction\" @click=${this._abortFirmwareUpdate}>\n        ${this.hass.localize(\"ui.panel.config.zwave_js.update_firmware.abort\")}\n      </mwc-button>\n    `;\n\n    const status = this._updateFinishedMessage\n      ? FirmwareUpdateStatus[this._updateFinishedMessage.status]\n          .split(\"_\")[0]\n          .toLowerCase()\n      : undefined;\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\"ui.panel.config.zwave_js.update_firmware.title\")\n        )}\n      >\n        ${!this._updateProgressMessage && !this._updateFinishedMessage\n          ? !this._updateInProgress\n            ? html`\n                <p>\n                  ${this.hass.localize(\n                    \"ui.panel.config.zwave_js.update_firmware.introduction\",\n                    {\n                      device: html`<strong>${this._deviceName}</strong>`,\n                    }\n                  )}\n                </p>\n                ${beginFirmwareUpdateHTML}\n              `\n            : html`\n                <p>\n                  ${this._nodeStatus.status === NodeStatus.Asleep\n                    ? this.hass.localize(\n                        \"ui.panel.config.zwave_js.update_firmware.queued\",\n                        {\n                          device: html`<strong>${this._deviceName}</strong>`,\n                        }\n                      )\n                    : this.hass.localize(\n                        \"ui.panel.config.zwave_js.update_firmware.awake\",\n                        {\n                          device: html`<strong>${this._deviceName}</strong>`,\n                        }\n                      )}\n                </p>\n                <p>\n                  ${this._nodeStatus.status === NodeStatus.Asleep\n                    ? this.hass.localize(\n                        \"ui.panel.config.zwave_js.update_firmware.close_queued\",\n                        {\n                          device: html`<strong>${this._deviceName}</strong>`,\n                        }\n                      )\n                    : this.hass.localize(\n                        \"ui.panel.config.zwave_js.update_firmware.close\",\n                        {\n                          device: html`<strong>${this._deviceName}</strong>`,\n                        }\n                      )}\n                </p>\n                ${abortFirmwareUpdateButton}\n              `\n          : this._updateProgressMessage && !this._updateFinishedMessage\n          ? html`\n              <p>\n                ${this.hass.localize(\n                  \"ui.panel.config.zwave_js.update_firmware.in_progress\",\n                  {\n                    device: html`<strong>${this._deviceName}</strong>`,\n                    progress: (\n                      (this._updateProgressMessage.sent_fragments * 100) /\n                      this._updateProgressMessage.total_fragments\n                    ).toFixed(2),\n                  }\n                )}\n              </p>\n              <mwc-linear-progress\n                determinate\n                .progress=${this._updateProgressMessage.sent_fragments /\n                this._updateProgressMessage.total_fragments}\n              ></mwc-linear-progress>\n              <p>\n                ${this.hass.localize(\n                  \"ui.panel.config.zwave_js.update_firmware.close\",\n                  {\n                    device: html`<strong>${this._deviceName}</strong>`,\n                  }\n                )}\n              </p>\n              ${abortFirmwareUpdateButton}\n            `\n          : html`\n              <div class=\"flex-container\">\n                <ha-svg-icon\n                  .path=${status === \"ok\" ? mdiCheckCircle : mdiCloseCircle}\n                  .class=${status}\n                ></ha-svg-icon>\n                <div class=\"status\">\n                  <p>\n                    ${this.hass.localize(\n                      `ui.panel.config.zwave_js.update_firmware.finished_status.${status}`,\n                      {\n                        device: html`<strong>${this._deviceName}</strong>`,\n                        message: this.hass.localize(\n                          `ui.panel.config.zwave_js.update_firmware.finished_status.${\n                            FirmwareUpdateStatus[\n                              this._updateFinishedMessage!.status\n                            ]\n                          }`\n                        ),\n                      }\n                    )}\n                  </p>\n                </div>\n              </div>\n              ${status === \"ok\"\n                ? html`<p>\n                    ${this.hass.localize(\n                      \"ui.panel.config.zwave_js.update_firmware.finished_status.done\"\n                    )}\n                  </p>`\n                : html`<p>\n                      ${this.hass.localize(\n                        \"ui.panel.config.zwave_js.update_firmware.finished_status.try_again\"\n                      )}\n                    </p>\n                    ${beginFirmwareUpdateHTML}`}\n            `}\n      </ha-dialog>\n    `;\n  }\n\n  private async _fetchData(): Promise<void> {\n    [this._nodeStatus, this._updateInProgress] = await Promise.all([\n      fetchZwaveNodeStatus(this.hass, this.device!.id),\n      fetchZwaveIsNodeFirmwareUpdateInProgress(this.hass, this.device!.id),\n    ]);\n    if (this._updateInProgress) {\n      this._subscribeNodeFirmwareUpdate();\n    }\n  }\n\n  private async _beginFirmwareUpdate(): Promise<void> {\n    this._uploading = true;\n    this._updateProgressMessage = this._updateFinishedMessage = undefined;\n    try {\n      this._subscribeNodeFirmwareUpdate();\n      await uploadFirmwareAndBeginUpdate(\n        this.hass,\n        this.device!.id,\n        this._firmwareFile!,\n        this._firmwareTarget\n      );\n      this._updateInProgress = true;\n      this._uploading = false;\n    } catch (err: any) {\n      this._unsubscribeNodeFirmwareUpdate();\n      this._uploading = false;\n      showAlertDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.config.zwave_js.update_firmware.upload_failed\"\n        ),\n        text: err.message,\n        confirmText: this.hass!.localize(\"ui.common.close\"),\n      });\n    }\n  }\n\n  private async _abortFirmwareUpdate(): Promise<void> {\n    if (\n      await showConfirmationDialog(this, {\n        text: this.hass.localize(\n          \"ui.panel.config.zwave_js.update_firmware.confirm_abort\",\n          {\n            device: html`<strong>${this._deviceName}</strong>`,\n          }\n        ),\n        dismissText: this.hass!.localize(\"ui.common.no\"),\n        confirmText: this.hass!.localize(\"ui.common.yes\"),\n      })\n    ) {\n      this._unsubscribeNodeFirmwareUpdate();\n      try {\n        await abortZwaveNodeFirmwareUpdate(this.hass, this.device!.id);\n      } catch (err: any) {\n        showAlertDialog(this, {\n          title: this.hass.localize(\n            \"ui.panel.config.zwave_js.update_firmware.abort_failed\"\n          ),\n          text: err.message,\n          confirmText: this.hass!.localize(\"ui.common.close\"),\n        });\n      }\n      this._firmwareFile = undefined;\n      this._updateFinishedMessage = undefined;\n      this._updateProgressMessage = undefined;\n      this._updateInProgress = false;\n    }\n  }\n\n  private _subscribeNodeStatus(): void {\n    if (!this.hass || !this.device || this._subscribedNodeStatus) {\n      return;\n    }\n    this._subscribedNodeStatus = subscribeZwaveNodeStatus(\n      this.hass,\n      this.device.id,\n      (message: ZWaveJSNodeStatusUpdatedMessage) => {\n        this._nodeStatus!.status = message.status;\n      }\n    );\n  }\n\n  private _unsubscribeNodeStatus(): void {\n    if (!this._subscribedNodeStatus) {\n      return;\n    }\n    this._subscribedNodeStatus.then((unsub) => unsub());\n    this._subscribedNodeStatus = undefined;\n  }\n\n  private _subscribeNodeFirmwareUpdate(): void {\n    if (!this.hass || !this.device || this._subscribedNodeFirmwareUpdate) {\n      return;\n    }\n    this._subscribedNodeFirmwareUpdate = subscribeZwaveNodeFirmwareUpdate(\n      this.hass,\n      this.device.id,\n      (\n        message:\n          | ZWaveJSNodeFirmwareUpdateFinishedMessage\n          | ZWaveJSNodeFirmwareUpdateProgressMessage\n      ) => {\n        if (message.event === \"firmware update progress\") {\n          if (!this._updateFinishedMessage) {\n            this._updateProgressMessage = message;\n          }\n        } else {\n          this._unsubscribeNodeFirmwareUpdate();\n          this._updateProgressMessage = undefined;\n          this._updateInProgress = false;\n          this._updateFinishedMessage = message;\n        }\n      }\n    );\n  }\n\n  private _unsubscribeNodeFirmwareUpdate(): void {\n    if (!this._subscribedNodeFirmwareUpdate) {\n      return;\n    }\n    this._subscribedNodeFirmwareUpdate.then((unsub) => unsub());\n    this._subscribedNodeFirmwareUpdate = undefined;\n  }\n\n  private async _firmwareTargetChanged(ev) {\n    this._firmwareTarget = ev.detail.value.firmware_target;\n  }\n\n  private async _uploadFile(ev) {\n    this._firmwareFile = ev.detail.files[0];\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        .ok {\n          color: var(--success-color);\n        }\n\n        .error {\n          color: var(--error-color);\n        }\n\n        .flex-container {\n          display: flex;\n          align-items: center;\n          margin-bottom: 5px;\n        }\n\n        ha-svg-icon {\n          width: 68px;\n          height: 48px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-zwave_js-update-firmware-node\": DialogZWaveJSUpdateFirmwareNode;\n  }\n}\n"],"names":[],"sourceRoot":""}