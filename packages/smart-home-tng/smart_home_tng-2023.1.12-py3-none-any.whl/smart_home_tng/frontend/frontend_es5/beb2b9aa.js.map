{"version":3,"file":"beb2b9aa.js","mappings":";;AAqBA;AACA;AACA;AACA;;;;AAIA;;AAIA;;;;;AAUA;;AAdA;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8EA;;ACjFA;;;AAMA;;AAEA;;;;;AAKA;;;;;AAKA;AAEA;;;AAGA;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6FA;ACvHA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAKA;;;;;;;;AA+CA;;ACxFA;AACA;AACA;AAEA;;;;;;;;;;AA0BA;;;;;;;;;;;;;;;;;;;;;;AClBA;;;;AClBA;AACA;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;;;ACyHA;AACA;AACA;;AAEA;;AAGA;AA5MA;;;AAgNA;AACA;;AAIA;AAEA;AACA;;AAIA;AACA;;AAIA;AAEA;AAEA;;AAGA;;AAEA;;AAGA;;;;;;AAOA;AACA;;AAEA;;AAIA;;AAGA;;AAGA;;AAEA;;AAGA;;AAGA;;;;;;AAMA;;;AAKA;;;;AAMA;;;;AAKA;AAEA;;;AAIA;;;AAKA;;;;;AAKA;AAQA;;;;;;;AAOA;;;AAGA;;AAEA;;;;;;AAWA;AAQA;;;AAGA;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+IA","sources":["webpack://home-assistant-frontend/./src/components/buttons/ha-progress-button.ts","webpack://home-assistant-frontend/./src/components/ha-alert.ts","webpack://home-assistant-frontend/./src/components/ha-button-menu.ts","webpack://home-assistant-frontend/./src/components/ha-clickable-list-item.ts","webpack://home-assistant-frontend/./src/components/ha-list-item.ts","webpack://home-assistant-frontend/./src/components/ha-settings-row.ts","webpack://home-assistant-frontend/./src/panels/config/hardware/ha-config-hardware.ts"],"sourcesContent":["import \"@material/mwc-button\";\nimport { mdiAlertOctagram, mdiCheckBold } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../ha-circular-progress\";\nimport \"../ha-svg-icon\";\n\n@customElement(\"ha-progress-button\")\nexport class HaProgressButton extends LitElement {\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public progress = false;\n\n  @property({ type: Boolean }) public raised = false;\n\n  @state() private _result?: \"success\" | \"error\";\n\n  public render(): TemplateResult {\n    const overlay = this._result || this.progress;\n    return html`\n      <mwc-button\n        ?raised=${this.raised}\n        .disabled=${this.disabled || this.progress}\n        @click=${this._buttonTapped}\n        class=${this._result || \"\"}\n      >\n        <slot></slot>\n      </mwc-button>\n      ${!overlay\n        ? \"\"\n        : html`\n            <div class=\"progress\">\n              ${this._result === \"success\"\n                ? html`<ha-svg-icon .path=${mdiCheckBold}></ha-svg-icon>`\n                : this._result === \"error\"\n                ? html`<ha-svg-icon .path=${mdiAlertOctagram}></ha-svg-icon>`\n                : this.progress\n                ? html`\n                    <ha-circular-progress\n                      size=\"small\"\n                      active\n                    ></ha-circular-progress>\n                  `\n                : \"\"}\n            </div>\n          `}\n    `;\n  }\n\n  public actionSuccess(): void {\n    this._setResult(\"success\");\n  }\n\n  public actionError(): void {\n    this._setResult(\"error\");\n  }\n\n  private _setResult(result: \"success\" | \"error\"): void {\n    this._result = result;\n    setTimeout(() => {\n      this._result = undefined;\n    }, 2000);\n  }\n\n  private _buttonTapped(ev: Event): void {\n    if (this.progress) {\n      ev.stopPropagation();\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        outline: none;\n        display: inline-block;\n        position: relative;\n      }\n\n      mwc-button {\n        transition: all 1s;\n      }\n\n      mwc-button.success {\n        --mdc-theme-primary: white;\n        background-color: var(--success-color);\n        transition: none;\n        border-radius: 4px;\n        pointer-events: none;\n      }\n\n      mwc-button[raised].success {\n        --mdc-theme-primary: var(--success-color);\n        --mdc-theme-on-primary: white;\n      }\n\n      mwc-button.error {\n        --mdc-theme-primary: white;\n        background-color: var(--error-color);\n        transition: none;\n        border-radius: 4px;\n        pointer-events: none;\n      }\n\n      mwc-button[raised].error {\n        --mdc-theme-primary: var(--error-color);\n        --mdc-theme-on-primary: white;\n      }\n\n      .progress {\n        bottom: 4px;\n        position: absolute;\n        text-align: center;\n        top: 4px;\n        width: 100%;\n      }\n\n      ha-svg-icon {\n        color: white;\n      }\n\n      mwc-button.success slot,\n      mwc-button.error slot {\n        visibility: hidden;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-progress-button\": HaProgressButton;\n  }\n}\n","import {\n  mdiAlertCircleOutline,\n  mdiAlertOutline,\n  mdiCheckboxMarkedCircleOutline,\n  mdiClose,\n  mdiInformationOutline,\n} from \"@mdi/js\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-icon-button\";\nimport \"./ha-svg-icon\";\n\nconst ALERT_ICONS = {\n  info: mdiInformationOutline,\n  warning: mdiAlertOutline,\n  error: mdiAlertCircleOutline,\n  success: mdiCheckboxMarkedCircleOutline,\n};\n\ndeclare global {\n  interface HASSDomEvents {\n    \"alert-dismissed-clicked\": undefined;\n  }\n}\n\n@customElement(\"ha-alert\")\nclass HaAlert extends LitElement {\n  @property() public title = \"\";\n\n  @property({ attribute: \"alert-type\" }) public alertType:\n    | \"info\"\n    | \"warning\"\n    | \"error\"\n    | \"success\" = \"info\";\n\n  @property({ type: Boolean }) public dismissable = false;\n\n  @property({ type: Boolean }) public rtl = false;\n\n  public render() {\n    return html`\n      <div\n        class=\"issue-type ${classMap({\n          rtl: this.rtl,\n          [this.alertType]: true,\n        })}\"\n        role=\"alert\"\n      >\n        <div class=\"icon ${this.title ? \"\" : \"no-title\"}\">\n          <slot name=\"icon\">\n            <ha-svg-icon .path=${ALERT_ICONS[this.alertType]}></ha-svg-icon>\n          </slot>\n        </div>\n        <div class=\"content\">\n          <div class=\"main-content\">\n            ${this.title ? html`<div class=\"title\">${this.title}</div>` : \"\"}\n            <slot></slot>\n          </div>\n          <div class=\"action\">\n            <slot name=\"action\">\n              ${this.dismissable\n                ? html`<ha-icon-button\n                    @click=${this._dismiss_clicked}\n                    label=\"Dismiss alert\"\n                    .path=${mdiClose}\n                  ></ha-icon-button>`\n                : \"\"}\n            </slot>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private _dismiss_clicked() {\n    fireEvent(this, \"alert-dismissed-clicked\");\n  }\n\n  static styles = css`\n    .issue-type {\n      position: relative;\n      padding: 8px;\n      display: flex;\n    }\n    .issue-type.rtl {\n      flex-direction: row-reverse;\n    }\n    .issue-type::after {\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      opacity: 0.12;\n      pointer-events: none;\n      content: \"\";\n      border-radius: 4px;\n    }\n    .icon {\n      z-index: 1;\n    }\n    .icon.no-title {\n      align-self: center;\n    }\n    .issue-type.rtl > .content {\n      flex-direction: row-reverse;\n      text-align: right;\n    }\n    .content {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n    }\n    .action {\n      z-index: 1;\n      width: min-content;\n      --mdc-theme-primary: var(--primary-text-color);\n    }\n    .main-content {\n      overflow-wrap: anywhere;\n      word-break: break-word;\n      margin-left: 8px;\n      margin-right: 0;\n    }\n    .issue-type.rtl > .content > .main-content {\n      margin-left: 0;\n      margin-right: 8px;\n    }\n    .title {\n      margin-top: 2px;\n      font-weight: bold;\n    }\n    .action mwc-button,\n    .action ha-icon-button {\n      --mdc-theme-primary: var(--primary-text-color);\n      --mdc-icon-button-size: 36px;\n    }\n    .issue-type.info > .icon {\n      color: var(--info-color);\n    }\n    .issue-type.info::after {\n      background-color: var(--info-color);\n    }\n\n    .issue-type.warning > .icon {\n      color: var(--warning-color);\n    }\n    .issue-type.warning::after {\n      background-color: var(--warning-color);\n    }\n\n    .issue-type.error > .icon {\n      color: var(--error-color);\n    }\n    .issue-type.error::after {\n      background-color: var(--error-color);\n    }\n\n    .issue-type.success > .icon {\n      color: var(--success-color);\n    }\n    .issue-type.success::after {\n      background-color: var(--success-color);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-alert\": HaAlert;\n  }\n}\n","import type { Button } from \"@material/mwc-button\";\nimport \"@material/mwc-menu\";\nimport type { Corner, Menu, MenuCorner } from \"@material/mwc-menu\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HaIconButton } from \"./ha-icon-button\";\n\n@customElement(\"ha-button-menu\")\nexport class HaButtonMenu extends LitElement {\n  protected readonly [FOCUS_TARGET];\n\n  @property() public corner: Corner = \"TOP_START\";\n\n  @property() public menuCorner: MenuCorner = \"START\";\n\n  @property({ type: Number }) public x: number | null = null;\n\n  @property({ type: Number }) public y: number | null = null;\n\n  @property({ type: Boolean }) public multi = false;\n\n  @property({ type: Boolean }) public activatable = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public fixed = false;\n\n  @query(\"mwc-menu\", true) private _menu?: Menu;\n\n  public get items() {\n    return this._menu?.items;\n  }\n\n  public get selected() {\n    return this._menu?.selected;\n  }\n\n  public override focus() {\n    if (this._menu?.open) {\n      this._menu.focusItemAtIndex(0);\n    } else {\n      this._triggerButton?.focus();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div @click=${this._handleClick}>\n        <slot name=\"trigger\" @slotchange=${this._setTriggerAria}></slot>\n      </div>\n      <mwc-menu\n        .corner=${this.corner}\n        .menuCorner=${this.menuCorner}\n        .fixed=${this.fixed}\n        .multi=${this.multi}\n        .activatable=${this.activatable}\n        .y=${this.y}\n        .x=${this.x}\n      >\n        <slot></slot>\n      </mwc-menu>\n    `;\n  }\n\n  protected firstUpdated(changedProps): void {\n    super.firstUpdated(changedProps);\n\n    if (document.dir === \"rtl\") {\n      this.updateComplete.then(() => {\n        this.querySelectorAll(\"mwc-list-item\").forEach((item) => {\n          const style = document.createElement(\"style\");\n          style.innerHTML =\n            \"span.material-icons:first-of-type { margin-left: var(--mdc-list-item-graphic-margin, 32px) !important; margin-right: 0px !important;}\";\n          item!.shadowRoot!.appendChild(style);\n        });\n      });\n    }\n  }\n\n  private _handleClick(): void {\n    if (this.disabled) {\n      return;\n    }\n    this._menu!.anchor = this;\n    this._menu!.show();\n  }\n\n  private get _triggerButton() {\n    return this.querySelector(\n      'ha-icon-button[slot=\"trigger\"], mwc-button[slot=\"trigger\"]'\n    ) as HaIconButton | Button | null;\n  }\n\n  private _setTriggerAria() {\n    if (this._triggerButton) {\n      this._triggerButton.ariaHasPopup = \"menu\";\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ::slotted([disabled]) {\n        color: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-menu\": HaButtonMenu;\n  }\n}\n","import { css, CSSResultGroup, html } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { HaListItem } from \"./ha-list-item\";\n\n@customElement(\"ha-clickable-list-item\")\nexport class HaClickableListItem extends HaListItem {\n  @property() public href?: string;\n\n  @property({ type: Boolean }) public disableHref = false;\n\n  @property({ type: Boolean, reflect: true }) public openNewTab = false;\n\n  @query(\"a\") private _anchor!: HTMLAnchorElement;\n\n  public render() {\n    const r = super.render();\n    const href = this.href || \"\";\n\n    return html`${this.disableHref\n      ? html`<a aria-role=\"option\">${r}</a>`\n      : html`<a\n          aria-role=\"option\"\n          target=${this.openNewTab ? \"_blank\" : \"\"}\n          href=${href}\n          >${r}</a\n        >`}`;\n  }\n\n  firstUpdated() {\n    super.firstUpdated();\n    this.addEventListener(\"keydown\", (ev) => {\n      if (ev.key === \"Enter\" || ev.key === \" \") {\n        this._anchor.click();\n      }\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      super.styles,\n      css`\n        a {\n          width: 100%;\n          height: 100%;\n          display: flex;\n          align-items: center;\n          padding-left: var(--mdc-list-side-padding, 20px);\n          padding-right: var(--mdc-list-side-padding, 20px);\n          overflow: hidden;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-clickable-list-item\": HaClickableListItem;\n  }\n}\n","import { ListItemBase } from \"@material/mwc-list/mwc-list-item-base\";\nimport { styles } from \"@material/mwc-list/mwc-list-item.css\";\nimport { css, CSSResultGroup } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-list-item\")\nexport class HaListItem extends ListItemBase {\n  static get styles(): CSSResultGroup {\n    return [\n      styles,\n      css`\n        :host {\n          padding-left: var(--mdc-list-side-padding, 20px);\n          padding-right: var(--mdc-list-side-padding, 20px);\n        }\n        :host([graphic=\"avatar\"]:not([twoLine])),\n        :host([graphic=\"icon\"]:not([twoLine])) {\n          height: 48px;\n        }\n        span.material-icons:first-of-type {\n          margin-inline-start: 0px !important;\n          margin-inline-end: var(\n            --mdc-list-item-graphic-margin,\n            16px\n          ) !important;\n          direction: var(--direction);\n        }\n        span.material-icons:last-of-type {\n          margin-inline-start: auto !important;\n          margin-inline-end: 0px !important;\n          direction: var(--direction);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-list-item\": HaListItem;\n  }\n}\n","import \"@polymer/paper-item/paper-item-body\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-settings-row\")\nexport class HaSettingsRow extends LitElement {\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @property({ type: Boolean, attribute: \"three-line\" })\n  public threeLine = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"prefix-wrap\">\n        <slot name=\"prefix\"></slot>\n        <paper-item-body\n          ?two-line=${!this.threeLine}\n          ?three-line=${this.threeLine}\n        >\n          <slot name=\"heading\"></slot>\n          <div secondary><slot name=\"description\"></slot></div>\n        </paper-item-body>\n      </div>\n      <div class=\"content\"><slot></slot></div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n        padding: 0 16px;\n        align-content: normal;\n        align-self: auto;\n        align-items: center;\n      }\n      paper-item-body {\n        padding: 8px 16px 8px 0;\n      }\n      paper-item-body[two-line] {\n        min-height: calc(\n          var(--paper-item-body-two-line-min-height, 72px) - 16px\n        );\n        flex: 1;\n      }\n      .content {\n        display: contents;\n      }\n      :host(:not([narrow])) .content {\n        display: var(--settings-row-content-display, flex);\n        justify-content: flex-end;\n        flex: 1;\n        padding: 16px 0;\n      }\n      .content ::slotted(*) {\n        width: var(--settings-row-content-width);\n      }\n      :host([narrow]) {\n        align-items: normal;\n        flex-direction: column;\n        border-top: 1px solid var(--divider-color);\n        padding-bottom: 8px;\n      }\n      ::slotted(ha-switch) {\n        padding: 16px 0;\n      }\n      div[secondary] {\n        white-space: normal;\n      }\n      .prefix-wrap {\n        display: var(--settings-row-prefix-display);\n      }\n      :host([narrow]) .prefix-wrap {\n        display: flex;\n        align-items: center;\n      }\n    `;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-settings-row\": HaSettingsRow;\n  }\n}\n","import \"@material/mwc-list/mwc-list\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { mdiDotsVertical } from \"@mdi/js\";\nimport type { ChartOptions } from \"chart.js\";\nimport { css, html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { numberFormatToLocale } from \"../../../common/number/format_number\";\nimport { round } from \"../../../common/number/round\";\nimport \"../../../components/buttons/ha-progress-button\";\nimport \"../../../components/chart/ha-chart-base\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-clickable-list-item\";\nimport \"../../../components/ha-icon-next\";\nimport \"../../../components/ha-settings-row\";\nimport {\n  BOARD_NAMES,\n  HardwareInfo,\n  SystemStatusStreamMessage,\n} from \"../../../data/hardware\";\nimport {\n  extractApiErrorMessage,\n  ignoreSupervisorError,\n} from \"../../../data/hassio/common\";\nimport {\n  fetchHassioHassOsInfo,\n  fetchHassioHostInfo,\n  HassioHassOSInfo,\n  HassioHostInfo,\n  rebootHost,\n  shutdownHost,\n} from \"../../../data/hassio/host\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-subpage\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport { DEFAULT_PRIMARY_COLOR } from \"../../../resources/ha-style\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { hardwareBrandsUrl } from \"../../../util/brands-url\";\nimport { showToast } from \"../../../util/toast\";\nimport { showhardwareAvailableDialog } from \"./show-dialog-hardware-available\";\n\nconst DATASAMPLES = 60;\n\nconst DATA_SET_CONFIG = {\n  fill: \"origin\",\n  borderColor: DEFAULT_PRIMARY_COLOR,\n  backgroundColor: DEFAULT_PRIMARY_COLOR + \"2B\",\n  pointRadius: 0,\n  lineTension: 0.2,\n  borderWidth: 1,\n};\n\n@customElement(\"ha-config-hardware\")\nclass HaConfigHardware extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @state() private _error?: { code: string; message: string };\n\n  @state() private _OSData?: HassioHassOSInfo;\n\n  @state() private _hostData?: HassioHostInfo;\n\n  @state() private _hardwareInfo?: HardwareInfo;\n\n  @state() private _chartOptions?: ChartOptions;\n\n  @state() private _systemStatusData?: SystemStatusStreamMessage;\n\n  private _memoryEntries: { x: number; y: number | null }[] = [];\n\n  private _cpuEntries: { x: number; y: number | null }[] = [];\n\n  public hassSubscribe() {\n    return isComponentLoaded(this.hass, \"hardware\")\n      ? [\n          this.hass.connection.subscribeMessage<SystemStatusStreamMessage>(\n            (message) => {\n              // Only store the last 60 entries\n              this._memoryEntries.shift();\n              this._cpuEntries.shift();\n\n              this._memoryEntries.push({\n                x: new Date(message.timestamp).getTime(),\n                y: message.memory_used_percent,\n              });\n              this._cpuEntries.push({\n                x: new Date(message.timestamp).getTime(),\n                y: message.cpu_percent,\n              });\n\n              this._systemStatusData = message;\n            },\n            {\n              type: \"hardware/subscribe_system_status\",\n            }\n          ),\n        ]\n      : [];\n  }\n\n  protected willUpdate(): void {\n    if (!this.hasUpdated) {\n      this._chartOptions = {\n        animation: false,\n        responsive: true,\n        scales: {\n          y: {\n            gridLines: {\n              drawTicks: false,\n            },\n            ticks: {\n              maxTicksLimit: 7,\n              fontSize: 10,\n              max: 100,\n              min: 0,\n              stepSize: 1,\n              callback: (value) => value + \"%\",\n            },\n          },\n          x: {\n            type: \"time\",\n            adapters: {\n              date: {\n                locale: this.hass.locale,\n              },\n            },\n            gridLines: {\n              display: true,\n              drawTicks: false,\n            },\n            ticks: {\n              maxRotation: 0,\n              sampleSize: 5,\n              autoSkipPadding: 20,\n              major: {\n                enabled: true,\n              },\n              fontSize: 10,\n              autoSkip: true,\n              maxTicksLimit: 5,\n            },\n          },\n        },\n        // @ts-expect-error\n        locale: numberFormatToLocale(this.hass.locale),\n      };\n    }\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    this._load();\n\n    const date = new Date();\n    // Force graph to start drawing from the right\n    for (let i = 0; i < DATASAMPLES; i++) {\n      const t = new Date(date);\n      t.setSeconds(t.getSeconds() - 5 * (DATASAMPLES - i));\n      this._memoryEntries.push({ x: t.getTime(), y: null });\n      this._cpuEntries.push({ x: t.getTime(), y: null });\n    }\n  }\n\n  protected render(): TemplateResult {\n    let boardId: string | undefined;\n    let boardName: string | undefined;\n    let imageURL: string | undefined;\n    let documentationURL: string | undefined;\n\n    if (this._hardwareInfo?.hardware.length) {\n      const boardData = this._hardwareInfo.hardware[0];\n\n      boardId = boardData.board.hassio_board_id;\n      boardName = boardData.name;\n      documentationURL = boardData.url;\n      imageURL = hardwareBrandsUrl({\n        category: \"boards\",\n        manufacturer: boardData.board.manufacturer,\n        model: boardData.board.model,\n        darkOptimized: this.hass.themes?.darkMode,\n      });\n    } else if (this._OSData?.board) {\n      boardId = this._OSData.board;\n      boardName = BOARD_NAMES[this._OSData.board];\n    }\n\n    return html`\n      <hass-subpage\n        back-path=\"/config/system\"\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .header=${this.hass.localize(\"ui.panel.config.hardware.caption\")}\n      >\n        ${isComponentLoaded(this.hass, \"hassio\")\n          ? html`<ha-button-menu corner=\"BOTTOM_START\" slot=\"toolbar-icon\">\n              <ha-icon-button\n                .label=${this.hass.localize(\"ui.common.menu\")}\n                .path=${mdiDotsVertical}\n                slot=\"trigger\"\n              ></ha-icon-button>\n              <mwc-list-item @click=${this._openHardware}\n                >${this.hass.localize(\n                  \"ui.panel.config.hardware.available_hardware.title\"\n                )}</mwc-list-item\n              >\n              ${this._hostData\n                ? html`\n                    <mwc-list-item class=\"warning\" @click=${this._hostReboot}\n                      >${this.hass.localize(\n                        \"ui.panel.config.hardware.reboot_host\"\n                      )}</mwc-list-item\n                    >\n                    <mwc-list-item class=\"warning\" @click=${this._hostShutdown}\n                      >${this.hass.localize(\n                        \"ui.panel.config.hardware.shutdown_host\"\n                      )}</mwc-list-item\n                    >\n                  `\n                : \"\"}\n            </ha-button-menu>`\n          : \"\"}\n        ${this._error\n          ? html`\n              <ha-alert alert-type=\"error\"\n                >${this._error.message || this._error.code}</ha-alert\n              >\n            `\n          : \"\"}\n        <div class=\"content\">\n          ${boardName\n            ? html`\n                <ha-card outlined>\n                  <div class=\"card-content\">\n                    <mwc-list>\n                      <mwc-list-item\n                        noninteractive\n                        graphic=${ifDefined(imageURL ? \"medium\" : undefined)}\n                        .twoline=${Boolean(boardId)}\n                      >\n                        ${imageURL\n                          ? html`<img slot=\"graphic\" src=${imageURL} />`\n                          : \"\"}\n                        <span class=\"primary-text\">\n                          ${boardName ||\n                          this.hass.localize(\"ui.panel.config.hardware.board\")}\n                        </span>\n                        ${boardId\n                          ? html`\n                              <span class=\"secondary-text\" slot=\"secondary\"\n                                >${boardId}</span\n                              >\n                            `\n                          : \"\"}\n                      </mwc-list-item>\n                      ${documentationURL\n                        ? html`\n                            <ha-clickable-list-item\n                              .href=${documentationURL}\n                              openNewTab\n                              twoline\n                              hasMeta\n                            >\n                              <span\n                                >${this.hass.localize(\n                                  \"ui.panel.config.hardware.documentation\"\n                                )}</span\n                              >\n                              <span slot=\"secondary\"\n                                >${this.hass.localize(\n                                  \"ui.panel.config.hardware.documentation_description\"\n                                )}</span\n                              >\n                              <ha-icon-next slot=\"meta\"></ha-icon-next>\n                            </ha-clickable-list-item>\n                          `\n                        : \"\"}\n                    </mwc-list>\n                  </div>\n                </ha-card>\n              `\n            : \"\"}\n          ${this._systemStatusData\n            ? html`<ha-card outlined>\n                  <div class=\"header\">\n                    <div class=\"title\">\n                      ${this.hass.localize(\n                        \"ui.panel.config.hardware.processor\"\n                      )}\n                    </div>\n                    <div class=\"value\">\n                      ${this._systemStatusData.cpu_percent || \"-\"}%\n                    </div>\n                  </div>\n                  <div class=\"card-content\">\n                    <ha-chart-base\n                      .data=${{\n                        datasets: [\n                          {\n                            ...DATA_SET_CONFIG,\n                            data: this._cpuEntries,\n                          },\n                        ],\n                      }}\n                      .options=${this._chartOptions}\n                    ></ha-chart-base>\n                  </div>\n                </ha-card>\n                <ha-card outlined>\n                  <div class=\"header\">\n                    <div class=\"title\">\n                      ${this.hass.localize(\"ui.panel.config.hardware.memory\")}\n                    </div>\n                    <div class=\"value\">\n                      ${round(this._systemStatusData.memory_used_mb / 1024, 1)}\n                      GB /\n                      ${round(\n                        (this._systemStatusData.memory_used_mb! +\n                          this._systemStatusData.memory_free_mb!) /\n                          1024,\n                        0\n                      )}\n                      GB\n                    </div>\n                  </div>\n                  <div class=\"card-content\">\n                    <ha-chart-base\n                      .data=${{\n                        datasets: [\n                          {\n                            ...DATA_SET_CONFIG,\n                            data: this._memoryEntries,\n                          },\n                        ],\n                      }}\n                      .options=${this._chartOptions}\n                    ></ha-chart-base>\n                  </div>\n                </ha-card>`\n            : \"\"}\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  private async _load() {\n    const isHassioLoaded = isComponentLoaded(this.hass, \"hassio\");\n    try {\n      if (isComponentLoaded(this.hass, \"hardware\")) {\n        this._hardwareInfo = await this.hass.callWS({ type: \"hardware/info\" });\n      }\n\n      if (isHassioLoaded && !this._hardwareInfo?.hardware.length) {\n        this._OSData = await fetchHassioHassOsInfo(this.hass);\n      }\n\n      if (isHassioLoaded) {\n        this._hostData = await fetchHassioHostInfo(this.hass);\n      }\n    } catch (err: any) {\n      this._error = err.message || err;\n    }\n  }\n\n  private async _openHardware() {\n    showhardwareAvailableDialog(this);\n  }\n\n  private async _hostReboot(): Promise<void> {\n    const confirmed = await showConfirmationDialog(this, {\n      title: this.hass.localize(\"ui.panel.config.hardware.reboot_host\"),\n      text: this.hass.localize(\"ui.panel.config.hardware.reboot_host_confirm\"),\n      confirmText: this.hass.localize(\"ui.panel.config.hardware.reboot_host\"),\n      dismissText: this.hass.localize(\"ui.common.cancel\"),\n    });\n\n    if (!confirmed) {\n      return;\n    }\n\n    showToast(this, {\n      message: this.hass.localize(\"ui.panel.config.hardware.rebooting_host\"),\n      duration: 0,\n    });\n\n    try {\n      await rebootHost(this.hass);\n    } catch (err: any) {\n      // Ignore connection errors, these are all expected\n      if (this.hass.connection.connected && !ignoreSupervisorError(err)) {\n        showAlertDialog(this, {\n          title: this.hass.localize(\n            \"ui.panel.config.hardware.failed_to_reboot_host\"\n          ),\n          text: extractApiErrorMessage(err),\n        });\n      }\n    }\n  }\n\n  private async _hostShutdown(): Promise<void> {\n    const confirmed = await showConfirmationDialog(this, {\n      title: this.hass.localize(\"ui.panel.config.hardware.shutdown_host\"),\n      text: this.hass.localize(\n        \"ui.panel.config.hardware.shutdown_host_confirm\"\n      ),\n      confirmText: this.hass.localize(\"ui.panel.config.hardware.shutdown_host\"),\n      dismissText: this.hass.localize(\"ui.common.cancel\"),\n    });\n\n    if (!confirmed) {\n      return;\n    }\n\n    showToast(this, {\n      message: this.hass.localize(\n        \"ui.panel.config.hardware.host_shutting_down\"\n      ),\n      duration: 0,\n    });\n\n    try {\n      await shutdownHost(this.hass);\n    } catch (err: any) {\n      // Ignore connection errors, these are all expected\n      if (this.hass.connection.connected && !ignoreSupervisorError(err)) {\n        showAlertDialog(this, {\n          title: this.hass.localize(\n            \"ui.panel.config.hardware.failed_to_shutdown_host\"\n          ),\n          text: extractApiErrorMessage(err),\n        });\n      }\n    }\n  }\n\n  static styles = [\n    haStyle,\n    css`\n      .content {\n        padding: 28px 20px 0;\n        max-width: 1040px;\n        margin: 0 auto;\n      }\n      ha-card {\n        max-width: 600px;\n        margin: 0 auto;\n        height: 100%;\n        justify-content: space-between;\n        flex-direction: column;\n        display: flex;\n        margin-bottom: 16px;\n      }\n      .card-content {\n        display: flex;\n        justify-content: space-between;\n        flex-direction: column;\n        padding: 16px;\n      }\n      ha-button-menu {\n        color: var(--secondary-text-color);\n        --mdc-menu-min-width: 200px;\n      }\n\n      .primary-text {\n        font-size: 16px;\n      }\n      .secondary-text {\n        font-size: 14px;\n      }\n\n      .header {\n        padding: 16px;\n        display: flex;\n        justify-content: space-between;\n      }\n\n      .header .title {\n        color: var(--secondary-text-color);\n        font-size: 18px;\n      }\n\n      .header .value {\n        font-size: 16px;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-hardware\": HaConfigHardware;\n  }\n}\n"],"names":[],"sourceRoot":""}