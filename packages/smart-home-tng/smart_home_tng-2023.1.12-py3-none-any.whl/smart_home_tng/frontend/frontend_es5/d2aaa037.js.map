{"version":3,"file":"d2aaa037.js","mappings":";AAaA;;AAEA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;;;;;;;;;;;;;;;;;;;ACtFA;;;;;AAYA;;;;;;;ACuBA;AAKA;;;AAGA;;;AAvEA;AA4EA;;AAEA;;AAGA;;;;;AASA;AACA;AACA;;;AAGA;AA/FA;;;;AAoGA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA1DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmIA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-header-bar.ts","webpack://home-assistant-frontend/./src/components/media-player/dialog-media-player-browse.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","// @ts-ignore\nimport topAppBarStyles from \"@material/top-app-bar/dist/mdc.top-app-bar.min.css\";\nimport { css, html, LitElement, unsafeCSS } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-header-bar\")\nexport class HaHeaderBar extends LitElement {\n  protected render() {\n    return html`<header class=\"mdc-top-app-bar\">\n      <div class=\"mdc-top-app-bar__row\">\n        <section\n          class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-start\"\n          id=\"navigation\"\n        >\n          <slot name=\"navigationIcon\"></slot>\n          <span class=\"mdc-top-app-bar__title\">\n            <slot name=\"title\"></slot>\n          </span>\n        </section>\n        <section\n          class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-end\"\n          id=\"actions\"\n          role=\"toolbar\"\n        >\n          <slot name=\"actionItems\"></slot>\n        </section>\n      </div>\n    </header>`;\n  }\n\n  static get styles() {\n    return [\n      unsafeCSS(topAppBarStyles),\n      css`\n        .mdc-top-app-bar {\n          position: static;\n          color: var(--mdc-theme-on-primary, #fff);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-header-bar\": HaHeaderBar;\n  }\n}\n","import \"../ha-header-bar\";\nimport { mdiArrowLeft, mdiClose } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent, HASSDomEvent } from \"../../common/dom/fire_event\";\nimport { computeRTLDirection } from \"../../common/util/compute_rtl\";\nimport type {\n  MediaPickedEvent,\n  MediaPlayerBrowseAction,\n  MediaPlayerItem,\n} from \"../../data/media-player\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-dialog\";\nimport \"./ha-media-player-browse\";\nimport \"./ha-media-manage-button\";\nimport type {\n  HaMediaPlayerBrowse,\n  MediaPlayerItemId,\n} from \"./ha-media-player-browse\";\nimport { MediaPlayerBrowseDialogParams } from \"./show-media-browser-dialog\";\n\n@customElement(\"dialog-media-player-browse\")\nclass DialogMediaPlayerBrowse extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _currentItem?: MediaPlayerItem;\n\n  @state() private _navigateIds?: MediaPlayerItemId[];\n\n  @state() private _params?: MediaPlayerBrowseDialogParams;\n\n  @query(\"ha-media-player-browse\") private _browser!: HaMediaPlayerBrowse;\n\n  public showDialog(params: MediaPlayerBrowseDialogParams): void {\n    this._params = params;\n    this._navigateIds = params.navigateIds || [\n      {\n        media_content_id: undefined,\n        media_content_type: undefined,\n      },\n    ];\n  }\n\n  public closeDialog() {\n    this._params = undefined;\n    this._navigateIds = undefined;\n    this._currentItem = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params || !this._navigateIds) {\n      return html``;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        escapeKeyAction\n        hideActions\n        flexContent\n        .heading=${!this._currentItem\n          ? this.hass.localize(\n              \"ui.components.media-browser.media-player-browser\"\n            )\n          : this._currentItem.title}\n        @closed=${this.closeDialog}\n      >\n        <ha-header-bar slot=\"heading\">\n          ${this._navigateIds.length > 1\n            ? html`\n                <ha-icon-button\n                  slot=\"navigationIcon\"\n                  .path=${mdiArrowLeft}\n                  @click=${this._goBack}\n                ></ha-icon-button>\n              `\n            : \"\"}\n          <span slot=\"title\">\n            ${!this._currentItem\n              ? this.hass.localize(\n                  \"ui.components.media-browser.media-player-browser\"\n                )\n              : this._currentItem.title}\n          </span>\n\n          <ha-media-manage-button\n            slot=\"actionItems\"\n            .hass=${this.hass}\n            .currentItem=${this._currentItem}\n            @media-refresh=${this._refreshMedia}\n          ></ha-media-manage-button>\n          <ha-icon-button\n            .label=${this.hass.localize(\"ui.dialogs.generic.close\")}\n            .path=${mdiClose}\n            dialogAction=\"close\"\n            slot=\"actionItems\"\n            class=\"header_button\"\n            dir=${computeRTLDirection(this.hass)}\n          ></ha-icon-button>\n        </ha-header-bar>\n        <ha-media-player-browse\n          dialog\n          .hass=${this.hass}\n          .entityId=${this._params.entityId}\n          .navigateIds=${this._navigateIds}\n          .action=${this._action}\n          @close-dialog=${this.closeDialog}\n          @media-picked=${this._mediaPicked}\n          @media-browsed=${this._mediaBrowsed}\n        ></ha-media-player-browse>\n      </ha-dialog>\n    `;\n  }\n\n  private _goBack() {\n    this._navigateIds = this._navigateIds?.slice(0, -1);\n    this._currentItem = undefined;\n  }\n\n  private _mediaBrowsed(ev: { detail: HASSDomEvents[\"media-browsed\"] }) {\n    this._navigateIds = ev.detail.ids;\n    this._currentItem = ev.detail.current;\n  }\n\n  private _mediaPicked(ev: HASSDomEvent<MediaPickedEvent>): void {\n    this._params!.mediaPickedCallback(ev.detail);\n    if (this._action !== \"play\") {\n      this.closeDialog();\n    }\n  }\n\n  private get _action(): MediaPlayerBrowseAction {\n    return this._params!.action || \"play\";\n  }\n\n  private _refreshMedia() {\n    this._browser.refresh();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --dialog-z-index: 8;\n          --dialog-content-padding: 0;\n        }\n\n        ha-media-player-browse {\n          --media-browser-max-height: calc(100vh - 65px);\n          height: calc(100vh - 65px);\n          direction: ltr;\n        }\n\n        @media (min-width: 800px) {\n          ha-dialog {\n            --mdc-dialog-max-width: 800px;\n            --dialog-surface-position: fixed;\n            --dialog-surface-top: 40px;\n            --mdc-dialog-max-height: calc(100vh - 72px);\n          }\n          ha-media-player-browse {\n            position: initial;\n            --media-browser-max-height: 100vh - 137px;\n            height: 100vh - 137px;\n            width: 700px;\n          }\n        }\n\n        ha-header-bar {\n          --mdc-theme-on-primary: var(--primary-text-color);\n          --mdc-theme-primary: var(--mdc-theme-surface);\n          flex-shrink: 0;\n          border-bottom: 1px solid var(--divider-color, rgba(0, 0, 0, 0.12));\n        }\n\n        ha-media-manage-button {\n          --mdc-theme-primary: var(--mdc-theme-on-primary);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-media-player-browse\": DialogMediaPlayerBrowse;\n  }\n}\n"],"names":[],"sourceRoot":""}