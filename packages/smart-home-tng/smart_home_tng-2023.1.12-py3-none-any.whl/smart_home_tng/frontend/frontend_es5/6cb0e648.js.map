{"version":3,"file":"6cb0e648.js","mappings":";;;AA4BA;AACA;;;;AAIA;;;AAIA;;;;;;ACYA;AAGA;;;;;AAKA;;;AAKA;;;;;;;;;AASA;AACA;;;AAhCA;;;;;;;;;;;;;AA8DA;;AC5CA;AACA;;AAEA;;;AAIA;AACA;AACA;AAEA;;;AAkBA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;;;AASA;;AAGA;;;AAkBA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AAIA;;AAKA;;;;ACvBA;;;;;;;;;;;;;;;;;;;AC1BA;;;;;AAYA;ACTA;;;AAKA;AAEA;AACA;;AAGA;;;;;;;;;;;;;;;;;;;;;AA6DA","sources":["webpack://home-assistant-frontend/./hassio/src/components/hassio-upload-backup.ts","webpack://home-assistant-frontend/./hassio/src/dialogs/backup/dialog-hassio-backup-upload.ts","webpack://home-assistant-frontend/mwc-circular-progress-base.ts","webpack://home-assistant-frontend/./src/components/ha-ansi-to-html.ts","webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/components/ha-circular-progress.ts","webpack://home-assistant-frontend/./src/components/ha-header-bar.ts","webpack://home-assistant-frontend/./src/onboarding/onboarding-restore-backup.ts"],"sourcesContent":["import { mdiFolderUpload } from \"@mdi/js\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../src/common/dom/fire_event\";\nimport \"../../../src/components/ha-circular-progress\";\nimport \"../../../src/components/ha-file-upload\";\nimport { HassioBackup, uploadBackup } from \"../../../src/data/hassio/backup\";\nimport { extractApiErrorMessage } from \"../../../src/data/hassio/common\";\nimport { showAlertDialog } from \"../../../src/dialogs/generic/show-dialog-box\";\nimport { HomeAssistant } from \"../../../src/types\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"backup-uploaded\": { backup: HassioBackup };\n  }\n}\n\n@customElement(\"hassio-upload-backup\")\nexport class HassioUploadBackup extends LitElement {\n  public hass?: HomeAssistant;\n\n  @state() public value: string | null = null;\n\n  @state() private _uploading = false;\n\n  public render(): TemplateResult {\n    return html`\n      <ha-file-upload\n        .hass=${this.hass}\n        .uploading=${this._uploading}\n        .icon=${mdiFolderUpload}\n        accept=\"application/x-tar\"\n        label=\"Upload backup\"\n        @file-picked=${this._uploadFile}\n        auto-open-file-dialog\n      ></ha-file-upload>\n    `;\n  }\n\n  private async _uploadFile(ev) {\n    const file = ev.detail.files[0];\n\n    if (![\"application/x-tar\"].includes(file.type)) {\n      showAlertDialog(this, {\n        title: \"Unsupported file format\",\n        text: \"Please choose a Home Assistant backup file (.tar)\",\n        confirmText: \"ok\",\n      });\n      return;\n    }\n    this._uploading = true;\n    try {\n      const backup = await uploadBackup(this.hass, file);\n      fireEvent(this, \"backup-uploaded\", { backup: backup.data });\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: \"Upload failed\",\n        text: extractApiErrorMessage(err),\n        confirmText: \"ok\",\n      });\n    } finally {\n      this._uploading = false;\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hassio-upload-backup\": HassioUploadBackup;\n  }\n}\n","import { mdiClose } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../src/common/dom/fire_event\";\nimport \"../../../../src/components/ha-header-bar\";\nimport \"../../../../src/components/ha-icon-button\";\nimport { HassDialog } from \"../../../../src/dialogs/make-dialog-manager\";\nimport { haStyleDialog } from \"../../../../src/resources/styles\";\nimport type { HomeAssistant } from \"../../../../src/types\";\nimport \"../../components/hassio-upload-backup\";\nimport { HassioBackupUploadDialogParams } from \"./show-dialog-backup-upload\";\n\n@customElement(\"dialog-hassio-backup-upload\")\nexport class DialogHassioBackupUpload\n  extends LitElement\n  implements HassDialog<HassioBackupUploadDialogParams>\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _dialogParams?: HassioBackupUploadDialogParams;\n\n  public async showDialog(\n    dialogParams: HassioBackupUploadDialogParams\n  ): Promise<void> {\n    this._dialogParams = dialogParams;\n    await this.updateComplete;\n  }\n\n  public closeDialog(): void {\n    if (this._dialogParams && !this._dialogParams.onboarding) {\n      if (this._dialogParams.reloadBackup) {\n        this._dialogParams.reloadBackup();\n      }\n    }\n    this._dialogParams = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._dialogParams) {\n      return html``;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        escapeKeyAction\n        hideActions\n        .heading=${this.hass?.localize(\n          \"ui.panel.page-onboarding.restore.upload_backup\"\n        ) || \"Upload backup\"}\n        @closed=${this.closeDialog}\n      >\n        <div slot=\"heading\">\n          <ha-header-bar>\n            <span slot=\"title\"\n              >${this.hass?.localize(\n                \"ui.panel.page-onboarding.restore.upload_backup\"\n              ) || \"Upload backup\"}</span\n            >\n            <ha-icon-button\n              .label=${this.hass?.localize(\"ui.common.close\") || \"Close\"}\n              .path=${mdiClose}\n              slot=\"actionItems\"\n              dialogAction=\"cancel\"\n              dialogInitialFocus\n            ></ha-icon-button>\n          </ha-header-bar>\n        </div>\n        <hassio-upload-backup\n          @backup-uploaded=${this._backupUploaded}\n          .hass=${this.hass}\n        ></hassio-upload-backup>\n      </ha-dialog>\n    `;\n  }\n\n  private _backupUploaded(ev) {\n    const backup = ev.detail.backup;\n    this._dialogParams?.showBackup(backup.slug);\n    this.closeDialog();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-header-bar {\n          --mdc-theme-on-primary: var(--primary-text-color);\n          --mdc-theme-primary: var(--mdc-theme-surface);\n          flex-shrink: 0;\n        }\n        /* overrule the ha-style-dialog max-height on small screens */\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          ha-header-bar {\n            --mdc-theme-primary: var(--app-header-background-color);\n            --mdc-theme-on-primary: var(--app-header-text-color, white);\n          }\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-hassio-backup-upload\": DialogHassioBackupUpload;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\nimport {ariaProperty} from '@material/mwc-base/aria-property.js';\nimport {html, LitElement, PropertyValues, TemplateResult} from 'lit';\nimport {property} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\nimport {ifDefined} from 'lit/directives/if-defined.js';\nimport {styleMap} from 'lit/directives/style-map.js';\n\n/** @soyCompatible */\nexport class CircularProgressBase extends LitElement {\n  @property({type: Boolean, reflect: true}) indeterminate = false;\n\n  @property({type: Number, reflect: true}) progress = 0;\n\n  @property({type: Number, reflect: true}) density = 0;\n\n  @property({type: Boolean, reflect: true}) closed = false;\n\n  /** @soyPrefixAttribute */\n  @ariaProperty\n  @property({type: String, attribute: 'aria-label'})\n  override ariaLabel!: string\n\n  open() {\n    this.closed = false;\n  }\n\n  close() {\n    this.closed = true;\n  }\n\n  /**\n   * @soyTemplate\n   */\n  protected override render(): TemplateResult {\n    /** @classMap */\n    const classes = {\n      'mdc-circular-progress--closed': this.closed,\n      'mdc-circular-progress--indeterminate': this.indeterminate,\n    };\n\n    const containerSideLength = 48 + this.density * 4;\n    /** @styleMap */\n    const styles = {\n      'width': `${containerSideLength}px`,\n      'height': `${containerSideLength}px`,\n    };\n\n    return html`\n      <div\n        class=\"mdc-circular-progress ${classMap(classes)}\"\n        style=\"${styleMap(styles)}\"\n        role=\"progressbar\"\n        aria-label=\"${ifDefined(this.ariaLabel)}\"\n        aria-valuemin=\"0\"\n        aria-valuemax=\"1\"\n        aria-valuenow=\"${\n        ifDefined(this.indeterminate ? undefined : this.progress)}\">\n        ${this.renderDeterminateContainer()}\n        ${this.renderIndeterminateContainer()}\n      </div>`;\n  }\n\n  /**\n   * @soyTemplate\n   */\n  protected renderDeterminateContainer(): TemplateResult {\n    const sideLength = 48 + this.density * 4;\n    const center = sideLength / 2;\n    const circleRadius = this.density >= -3 ? 18 + this.density * 11 / 6 :\n                                              12.5 + (this.density + 3) * 5 / 4;\n    const circumference = 2 * 3.1415926 * circleRadius;\n    const determinateStrokeDashOffset = (1 - this.progress) * circumference;\n    const strokeWidth = this.density >= -3 ? 4 + this.density * (1 / 3) :\n                                             3 + (this.density + 3) * (1 / 6);\n\n    return html`\n      <div class=\"mdc-circular-progress__determinate-container\">\n        <svg class=\"mdc-circular-progress__determinate-circle-graphic\"\n             viewBox=\"0 0 ${sideLength} ${sideLength}\">\n          <circle class=\"mdc-circular-progress__determinate-track\"\n                  cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                  stroke-width=\"${strokeWidth}\"></circle>\n          <circle class=\"mdc-circular-progress__determinate-circle\"\n                  cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                  stroke-dasharray=\"${2 * 3.1415926 * circleRadius}\"\n                  stroke-dashoffset=\"${determinateStrokeDashOffset}\"\n                  stroke-width=\"${strokeWidth}\"></circle>\n        </svg>\n      </div>`;\n  }\n\n  /**\n   * @soyTemplate\n   */\n  protected renderIndeterminateContainer(): TemplateResult {\n    return html`\n      <div class=\"mdc-circular-progress__indeterminate-container\">\n        <div class=\"mdc-circular-progress__spinner-layer\">\n          ${this.renderIndeterminateSpinnerLayer()}\n        </div>\n      </div>`;\n  }\n\n  /**\n   * @soyTemplate\n   */\n  protected renderIndeterminateSpinnerLayer(): TemplateResult {\n    const sideLength = 48 + this.density * 4;\n    const center = sideLength / 2;\n    const circleRadius = this.density >= -3 ? 18 + this.density * 11 / 6 :\n                                              12.5 + (this.density + 3) * 5 / 4;\n    const circumference = 2 * 3.1415926 * circleRadius;\n    const halfCircumference = 0.5 * circumference;\n    const strokeWidth = this.density >= -3 ? 4 + this.density * (1 / 3) :\n                                             3 + (this.density + 3) * (1 / 6);\n\n    return html`\n        <div class=\"mdc-circular-progress__circle-clipper mdc-circular-progress__circle-left\">\n          <svg class=\"mdc-circular-progress__indeterminate-circle-graphic\"\n               viewBox=\"0 0 ${sideLength} ${sideLength}\">\n            <circle cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                    stroke-dasharray=\"${circumference}\"\n                    stroke-dashoffset=\"${halfCircumference}\"\n                    stroke-width=\"${strokeWidth}\"></circle>\n          </svg>\n        </div>\n        <div class=\"mdc-circular-progress__gap-patch\">\n          <svg class=\"mdc-circular-progress__indeterminate-circle-graphic\"\n               viewBox=\"0 0 ${sideLength} ${sideLength}\">\n            <circle cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                    stroke-dasharray=\"${circumference}\"\n                    stroke-dashoffset=\"${halfCircumference}\"\n                    stroke-width=\"${strokeWidth * 0.8}\"></circle>\n          </svg>\n        </div>\n        <div class=\"mdc-circular-progress__circle-clipper mdc-circular-progress__circle-right\">\n          <svg class=\"mdc-circular-progress__indeterminate-circle-graphic\"\n               viewBox=\"0 0 ${sideLength} ${sideLength}\">\n            <circle cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                    stroke-dasharray=\"${circumference}\"\n                    stroke-dashoffset=\"${halfCircumference}\"\n                    stroke-width=\"${strokeWidth}\"></circle>\n          </svg>\n        </div>`;\n  }\n\n  override update(changedProperties: PropertyValues<this>) {\n    super.update(changedProperties);\n\n    // Bound progress value in interval [0, 1].\n    if (changedProperties.has('progress')) {\n      if (this.progress > 1) {\n        this.progress = 1;\n      }\n\n      if (this.progress < 0) {\n        this.progress = 0;\n      }\n    }\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\ninterface State {\n  bold: boolean;\n  italic: boolean;\n  underline: boolean;\n  strikethrough: boolean;\n  foregroundColor: null | string;\n  backgroundColor: null | string;\n}\n\n@customElement(\"ha-ansi-to-html\")\nclass HaAnsiToHtml extends LitElement {\n  @property() public content!: string;\n\n  protected render(): TemplateResult | void {\n    return html`${this._parseTextToColoredPre(this.content)}`;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      pre {\n        overflow-x: auto;\n        white-space: pre-wrap;\n        overflow-wrap: break-word;\n      }\n      .bold {\n        font-weight: bold;\n      }\n      .italic {\n        font-style: italic;\n      }\n      .underline {\n        text-decoration: underline;\n      }\n      .strikethrough {\n        text-decoration: line-through;\n      }\n      .underline.strikethrough {\n        text-decoration: underline line-through;\n      }\n      .fg-red {\n        color: var(--error-color);\n      }\n      .fg-green {\n        color: var(--success-color);\n      }\n      .fg-yellow {\n        color: var(--warning-color);\n      }\n      .fg-blue {\n        color: var(--info-color);\n      }\n      .fg-magenta {\n        color: rgb(118, 38, 113);\n      }\n      .fg-cyan {\n        color: rgb(44, 181, 233);\n      }\n      .fg-white {\n        color: rgb(204, 204, 204);\n      }\n      .bg-black {\n        background-color: rgb(0, 0, 0);\n      }\n      .bg-red {\n        background-color: var(--error-color);\n      }\n      .bg-green {\n        background-color: var(--success-color);\n      }\n      .bg-yellow {\n        background-color: var(--warning-color);\n      }\n      .bg-blue {\n        background-color: var(--info-color);\n      }\n      .bg-magenta {\n        background-color: rgb(118, 38, 113);\n      }\n      .bg-cyan {\n        background-color: rgb(44, 181, 233);\n      }\n      .bg-white {\n        background-color: rgb(204, 204, 204);\n      }\n    `;\n  }\n\n  private _parseTextToColoredPre(text) {\n    const pre = document.createElement(\"pre\");\n    const re = /\\033(?:\\[(.*?)[@-~]|\\].*?(?:\\007|\\033\\\\))/g;\n    let i = 0;\n\n    const state: State = {\n      bold: false,\n      italic: false,\n      underline: false,\n      strikethrough: false,\n      foregroundColor: null,\n      backgroundColor: null,\n    };\n\n    const addSpan = (content) => {\n      const span = document.createElement(\"span\");\n      if (state.bold) {\n        span.classList.add(\"bold\");\n      }\n      if (state.italic) {\n        span.classList.add(\"italic\");\n      }\n      if (state.underline) {\n        span.classList.add(\"underline\");\n      }\n      if (state.strikethrough) {\n        span.classList.add(\"strikethrough\");\n      }\n      if (state.foregroundColor !== null) {\n        span.classList.add(`fg-${state.foregroundColor}`);\n      }\n      if (state.backgroundColor !== null) {\n        span.classList.add(`bg-${state.backgroundColor}`);\n      }\n      span.appendChild(document.createTextNode(content));\n      pre.appendChild(span);\n    };\n\n    /* eslint-disable no-cond-assign */\n    let match;\n    // eslint-disable-next-line\n    while ((match = re.exec(text)) !== null) {\n      const j = match!.index;\n      addSpan(text.substring(i, j));\n      i = j + match[0].length;\n\n      if (match[1] === undefined) {\n        continue;\n      }\n\n      match[1].split(\";\").forEach((colorCode: string) => {\n        switch (parseInt(colorCode, 10)) {\n          case 0:\n            // reset\n            state.bold = false;\n            state.italic = false;\n            state.underline = false;\n            state.strikethrough = false;\n            state.foregroundColor = null;\n            state.backgroundColor = null;\n            break;\n          case 1:\n            state.bold = true;\n            break;\n          case 3:\n            state.italic = true;\n            break;\n          case 4:\n            state.underline = true;\n            break;\n          case 9:\n            state.strikethrough = true;\n            break;\n          case 22:\n            state.bold = false;\n            break;\n          case 23:\n            state.italic = false;\n            break;\n          case 24:\n            state.underline = false;\n            break;\n          case 29:\n            state.strikethrough = false;\n            break;\n          case 30:\n            // foreground black\n            state.foregroundColor = null;\n            break;\n          case 31:\n            state.foregroundColor = \"red\";\n            break;\n          case 32:\n            state.foregroundColor = \"green\";\n            break;\n          case 33:\n            state.foregroundColor = \"yellow\";\n            break;\n          case 34:\n            state.foregroundColor = \"blue\";\n            break;\n          case 35:\n            state.foregroundColor = \"magenta\";\n            break;\n          case 36:\n            state.foregroundColor = \"cyan\";\n            break;\n          case 37:\n            state.foregroundColor = \"white\";\n            break;\n          case 39:\n            // foreground reset\n            state.foregroundColor = null;\n            break;\n          case 40:\n            state.backgroundColor = \"black\";\n            break;\n          case 41:\n            state.backgroundColor = \"red\";\n            break;\n          case 42:\n            state.backgroundColor = \"green\";\n            break;\n          case 43:\n            state.backgroundColor = \"yellow\";\n            break;\n          case 44:\n            state.backgroundColor = \"blue\";\n            break;\n          case 45:\n            state.backgroundColor = \"magenta\";\n            break;\n          case 46:\n            state.backgroundColor = \"cyan\";\n            break;\n          case 47:\n            state.backgroundColor = \"white\";\n            break;\n          case 49:\n            // background reset\n            state.backgroundColor = null;\n            break;\n        }\n      });\n    }\n    addSpan(text.substring(i));\n\n    return pre;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-ansi-to-html\": HaAnsiToHtml;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public outlined = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        border-radius: var(--ha-card-border-radius, 4px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { CircularProgress } from \"@material/mwc-circular-progress\";\nimport { CSSResultGroup, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-circular-progress\")\n// @ts-ignore\nexport class HaCircularProgress extends CircularProgress {\n  @property({ type: Boolean })\n  public active = false;\n\n  @property()\n  public alt = \"Loading\";\n\n  @property()\n  public size: \"tiny\" | \"small\" | \"medium\" | \"large\" = \"medium\";\n\n  // @ts-ignore\n  public set density(_) {\n    // just a dummy\n  }\n\n  public get density() {\n    switch (this.size) {\n      case \"tiny\":\n        return -8;\n      case \"small\":\n        return -5;\n      case \"medium\":\n        return 0;\n      case \"large\":\n        return 5;\n      default:\n        return 0;\n    }\n  }\n\n  // @ts-ignore\n  public set indeterminate(_) {\n    // just a dummy\n  }\n\n  public get indeterminate() {\n    return this.active;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      super.styles,\n      css`\n        :host {\n          overflow: hidden;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-circular-progress\": HaCircularProgress;\n  }\n}\n","// @ts-ignore\nimport topAppBarStyles from \"@material/top-app-bar/dist/mdc.top-app-bar.min.css\";\nimport { css, html, LitElement, unsafeCSS } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-header-bar\")\nexport class HaHeaderBar extends LitElement {\n  protected render() {\n    return html`<header class=\"mdc-top-app-bar\">\n      <div class=\"mdc-top-app-bar__row\">\n        <section\n          class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-start\"\n          id=\"navigation\"\n        >\n          <slot name=\"navigationIcon\"></slot>\n          <span class=\"mdc-top-app-bar__title\">\n            <slot name=\"title\"></slot>\n          </span>\n        </section>\n        <section\n          class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-end\"\n          id=\"actions\"\n          role=\"toolbar\"\n        >\n          <slot name=\"actionItems\"></slot>\n        </section>\n      </div>\n    </header>`;\n  }\n\n  static get styles() {\n    return [\n      unsafeCSS(topAppBarStyles),\n      css`\n        .mdc-top-app-bar {\n          position: static;\n          color: var(--mdc-theme-on-primary, #fff);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-header-bar\": HaHeaderBar;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { showBackupUploadDialog } from \"../../hassio/src/dialogs/backup/show-dialog-backup-upload\";\nimport { showHassioBackupDialog } from \"../../hassio/src/dialogs/backup/show-dialog-hassio-backup\";\nimport type { LocalizeFunc } from \"../common/translations/localize\";\nimport \"../components/ha-card\";\nimport \"../components/ha-ansi-to-html\";\nimport { fetchInstallationType } from \"../data/onboarding\";\nimport { makeDialogManager } from \"../dialogs/make-dialog-manager\";\nimport { ProvideHassLitMixin } from \"../mixins/provide-hass-lit-mixin\";\nimport { haStyle } from \"../resources/styles\";\nimport \"./onboarding-loading\";\n\ndeclare global {\n  interface HASSDomEvents {\n    restoring: undefined;\n  }\n}\n\n@customElement(\"onboarding-restore-backup\")\nclass OnboardingRestoreBackup extends ProvideHassLitMixin(LitElement) {\n  @property() public localize!: LocalizeFunc;\n\n  @property() public language!: string;\n\n  @property({ type: Boolean }) public restoring = false;\n\n  protected render(): TemplateResult {\n    return this.restoring\n      ? html`<ha-card\n          .header=${this.localize(\n            \"ui.panel.page-onboarding.restore.in_progress\"\n          )}\n        >\n          <onboarding-loading></onboarding-loading>\n        </ha-card>`\n      : html`\n          <button class=\"link\" @click=${this._uploadBackup}>\n            ${this.localize(\"ui.panel.page-onboarding.restore.description\")}\n          </button>\n        `;\n  }\n\n  private _uploadBackup(): void {\n    showBackupUploadDialog(this, {\n      showBackup: (slug: string) => this._showBackupDialog(slug),\n      onboarding: true,\n    });\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    makeDialogManager(this, this.shadowRoot!);\n    setInterval(() => this._checkRestoreStatus(), 1000);\n  }\n\n  private async _checkRestoreStatus(): Promise<void> {\n    if (this.restoring) {\n      try {\n        await fetchInstallationType();\n      } catch (err: any) {\n        if ((err as Error).message === \"unauthorized\") {\n          window.location.replace(\"/\");\n        }\n      }\n    }\n  }\n\n  private _showBackupDialog(slug: string): void {\n    showHassioBackupDialog(this, {\n      slug,\n      onboarding: true,\n      localize: this.localize,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .logentry {\n          text-align: center;\n        }\n        ha-card {\n          padding: 4px;\n          margin-top: 8px;\n        }\n        ha-ansi-to-html {\n          display: block;\n          line-height: 22px;\n          padding: 0 8px;\n          white-space: pre-wrap;\n        }\n\n        @media all and (min-width: 600px) {\n          ha-card {\n            width: 600px;\n            margin-left: -100px;\n          }\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"onboarding-restore-backup\": OnboardingRestoreBackup;\n  }\n}\n"],"names":[],"sourceRoot":""}