{"version":3,"file":"bd06c9bb.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEA;AAIA;;AAKA;;;;;;ACvDA;;;;AAKA;ACXA;AAGA;;AC8BA;;AAGA;AACA;AACA;;AAEA;AAGA;;AAEA;;;AAGA;;AAGA;AACA;;;;AAIA;;;AAGA;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FA;;ACKA;AACA;;AAKA;;AA8DA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;;;;AAKA;AAEA;AACA;AACA;AACA;AACA;;;AAKA;AAEA;AACA;AACA;;AAjRA;;;;AAyRA;AACA;AAIA;;AAEA;;;;AAIA;;AAIA;;;;;;AAQA;;AAIA;;AAQA;AACA;;AAEA;;;AAGA;;AAIA;;;;;;AAQA;;;AAIA;;AAIA;AAEA;;AAIA;AAOA;AAEA;;AAIA;AAOA;;AAGA;;;;AAOA;AAEA;;;AAIA;;AAIA;AAEA;;AAIA;AAIA;AAEA;;AAIA;AAIA;;AAGA;;;;AAOA;AAEA;;;AAIA;;AAIA;AAEA;;AAIA;AAIA;AAEA;;AAIA;AAIA;;AAGA;;;;AAOA;;;AAIA;;;AAIA;;;AAGA;AACA;AACA;AACA;;;;;;AAMA;;;;AAMA;;AAiDA;;AAMA;AACA;;;;AAIA;;AAGA;;;AAKA;;AAKA;;AAMA;AACA;;;;AAIA;;AAGA;;;AAKA;;AAKA;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiKA;;ACnoBA;AACA;AACA;;AAEA;AACA;;;;AAIA;;AAEA;;;AAGA;;;AAWA;AAKA;;AAEA;;;AAGA;AAEA;AAKA;AAEA;AAEA;AAKA;AAEA;AAGA;AAEA;AAKA;;;;AAjDA;;;;AA2DA;;AAIA;;;;;AAMA;AAeA;;AAEA;;;AAGA;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDA;;AC5PA;;;;AAOA;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4FA","sources":["webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/components/ha-fab.ts","webpack://home-assistant-frontend/./src/components/ha-state-icon.ts","webpack://home-assistant-frontend/./src/layouts/hass-subpage.ts","webpack://home-assistant-frontend/./src/panels/config/areas/ha-config-area-page.ts","webpack://home-assistant-frontend/./src/panels/config/areas/ha-config-areas-dashboard.ts","webpack://home-assistant-frontend/./src/panels/config/ha-config-section.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public outlined = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        border-radius: var(--ha-card-border-radius, 4px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { FabBase } from \"@material/mwc-fab/mwc-fab-base\";\nimport { styles } from \"@material/mwc-fab/mwc-fab.css\";\nimport { customElement } from \"lit/decorators\";\nimport { css } from \"lit\";\n\n@customElement(\"ha-fab\")\nexport class HaFab extends FabBase {\n  protected firstUpdated(changedProperties) {\n    super.firstUpdated(changedProperties);\n    this.style.setProperty(\"--mdc-theme-secondary\", \"var(--primary-color)\");\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host .mdc-fab--extended .mdc-fab__icon {\n        margin-inline-start: -8px;\n        margin-inline-end: 12px;\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          :host .mdc-fab--extended .mdc-fab__icon {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-fab\": HaFab;\n  }\n}\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { stateIconPath } from \"../common/entity/state_icon_path\";\nimport \"./ha-icon\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-state-icon\")\nexport class HaStateIcon extends LitElement {\n  @property({ attribute: false }) public state?: HassEntity;\n\n  @property() public icon?: string;\n\n  protected render(): TemplateResult {\n    if (this.icon || this.state?.attributes.icon) {\n      return html`<ha-icon\n        .icon=${this.icon || this.state?.attributes.icon}\n      ></ha-icon>`;\n    }\n    return html`<ha-svg-icon .path=${stateIconPath(this.state)}></ha-svg-icon>`;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-state-icon\": HaStateIcon;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, eventOptions, property } from \"lit/decorators\";\nimport { restoreScroll } from \"../common/decorators/restore-scroll\";\nimport { toggleAttribute } from \"../common/dom/toggle_attribute\";\nimport { computeRTL } from \"../common/util/compute_rtl\";\nimport \"../components/ha-icon-button-arrow-prev\";\nimport \"../components/ha-menu-button\";\nimport { HomeAssistant } from \"../types\";\n\n@customElement(\"hass-subpage\")\nclass HassSubpage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public header?: string;\n\n  @property({ type: Boolean, attribute: \"main-page\" }) public mainPage = false;\n\n  @property({ type: String, attribute: \"back-path\" }) public backPath?: string;\n\n  @property() public backCallback?: () => void;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean }) public supervisor = false;\n\n  // @ts-ignore\n  @restoreScroll(\".content\") private _savedScrollPos?: number;\n\n  protected willUpdate(changedProps: PropertyValues): void {\n    super.willUpdate(changedProps);\n    if (!changedProps.has(\"hass\")) {\n      return;\n    }\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (!oldHass || oldHass.locale !== this.hass.locale) {\n      toggleAttribute(this, \"rtl\", computeRTL(this.hass));\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"toolbar\">\n        ${this.mainPage || history.state?.root\n          ? html`\n              <ha-menu-button\n                .hassio=${this.supervisor}\n                .hass=${this.hass}\n                .narrow=${this.narrow}\n              ></ha-menu-button>\n            `\n          : this.backPath\n          ? html`\n              <a href=${this.backPath}>\n                <ha-icon-button-arrow-prev\n                  .hass=${this.hass}\n                ></ha-icon-button-arrow-prev>\n              </a>\n            `\n          : html`\n              <ha-icon-button-arrow-prev\n                .hass=${this.hass}\n                @click=${this._backTapped}\n              ></ha-icon-button-arrow-prev>\n            `}\n\n        <div class=\"main-title\">${this.header}</div>\n        <slot name=\"toolbar-icon\"></slot>\n      </div>\n      <div class=\"content\" @scroll=${this._saveScrollPos}><slot></slot></div>\n      <div id=\"fab\">\n        <slot name=\"fab\"></slot>\n      </div>\n    `;\n  }\n\n  @eventOptions({ passive: true })\n  private _saveScrollPos(e: Event) {\n    this._savedScrollPos = (e.target as HTMLDivElement).scrollTop;\n  }\n\n  private _backTapped(): void {\n    if (this.backCallback) {\n      this.backCallback();\n      return;\n    }\n    history.back();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        height: 100%;\n        background-color: var(--primary-background-color);\n      }\n\n      :host([narrow]) {\n        width: 100%;\n        position: fixed;\n      }\n\n      .toolbar {\n        display: flex;\n        align-items: center;\n        font-size: 20px;\n        height: var(--header-height);\n        padding: 0 16px;\n        pointer-events: none;\n        background-color: var(--app-header-background-color);\n        font-weight: 400;\n        color: var(--app-header-text-color, white);\n        border-bottom: var(--app-header-border-bottom, none);\n        box-sizing: border-box;\n      }\n      .toolbar a {\n        color: var(--sidebar-text-color);\n        text-decoration: none;\n      }\n\n      ha-menu-button,\n      ha-icon-button-arrow-prev,\n      ::slotted([slot=\"toolbar-icon\"]) {\n        pointer-events: auto;\n        color: var(--sidebar-icon-color);\n      }\n\n      .main-title {\n        margin: 0 0 0 24px;\n        line-height: 20px;\n        flex-grow: 1;\n      }\n\n      .content {\n        position: relative;\n        width: 100%;\n        height: calc(100% - 1px - var(--header-height));\n        overflow-y: auto;\n        overflow: auto;\n        -webkit-overflow-scrolling: touch;\n      }\n\n      #fab {\n        position: fixed;\n        right: calc(16px + env(safe-area-inset-right));\n        bottom: calc(16px + env(safe-area-inset-bottom));\n        z-index: 1;\n      }\n      :host([narrow]) #fab.tabs {\n        bottom: calc(84px + env(safe-area-inset-bottom));\n      }\n      #fab[is-wide] {\n        bottom: 24px;\n        right: 24px;\n      }\n      :host([rtl]) #fab {\n        right: auto;\n        left: calc(16px + env(safe-area-inset-left));\n      }\n      :host([rtl][is-wide]) #fab {\n        bottom: 24px;\n        left: 24px;\n        right: auto;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-subpage\": HassSubpage;\n  }\n}\n","import \"@material/mwc-button\";\nimport { mdiImagePlus, mdiPencil } from \"@mdi/js\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport {\n  HassEntity,\n  UnsubscribeFunc,\n} from \"home-assistant-js-websocket/dist/types\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { caseInsensitiveStringCompare } from \"../../../common/string/compare\";\nimport { groupBy } from \"../../../common/util/group-by\";\nimport { afterNextRender } from \"../../../common/util/render-status\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-icon-next\";\nimport {\n  AreaRegistryEntry,\n  deleteAreaRegistryEntry,\n  subscribeAreaRegistry,\n  updateAreaRegistryEntry,\n} from \"../../../data/area_registry\";\nimport { AutomationEntity } from \"../../../data/automation\";\nimport {\n  computeDeviceName,\n  DeviceRegistryEntry,\n  sortDeviceRegistryByName,\n  subscribeDeviceRegistry,\n} from \"../../../data/device_registry\";\nimport {\n  computeEntityRegistryName,\n  EntityRegistryEntry,\n  sortEntityRegistryByName,\n  subscribeEntityRegistry,\n} from \"../../../data/entity_registry\";\nimport { SceneEntity } from \"../../../data/scene\";\nimport { ScriptEntity } from \"../../../data/script\";\nimport { findRelated, RelatedResult } from \"../../../data/search\";\nimport { showConfirmationDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport { showMoreInfoDialog } from \"../../../dialogs/more-info/show-ha-more-info-dialog\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport \"../../logbook/ha-logbook\";\nimport {\n  loadAreaRegistryDetailDialog,\n  showAreaRegistryDetailDialog,\n} from \"./show-dialog-area-registry-detail\";\nimport \"../../../layouts/hass-error-screen\";\nimport \"../../../layouts/hass-subpage\";\n\ndeclare type NameAndEntity<EntityType extends HassEntity> = {\n  name: string;\n  entity: EntityType;\n};\n\n@customElement(\"ha-config-area-page\")\nclass HaConfigAreaPage extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public areaId!: string;\n\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @property({ type: Boolean }) public isWide!: boolean;\n\n  @property({ type: Boolean }) public showAdvanced!: boolean;\n\n  @state() public _areas!: AreaRegistryEntry[];\n\n  @state() public _devices!: DeviceRegistryEntry[];\n\n  @state() public _entities!: EntityRegistryEntry[];\n\n  @state() private _related?: RelatedResult;\n\n  private _logbookTime = { recent: 86400 };\n\n  private _area = memoizeOne(\n    (\n      areaId: string,\n      areas: AreaRegistryEntry[]\n    ): AreaRegistryEntry | undefined =>\n      areas.find((area) => area.area_id === areaId)\n  );\n\n  private _memberships = memoizeOne(\n    (\n      areaId: string,\n      registryDevices: DeviceRegistryEntry[],\n      registryEntities: EntityRegistryEntry[]\n    ) => {\n      const devices = new Map<string, DeviceRegistryEntry>();\n\n      for (const device of registryDevices) {\n        if (device.area_id === areaId) {\n          devices.set(device.id, device);\n        }\n      }\n\n      const entities: EntityRegistryEntry[] = [];\n      const indirectEntities: EntityRegistryEntry[] = [];\n\n      for (const entity of registryEntities) {\n        if (entity.area_id) {\n          if (entity.area_id === areaId) {\n            entities.push(entity);\n          }\n        } else if (entity.device_id && devices.has(entity.device_id)) {\n          indirectEntities.push(entity);\n        }\n      }\n\n      return {\n        devices: Array.from(devices.values()),\n        entities,\n        indirectEntities,\n      };\n    }\n  );\n\n  private _allDeviceIds = memoizeOne((devices: DeviceRegistryEntry[]) =>\n    devices.map((device) => device.id)\n  );\n\n  private _allEntities = memoizeOne(\n    (memberships: {\n      entities: EntityRegistryEntry[];\n      indirectEntities: EntityRegistryEntry[];\n    }) =>\n      memberships.entities\n        .map((entry) => entry.entity_id)\n        .concat(memberships.indirectEntities.map((entry) => entry.entity_id))\n  );\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    loadAreaRegistryDetailDialog();\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    if (changedProps.has(\"areaId\")) {\n      this._findRelated();\n    }\n  }\n\n  protected hassSubscribe(): (UnsubscribeFunc | Promise<UnsubscribeFunc>)[] {\n    return [\n      subscribeAreaRegistry(this.hass.connection, (areas) => {\n        this._areas = areas;\n      }),\n      subscribeDeviceRegistry(this.hass.connection, (entries) => {\n        this._devices = entries;\n      }),\n      subscribeEntityRegistry(this.hass.connection, (entries) => {\n        this._entities = entries;\n      }),\n    ];\n  }\n\n  protected render(): TemplateResult {\n    if (!this._areas || !this._devices || !this._entities) {\n      return html``;\n    }\n\n    const area = this._area(this.areaId, this._areas);\n\n    if (!area) {\n      return html`\n        <hass-error-screen\n          .hass=${this.hass}\n          .error=${this.hass.localize(\"ui.panel.config.areas.area_not_found\")}\n        ></hass-error-screen>\n      `;\n    }\n\n    const memberships = this._memberships(\n      this.areaId,\n      this._devices,\n      this._entities\n    );\n    const { devices, entities } = memberships;\n\n    // Pre-compute the entity and device names, so we can sort by them\n    if (devices) {\n      devices.forEach((entry) => {\n        entry.name = computeDeviceName(entry, this.hass);\n      });\n      sortDeviceRegistryByName(devices);\n    }\n    if (entities) {\n      entities.forEach((entry) => {\n        entry.name = computeEntityRegistryName(this.hass, entry);\n      });\n      sortEntityRegistryByName(entities);\n    }\n\n    // Group entities by domain\n    const groupedEntities = groupBy(entities, (entity) =>\n      computeDomain(entity.entity_id)\n    );\n\n    // Pre-compute the name also for the grouped and related entities so we can sort by them\n    let groupedAutomations: NameAndEntity<AutomationEntity>[] = [];\n    let groupedScenes: NameAndEntity<SceneEntity>[] = [];\n    let groupedScripts: NameAndEntity<ScriptEntity>[] = [];\n    let relatedAutomations: NameAndEntity<AutomationEntity>[] = [];\n    let relatedScenes: NameAndEntity<SceneEntity>[] = [];\n    let relatedScripts: NameAndEntity<ScriptEntity>[] = [];\n\n    if (isComponentLoaded(this.hass, \"automation\")) {\n      ({\n        groupedEntities: groupedAutomations,\n        relatedEntities: relatedAutomations,\n      } = this._prepareEntities<AutomationEntity>(\n        groupedEntities.automation,\n        this._related?.automation\n      ));\n    }\n\n    if (isComponentLoaded(this.hass, \"scene\")) {\n      ({ groupedEntities: groupedScenes, relatedEntities: relatedScenes } =\n        this._prepareEntities<SceneEntity>(\n          groupedEntities.scene,\n          this._related?.scene\n        ));\n    }\n\n    if (isComponentLoaded(this.hass, \"script\")) {\n      ({ groupedEntities: groupedScripts, relatedEntities: relatedScripts } =\n        this._prepareEntities<ScriptEntity>(\n          groupedEntities.script,\n          this._related?.script\n        ));\n    }\n\n    return html`\n      <hass-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .header=${area.name}\n      >\n        <ha-icon-button\n          .path=${mdiPencil}\n          .entry=${area}\n          @click=${this._showSettings}\n          slot=\"toolbar-icon\"\n          .label=${this.hass.localize(\"ui.panel.config.areas.edit_settings\")}\n        ></ha-icon-button>\n\n        <div class=\"container\">\n          <div class=\"column\">\n            ${area.picture\n              ? html`<div class=\"img-container\">\n                  <img src=${area.picture} /><ha-icon-button\n                    .path=${mdiPencil}\n                    .entry=${area}\n                    @click=${this._showSettings}\n                    .label=${this.hass.localize(\n                      \"ui.panel.config.areas.edit_settings\"\n                    )}\n                    class=\"img-edit-btn\"\n                  ></ha-icon-button>\n                </div>`\n              : html`<mwc-button\n                  .entry=${area}\n                  @click=${this._showSettings}\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.areas.add_picture\"\n                  )}\n                >\n                  <ha-svg-icon .path=${mdiImagePlus} slot=\"icon\"></ha-svg-icon>\n                </mwc-button>`}\n            <ha-card\n              outlined\n              .header=${this.hass.localize(\"ui.panel.config.devices.caption\")}\n              >${devices.length\n                ? devices.map(\n                    (device) =>\n                      html`\n                        <a href=\"/config/devices/device/${device.id}\">\n                          <paper-item>\n                            <paper-item-body> ${device.name} </paper-item-body>\n                            <ha-icon-next></ha-icon-next>\n                          </paper-item>\n                        </a>\n                      `\n                  )\n                : html`\n                    <paper-item class=\"no-link\"\n                      >${this.hass.localize(\n                        \"ui.panel.config.devices.no_devices\"\n                      )}</paper-item\n                    >\n                  `}\n            </ha-card>\n            <ha-card\n              outlined\n              .header=${this.hass.localize(\n                \"ui.panel.config.areas.editor.linked_entities_caption\"\n              )}\n            >\n              ${entities.length\n                ? entities.map((entity) =>\n                    [\"scene\", \"script\", \"automation\"].includes(\n                      computeDomain(entity.entity_id)\n                    )\n                      ? \"\"\n                      : html`\n                          <paper-item\n                            @click=${this._openEntity}\n                            .entity=${entity}\n                          >\n                            <paper-item-body> ${entity.name} </paper-item-body>\n                            <ha-icon-next></ha-icon-next>\n                          </paper-item>\n                        `\n                  )\n                : html`\n                    <paper-item class=\"no-link\"\n                      >${this.hass.localize(\n                        \"ui.panel.config.areas.editor.no_linked_entities\"\n                      )}</paper-item\n                    >\n                  `}\n            </ha-card>\n          </div>\n          <div class=\"column\">\n            ${isComponentLoaded(this.hass, \"automation\")\n              ? html`\n                  <ha-card\n                    outlined\n                    .header=${this.hass.localize(\n                      \"ui.panel.config.devices.automation.automations_heading\"\n                    )}\n                  >\n                    ${groupedAutomations?.length\n                      ? html`<h3>\n                            ${this.hass.localize(\n                              \"ui.panel.config.areas.assigned_to_area\"\n                            )}:\n                          </h3>\n                          ${groupedAutomations.map((automation) =>\n                            this._renderAutomation(\n                              automation.name,\n                              automation.entity\n                            )\n                          )}`\n                      : \"\"}\n                    ${relatedAutomations?.length\n                      ? html`<h3>\n                            ${this.hass.localize(\n                              \"ui.panel.config.areas.targeting_area\"\n                            )}:\n                          </h3>\n                          ${relatedAutomations.map((automation) =>\n                            this._renderAutomation(\n                              automation.name,\n                              automation.entity\n                            )\n                          )}`\n                      : \"\"}\n                    ${!groupedAutomations?.length && !relatedAutomations?.length\n                      ? html`\n                          <paper-item class=\"no-link\"\n                            >${this.hass.localize(\n                              \"ui.panel.config.devices.automation.no_automations\"\n                            )}</paper-item\n                          >\n                        `\n                      : \"\"}\n                  </ha-card>\n                `\n              : \"\"}\n            ${isComponentLoaded(this.hass, \"scene\")\n              ? html`\n                  <ha-card\n                    outlined\n                    .header=${this.hass.localize(\n                      \"ui.panel.config.devices.scene.scenes_heading\"\n                    )}\n                  >\n                    ${groupedScenes?.length\n                      ? html`<h3>\n                            ${this.hass.localize(\n                              \"ui.panel.config.areas.assigned_to_area\"\n                            )}:\n                          </h3>\n                          ${groupedScenes.map((scene) =>\n                            this._renderScene(scene.name, scene.entity)\n                          )}`\n                      : \"\"}\n                    ${relatedScenes?.length\n                      ? html`<h3>\n                            ${this.hass.localize(\n                              \"ui.panel.config.areas.targeting_area\"\n                            )}:\n                          </h3>\n                          ${relatedScenes.map((scene) =>\n                            this._renderScene(scene.name, scene.entity)\n                          )}`\n                      : \"\"}\n                    ${!groupedScenes?.length && !relatedScenes?.length\n                      ? html`\n                          <paper-item class=\"no-link\"\n                            >${this.hass.localize(\n                              \"ui.panel.config.devices.scene.no_scenes\"\n                            )}</paper-item\n                          >\n                        `\n                      : \"\"}\n                  </ha-card>\n                `\n              : \"\"}\n            ${isComponentLoaded(this.hass, \"script\")\n              ? html`\n                  <ha-card\n                    outlined\n                    .header=${this.hass.localize(\n                      \"ui.panel.config.devices.script.scripts_heading\"\n                    )}\n                  >\n                    ${groupedScripts?.length\n                      ? html`<h3>\n                            ${this.hass.localize(\n                              \"ui.panel.config.areas.assigned_to_area\"\n                            )}:\n                          </h3>\n                          ${groupedScripts.map((script) =>\n                            this._renderScript(script.name, script.entity)\n                          )}`\n                      : \"\"}\n                    ${relatedScripts?.length\n                      ? html`<h3>\n                            ${this.hass.localize(\n                              \"ui.panel.config.areas.targeting_area\"\n                            )}:\n                          </h3>\n                          ${relatedScripts.map((script) =>\n                            this._renderScript(script.name, script.entity)\n                          )}`\n                      : \"\"}\n                    ${!groupedScripts?.length && !relatedScripts?.length\n                      ? html`\n                          <paper-item class=\"no-link\"\n                            >${this.hass.localize(\n                              \"ui.panel.config.devices.script.no_scripts\"\n                            )}</paper-item\n                          >\n                        `\n                      : \"\"}\n                  </ha-card>\n                `\n              : \"\"}\n          </div>\n          <div class=\"column\">\n            ${isComponentLoaded(this.hass, \"logbook\")\n              ? html`\n                  <ha-card\n                    outlined\n                    .header=${this.hass.localize(\"panel.logbook\")}\n                  >\n                    <ha-logbook\n                      .hass=${this.hass}\n                      .time=${this._logbookTime}\n                      .entityIds=${this._allEntities(memberships)}\n                      .deviceIds=${this._allDeviceIds(memberships.devices)}\n                      virtualize\n                      narrow\n                      no-icon\n                    ></ha-logbook>\n                  </ha-card>\n                `\n              : \"\"}\n          </div>\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  private _prepareEntities<EntityType extends HassEntity>(\n    entries?: EntityRegistryEntry[],\n    relatedEntityIds?: string[]\n  ): {\n    groupedEntities: NameAndEntity<EntityType>[];\n    relatedEntities: NameAndEntity<EntityType>[];\n  } {\n    const groupedEntities: NameAndEntity<EntityType>[] = [];\n    const relatedEntities: NameAndEntity<EntityType>[] = [];\n\n    if (entries?.length) {\n      entries.forEach((entity) => {\n        const entityState = this.hass.states[\n          entity.entity_id\n        ] as unknown as EntityType;\n        if (entityState) {\n          groupedEntities.push({\n            name: computeStateName(entityState),\n            entity: entityState,\n          });\n        }\n      });\n      groupedEntities.sort((entry1, entry2) =>\n        caseInsensitiveStringCompare(entry1.name!, entry2.name!)\n      );\n    }\n    if (relatedEntityIds?.length) {\n      relatedEntityIds.forEach((entity) => {\n        const entityState = this.hass.states[entity] as EntityType;\n        if (entityState) {\n          relatedEntities.push({\n            name: entityState ? computeStateName(entityState) : \"\",\n            entity: entityState,\n          });\n        }\n      });\n      relatedEntities.sort((entry1, entry2) =>\n        caseInsensitiveStringCompare(entry1.name!, entry2.name!)\n      );\n    }\n\n    return { groupedEntities, relatedEntities };\n  }\n\n  private _renderScene(name: string, entityState: SceneEntity) {\n    return html`<div>\n      <a\n        href=${ifDefined(\n          entityState.attributes.id\n            ? `/config/scene/edit/${entityState.attributes.id}`\n            : undefined\n        )}\n      >\n        <paper-item .disabled=${!entityState.attributes.id}>\n          <paper-item-body> ${name} </paper-item-body>\n          <ha-icon-next></ha-icon-next>\n        </paper-item>\n      </a>\n      ${!entityState.attributes.id\n        ? html`\n            <paper-tooltip animation-delay=\"0\">\n              ${this.hass.localize(\"ui.panel.config.devices.cant_edit\")}\n            </paper-tooltip>\n          `\n        : \"\"}\n    </div>`;\n  }\n\n  private _renderAutomation(name: string, entityState: AutomationEntity) {\n    return html`<div>\n      <a\n        href=${ifDefined(\n          entityState.attributes.id\n            ? `/config/automation/edit/${entityState.attributes.id}`\n            : undefined\n        )}\n      >\n        <paper-item .disabled=${!entityState.attributes.id}>\n          <paper-item-body> ${name} </paper-item-body>\n          <ha-icon-next></ha-icon-next>\n        </paper-item>\n      </a>\n      ${!entityState.attributes.id\n        ? html`\n            <paper-tooltip animation-delay=\"0\">\n              ${this.hass.localize(\"ui.panel.config.devices.cant_edit\")}\n            </paper-tooltip>\n          `\n        : \"\"}\n    </div>`;\n  }\n\n  private _renderScript(name: string, entityState: ScriptEntity) {\n    return html`<a href=${`/config/script/edit/${entityState.entity_id}`}>\n      <paper-item>\n        <paper-item-body> ${name} </paper-item-body>\n        <ha-icon-next></ha-icon-next>\n      </paper-item>\n    </a>`;\n  }\n\n  private async _findRelated() {\n    this._related = await findRelated(this.hass, \"area\", this.areaId);\n  }\n\n  private _showSettings(ev: MouseEvent) {\n    const entry: AreaRegistryEntry = (ev.currentTarget! as any).entry;\n    this._openDialog(entry);\n  }\n\n  private _openEntity(ev) {\n    const entry: EntityRegistryEntry = (ev.currentTarget as any).entity;\n    showMoreInfoDialog(this, {\n      entityId: entry.entity_id,\n    });\n  }\n\n  private _openDialog(entry?: AreaRegistryEntry) {\n    showAreaRegistryDetailDialog(this, {\n      entry,\n      updateEntry: async (values) =>\n        updateAreaRegistryEntry(this.hass!, entry!.area_id, values),\n      removeEntry: async () => {\n        if (\n          !(await showConfirmationDialog(this, {\n            title: this.hass.localize(\n              \"ui.panel.config.areas.delete.confirmation_title\"\n            ),\n            text: this.hass.localize(\n              \"ui.panel.config.areas.delete.confirmation_text\"\n            ),\n            dismissText: this.hass.localize(\"ui.common.cancel\"),\n            confirmText: this.hass.localize(\"ui.common.delete\"),\n          }))\n        ) {\n          return false;\n        }\n\n        try {\n          await deleteAreaRegistryEntry(this.hass!, entry!.area_id);\n          afterNextRender(() => history.back());\n          return true;\n        } catch (err: any) {\n          return false;\n        }\n      },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        h1 {\n          margin: 0;\n          font-family: var(--paper-font-headline_-_font-family);\n          -webkit-font-smoothing: var(\n            --paper-font-headline_-_-webkit-font-smoothing\n          );\n          font-size: var(--paper-font-headline_-_font-size);\n          font-weight: var(--paper-font-headline_-_font-weight);\n          letter-spacing: var(--paper-font-headline_-_letter-spacing);\n          line-height: var(--paper-font-headline_-_line-height);\n          opacity: var(--dark-primary-opacity);\n          display: flex;\n          align-items: center;\n        }\n\n        h3 {\n          margin: 0;\n          padding: 0 16px;\n          font-weight: 500;\n          color: var(--secondary-text-color);\n        }\n\n        img {\n          border-radius: var(--ha-card-border-radius, 4px);\n          width: 100%;\n        }\n\n        .container {\n          display: flex;\n          flex-wrap: wrap;\n          margin: auto;\n          max-width: 1000px;\n          margin-top: 32px;\n          margin-bottom: 32px;\n        }\n        .column {\n          padding: 8px;\n          box-sizing: border-box;\n          width: 33%;\n          flex-grow: 1;\n        }\n        .fullwidth {\n          padding: 8px;\n          width: 100%;\n        }\n        .column > *:not(:first-child) {\n          margin-top: 16px;\n        }\n\n        :host([narrow]) .column {\n          width: 100%;\n        }\n\n        :host([narrow]) .container {\n          margin-top: 0;\n        }\n\n        paper-item {\n          cursor: pointer;\n          font-size: var(--paper-font-body1_-_font-size);\n        }\n\n        a {\n          text-decoration: none;\n          color: var(--primary-text-color);\n        }\n\n        paper-item.no-link {\n          cursor: default;\n        }\n\n        ha-card > a:first-child {\n          display: block;\n        }\n        ha-card > *:first-child {\n          margin-top: -16px;\n        }\n        .img-container {\n          position: relative;\n        }\n        .img-edit-btn {\n          position: absolute;\n          top: 4px;\n          right: 4px;\n          display: none;\n        }\n        .img-container:hover .img-edit-btn {\n          display: block;\n        }\n        .img-edit-btn::before {\n          content: \"\";\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          background-color: var(--card-background-color);\n          opacity: 0.5;\n          border-radius: 50%;\n        }\n        ha-logbook {\n          height: 400px;\n        }\n        :host([narrow]) ha-logbook {\n          height: 235px;\n          overflow: auto;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-area-page\": HaConfigAreaPage;\n  }\n}\n","import { mdiHelpCircle, mdiPlus } from \"@mdi/js\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport memoizeOne from \"memoize-one\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-svg-icon\";\nimport {\n  AreaRegistryEntry,\n  createAreaRegistryEntry,\n  subscribeAreaRegistry,\n} from \"../../../data/area_registry\";\nimport {\n  DeviceRegistryEntry,\n  subscribeDeviceRegistry,\n} from \"../../../data/device_registry\";\nimport {\n  EntityRegistryEntry,\n  subscribeEntityRegistry,\n} from \"../../../data/entity_registry\";\nimport { showAlertDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-loading-screen\";\nimport \"../../../layouts/hass-tabs-subpage\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport \"../ha-config-section\";\nimport { configSections } from \"../ha-panel-config\";\nimport {\n  loadAreaRegistryDetailDialog,\n  showAreaRegistryDetailDialog,\n} from \"./show-dialog-area-registry-detail\";\n\n@customElement(\"ha-config-areas-dashboard\")\nexport class HaConfigAreasDashboard extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public isWide?: boolean;\n\n  @property() public narrow!: boolean;\n\n  @property() public route!: Route;\n\n  @state() private _areas!: AreaRegistryEntry[];\n\n  @state() private _devices!: DeviceRegistryEntry[];\n\n  @state() private _entities!: EntityRegistryEntry[];\n\n  private _processAreas = memoizeOne(\n    (\n      areas: AreaRegistryEntry[],\n      devices: DeviceRegistryEntry[],\n      entities: EntityRegistryEntry[]\n    ) =>\n      areas.map((area) => {\n        let noDevicesInArea = 0;\n        let noServicesInArea = 0;\n        let noEntitiesInArea = 0;\n\n        for (const device of devices) {\n          if (device.area_id === area.area_id) {\n            if (device.entry_type === \"service\") {\n              noServicesInArea++;\n            } else {\n              noDevicesInArea++;\n            }\n          }\n        }\n\n        for (const entity of entities) {\n          if (entity.area_id === area.area_id) {\n            noEntitiesInArea++;\n          }\n        }\n\n        return {\n          ...area,\n          devices: noDevicesInArea,\n          services: noServicesInArea,\n          entities: noEntitiesInArea,\n        };\n      })\n  );\n\n  protected hassSubscribe(): (UnsubscribeFunc | Promise<UnsubscribeFunc>)[] {\n    return [\n      subscribeAreaRegistry(this.hass.connection, (areas) => {\n        this._areas = areas;\n      }),\n      subscribeDeviceRegistry(this.hass.connection, (entries) => {\n        this._devices = entries;\n      }),\n      subscribeEntityRegistry(this.hass.connection, (entries) => {\n        this._entities = entries;\n      }),\n    ];\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .isWide=${this.isWide}\n        back-path=\"/config\"\n        .tabs=${configSections.areas}\n        .route=${this.route}\n      >\n        <ha-icon-button\n          slot=\"toolbar-icon\"\n          .label=${this.hass.localize(\"ui.common.help\")}\n          .path=${mdiHelpCircle}\n          @click=${this._showHelp}\n        ></ha-icon-button>\n        <div class=\"container\">\n          ${!this._areas || !this._devices || !this._entities\n            ? \"\"\n            : this._processAreas(\n                this._areas,\n                this._devices,\n                this._entities\n              ).map(\n                (area) =>\n                  html`<a href=${`/config/areas/area/${area.area_id}`}\n                    ><ha-card outlined>\n                      <div\n                        style=${styleMap({\n                          backgroundImage: area.picture\n                            ? `url(${area.picture})`\n                            : undefined,\n                        })}\n                        class=\"picture ${!area.picture ? \"placeholder\" : \"\"}\"\n                      ></div>\n                      <h1 class=\"card-header\">${area.name}</h1>\n                      <div class=\"card-content\">\n                        <div>\n                          ${area.devices\n                            ? html`\n                                ${this.hass.localize(\n                                  \"ui.panel.config.integrations.config_entry.devices\",\n                                  \"count\",\n                                  area.devices\n                                )}${area.services ? \",\" : \"\"}\n                              `\n                            : \"\"}\n                          ${area.services\n                            ? html`\n                                ${this.hass.localize(\n                                  \"ui.panel.config.integrations.config_entry.services\",\n                                  \"count\",\n                                  area.services\n                                )}\n                              `\n                            : \"\"}\n                          ${(area.devices || area.services) && area.entities\n                            ? this.hass.localize(\"ui.common.and\")\n                            : \"\"}\n                          ${area.entities\n                            ? html`\n                                ${this.hass.localize(\n                                  \"ui.panel.config.integrations.config_entry.entities\",\n                                  \"count\",\n                                  area.entities\n                                )}\n                              `\n                            : \"\"}\n                        </div>\n                      </div>\n                    </ha-card></a\n                  >`\n              )}\n        </div>\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.areas.picker.create_area\"\n          )}\n          extended\n          @click=${this._createArea}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    loadAreaRegistryDetailDialog();\n  }\n\n  private _createArea() {\n    this._openDialog();\n  }\n\n  private _showHelp() {\n    showAlertDialog(this, {\n      title: this.hass.localize(\"ui.panel.config.areas.caption\"),\n      text: html`\n        ${this.hass.localize(\"ui.panel.config.areas.picker.introduction\")}\n        <p>\n          ${this.hass.localize(\"ui.panel.config.areas.picker.introduction2\")}\n        </p>\n        <a href=\"/config/integrations/dashboard\">\n          ${this.hass.localize(\n            \"ui.panel.config.areas.picker.integrations_page\"\n          )}\n        </a>\n      `,\n    });\n  }\n\n  private _openDialog(entry?: AreaRegistryEntry) {\n    showAreaRegistryDetailDialog(this, {\n      entry,\n      createEntry: async (values) =>\n        createAreaRegistryEntry(this.hass!, values),\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      hass-loading-screen {\n        --app-header-background-color: var(--sidebar-background-color);\n        --app-header-text-color: var(--sidebar-text-color);\n      }\n      .container {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n        grid-gap: 16px 16px;\n        padding: 8px 16px 16px;\n        margin: 0 auto 64px auto;\n        max-width: 2000px;\n      }\n      .container > * {\n        max-width: 500px;\n      }\n      ha-card {\n        overflow: hidden;\n      }\n      a {\n        text-decoration: none;\n      }\n      h1 {\n        padding-bottom: 0;\n      }\n      .picture {\n        height: 150px;\n        width: 100%;\n        background-size: cover;\n        background-position: center;\n        position: relative;\n      }\n      .picture.placeholder::before {\n        position: absolute;\n        content: \"\";\n        width: 100%;\n        height: 100%;\n        background-color: var(--sidebar-selected-icon-color);\n        opacity: 0.12;\n      }\n      .card-content {\n        min-height: 16px;\n        color: var(--secondary-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-areas-dashboard\": HaConfigAreasDashboard;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\n\n@customElement(\"ha-config-section\")\nexport class HaConfigSection extends LitElement {\n  @property() public isWide = false;\n\n  @property({ type: Boolean }) public vertical = false;\n\n  @property({ type: Boolean, attribute: \"full-width\" })\n  public fullWidth = false;\n\n  protected render() {\n    return html`\n      <div\n        class=\"content ${classMap({\n          narrow: !this.isWide,\n          \"full-width\": this.fullWidth,\n        })}\"\n      >\n        <div class=\"header\"><slot name=\"header\"></slot></div>\n        <div\n          class=\"together layout ${classMap({\n            narrow: !this.isWide,\n            vertical: this.vertical || !this.isWide,\n            horizontal: !this.vertical && this.isWide,\n          })}\"\n        >\n          <div class=\"intro\"><slot name=\"introduction\"></slot></div>\n          <div class=\"panel flex-auto\"><slot></slot></div>\n        </div>\n      </div>\n    `;\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: block;\n      }\n      .content {\n        padding: 28px 20px 0;\n        max-width: 1040px;\n        margin: 0 auto;\n      }\n\n      .layout {\n        display: flex;\n      }\n\n      .horizontal {\n        flex-direction: row;\n      }\n\n      .vertical {\n        flex-direction: column;\n      }\n\n      .flex-auto {\n        flex: 1 1 auto;\n      }\n\n      .header {\n        font-family: var(--paper-font-headline_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-headline_-_-webkit-font-smoothing\n        );\n        font-size: var(--paper-font-headline_-_font-size);\n        font-weight: var(--paper-font-headline_-_font-weight);\n        letter-spacing: var(--paper-font-headline_-_letter-spacing);\n        line-height: var(--paper-font-headline_-_line-height);\n        opacity: var(--dark-primary-opacity);\n      }\n\n      .together {\n        margin-top: 32px;\n      }\n\n      .intro {\n        font-family: var(--paper-font-subhead_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-subhead_-_-webkit-font-smoothing\n        );\n        font-weight: var(--paper-font-subhead_-_font-weight);\n        line-height: var(--paper-font-subhead_-_line-height);\n        width: 100%;\n        opacity: var(--dark-primary-opacity);\n        font-size: 14px;\n        padding-bottom: 20px;\n      }\n\n      .horizontal .intro {\n        max-width: 400px;\n        margin-right: 40px;\n      }\n\n      .panel {\n        margin-top: -24px;\n      }\n\n      .panel ::slotted(*) {\n        margin-top: 24px;\n        display: block;\n      }\n\n      .narrow.content {\n        max-width: 640px;\n      }\n      .narrow .together {\n        margin-top: 20px;\n      }\n      .narrow .intro {\n        padding-bottom: 20px;\n        margin-right: 0;\n        max-width: 500px;\n      }\n\n      .full-width {\n        padding: 0;\n      }\n\n      .full-width .layout {\n        flex-direction: column;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-section\": HaConfigSection;\n  }\n}\n"],"names":[],"sourceRoot":""}