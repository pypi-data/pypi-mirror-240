{"version":3,"file":"c3e45081.js","mappings":";AAaA;;AAEA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;;;;ACxBA;AACA;;AAKA;AAOA;AACA;AACA;;AAEA;AACA;AAGA;AAfA;;;;;;AAZA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zha/dialog-zha-device-children.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport memoizeOne from \"memoize-one\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { computeRTLDirection } from \"../../../../../common/util/compute_rtl\";\nimport \"../../../../../components/ha-code-editor\";\nimport { createCloseHeading } from \"../../../../../components/ha-dialog\";\nimport { haStyleDialog } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { ZHADeviceChildrenDialogParams } from \"./show-dialog-zha-device-children\";\nimport \"../../../../../components/data-table/ha-data-table\";\nimport type {\n  DataTableColumnContainer,\n  DataTableRowData,\n} from \"../../../../../components/data-table/ha-data-table\";\nimport \"../../../../../components/ha-circular-progress\";\nimport { fetchDevices, ZHADevice } from \"../../../../../data/zha\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\n\nexport interface DeviceRowData extends DataTableRowData {\n  id: string;\n  name: string;\n  lqi: number;\n}\n\n@customElement(\"dialog-zha-device-children\")\nclass DialogZHADeviceChildren extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _device: ZHADevice | undefined;\n\n  @state() private _devices: Map<string, ZHADevice> | undefined;\n\n  private _deviceChildren = memoizeOne(\n    (\n      device: ZHADevice | undefined,\n      devices: Map<string, ZHADevice> | undefined\n    ) => {\n      const outputDevices: DeviceRowData[] = [];\n      if (device && devices) {\n        device.neighbors.forEach((child) => {\n          const zhaDevice: ZHADevice | undefined = devices.get(child.ieee);\n          if (zhaDevice) {\n            outputDevices.push({\n              name: zhaDevice.user_given_name || zhaDevice.name,\n              id: zhaDevice.device_reg_id,\n              lqi: parseInt(child.lqi),\n            });\n          }\n        });\n      }\n      return outputDevices;\n    }\n  );\n\n  private _columns: DataTableColumnContainer = {\n    name: {\n      title: \"Name\",\n      sortable: true,\n      filterable: true,\n      direction: \"asc\",\n      grows: true,\n    },\n    lqi: {\n      title: \"LQI\",\n      sortable: true,\n      filterable: true,\n      type: \"numeric\",\n      width: \"75px\",\n    },\n  };\n\n  public showDialog(params: ZHADeviceChildrenDialogParams): void {\n    this._device = params.device;\n    this._fetchData();\n  }\n\n  public closeDialog(): void {\n    this._device = undefined;\n    this._devices = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._device) {\n      return html``;\n    }\n    return html`\n      <ha-dialog\n        hideActions\n        open\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(`ui.dialogs.zha_device_info.device_children`)\n        )}\n      >\n        ${!this._devices\n          ? html`<ha-circular-progress\n              alt=\"Loading\"\n              size=\"large\"\n              active\n            ></ha-circular-progress>`\n          : html`<ha-data-table\n              .hass=${this.hass}\n              .columns=${this._columns}\n              .data=${this._deviceChildren(this._device, this._devices)}\n              auto-height\n              .dir=${computeRTLDirection(this.hass)}\n              .searchLabel=${this.hass.localize(\n                \"ui.components.data-table.search\"\n              )}\n              .noDataText=${this.hass.localize(\n                \"ui.components.data-table.no-data\"\n              )}\n            ></ha-data-table>`}\n      </ha-dialog>\n    `;\n  }\n\n  private async _fetchData(): Promise<void> {\n    if (this._device && this.hass) {\n      const devices = await fetchDevices(this.hass!);\n      this._devices = new Map(\n        devices.map((device: ZHADevice) => [device.ieee, device])\n      );\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return haStyleDialog;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-zha-device-children\": DialogZHADeviceChildren;\n  }\n}\n"],"names":[],"sourceRoot":""}