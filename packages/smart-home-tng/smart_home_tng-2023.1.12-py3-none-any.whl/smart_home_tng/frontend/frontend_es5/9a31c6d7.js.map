{"version":3,"file":"9a31c6d7.js","mappings":";;;;AAcA;ACDA;;AAEA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;;;;;;;;;;;;;ACzEA;;;;AC3BA;AC6CA;AACA;AAmBA;AACA;;AA8CA;;AAIA;;;;AAKA;;AAEA;AAGA;AAWA;;;;AAKA;;AAEA;;AAGA;;AAOA;AAiBA;AACA;AAmBA;AACA;;;ACxIA;;;;AAIA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AAGA;;;;;AAKA;;;AAKA;;;;AAMA;;;;;AAOA;AACA;;;;AAIA;;;;;AAOA;AACA;;;AAGA;AAEA;AAEA;;;;;;AAMA;AAKA;;;;AAIA;AACA;AACA;;;AAKA;AAEA;AACA;;AAIA;;AAGA;AACA;;;AAGA;AACA;;;AAGA;;;AA1GA;;;;;;;;;;;;;;;;;;;;AA8MA","sources":["webpack://home-assistant-frontend/./src/components/ha-checkbox.ts","webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-formfield.ts","webpack://home-assistant-frontend/./src/components/ha-radio.ts","webpack://home-assistant-frontend/./src/dialogs/config-flow/show-dialog-config-flow.ts","webpack://home-assistant-frontend/./src/panels/config/energy/dialogs/dialog-energy-solar-settings.ts"],"sourcesContent":["import { CheckboxBase } from \"@material/mwc-checkbox/mwc-checkbox-base\";\nimport { styles } from \"@material/mwc-checkbox/mwc-checkbox.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-checkbox\")\nexport class HaCheckbox extends CheckboxBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-checkbox\": HaCheckbox;\n  }\n}\n","import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { FormfieldBase } from \"@material/mwc-formfield/mwc-formfield-base\";\nimport { styles } from \"@material/mwc-formfield/mwc-formfield.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n@customElement(\"ha-formfield\")\nexport class HaFormfield extends FormfieldBase {\n  protected _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      switch (input.tagName) {\n        case \"HA-CHECKBOX\":\n        case \"HA-RADIO\":\n          (input as any).checked = !(input as any).checked;\n          fireEvent(input, \"change\");\n          break;\n        default:\n          input.click();\n          break;\n      }\n    }\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host(:not([alignEnd])) ::slotted(ha-switch) {\n        margin-right: 10px;\n        margin-inline-end: 10px;\n        margin-inline-start: inline;\n      }\n      .mdc-form-field > label {\n        direction: var(--direction);\n        margin-inline-start: 0;\n        margin-inline-end: auto;\n        padding-inline-start: 4px;\n        padding-inline-end: 0;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-formfield\": HaFormfield;\n  }\n}\n","import { RadioBase } from \"@material/mwc-radio/mwc-radio-base\";\nimport { styles } from \"@material/mwc-radio/mwc-radio.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-radio\")\nexport class HaRadio extends RadioBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-radio\": HaRadio;\n  }\n}\n","import { html } from \"lit\";\nimport {\n  createConfigFlow,\n  deleteConfigFlow,\n  fetchConfigFlow,\n  getConfigFlowHandlers,\n  handleConfigFlowStep,\n} from \"../../data/config_flow\";\nimport { domainToName } from \"../../data/integration\";\nimport { getSupportedBrands } from \"../../data/supported_brands\";\nimport {\n  DataEntryFlowDialogParams,\n  loadDataEntryFlowDialog,\n  showFlowDialog,\n} from \"./show-dialog-data-entry-flow\";\n\nexport const loadConfigFlowDialog = loadDataEntryFlowDialog;\n\nexport const showConfigFlowDialog = (\n  element: HTMLElement,\n  dialogParams: Omit<DataEntryFlowDialogParams, \"flowConfig\">\n): void =>\n  showFlowDialog(element, dialogParams, {\n    loadDevicesAndAreas: true,\n    getFlowHandlers: async (hass) => {\n      const [integrations, helpers, supportedBrands] = await Promise.all([\n        getConfigFlowHandlers(hass, \"integration\"),\n        getConfigFlowHandlers(hass, \"helper\"),\n        getSupportedBrands(hass),\n        hass.loadBackendTranslation(\"title\", undefined, true),\n      ]);\n\n      return { integrations, helpers, supportedBrands };\n    },\n    createFlow: async (hass, handler) => {\n      const [step] = await Promise.all([\n        createConfigFlow(hass, handler),\n        hass.loadBackendTranslation(\"config\", handler),\n        // Used as fallback if no header defined for step\n        hass.loadBackendTranslation(\"title\", handler),\n      ]);\n      return step;\n    },\n    fetchFlow: async (hass, flowId) => {\n      const step = await fetchConfigFlow(hass, flowId);\n      await hass.loadBackendTranslation(\"config\", step.handler);\n      return step;\n    },\n    handleFlowStep: handleConfigFlowStep,\n    deleteFlow: deleteConfigFlow,\n\n    renderAbortDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.abort.${step.reason}`,\n        step.description_placeholders\n      );\n\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderShowFormStepHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) || hass.localize(`component.${step.handler}.title`)\n      );\n    },\n\n    renderShowFormStepDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.description`,\n        step.description_placeholders\n      );\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderShowFormStepFieldLabel(hass, step, field) {\n      return hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.data.${field.name}`\n      );\n    },\n\n    renderShowFormStepFieldHelper(hass, step, field) {\n      const description = hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.data_description.${field.name}`,\n        step.description_placeholders\n      );\n      return description\n        ? html`<ha-markdown breaks .content=${description}></ha-markdown>`\n        : \"\";\n    },\n\n    renderShowFormStepFieldError(hass, step, error) {\n      return hass.localize(\n        `component.${step.handler}.config.error.${error}`,\n        step.description_placeholders\n      );\n    },\n\n    renderExternalStepHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) ||\n        hass.localize(\n          \"ui.panel.config.integrations.config_flow.external_step.open_site\"\n        )\n      );\n    },\n\n    renderExternalStepDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.${step.step_id}.description`,\n        step.description_placeholders\n      );\n\n      return html`\n        <p>\n          ${hass.localize(\n            \"ui.panel.config.integrations.config_flow.external_step.description\"\n          )}\n        </p>\n        ${description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\"}\n      `;\n    },\n\n    renderCreateEntryDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.create_entry.${\n          step.description || \"default\"\n        }`,\n        step.description_placeholders\n      );\n\n      return html`\n        ${description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\"}\n        <p>\n          ${hass.localize(\n            \"ui.panel.config.integrations.config_flow.created_config\",\n            \"name\",\n            step.title\n          )}\n        </p>\n      `;\n    },\n\n    renderShowFormProgressHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) || hass.localize(`component.${step.handler}.title`)\n      );\n    },\n\n    renderShowFormProgressDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.progress.${step.progress_action}`,\n        step.description_placeholders\n      );\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderMenuHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) || hass.localize(`component.${step.handler}.title`)\n      );\n    },\n\n    renderMenuDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.description`,\n        step.description_placeholders\n      );\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderMenuOption(hass, step, option) {\n      return hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.menu_options.${option}`,\n        step.description_placeholders\n      );\n    },\n\n    renderLoadingDescription(hass, reason, handler, step) {\n      if (![\"loading_flow\", \"loading_step\"].includes(reason)) {\n        return \"\";\n      }\n      const domain = step?.handler || handler;\n      return hass.localize(\n        `ui.panel.config.integrations.config_flow.loading.${reason}`,\n        {\n          integration: domain\n            ? domainToName(hass.localize, domain)\n            : // when we are continuing a config flow, we only know the ID and not the domain\n              hass.localize(\n                \"ui.panel.config.integrations.config_flow.loading.fallback_title\"\n              ),\n        }\n      );\n    },\n  });\n","import { mdiSolarPower } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-dialog\";\nimport {\n  emptySolarEnergyPreference,\n  SolarSourceTypeEnergyPreference,\n} from \"../../../../data/energy\";\nimport { HassDialog } from \"../../../../dialogs/make-dialog-manager\";\nimport { haStyle, haStyleDialog } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { EnergySettingsSolarDialogParams } from \"./show-dialogs-energy\";\nimport \"@material/mwc-button/mwc-button\";\nimport \"../../../../components/entity/ha-statistic-picker\";\nimport \"../../../../components/ha-radio\";\nimport \"../../../../components/ha-checkbox\";\nimport type { HaCheckbox } from \"../../../../components/ha-checkbox\";\nimport \"../../../../components/ha-formfield\";\nimport type { HaRadio } from \"../../../../components/ha-radio\";\nimport { showConfigFlowDialog } from \"../../../../dialogs/config-flow/show-dialog-config-flow\";\nimport { ConfigEntry, getConfigEntries } from \"../../../../data/config_entries\";\nimport { brandsUrl } from \"../../../../util/brands-url\";\n\nconst energyUnits = [\"kWh\"];\nconst energyDeviceClasses = [\"energy\"];\n\n@customElement(\"dialog-energy-solar-settings\")\nexport class DialogEnergySolarSettings\n  extends LitElement\n  implements HassDialog<EnergySettingsSolarDialogParams>\n{\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _params?: EnergySettingsSolarDialogParams;\n\n  @state() private _source?: SolarSourceTypeEnergyPreference;\n\n  @state() private _configEntries?: ConfigEntry[];\n\n  @state() private _forecast?: boolean;\n\n  @state() private _error?: string;\n\n  public async showDialog(\n    params: EnergySettingsSolarDialogParams\n  ): Promise<void> {\n    this._params = params;\n    this._fetchSolarForecastConfigEntries();\n    this._source = params.source\n      ? { ...params.source }\n      : emptySolarEnergyPreference();\n    this._forecast = this._source.config_entry_solar_forecast !== null;\n  }\n\n  public closeDialog(): void {\n    this._params = undefined;\n    this._source = undefined;\n    this._error = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params || !this._source) {\n      return html``;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        .heading=${html`<ha-svg-icon\n            .path=${mdiSolarPower}\n            style=\"--mdc-icon-size: 32px;\"\n          ></ha-svg-icon>\n          ${this.hass.localize(\"ui.panel.config.energy.solar.dialog.header\")}`}\n        @closed=${this.closeDialog}\n      >\n        ${this._error ? html`<p class=\"error\">${this._error}</p>` : \"\"}\n\n        <ha-statistic-picker\n          .hass=${this.hass}\n          .includeStatisticsUnitOfMeasurement=${energyUnits}\n          .includeDeviceClasses=${energyDeviceClasses}\n          .value=${this._source.stat_energy_from}\n          .label=${this.hass.localize(\n            \"ui.panel.config.energy.solar.dialog.solar_production_energy\"\n          )}\n          @value-changed=${this._statisticChanged}\n          dialogInitialFocus\n        ></ha-statistic-picker>\n\n        <h3>\n          ${this.hass.localize(\n            \"ui.panel.config.energy.solar.dialog.solar_production_forecast\"\n          )}\n        </h3>\n        <p>\n          ${this.hass.localize(\n            \"ui.panel.config.energy.solar.dialog.solar_production_forecast_description\"\n          )}\n        </p>\n\n        <ha-formfield\n          label=${this.hass.localize(\n            \"ui.panel.config.energy.solar.dialog.dont_forecast_production\"\n          )}\n        >\n          <ha-radio\n            value=\"false\"\n            name=\"forecast\"\n            .checked=${!this._forecast}\n            @change=${this._handleForecastChanged}\n          ></ha-radio>\n        </ha-formfield>\n        <ha-formfield\n          label=${this.hass.localize(\n            \"ui.panel.config.energy.solar.dialog.forecast_production\"\n          )}\n        >\n          <ha-radio\n            value=\"true\"\n            name=\"forecast\"\n            .checked=${this._forecast}\n            @change=${this._handleForecastChanged}\n          ></ha-radio>\n        </ha-formfield>\n        ${this._forecast\n          ? html`<div class=\"forecast-options\">\n              ${this._configEntries?.map(\n                (entry) => html`<ha-formfield\n                  .label=${html`<div\n                    style=\"display: flex; align-items: center;\"\n                  >\n                    <img\n                      referrerpolicy=\"no-referrer\"\n                      style=\"height: 24px; margin-right: 16px;\"\n                      src=${brandsUrl({\n                        domain: entry.domain,\n                        type: \"icon\",\n                        darkOptimized: this.hass.themes?.darkMode,\n                      })}\n                    />${entry.title}\n                  </div>`}\n                >\n                  <ha-checkbox\n                    .entry=${entry}\n                    @change=${this._forecastCheckChanged}\n                    .checked=${this._source?.config_entry_solar_forecast?.includes(\n                      entry.entry_id\n                    )}\n                  >\n                  </ha-checkbox>\n                </ha-formfield>`\n              )}\n              <mwc-button @click=${this._addForecast}>\n                ${this.hass.localize(\n                  \"ui.panel.config.energy.solar.dialog.add_forecast\"\n                )}\n              </mwc-button>\n            </div>`\n          : \"\"}\n\n        <mwc-button @click=${this.closeDialog} slot=\"secondaryAction\">\n          ${this.hass.localize(\"ui.common.cancel\")}\n        </mwc-button>\n        <mwc-button\n          @click=${this._save}\n          .disabled=${!this._source.stat_energy_from}\n          slot=\"primaryAction\"\n        >\n          ${this.hass.localize(\"ui.common.save\")}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private async _fetchSolarForecastConfigEntries() {\n    const domains = this._params!.info.solar_forecast_domains;\n    this._configEntries =\n      domains.length === 0\n        ? []\n        : domains.length === 1\n        ? await getConfigEntries(this.hass, {\n            type: \"integration\",\n            domain: domains[0],\n          })\n        : (await getConfigEntries(this.hass, { type: \"integration\" })).filter(\n            (entry) => domains.includes(entry.domain)\n          );\n  }\n\n  private _handleForecastChanged(ev: CustomEvent) {\n    const input = ev.currentTarget as HaRadio;\n    this._forecast = input.value === \"true\";\n  }\n\n  private _forecastCheckChanged(ev) {\n    const input = ev.currentTarget as HaCheckbox;\n    const entry = (input as any).entry as ConfigEntry;\n    const checked = input.checked;\n    if (checked) {\n      if (this._source!.config_entry_solar_forecast === null) {\n        this._source!.config_entry_solar_forecast = [];\n      }\n      this._source!.config_entry_solar_forecast.push(entry.entry_id);\n    } else {\n      this._source!.config_entry_solar_forecast!.splice(\n        this._source!.config_entry_solar_forecast!.indexOf(entry.entry_id),\n        1\n      );\n    }\n  }\n\n  private _addForecast() {\n    showConfigFlowDialog(this, {\n      startFlowHandler: \"forecast_solar\",\n      dialogClosedCallback: (params) => {\n        if (params.entryId) {\n          if (this._source!.config_entry_solar_forecast === null) {\n            this._source!.config_entry_solar_forecast = [];\n          }\n          this._source!.config_entry_solar_forecast.push(params.entryId);\n          this._fetchSolarForecastConfigEntries();\n        }\n      },\n    });\n  }\n\n  private _statisticChanged(ev: CustomEvent<{ value: string }>) {\n    this._source = { ...this._source!, stat_energy_from: ev.detail.value };\n  }\n\n  private async _save() {\n    try {\n      if (!this._forecast) {\n        this._source!.config_entry_solar_forecast = null;\n      }\n      await this._params!.saveCallback(this._source!);\n      this.closeDialog();\n    } catch (err: any) {\n      this._error = err.message;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --mdc-dialog-max-width: 430px;\n        }\n        img {\n          height: 24px;\n          margin-right: 16px;\n        }\n        ha-formfield {\n          display: block;\n        }\n        ha-statistic-picker {\n          width: 100%;\n        }\n        .forecast-options {\n          padding-left: 32px;\n        }\n        .forecast-options mwc-button {\n          padding-left: 8px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-energy-solar-settings\": DialogEnergySolarSettings;\n  }\n}\n"],"names":[],"sourceRoot":""}