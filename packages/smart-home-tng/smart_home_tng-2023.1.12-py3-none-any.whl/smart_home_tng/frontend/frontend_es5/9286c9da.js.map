{"version":3,"file":"9286c9da.js","mappings":";AAsFA;AAUA;AACA;;;AAIA;;;;AAIA;;;AAKA;;;;;AAMA;;;;;;AAMA;AACA;;AAEA;;;;;;;AAOA;;;AAIA;;;AAGA;;;;;;;AASA;;;;AAKA;AACA;;;;;;AAMA;AACA;;AAEA;;;;;;AAQA;;AAGA;;AAGA;;;AAGA;AACA;AAKA;;;;AAQA;;AAEA;;;AAGA;;;AAIA;;;;AAUA;AACA;AACA;;;;;;AAMA;;;AASA;AACA;AACA;;AAEA;;;AAIA;;;AAIA;AACA;AAGA;;;;AAIA;;AAGA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuOA","sources":["webpack://home-assistant-frontend/./src/panels/config/script/ha-script-trace.ts"],"sourcesContent":["import {\n  mdiDotsVertical,\n  mdiDownload,\n  mdiInformationOutline,\n  mdiPencil,\n  mdiRayEndArrow,\n  mdiRayStartArrow,\n  mdiRefresh,\n} from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { repeat } from \"lit/directives/repeat\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { formatDateTimeWithSeconds } from \"../../../common/datetime/format_date_time\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/trace/ha-trace-blueprint-config\";\nimport \"../../../components/trace/ha-trace-config\";\nimport \"../../../components/trace/ha-trace-logbook\";\nimport \"../../../components/trace/ha-trace-path-details\";\nimport \"../../../components/trace/ha-trace-timeline\";\nimport \"../../../components/trace/hat-script-graph\";\nimport type {\n  HatScriptGraph,\n  NodeInfo,\n} from \"../../../components/trace/hat-script-graph\";\nimport { traceTabStyles } from \"../../../components/trace/trace-tab-styles\";\nimport { getLogbookDataForContext, LogbookEntry } from \"../../../data/logbook\";\nimport { ScriptEntity } from \"../../../data/script\";\nimport {\n  loadTrace,\n  loadTraces,\n  ScriptTrace,\n  ScriptTraceExtended,\n} from \"../../../data/trace\";\nimport { showAlertDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport \"../../../layouts/hass-subpage\";\nimport \"../../../components/ha-button-menu\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\n\n@customElement(\"ha-script-trace\")\nexport class HaScriptTrace extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public scriptEntityId!: string;\n\n  @property({ attribute: false }) public scripts!: ScriptEntity[];\n\n  @property({ type: Boolean }) public isWide?: boolean;\n\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @state() private _traces?: ScriptTrace[];\n\n  @state() private _runId?: string;\n\n  @state() private _selected?: NodeInfo;\n\n  @state() private _trace?: ScriptTraceExtended;\n\n  @state() private _logbookEntries?: LogbookEntry[];\n\n  @state() private _view:\n    | \"details\"\n    | \"config\"\n    | \"timeline\"\n    | \"logbook\"\n    | \"blueprint\" = \"details\";\n\n  @query(\"hat-script-graph\") private _graph?: HatScriptGraph;\n\n  protected render(): TemplateResult {\n    const stateObj = this.scriptEntityId\n      ? this.hass.states[this.scriptEntityId]\n      : undefined;\n\n    const graph = this._graph;\n    const trackedNodes = graph?.trackedNodes;\n    const renderedNodes = graph?.renderedNodes;\n\n    const title = stateObj?.attributes.friendly_name || this.scriptEntityId;\n\n    let devButtons: TemplateResult | string = \"\";\n    if (__DEV__) {\n      devButtons = html`<div style=\"position: absolute; right: 0;\">\n        <button @click=${this._importTrace}>Import trace</button>\n        <button @click=${this._loadLocalStorageTrace}>Load stored trace</button>\n      </div>`;\n    }\n\n    return html`\n      ${devButtons}\n      <hass-subpage .hass=${this.hass} .narrow=${this.narrow} .header=${title}>\n        ${!this.narrow && this.scriptEntityId\n          ? html`\n              <a\n                class=\"trace-link\"\n                href=\"/config/script/edit/${this.scriptEntityId}\"\n                slot=\"toolbar-icon\"\n              >\n                <mwc-button>\n                  ${this.hass.localize(\n                    \"ui.panel.config.script.trace.edit_script\"\n                  )}\n                </mwc-button>\n              </a>\n            `\n          : \"\"}\n\n        <ha-button-menu corner=\"BOTTOM_START\" slot=\"toolbar-icon\">\n          <ha-icon-button\n            slot=\"trigger\"\n            .label=${this.hass.localize(\"ui.common.menu\")}\n            .path=${mdiDotsVertical}\n          ></ha-icon-button>\n\n          <mwc-list-item\n            graphic=\"icon\"\n            .disabled=${!this.scriptEntityId}\n            @click=${this._showInfo}\n          >\n            ${this.hass.localize(\"ui.panel.config.script.editor.show_info\")}\n            <ha-svg-icon\n              slot=\"graphic\"\n              .path=${mdiInformationOutline}\n            ></ha-svg-icon>\n          </mwc-list-item>\n\n          ${this.narrow && this.scriptEntityId\n            ? html`\n                <a\n                  class=\"trace-link\"\n                  href=\"/config/script/edit/${this.scriptEntityId}\"\n                >\n                  <mwc-list-item graphic=\"icon\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.script.trace.edit_script\"\n                    )}\n                    <ha-svg-icon\n                      slot=\"graphic\"\n                      .path=${mdiPencil}\n                    ></ha-svg-icon>\n                  </mwc-list-item>\n                </a>\n              `\n            : \"\"}\n\n          <li divider role=\"separator\"></li>\n\n          <mwc-list-item graphic=\"icon\" @click=${this._refreshTraces}>\n            ${this.hass.localize(\"ui.panel.config.automation.trace.refresh\")}\n            <ha-svg-icon slot=\"graphic\" .path=${mdiRefresh}></ha-svg-icon>\n          </mwc-list-item>\n\n          <mwc-list-item\n            graphic=\"icon\"\n            .disabled=${!this._trace}\n            @click=${this._downloadTrace}\n          >\n            ${this.hass.localize(\n              \"ui.panel.config.automation.trace.download_trace\"\n            )}\n            <ha-svg-icon slot=\"graphic\" .path=${mdiDownload}></ha-svg-icon>\n          </mwc-list-item>\n        </ha-button-menu>\n\n        <div class=\"toolbar\">\n          ${this._traces && this._traces.length > 0\n            ? html`\n                <ha-icon-button\n                  .disabled=${this._traces[this._traces.length - 1].run_id ===\n                  this._runId}\n                  label=\"Older trace\"\n                  @click=${this._pickOlderTrace}\n                  .path=${mdiRayEndArrow}\n                ></ha-icon-button>\n                <select .value=${this._runId} @change=${this._pickTrace}>\n                  ${repeat(\n                    this._traces,\n                    (trace) => trace.run_id,\n                    (trace) =>\n                      html`<option value=${trace.run_id}>\n                        ${formatDateTimeWithSeconds(\n                          new Date(trace.timestamp.start),\n                          this.hass.locale\n                        )}\n                      </option>`\n                  )}\n                </select>\n                <ha-icon-button\n                  .disabled=${this._traces[0].run_id === this._runId}\n                  label=\"Newer trace\"\n                  @click=${this._pickNewerTrace}\n                  .path=${mdiRayStartArrow}\n                ></ha-icon-button>\n              `\n            : \"\"}\n        </div>\n\n        ${this._traces === undefined\n          ? html`<div class=\"container\">Loadingâ€¦</div>`\n          : this._traces.length === 0\n          ? html`<div class=\"container\">No traces found</div>`\n          : this._trace === undefined\n          ? \"\"\n          : html`\n              <div class=\"main\">\n                <div class=\"graph\">\n                  <hat-script-graph\n                    .trace=${this._trace}\n                    .selected=${this._selected?.path}\n                    @graph-node-selected=${this._pickNode}\n                  ></hat-script-graph>\n                </div>\n\n                <div class=\"info\">\n                  <div class=\"tabs top\">\n                    ${[\n                      [\"details\", \"Step Details\"],\n                      [\"timeline\", \"Trace Timeline\"],\n                      [\"logbook\", \"Related logbook entries\"],\n                      [\"config\", \"Script Config\"],\n                    ].map(\n                      ([view, label]) => html`\n                        <button\n                          tabindex=\"0\"\n                          .view=${view}\n                          class=${classMap({ active: this._view === view })}\n                          @click=${this._showTab}\n                        >\n                          ${label}\n                        </button>\n                      `\n                    )}\n                    ${this._trace.blueprint_inputs\n                      ? html`\n                          <button\n                            tabindex=\"0\"\n                            .view=${\"blueprint\"}\n                            class=${classMap({\n                              active: this._view === \"blueprint\",\n                            })}\n                            @click=${this._showTab}\n                          >\n                            Blueprint Config\n                          </button>\n                        `\n                      : \"\"}\n                  </div>\n                  ${this._selected === undefined ||\n                  this._logbookEntries === undefined ||\n                  trackedNodes === undefined\n                    ? \"\"\n                    : this._view === \"details\"\n                    ? html`\n                        <ha-trace-path-details\n                          .hass=${this.hass}\n                          .narrow=${this.narrow}\n                          .trace=${this._trace}\n                          .selected=${this._selected}\n                          .logbookEntries=${this._logbookEntries}\n                          .trackedNodes=${trackedNodes}\n                          .renderedNodes=${renderedNodes!}\n                        ></ha-trace-path-details>\n                      `\n                    : this._view === \"config\"\n                    ? html`\n                        <ha-trace-config\n                          .hass=${this.hass}\n                          .trace=${this._trace}\n                        ></ha-trace-config>\n                      `\n                    : this._view === \"logbook\"\n                    ? html`\n                        <ha-trace-logbook\n                          .hass=${this.hass}\n                          .narrow=${this.narrow}\n                          .trace=${this._trace}\n                          .logbookEntries=${this._logbookEntries}\n                        ></ha-trace-logbook>\n                      `\n                    : this._view === \"blueprint\"\n                    ? html`\n                        <ha-trace-blueprint-config\n                          .hass=${this.hass}\n                          .trace=${this._trace}\n                        ></ha-trace-blueprint-config>\n                      `\n                    : html`\n                        <ha-trace-timeline\n                          .hass=${this.hass}\n                          .trace=${this._trace}\n                          .logbookEntries=${this._logbookEntries}\n                          .selected=${this._selected}\n                          @value-changed=${this._timelinePathPicked}\n                        ></ha-trace-timeline>\n                      `}\n                </div>\n              </div>\n            `}\n      </hass-subpage>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n\n    if (!this.scriptEntityId) {\n      return;\n    }\n\n    const params = new URLSearchParams(location.search);\n    this._loadTraces(params.get(\"run_id\") || undefined);\n  }\n\n  public willUpdate(changedProps) {\n    super.willUpdate(changedProps);\n\n    // Only reset if scriptEntityId has changed and we had one before.\n    if (changedProps.get(\"scriptEntityId\")) {\n      this._traces = undefined;\n      this._runId = undefined;\n      this._trace = undefined;\n      this._logbookEntries = undefined;\n      if (this.scriptEntityId) {\n        this._loadTraces();\n      }\n    }\n\n    if (changedProps.has(\"_runId\") && this._runId) {\n      this._trace = undefined;\n      this._logbookEntries = undefined;\n      this._loadTrace();\n    }\n  }\n\n  private _pickOlderTrace() {\n    const curIndex = this._traces!.findIndex((tr) => tr.run_id === this._runId);\n    this._runId = this._traces![curIndex + 1].run_id;\n    this._selected = undefined;\n  }\n\n  private _pickNewerTrace() {\n    const curIndex = this._traces!.findIndex((tr) => tr.run_id === this._runId);\n    this._runId = this._traces![curIndex - 1].run_id;\n    this._selected = undefined;\n  }\n\n  private _pickTrace(ev) {\n    this._runId = ev.target.value;\n    this._selected = undefined;\n  }\n\n  private _pickNode(ev) {\n    this._selected = ev.detail;\n  }\n\n  private _refreshTraces() {\n    this._loadTraces();\n  }\n\n  private async _loadTraces(runId?: string) {\n    this._traces = await loadTraces(\n      this.hass,\n      \"script\",\n      this.scriptEntityId.split(\".\")[1]\n    );\n    // Newest will be on top.\n    this._traces.reverse();\n\n    if (runId) {\n      this._runId = runId;\n    }\n\n    // Check if current run ID still exists\n    if (\n      this._runId &&\n      !this._traces.some((trace) => trace.run_id === this._runId)\n    ) {\n      this._runId = undefined;\n      this._selected = undefined;\n\n      // If we came here from a trace passed into the url, clear it.\n      if (runId) {\n        const params = new URLSearchParams(location.search);\n        params.delete(\"run_id\");\n        history.replaceState(\n          null,\n          \"\",\n          `${location.pathname}?${params.toString()}`\n        );\n      }\n\n      await showAlertDialog(this, {\n        text: \"Chosen trace is no longer available\",\n      });\n    }\n\n    // See if we can set a default runID\n    if (!this._runId && this._traces.length > 0) {\n      this._runId = this._traces[0].run_id;\n    }\n  }\n\n  private async _loadTrace() {\n    const trace = await loadTrace(\n      this.hass,\n      \"script\",\n      this.scriptEntityId.split(\".\")[1],\n      this._runId!\n    );\n    this._logbookEntries = isComponentLoaded(this.hass, \"logbook\")\n      ? await getLogbookDataForContext(\n          this.hass,\n          trace.timestamp.start,\n          trace.context.id\n        )\n      : [];\n\n    this._trace = trace;\n  }\n\n  private _downloadTrace() {\n    const aEl = document.createElement(\"a\");\n    aEl.download = `trace ${this.scriptEntityId} ${\n      this._trace!.timestamp.start\n    }.json`;\n    aEl.href = `data:application/json;charset=utf-8,${encodeURI(\n      JSON.stringify(\n        {\n          trace: this._trace,\n          logbookEntries: this._logbookEntries,\n        },\n        undefined,\n        2\n      )\n    )}`;\n    aEl.click();\n  }\n\n  private _importTrace() {\n    const traceText = prompt(\"Enter downloaded trace\");\n    if (!traceText) {\n      return;\n    }\n    localStorage.devTrace = traceText;\n    this._loadLocalTrace(traceText);\n  }\n\n  private _loadLocalStorageTrace() {\n    if (localStorage.devTrace) {\n      this._loadLocalTrace(localStorage.devTrace);\n    }\n  }\n\n  private _loadLocalTrace(traceText: string) {\n    const traceInfo = JSON.parse(traceText);\n    this._trace = traceInfo.trace;\n    this._logbookEntries = traceInfo.logbookEntries;\n  }\n\n  private _showTab(ev: Event) {\n    this._view = (ev.target as any).view;\n  }\n\n  private _timelinePathPicked(ev: CustomEvent) {\n    const path = ev.detail.value;\n    const nodes = this._graph!.trackedNodes;\n    if (nodes[path]) {\n      this._selected = nodes[path];\n    }\n  }\n\n  private async _showInfo() {\n    if (!this.scriptEntityId) {\n      return;\n    }\n    fireEvent(this, \"hass-more-info\", { entityId: this.scriptEntityId });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      traceTabStyles,\n      css`\n        .toolbar {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          height: var(--header-height);\n          background-color: var(--primary-background-color);\n          color: var(--app-header-text-color, white);\n          border-bottom: var(--app-header-border-bottom, none);\n          box-sizing: border-box;\n        }\n\n        .main {\n          height: calc(100% - 56px);\n          display: flex;\n          background-color: var(--card-background-color);\n        }\n\n        :host([narrow]) .main {\n          height: auto;\n          flex-direction: column;\n        }\n\n        .container {\n          padding: 16px;\n        }\n\n        .graph {\n          border-right: 1px solid var(--divider-color);\n          overflow-x: auto;\n          max-width: 50%;\n        }\n        :host([narrow]) .graph {\n          max-width: 100%;\n        }\n\n        .info {\n          flex: 1;\n          background-color: var(--card-background-color);\n        }\n\n        .linkButton {\n          color: var(--primary-text-color);\n        }\n        .trace-link {\n          text-decoration: none;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-script-trace\": HaScriptTrace;\n  }\n}\n"],"names":[],"sourceRoot":""}