{"version":3,"file":"75d0d0bd.js","mappings":";;AA+GA;AACA;AACA;AACA;AACA;;AAGA;;AC8DA;;AAGA;;;;;;AAOA;;AAGA;;;;;;;AAQA;AACA;AACA;AACA;AACA;;;;;AAKA;;AAGA;;AAMA;AAEA;;AAGA;;;AAGA;;;AAGA;AAEA;;;AAIA;;AAIA;AAEA;AAGA;AAEA;;AAEA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiJA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-generic-entity-row-editor.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/hui-element-editor.ts"],"sourcesContent":["import \"../../../../components/ha-form/ha-form\";\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { assert } from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { computeDomain } from \"../../../../common/entity/compute_domain\";\nimport { domainIcon } from \"../../../../common/entity/domain_icon\";\nimport type { LocalizeFunc } from \"../../../../common/translations/localize\";\nimport type { SchemaUnion } from \"../../../../components/ha-form/types\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { EntitiesCardEntityConfig } from \"../../cards/types\";\nimport type { LovelaceRowEditor } from \"../../types\";\nimport { entitiesConfigStruct } from \"../structs/entities-struct\";\n\nconst SecondaryInfoValues = {\n  none: {},\n  \"entity-id\": {},\n  \"last-changed\": {},\n  \"last-updated\": {},\n  \"last-triggered\": { domains: [\"automation\", \"script\"] },\n  position: { domains: [\"cover\"] },\n  \"tilt-position\": { domains: [\"cover\"] },\n  brightness: { domains: [\"light\"] },\n} as const;\n\n@customElement(\"hui-generic-entity-row-editor\")\nexport class HuiGenericEntityRowEditor\n  extends LitElement\n  implements LovelaceRowEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: EntitiesCardEntityConfig;\n\n  public setConfig(config: EntitiesCardEntityConfig): void {\n    assert(config, entitiesConfigStruct);\n    this._config = config;\n  }\n\n  private _schema = memoizeOne(\n    (\n      entity: string,\n      icon: string | undefined,\n      entityState: HassEntity,\n      localize: LocalizeFunc\n    ) => {\n      const domain = computeDomain(entity);\n\n      return [\n        { name: \"entity\", required: true, selector: { entity: {} } },\n        {\n          type: \"grid\",\n          name: \"\",\n          schema: [\n            { name: \"name\", selector: { text: {} } },\n            {\n              name: \"icon\",\n              selector: {\n                icon: {\n                  placeholder: icon || entityState?.attributes.icon,\n                  fallbackPath:\n                    !icon && !entityState?.attributes.icon && entityState\n                      ? domainIcon(domain, entityState)\n                      : undefined,\n                },\n              },\n            },\n          ],\n        },\n        {\n          name: \"secondary_info\",\n          selector: {\n            select: {\n              options: (\n                Object.keys(SecondaryInfoValues).filter(\n                  (info) =>\n                    !(\"domains\" in SecondaryInfoValues[info]) ||\n                    (\"domains\" in SecondaryInfoValues[info] &&\n                      SecondaryInfoValues[info].domains!.includes(domain))\n                ) as Array<keyof typeof SecondaryInfoValues>\n              ).map((info) => ({\n                value: info,\n                label: localize(\n                  `ui.panel.lovelace.editor.card.entities.secondary_info_values.${info}`\n                ),\n              })),\n            },\n          },\n        },\n      ] as const;\n    }\n  );\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const entityState = this.hass.states[this._config.entity];\n\n    const schema = this._schema(\n      this._config.entity,\n      this._config.icon,\n      entityState,\n      this.hass.localize\n    );\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${this._config}\n        .schema=${schema}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    fireEvent(this, \"config-changed\", { config: ev.detail.value });\n  }\n\n  private _computeLabelCallback = (\n    schema: SchemaUnion<ReturnType<typeof this._schema>>\n  ) => {\n    switch (schema.name) {\n      case \"secondary_info\":\n        return this.hass!.localize(\n          `ui.panel.lovelace.editor.card.entity-row.${schema.name}`\n        );\n      default:\n        return this.hass!.localize(\n          `ui.panel.lovelace.editor.card.generic.${schema.name}`\n        );\n    }\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-generic-entity-row-editor\": HuiGenericEntityRowEditor;\n  }\n}\n","import \"@material/mwc-button\";\nimport { dump, load } from \"js-yaml\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { property, state, query } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { handleStructError } from \"../../../common/structs/handle-errors\";\nimport { deepEqual } from \"../../../common/util/deep-equal\";\nimport \"../../../components/ha-circular-progress\";\nimport \"../../../components/ha-code-editor\";\nimport \"../../../components/ha-alert\";\nimport type { HaCodeEditor } from \"../../../components/ha-code-editor\";\nimport type {\n  LovelaceCardConfig,\n  LovelaceConfig,\n} from \"../../../data/lovelace\";\nimport type { HomeAssistant } from \"../../../types\";\nimport type { LovelaceRowConfig } from \"../entity-rows/types\";\nimport { LovelaceHeaderFooterConfig } from \"../header-footer/types\";\nimport type { LovelaceGenericElementEditor } from \"../types\";\nimport \"./config-elements/hui-generic-entity-row-editor\";\nimport { GUISupportError } from \"./gui-support-error\";\nimport { EditSubElementEvent, GUIModeChangedEvent } from \"./types\";\n\nexport interface ConfigChangedEvent {\n  config: LovelaceCardConfig | LovelaceRowConfig | LovelaceHeaderFooterConfig;\n  error?: string;\n  guiModeAvailable?: boolean;\n}\n\ndeclare global {\n  interface HASSDomEvents {\n    \"config-changed\": ConfigChangedEvent;\n    \"GUImode-changed\": GUIModeChangedEvent;\n    \"edit-detail-element\": EditSubElementEvent;\n  }\n}\n\nexport interface UIConfigChangedEvent extends Event {\n  detail: {\n    config: LovelaceCardConfig | LovelaceRowConfig | LovelaceHeaderFooterConfig;\n  };\n}\n\nexport abstract class HuiElementEditor<T> extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public lovelace?: LovelaceConfig;\n\n  @state() private _yaml?: string;\n\n  @state() private _config?: T;\n\n  @state() private _configElement?: LovelaceGenericElementEditor;\n\n  @state() private _configElementType?: string;\n\n  @state() private _guiMode = true;\n\n  // Error: Configuration broken - do not save\n  @state() private _errors?: string[];\n\n  // Warning: GUI editor can't handle configuration - ok to save\n  @state() private _warnings?: string[];\n\n  @state() private _guiSupported?: boolean;\n\n  @state() private _loading = false;\n\n  @query(\"ha-code-editor\") _yamlEditor?: HaCodeEditor;\n\n  public get yaml(): string {\n    if (!this._yaml) {\n      this._yaml = dump(this._config);\n    }\n    return this._yaml || \"\";\n  }\n\n  public set yaml(_yaml: string) {\n    this._yaml = _yaml;\n    try {\n      this._config = load(this.yaml) as any;\n      this._errors = undefined;\n    } catch (err: any) {\n      this._errors = [err.message];\n    }\n    this._setConfig();\n  }\n\n  public get value(): T | undefined {\n    return this._config;\n  }\n\n  public set value(config: T | undefined) {\n    if (this._config && deepEqual(config, this._config)) {\n      return;\n    }\n    this._config = config;\n    this._yaml = undefined;\n    this._errors = undefined;\n    this._setConfig();\n  }\n\n  private _setConfig(): void {\n    if (!this._errors) {\n      try {\n        this._updateConfigElement();\n      } catch (err: any) {\n        this._errors = [err.message];\n      }\n    }\n\n    fireEvent(this, \"config-changed\", {\n      config: this.value! as any,\n      error: this._errors?.join(\", \"),\n      guiModeAvailable: !(\n        this.hasWarning ||\n        this.hasError ||\n        this._guiSupported === false\n      ),\n    });\n  }\n\n  public get hasWarning(): boolean {\n    return this._warnings !== undefined && this._warnings.length > 0;\n  }\n\n  public get hasError(): boolean {\n    return this._errors !== undefined && this._errors.length > 0;\n  }\n\n  public get GUImode(): boolean {\n    return this._guiMode;\n  }\n\n  public set GUImode(guiMode: boolean) {\n    this._guiMode = guiMode;\n    fireEvent(this as HTMLElement, \"GUImode-changed\", {\n      guiMode,\n      guiModeAvailable: !(\n        this.hasWarning ||\n        this.hasError ||\n        this._guiSupported === false\n      ),\n    });\n  }\n\n  public toggleMode() {\n    this.GUImode = !this.GUImode;\n  }\n\n  public focusYamlEditor() {\n    if (this._configElement?.focusYamlEditor) {\n      this._configElement.focusYamlEditor();\n    }\n    if (!this._yamlEditor?.codemirror) {\n      return;\n    }\n    this._yamlEditor.codemirror.focus();\n  }\n\n  protected async getConfigElement(): Promise<\n    LovelaceGenericElementEditor | undefined\n  > {\n    return undefined;\n  }\n\n  protected get configElementType(): string | undefined {\n    return this.value ? (this.value as any).type : undefined;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"wrapper\">\n        ${this.GUImode\n          ? html`\n              <div class=\"gui-editor\">\n                ${this._loading\n                  ? html`\n                      <ha-circular-progress\n                        active\n                        alt=\"Loading\"\n                        class=\"center margin-bot\"\n                      ></ha-circular-progress>\n                    `\n                  : this._configElement}\n              </div>\n            `\n          : html`\n              <div class=\"yaml-editor\">\n                <ha-code-editor\n                  mode=\"yaml\"\n                  autofocus\n                  autocomplete-entities\n                  autocomplete-icons\n                  .hass=${this.hass}\n                  .value=${this.yaml}\n                  .error=${Boolean(this._errors)}\n                  @value-changed=${this._handleYAMLChanged}\n                  @keydown=${this._ignoreKeydown}\n                  dir=\"ltr\"\n                ></ha-code-editor>\n              </div>\n            `}\n        ${this._guiSupported === false && this.configElementType\n          ? html`\n              <div class=\"info\">\n                ${this.hass.localize(\n                  \"ui.errors.config.editor_not_available\",\n                  \"type\",\n                  this.configElementType\n                )}\n              </div>\n            `\n          : \"\"}\n        ${this.hasError\n          ? html`\n              <div class=\"error\">\n                ${this.hass.localize(\"ui.errors.config.error_detected\")}:\n                <br />\n                <ul>\n                  ${this._errors!.map((error) => html`<li>${error}</li>`)}\n                </ul>\n              </div>\n            `\n          : \"\"}\n        ${this.hasWarning\n          ? html`\n              <ha-alert\n                alert-type=\"warning\"\n                .title=\"${this.hass.localize(\n                  \"ui.errors.config.editor_not_supported\"\n                )}:\"\n              >\n                ${this._warnings!.length > 0 && this._warnings![0] !== undefined\n                  ? html` <ul>\n                      ${this._warnings!.map(\n                        (warning) => html`<li>${warning}</li>`\n                      )}\n                    </ul>`\n                  : \"\"}\n                ${this.hass.localize(\"ui.errors.config.edit_in_yaml_supported\")}\n              </ha-alert>\n            `\n          : \"\"}\n      </div>\n    `;\n  }\n\n  protected updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n\n    if (this._configElement && changedProperties.has(\"hass\")) {\n      this._configElement.hass = this.hass;\n    }\n    if (\n      this._configElement &&\n      \"lovelace\" in this._configElement &&\n      changedProperties.has(\"lovelace\")\n    ) {\n      this._configElement.lovelace = this.lovelace;\n    }\n  }\n\n  private _handleUIConfigChanged(ev: UIConfigChangedEvent) {\n    ev.stopPropagation();\n    const config = ev.detail.config;\n    this.value = config as unknown as T;\n  }\n\n  private _handleYAMLChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const newYaml = ev.detail.value;\n    if (newYaml !== this.yaml) {\n      this.yaml = newYaml;\n    }\n  }\n\n  private async _updateConfigElement(): Promise<void> {\n    if (!this.value) {\n      return;\n    }\n\n    let configElement: LovelaceGenericElementEditor | undefined;\n\n    try {\n      this._errors = undefined;\n      this._warnings = undefined;\n\n      if (this._configElementType !== this.configElementType) {\n        // If the type has changed, we need to load a new GUI editor\n        this._guiSupported = undefined;\n        this._configElement = undefined;\n\n        if (!this.configElementType) {\n          throw new Error(\n            this.hass.localize(\"ui.errors.config.no_type_provided\")\n          );\n        }\n\n        this._configElementType = this.configElementType;\n\n        this._loading = true;\n        configElement = await this.getConfigElement();\n\n        if (configElement) {\n          configElement.hass = this.hass;\n          if (\"lovelace\" in configElement) {\n            configElement.lovelace = this.lovelace;\n          }\n          configElement.addEventListener(\"config-changed\", (ev) =>\n            this._handleUIConfigChanged(ev as UIConfigChangedEvent)\n          );\n\n          this._configElement = configElement;\n          this._guiSupported = true;\n        }\n      }\n\n      if (this._configElement) {\n        // Setup GUI editor and check that it can handle the current config\n        try {\n          this._configElement.setConfig(this.value);\n        } catch (err: any) {\n          const msgs = handleStructError(this.hass, err);\n          throw new GUISupportError(\n            \"Config is not supported\",\n            msgs.warnings,\n            msgs.errors\n          );\n        }\n      } else {\n        this._guiSupported = false;\n        this.GUImode = false;\n      }\n    } catch (err: any) {\n      if (err instanceof GUISupportError) {\n        this._warnings = err.warnings ?? [err.message];\n        this._errors = err.errors || undefined;\n      } else {\n        this._errors = [err.message];\n      }\n      this.GUImode = false;\n    } finally {\n      this._loading = false;\n    }\n  }\n\n  private _ignoreKeydown(ev: KeyboardEvent) {\n    ev.stopPropagation();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n      }\n      .wrapper {\n        width: 100%;\n      }\n      .gui-editor,\n      .yaml-editor {\n        padding: 8px 0px;\n      }\n      ha-code-editor {\n        --code-mirror-max-height: calc(100vh - 245px);\n      }\n      .error,\n      .warning,\n      .info {\n        word-break: break-word;\n        margin-top: 8px;\n      }\n      .error {\n        color: var(--error-color);\n      }\n      .warning {\n        color: var(--warning-color);\n      }\n      .warning ul,\n      .error ul {\n        margin: 4px 0;\n      }\n      .warning li,\n      .error li {\n        white-space: pre-wrap;\n      }\n      ha-circular-progress {\n        display: block;\n        margin: auto;\n      }\n    `;\n  }\n}\n"],"names":[],"sourceRoot":""}