{"version":3,"file":"67573d3b.js","mappings":";AA4BA;;;AAGA;AAMA;AAwBA;;;AAMA;AAMA;;;;ACzDA;;;;ACFA","sources":["webpack://home-assistant-frontend/./src/common/integrations/protocolIntegrationPicked.ts","webpack://home-assistant-frontend/./src/components/ha-check-list-item.ts","webpack://home-assistant-frontend/./src/components/ha-checkbox.ts"],"sourcesContent":["import { html } from \"lit\";\nimport { getConfigEntries } from \"../../data/config_entries\";\nimport { showConfirmationDialog } from \"../../dialogs/generic/show-dialog-box\";\nimport { showZWaveJSAddNodeDialog } from \"../../panels/config/integrations/integration-panels/zwave_js/show-dialog-zwave_js-add-node\";\nimport type { HomeAssistant } from \"../../types\";\nimport { documentationUrl } from \"../../util/documentation-url\";\nimport { isComponentLoaded } from \"../config/is_component_loaded\";\nimport { fireEvent } from \"../dom/fire_event\";\nimport { navigate } from \"../navigate\";\n\nexport const protocolIntegrationPicked = async (\n  element: HTMLElement,\n  hass: HomeAssistant,\n  slug: string\n) => {\n  if (slug === \"zwave_js\") {\n    const entries = await getConfigEntries(hass, {\n      domain: \"zwave_js\",\n    });\n\n    if (!entries.length) {\n      // If the component isn't loaded, ask them to load the integration first\n      showConfirmationDialog(element, {\n        text: hass.localize(\n          \"ui.panel.config.integrations.config_flow.missing_zwave_zigbee\",\n          {\n            integration: \"Z-Wave\",\n            supported_hardware_link: html`<a\n              href=${documentationUrl(hass, \"/docs/z-wave/controllers\")}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              >${hass.localize(\n                \"ui.panel.config.integrations.config_flow.supported_hardware\"\n              )}</a\n            >`,\n          }\n        ),\n        confirmText: hass.localize(\n          \"ui.panel.config.integrations.config_flow.proceed\"\n        ),\n        confirm: () => {\n          fireEvent(element, \"handler-picked\", {\n            handler: \"zwave_js\",\n          });\n        },\n      });\n      return;\n    }\n\n    showZWaveJSAddNodeDialog(element, {\n      entry_id: entries[0].entry_id,\n    });\n  } else if (slug === \"zha\") {\n    // If the component isn't loaded, ask them to load the integration first\n    if (!isComponentLoaded(hass, \"zha\")) {\n      showConfirmationDialog(element, {\n        text: hass.localize(\n          \"ui.panel.config.integrations.config_flow.missing_zwave_zigbee\",\n          {\n            integration: \"Zigbee\",\n            supported_hardware_link: html`<a\n              href=${documentationUrl(\n                hass,\n                \"/integrations/zha/#known-working-zigbee-radio-modules\"\n              )}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              >${hass.localize(\n                \"ui.panel.config.integrations.config_flow.supported_hardware\"\n              )}</a\n            >`,\n          }\n        ),\n        confirmText: hass.localize(\n          \"ui.panel.config.integrations.config_flow.proceed\"\n        ),\n        confirm: () => {\n          fireEvent(element, \"handler-picked\", {\n            handler: \"zha\",\n          });\n        },\n      });\n      return;\n    }\n\n    navigate(\"/config/zha/add\");\n  }\n};\n","import { css } from \"lit\";\nimport { CheckListItemBase } from \"@material/mwc-list/mwc-check-list-item-base\";\nimport { styles as controlStyles } from \"@material/mwc-list/mwc-control-list-item.css\";\nimport { styles } from \"@material/mwc-list/mwc-list-item.css\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-check-list-item\")\nexport class HaCheckListItem extends CheckListItemBase {\n  static override styles = [\n    styles,\n    controlStyles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-check-list-item\": HaCheckListItem;\n  }\n}\n","import { CheckboxBase } from \"@material/mwc-checkbox/mwc-checkbox-base\";\nimport { styles } from \"@material/mwc-checkbox/mwc-checkbox.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-checkbox\")\nexport class HaCheckbox extends CheckboxBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-checkbox\": HaCheckbox;\n  }\n}\n"],"names":[],"sourceRoot":""}