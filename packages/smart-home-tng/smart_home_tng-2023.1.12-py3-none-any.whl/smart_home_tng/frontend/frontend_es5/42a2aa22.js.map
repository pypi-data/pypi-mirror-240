{"version":3,"file":"42a2aa22.js","mappings":";AAaA;;AAEA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;;AC3EA;AACA;;AAEA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoFA;;;;;;;;;;AAWA;;AC5GA;AAGA;AACA;AACA;;AAGA;;;;AA6BA;;;AC7BA;;;AAKA;;AAIA;AACA;AACA;;;;AAIA;AACA;;;AAGA;AACA;;;AAGA;;;;AAKA;AAEA;;;AAnCA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-textfield.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/lovelace-editor/hui-lovelace-editor.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/lovelace-editor/hui-dialog-edit-lovelace.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { TemplateResult, html, PropertyValues, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public iconTrailing?: boolean;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      (changedProperties.has(\"invalid\") &&\n        (this.invalid || changedProperties.get(\"invalid\") !== undefined)) ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid ? this.errorMessage || \"Invalid\" : \"\"\n      );\n      this.reportValidity();\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n        padding-inline-start: var(--text-field-suffix-padding-left, 12px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 0px);\n        direction: var(--direction);\n      }\n      .mdc-text-field--with-leading-icon {\n        padding-inline-start: var(--text-field-suffix-padding-left, 0px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 16px);\n        direction: var(--direction);\n      }\n\n      .mdc-text-field:not(.mdc-text-field--disabled)\n        .mdc-text-field__affix--suffix {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon--leading {\n        margin-inline-start: 16px;\n        margin-inline-end: 8px;\n        direction: var(--direction);\n      }\n\n      input {\n        text-align: var(--text-field-text-align, start);\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n\n      .mdc-floating-label {\n        inset-inline-start: 16px !important;\n        inset-inline-end: initial !important;\n        transform-origin: var(--float-start);\n        direction: var(--direction);\n        transform-origin: var(--float-start);\n      }\n\n      .mdc-text-field--with-leading-icon.mdc-text-field--filled\n        .mdc-floating-label {\n        max-width: calc(100% - 48px);\n        inset-inline-start: 48px !important;\n        inset-inline-end: initial !important;\n        direction: var(--direction);\n      }\n\n      .mdc-text-field__input[type=\"number\"] {\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          .mdc-text-field__affix--suffix,\n          .mdc-text-field--with-leading-icon,\n          .mdc-text-field__icon--leading,\n          .mdc-floating-label,\n          .mdc-text-field--with-leading-icon.mdc-text-field--filled\n            .mdc-floating-label,\n          .mdc-text-field__input[type=\"number\"] {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n","import \"../../../../components/ha-textfield\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { LovelaceConfig } from \"../../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { EditorTarget } from \"../types\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"lovelace-config-changed\": {\n      config: LovelaceConfig;\n    };\n  }\n}\n\n@customElement(\"hui-lovelace-editor\")\nexport class HuiLovelaceEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public config?: LovelaceConfig;\n\n  get _title(): string {\n    if (!this.config) {\n      return \"\";\n    }\n    return this.config.title || \"\";\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-textfield\n        .label=${this.hass.localize(\n          \"ui.panel.lovelace.editor.edit_lovelace.title\"\n        )}\n        .value=${this._title}\n        .configValue=${\"title\"}\n        @change=${this._valueChanged}\n      ></ha-textfield>\n    `;\n  }\n\n  private _valueChanged(ev: Event): void {\n    if (!this.config) {\n      return;\n    }\n\n    const target = ev.currentTarget! as EditorTarget;\n\n    if (this[`_${target.configValue}`] === target.value) {\n      return;\n    }\n\n    let newConfig;\n\n    if (target.configValue) {\n      newConfig = {\n        ...this.config,\n        [target.configValue]: target.value,\n      };\n    }\n\n    fireEvent(this, \"lovelace-config-changed\", { config: newConfig });\n  }\n\n  static styles: CSSResultGroup = css`\n    ha-textfield {\n      display: block;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-lovelace-editor\": HuiLovelaceEditor;\n  }\n}\n","import \"@material/mwc-button\";\nimport { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-circular-progress\";\nimport type { LovelaceConfig } from \"../../../../data/lovelace\";\nimport { haStyleDialog } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { Lovelace } from \"../../types\";\nimport \"./hui-lovelace-editor\";\nimport \"../../../../components/ha-dialog\";\n\n@customElement(\"hui-dialog-edit-lovelace\")\nexport class HuiDialogEditLovelace extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _lovelace?: Lovelace;\n\n  @state() private _config?: LovelaceConfig;\n\n  private _saving = false;\n\n  public showDialog(lovelace: Lovelace): void {\n    this._lovelace = lovelace;\n    const { views, ...lovelaceConfig } = this._lovelace!.config;\n    this._config = lovelaceConfig as LovelaceConfig;\n  }\n\n  public closeDialog(): void {\n    this._config = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config) {\n      return html``;\n    }\n    return html`\n      <ha-dialog\n        open\n        .heading=${this.hass!.localize(\n          \"ui.panel.lovelace.editor.edit_lovelace.header\"\n        )}\n      >\n        <div>\n          ${this.hass!.localize(\n            \"ui.panel.lovelace.editor.edit_lovelace.explanation\"\n          )}\n          <hui-lovelace-editor\n            .hass=${this.hass}\n            .config=${this._config}\n            @lovelace-config-changed=${this._ConfigChanged}\n            dialogInitialFocus\n          ></hui-lovelace-editor>\n        </div>\n        <mwc-button @click=${this.closeDialog} slot=\"secondaryAction\">\n          ${this.hass!.localize(\"ui.common.cancel\")}\n        </mwc-button>\n        <mwc-button\n          .disabled=${!this._config || this._saving}\n          @click=${this._save}\n          slot=\"primaryAction\"\n        >\n          ${this._saving\n            ? html`<ha-circular-progress\n                active\n                size=\"small\"\n                title=\"Saving\"\n              ></ha-circular-progress>`\n            : \"\"}\n          ${this.hass!.localize(\"ui.common.save\")}</mwc-button\n        >\n      </ha-dialog>\n    `;\n  }\n\n  private async _save(): Promise<void> {\n    if (!this._config) {\n      return;\n    }\n    if (!this._isConfigChanged()) {\n      this.closeDialog();\n      return;\n    }\n\n    this._saving = true;\n    const lovelace = this._lovelace!;\n\n    const config: LovelaceConfig = {\n      ...lovelace.config,\n      ...this._config,\n    };\n\n    try {\n      await lovelace.saveConfig(config);\n      this.closeDialog();\n    } catch (err: any) {\n      alert(`Saving failed: ${err.message}`);\n    } finally {\n      this._saving = false;\n    }\n  }\n\n  private _ConfigChanged(ev: CustomEvent): void {\n    if (ev.detail && ev.detail.config) {\n      this._config = ev.detail.config;\n    }\n  }\n\n  private _isConfigChanged(): boolean {\n    const { views, ...lovelaceConfig } = this._lovelace!.config;\n    return JSON.stringify(this._config) !== JSON.stringify(lovelaceConfig);\n  }\n\n  static get styles(): CSSResultGroup {\n    return haStyleDialog;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-dialog-edit-lovelace\": HuiDialogEditLovelace;\n  }\n}\n"],"names":[],"sourceRoot":""}