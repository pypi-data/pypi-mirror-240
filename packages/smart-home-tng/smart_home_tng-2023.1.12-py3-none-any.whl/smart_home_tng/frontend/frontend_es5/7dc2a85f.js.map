{"version":3,"file":"7dc2a85f.js","mappings":";AAsBA;AACA;;AAGA;;;;;;;AAQA;;AAGA;;AAIA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;;ACzDA;;AAWA;AACA;AAIA;;AAEA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AAEA;;AAEA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA","sources":["webpack://home-assistant-frontend/./src/components/ha-chip.ts","webpack://home-assistant-frontend/./src/panels/lovelace/components/hui-buttons-base.ts"],"sourcesContent":["// @ts-ignore\nimport chipStyles from \"@material/chips/dist/mdc.chips.min.css\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  TemplateResult,\n  unsafeCSS,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-chip\")\nexport class HaChip extends LitElement {\n  @property({ type: Boolean }) public hasIcon = false;\n\n  @property({ type: Boolean }) public hasTrailingIcon = false;\n\n  @property({ type: Boolean }) public noText = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"mdc-chip ${this.noText ? \"no-text\" : \"\"}\">\n        ${this.hasIcon\n          ? html`<div class=\"mdc-chip__icon mdc-chip__icon--leading\">\n              <slot name=\"icon\"></slot>\n            </div>`\n          : null}\n        <div class=\"mdc-chip__ripple\"></div>\n        <span role=\"gridcell\">\n          <span role=\"button\" tabindex=\"0\" class=\"mdc-chip__primary-action\">\n            <span class=\"mdc-chip__text\"><slot></slot></span>\n          </span>\n        </span>\n        ${this.hasTrailingIcon\n          ? html`<div class=\"mdc-chip__icon mdc-chip__icon--trailing\">\n              <slot name=\"trailing-icon\"></slot>\n            </div>`\n          : null}\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ${unsafeCSS(chipStyles)}\n      .mdc-chip {\n        background-color: var(\n          --ha-chip-background-color,\n          rgba(var(--rgb-primary-text-color), 0.15)\n        );\n        color: var(--ha-chip-text-color, var(--primary-text-color));\n      }\n\n      .mdc-chip.no-text {\n        padding: 0 10px;\n      }\n\n      .mdc-chip:hover {\n        color: var(--ha-chip-text-color, var(--primary-text-color));\n      }\n\n      .mdc-chip__icon--leading,\n      .mdc-chip__icon--trailing {\n        --mdc-icon-size: 18px;\n        line-height: 14px;\n        color: var(--ha-chip-icon-color, var(--ha-chip-text-color));\n      }\n      .mdc-chip.mdc-chip--selected .mdc-chip__checkmark,\n      .mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden) {\n        margin-right: -4px;\n        margin-inline-start: -4px;\n        margin-inline-end: 4px;\n        direction: var(--direction);\n      }\n\n      span[role=\"gridcell\"] {\n        line-height: 14px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-chip\": HaChip;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, state, property } from \"lit/decorators\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport \"../../../components/entity/state-badge\";\nimport type { ActionHandlerEvent } from \"../../../data/lovelace\";\nimport type { HomeAssistant } from \"../../../types\";\nimport type { EntitiesCardEntityConfig } from \"../cards/types\";\nimport { computeTooltip } from \"../common/compute-tooltip\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { handleAction } from \"../common/handle-action\";\nimport { hasAction } from \"../common/has-action\";\nimport \"../../../components/ha-chip\";\nimport { haStyleScrollbar } from \"../../../resources/styles\";\n\n@customElement(\"hui-buttons-base\")\nexport class HuiButtonsBase extends LitElement {\n  @state() public hass!: HomeAssistant;\n\n  @property() public configEntities?: EntitiesCardEntityConfig[];\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"ha-scrollbar\">\n        ${(this.configEntities || []).map((entityConf) => {\n          const stateObj = this.hass.states[entityConf.entity];\n\n          const name =\n            (entityConf.show_name && stateObj) ||\n            (entityConf.name && entityConf.show_name !== false)\n              ? entityConf.name || computeStateName(stateObj)\n              : \"\";\n\n          return html`\n            <ha-chip\n              @action=${this._handleAction}\n              .actionHandler=${actionHandler({\n                hasHold: hasAction(entityConf.hold_action),\n                hasDoubleClick: hasAction(entityConf.double_tap_action),\n              })}\n              .config=${entityConf}\n              tabindex=\"0\"\n              .hasIcon=${entityConf.show_icon !== false}\n              .noText=${!name}\n            >\n              ${entityConf.show_icon !== false\n                ? html`\n                    <state-badge\n                      title=${computeTooltip(this.hass, entityConf)}\n                      .hass=${this.hass}\n                      .stateObj=${stateObj}\n                      .overrideIcon=${entityConf.icon}\n                      .overrideImage=${entityConf.image}\n                      class=${name ? \"\" : \"no-text\"}\n                      stateColor\n                      slot=\"icon\"\n                    ></state-badge>\n                  `\n                : \"\"}\n              ${name}\n            </ha-chip>\n          `;\n        })}\n      </div>\n    `;\n  }\n\n  private _handleAction(ev: ActionHandlerEvent) {\n    const config = (ev.currentTarget as any).config as EntitiesCardEntityConfig;\n    handleAction(this, this.hass, config, ev.detail.action!);\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleScrollbar,\n      css`\n        .ha-scrollbar {\n          padding: 8px;\n          padding-top: var(--padding-top, 8px);\n          padding-bottom: var(--padding-bottom, 8px);\n          width: 100%;\n          overflow-x: auto;\n          overflow-y: hidden;\n          white-space: nowrap;\n          box-sizing: border-box;\n          display: flex;\n          flex-wrap: wrap;\n        }\n        state-badge {\n          display: inline-flex;\n          line-height: inherit;\n          color: var(--secondary-text-color);\n          align-items: center;\n          justify-content: center;\n          width: 24px;\n          height: 24px;\n          margin-left: -4px;\n          margin-top: -2px;\n        }\n        state-badge.no-text {\n          width: 26px;\n          height: 26px;\n          margin-left: -3px;\n          margin-top: -3px;\n        }\n        ha-chip {\n          padding: 4px;\n        }\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          .ha-scrollbar {\n            flex-wrap: nowrap;\n          }\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-buttons-base\": HuiButtonsBase;\n  }\n}\n"],"names":[],"sourceRoot":""}