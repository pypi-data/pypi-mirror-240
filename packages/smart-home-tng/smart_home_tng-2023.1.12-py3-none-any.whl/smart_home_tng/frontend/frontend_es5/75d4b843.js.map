{"version":3,"file":"75d4b843.js","mappings":";;AA4CA;;;AAMA;;AAEA;;;;;AAKA;;;;;AAKA;AAEA;;;AAGA;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6FA;ACvHA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAKA;;;;;;;;AA+CA;;;;AC9FA;;;;ACFA;ACQA;AACA;;AAGA;;;;;;;AAQA;;AAGA;;AAIA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;;;;;;;;;;;;;ACvCA;;;;;;;;ACxBA;;;;ACHA;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;;AC7BA;AACA;;AAEA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoFA;;;;;;;;;;AAWA;;;AClDA;;;AAKA;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;;;;;;;;;;AAUA;AACA;;AAEA;;AAQA;AAEA;;;;AAOA;;AAEA;;AAEA;;;;;AAOA;;AAGA;;AAQA;;AAEA;;AAGA;AAEA;AAGA;;AAGA;AAEA;AAKA;;;;;;;AASA;;AAEA;AAEA;;;;AAKA;;;AAKA;;;AAKA;;;AAKA;AAKA;AACA;AACA;;;AAIA;AAEA;AAGA;;AAGA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkOA","sources":["webpack://home-assistant-frontend/./src/components/ha-alert.ts","webpack://home-assistant-frontend/./src/components/ha-button-menu.ts","webpack://home-assistant-frontend/./src/components/ha-check-list-item.ts","webpack://home-assistant-frontend/./src/components/ha-checkbox.ts","webpack://home-assistant-frontend/./src/components/ha-chip.ts","webpack://home-assistant-frontend/./src/components/ha-formfield.ts","webpack://home-assistant-frontend/./src/components/ha-input-helper-text.ts","webpack://home-assistant-frontend/./src/components/ha-radio.ts","webpack://home-assistant-frontend/./src/components/ha-select.ts","webpack://home-assistant-frontend/./src/components/ha-textfield.ts","webpack://home-assistant-frontend/./src/panels/developer-tools/service/developer-tools-service.ts"],"sourcesContent":["import {\n  mdiAlertCircleOutline,\n  mdiAlertOutline,\n  mdiCheckboxMarkedCircleOutline,\n  mdiClose,\n  mdiInformationOutline,\n} from \"@mdi/js\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-icon-button\";\nimport \"./ha-svg-icon\";\n\nconst ALERT_ICONS = {\n  info: mdiInformationOutline,\n  warning: mdiAlertOutline,\n  error: mdiAlertCircleOutline,\n  success: mdiCheckboxMarkedCircleOutline,\n};\n\ndeclare global {\n  interface HASSDomEvents {\n    \"alert-dismissed-clicked\": undefined;\n  }\n}\n\n@customElement(\"ha-alert\")\nclass HaAlert extends LitElement {\n  @property() public title = \"\";\n\n  @property({ attribute: \"alert-type\" }) public alertType:\n    | \"info\"\n    | \"warning\"\n    | \"error\"\n    | \"success\" = \"info\";\n\n  @property({ type: Boolean }) public dismissable = false;\n\n  @property({ type: Boolean }) public rtl = false;\n\n  public render() {\n    return html`\n      <div\n        class=\"issue-type ${classMap({\n          rtl: this.rtl,\n          [this.alertType]: true,\n        })}\"\n        role=\"alert\"\n      >\n        <div class=\"icon ${this.title ? \"\" : \"no-title\"}\">\n          <slot name=\"icon\">\n            <ha-svg-icon .path=${ALERT_ICONS[this.alertType]}></ha-svg-icon>\n          </slot>\n        </div>\n        <div class=\"content\">\n          <div class=\"main-content\">\n            ${this.title ? html`<div class=\"title\">${this.title}</div>` : \"\"}\n            <slot></slot>\n          </div>\n          <div class=\"action\">\n            <slot name=\"action\">\n              ${this.dismissable\n                ? html`<ha-icon-button\n                    @click=${this._dismiss_clicked}\n                    label=\"Dismiss alert\"\n                    .path=${mdiClose}\n                  ></ha-icon-button>`\n                : \"\"}\n            </slot>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private _dismiss_clicked() {\n    fireEvent(this, \"alert-dismissed-clicked\");\n  }\n\n  static styles = css`\n    .issue-type {\n      position: relative;\n      padding: 8px;\n      display: flex;\n    }\n    .issue-type.rtl {\n      flex-direction: row-reverse;\n    }\n    .issue-type::after {\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      opacity: 0.12;\n      pointer-events: none;\n      content: \"\";\n      border-radius: 4px;\n    }\n    .icon {\n      z-index: 1;\n    }\n    .icon.no-title {\n      align-self: center;\n    }\n    .issue-type.rtl > .content {\n      flex-direction: row-reverse;\n      text-align: right;\n    }\n    .content {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n    }\n    .action {\n      z-index: 1;\n      width: min-content;\n      --mdc-theme-primary: var(--primary-text-color);\n    }\n    .main-content {\n      overflow-wrap: anywhere;\n      word-break: break-word;\n      margin-left: 8px;\n      margin-right: 0;\n    }\n    .issue-type.rtl > .content > .main-content {\n      margin-left: 0;\n      margin-right: 8px;\n    }\n    .title {\n      margin-top: 2px;\n      font-weight: bold;\n    }\n    .action mwc-button,\n    .action ha-icon-button {\n      --mdc-theme-primary: var(--primary-text-color);\n      --mdc-icon-button-size: 36px;\n    }\n    .issue-type.info > .icon {\n      color: var(--info-color);\n    }\n    .issue-type.info::after {\n      background-color: var(--info-color);\n    }\n\n    .issue-type.warning > .icon {\n      color: var(--warning-color);\n    }\n    .issue-type.warning::after {\n      background-color: var(--warning-color);\n    }\n\n    .issue-type.error > .icon {\n      color: var(--error-color);\n    }\n    .issue-type.error::after {\n      background-color: var(--error-color);\n    }\n\n    .issue-type.success > .icon {\n      color: var(--success-color);\n    }\n    .issue-type.success::after {\n      background-color: var(--success-color);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-alert\": HaAlert;\n  }\n}\n","import type { Button } from \"@material/mwc-button\";\nimport \"@material/mwc-menu\";\nimport type { Corner, Menu, MenuCorner } from \"@material/mwc-menu\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HaIconButton } from \"./ha-icon-button\";\n\n@customElement(\"ha-button-menu\")\nexport class HaButtonMenu extends LitElement {\n  protected readonly [FOCUS_TARGET];\n\n  @property() public corner: Corner = \"TOP_START\";\n\n  @property() public menuCorner: MenuCorner = \"START\";\n\n  @property({ type: Number }) public x: number | null = null;\n\n  @property({ type: Number }) public y: number | null = null;\n\n  @property({ type: Boolean }) public multi = false;\n\n  @property({ type: Boolean }) public activatable = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public fixed = false;\n\n  @query(\"mwc-menu\", true) private _menu?: Menu;\n\n  public get items() {\n    return this._menu?.items;\n  }\n\n  public get selected() {\n    return this._menu?.selected;\n  }\n\n  public override focus() {\n    if (this._menu?.open) {\n      this._menu.focusItemAtIndex(0);\n    } else {\n      this._triggerButton?.focus();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div @click=${this._handleClick}>\n        <slot name=\"trigger\" @slotchange=${this._setTriggerAria}></slot>\n      </div>\n      <mwc-menu\n        .corner=${this.corner}\n        .menuCorner=${this.menuCorner}\n        .fixed=${this.fixed}\n        .multi=${this.multi}\n        .activatable=${this.activatable}\n        .y=${this.y}\n        .x=${this.x}\n      >\n        <slot></slot>\n      </mwc-menu>\n    `;\n  }\n\n  protected firstUpdated(changedProps): void {\n    super.firstUpdated(changedProps);\n\n    if (document.dir === \"rtl\") {\n      this.updateComplete.then(() => {\n        this.querySelectorAll(\"mwc-list-item\").forEach((item) => {\n          const style = document.createElement(\"style\");\n          style.innerHTML =\n            \"span.material-icons:first-of-type { margin-left: var(--mdc-list-item-graphic-margin, 32px) !important; margin-right: 0px !important;}\";\n          item!.shadowRoot!.appendChild(style);\n        });\n      });\n    }\n  }\n\n  private _handleClick(): void {\n    if (this.disabled) {\n      return;\n    }\n    this._menu!.anchor = this;\n    this._menu!.show();\n  }\n\n  private get _triggerButton() {\n    return this.querySelector(\n      'ha-icon-button[slot=\"trigger\"], mwc-button[slot=\"trigger\"]'\n    ) as HaIconButton | Button | null;\n  }\n\n  private _setTriggerAria() {\n    if (this._triggerButton) {\n      this._triggerButton.ariaHasPopup = \"menu\";\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ::slotted([disabled]) {\n        color: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-menu\": HaButtonMenu;\n  }\n}\n","import { css } from \"lit\";\nimport { CheckListItemBase } from \"@material/mwc-list/mwc-check-list-item-base\";\nimport { styles as controlStyles } from \"@material/mwc-list/mwc-control-list-item.css\";\nimport { styles } from \"@material/mwc-list/mwc-list-item.css\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-check-list-item\")\nexport class HaCheckListItem extends CheckListItemBase {\n  static override styles = [\n    styles,\n    controlStyles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-check-list-item\": HaCheckListItem;\n  }\n}\n","import { CheckboxBase } from \"@material/mwc-checkbox/mwc-checkbox-base\";\nimport { styles } from \"@material/mwc-checkbox/mwc-checkbox.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-checkbox\")\nexport class HaCheckbox extends CheckboxBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-checkbox\": HaCheckbox;\n  }\n}\n","// @ts-ignore\nimport chipStyles from \"@material/chips/dist/mdc.chips.min.css\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  TemplateResult,\n  unsafeCSS,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-chip\")\nexport class HaChip extends LitElement {\n  @property({ type: Boolean }) public hasIcon = false;\n\n  @property({ type: Boolean }) public hasTrailingIcon = false;\n\n  @property({ type: Boolean }) public noText = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"mdc-chip ${this.noText ? \"no-text\" : \"\"}\">\n        ${this.hasIcon\n          ? html`<div class=\"mdc-chip__icon mdc-chip__icon--leading\">\n              <slot name=\"icon\"></slot>\n            </div>`\n          : null}\n        <div class=\"mdc-chip__ripple\"></div>\n        <span role=\"gridcell\">\n          <span role=\"button\" tabindex=\"0\" class=\"mdc-chip__primary-action\">\n            <span class=\"mdc-chip__text\"><slot></slot></span>\n          </span>\n        </span>\n        ${this.hasTrailingIcon\n          ? html`<div class=\"mdc-chip__icon mdc-chip__icon--trailing\">\n              <slot name=\"trailing-icon\"></slot>\n            </div>`\n          : null}\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ${unsafeCSS(chipStyles)}\n      .mdc-chip {\n        background-color: var(\n          --ha-chip-background-color,\n          rgba(var(--rgb-primary-text-color), 0.15)\n        );\n        color: var(--ha-chip-text-color, var(--primary-text-color));\n      }\n\n      .mdc-chip.no-text {\n        padding: 0 10px;\n      }\n\n      .mdc-chip:hover {\n        color: var(--ha-chip-text-color, var(--primary-text-color));\n      }\n\n      .mdc-chip__icon--leading,\n      .mdc-chip__icon--trailing {\n        --mdc-icon-size: 18px;\n        line-height: 14px;\n        color: var(--ha-chip-icon-color, var(--ha-chip-text-color));\n      }\n      .mdc-chip.mdc-chip--selected .mdc-chip__checkmark,\n      .mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden) {\n        margin-right: -4px;\n        margin-inline-start: -4px;\n        margin-inline-end: 4px;\n        direction: var(--direction);\n      }\n\n      span[role=\"gridcell\"] {\n        line-height: 14px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-chip\": HaChip;\n  }\n}\n","import { FormfieldBase } from \"@material/mwc-formfield/mwc-formfield-base\";\nimport { styles } from \"@material/mwc-formfield/mwc-formfield.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n@customElement(\"ha-formfield\")\nexport class HaFormfield extends FormfieldBase {\n  protected _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      switch (input.tagName) {\n        case \"HA-CHECKBOX\":\n        case \"HA-RADIO\":\n          (input as any).checked = !(input as any).checked;\n          fireEvent(input, \"change\");\n          break;\n        default:\n          input.click();\n          break;\n      }\n    }\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host(:not([alignEnd])) ::slotted(ha-switch) {\n        margin-right: 10px;\n        margin-inline-end: 10px;\n        margin-inline-start: inline;\n      }\n      .mdc-form-field > label {\n        direction: var(--direction);\n        margin-inline-start: 0;\n        margin-inline-end: auto;\n        padding-inline-start: 4px;\n        padding-inline-end: 0;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-formfield\": HaFormfield;\n  }\n}\n","import { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-input-helper-text\")\nclass InputHelperText extends LitElement {\n  protected render(): TemplateResult {\n    return html`<slot></slot>`;\n  }\n\n  static styles = css`\n    :host {\n      display: block;\n      color: var(--mdc-text-field-label-ink-color, rgba(0, 0, 0, 0.6));\n      font-size: 0.75rem;\n      padding-left: 16px;\n      padding-right: 16px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input-helper-text\": InputHelperText;\n  }\n}\n","import { RadioBase } from \"@material/mwc-radio/mwc-radio-base\";\nimport { styles } from \"@material/mwc-radio/mwc-radio.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-radio\")\nexport class HaRadio extends RadioBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-radio\": HaRadio;\n  }\n}\n","import { SelectBase } from \"@material/mwc-select/mwc-select-base\";\nimport { styles } from \"@material/mwc-select/mwc-select.css\";\nimport { css, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { debounce } from \"../common/util/debounce\";\nimport { nextRender } from \"../common/util/render-status\";\n\n@customElement(\"ha-select\")\nexport class HaSelect extends SelectBase {\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  protected override renderLeadingIcon() {\n    if (!this.icon) {\n      return nothing;\n    }\n\n    return html`<span class=\"mdc-select__icon\"\n      ><slot name=\"icon\"></slot\n    ></span>`;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"translations-updated\", this._translationsUpdated);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\n      \"translations-updated\",\n      this._translationsUpdated\n    );\n  }\n\n  private _translationsUpdated = debounce(async () => {\n    await nextRender();\n    this.layoutOptions();\n  }, 500);\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-select:not(.mdc-select--disabled) .mdc-select__icon {\n        color: var(--secondary-text-color);\n      }\n      .mdc-select__anchor {\n        width: var(--ha-select-min-width, 200px);\n      }\n      .mdc-select--filled .mdc-floating-label {\n        inset-inline-start: 12px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select--filled.mdc-select--with-leading-icon .mdc-floating-label {\n        inset-inline-start: 48px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select .mdc-select__anchor {\n        padding-inline-start: 12px;\n        padding-inline-end: 0px;\n        direction: var(--direction);\n      }\n      .mdc-select__anchor .mdc-floating-label--float-above {\n        transform-origin: var(--float-start);\n      }\n    `,\n  ];\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-select\": HaSelect;\n  }\n}\n","import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { TemplateResult, html, PropertyValues, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public iconTrailing?: boolean;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      (changedProperties.has(\"invalid\") &&\n        (this.invalid || changedProperties.get(\"invalid\") !== undefined)) ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid ? this.errorMessage || \"Invalid\" : \"\"\n      );\n      this.reportValidity();\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n        padding-inline-start: var(--text-field-suffix-padding-left, 12px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 0px);\n        direction: var(--direction);\n      }\n      .mdc-text-field--with-leading-icon {\n        padding-inline-start: var(--text-field-suffix-padding-left, 0px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 16px);\n        direction: var(--direction);\n      }\n\n      .mdc-text-field:not(.mdc-text-field--disabled)\n        .mdc-text-field__affix--suffix {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon--leading {\n        margin-inline-start: 16px;\n        margin-inline-end: 8px;\n        direction: var(--direction);\n      }\n\n      input {\n        text-align: var(--text-field-text-align, start);\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n\n      .mdc-floating-label {\n        inset-inline-start: 16px !important;\n        inset-inline-end: initial !important;\n        transform-origin: var(--float-start);\n        direction: var(--direction);\n        transform-origin: var(--float-start);\n      }\n\n      .mdc-text-field--with-leading-icon.mdc-text-field--filled\n        .mdc-floating-label {\n        max-width: calc(100% - 48px);\n        inset-inline-start: 48px !important;\n        inset-inline-end: initial !important;\n        direction: var(--direction);\n      }\n\n      .mdc-text-field__input[type=\"number\"] {\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          .mdc-text-field__affix--suffix,\n          .mdc-text-field--with-leading-icon,\n          .mdc-text-field__icon--leading,\n          .mdc-floating-label,\n          .mdc-text-field--with-leading-icon.mdc-text-field--filled\n            .mdc-floating-label,\n          .mdc-text-field__input[type=\"number\"] {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n","import { mdiHelpCircle } from \"@mdi/js\";\nimport { ERR_CONNECTION_LOST } from \"home-assistant-js-websocket\";\nimport { load } from \"js-yaml\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { property, query, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { LocalStorage } from \"../../../common/decorators/local-storage\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeObjectId } from \"../../../common/entity/compute_object_id\";\nimport { hasTemplate } from \"../../../common/string/has-template\";\nimport { extractSearchParam } from \"../../../common/url/search-params\";\nimport { HaProgressButton } from \"../../../components/buttons/ha-progress-button\";\n\nimport \"../../../components/entity/ha-entity-picker\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-expansion-panel\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-service-control\";\nimport \"../../../components/ha-service-picker\";\nimport \"../../../components/ha-yaml-editor\";\nimport type { HaYamlEditor } from \"../../../components/ha-yaml-editor\";\nimport { forwardHaptic } from \"../../../data/haptics\";\nimport { ServiceAction } from \"../../../data/script\";\nimport {\n  callExecuteScript,\n  serviceCallWillDisconnect,\n} from \"../../../data/service\";\nimport { haStyle } from \"../../../resources/styles\";\nimport \"../../../styles/polymer-ha-style\";\nimport { HomeAssistant } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport { showToast } from \"../../../util/toast\";\n\nclass HaPanelDevService extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @state() private _uiAvailable = true;\n\n  @LocalStorage(\"panel-dev-service-state-service-data\", true, false)\n  private _serviceData?: ServiceAction = { service: \"\", target: {}, data: {} };\n\n  @LocalStorage(\"panel-dev-service-state-yaml-mode\", true, false)\n  private _yamlMode = false;\n\n  @query(\"ha-yaml-editor\") private _yamlEditor?: HaYamlEditor;\n\n  protected firstUpdated(params) {\n    super.firstUpdated(params);\n    const serviceParam = extractSearchParam(\"service\");\n    if (serviceParam) {\n      this._serviceData = {\n        service: serviceParam,\n        target: {},\n        data: {},\n      };\n      if (this._yamlMode) {\n        this.updateComplete.then(() =>\n          this._yamlEditor?.setValue(this._serviceData)\n        );\n      }\n    } else if (!this._serviceData?.service) {\n      const domain = Object.keys(this.hass.services).sort()[0];\n      const service = Object.keys(this.hass.services[domain]).sort()[0];\n      this._serviceData = {\n        service: `${domain}.${service}`,\n        target: {},\n        data: {},\n      };\n      if (this._yamlMode) {\n        this.updateComplete.then(() =>\n          this._yamlEditor?.setValue(this._serviceData)\n        );\n      }\n    }\n    this._checkUiSupported();\n  }\n\n  protected render() {\n    const { target, fields } = this._fields(\n      this.hass.services,\n      this._serviceData?.service\n    );\n\n    const isValid = this._isValid(this._serviceData, fields, target);\n\n    return html`\n      <div class=\"content\">\n        <p>\n          ${this.hass.localize(\n            \"ui.panel.developer-tools.tabs.services.description\"\n          )}\n        </p>\n        <ha-card>\n          ${this._yamlMode\n            ? html`<div class=\"card-content\">\n                <ha-service-picker\n                  .hass=${this.hass}\n                  .value=${this._serviceData?.service}\n                  @value-changed=${this._serviceChanged}\n                ></ha-service-picker>\n                <ha-yaml-editor\n                  .hass=${this.hass}\n                  .defaultValue=${this._serviceData}\n                  @value-changed=${this._yamlChanged}\n                ></ha-yaml-editor>\n              </div>`\n            : html`\n                <ha-service-control\n                  .hass=${this.hass}\n                  .value=${this._serviceData}\n                  .narrow=${this.narrow}\n                  showAdvanced\n                  @value-changed=${this._serviceDataChanged}\n                  class=\"card-content\"\n                ></ha-service-control>\n              `}\n        </ha-card>\n      </div>\n      <div class=\"button-row\">\n        <div class=\"buttons\">\n          <div class=\"switch-mode-container\">\n            <mwc-button\n              @click=${this._toggleYaml}\n              .disabled=${!this._uiAvailable}\n            >\n              ${this._yamlMode\n                ? this.hass.localize(\n                    \"ui.panel.developer-tools.tabs.services.ui_mode\"\n                  )\n                : this.hass.localize(\n                    \"ui.panel.developer-tools.tabs.services.yaml_mode\"\n                  )}\n            </mwc-button>\n            ${!this._uiAvailable\n              ? html`<span class=\"error\"\n                  >${this.hass.localize(\n                    \"ui.panel.developer-tools.tabs.services.no_template_ui_support\"\n                  )}</span\n                >`\n              : \"\"}\n          </div>\n          <ha-progress-button\n            .disabled=${!isValid}\n            raised\n            @click=${this._callService}\n          >\n            ${this.hass.localize(\n              \"ui.panel.developer-tools.tabs.services.call_service\"\n            )}\n          </ha-progress-button>\n        </div>\n      </div>\n\n      ${(this._yamlMode ? fields : this._filterSelectorFields(fields)).length\n        ? html`<div class=\"content\">\n            <ha-expansion-panel\n              .header=${this._yamlMode\n                ? this.hass.localize(\n                    \"ui.panel.developer-tools.tabs.services.all_parameters\"\n                  )\n                : this.hass.localize(\n                    \"ui.panel.developer-tools.tabs.services.yaml_parameters\"\n                  )}\n              outlined\n              .expanded=${this._yamlMode}\n            >\n              ${this._yamlMode\n                ? html` <div class=\"description\">\n                    <h3>\n                      ${target\n                        ? html`\n                            ${this.hass.localize(\n                              \"ui.panel.developer-tools.tabs.services.accepts_target\"\n                            )}\n                          `\n                        : \"\"}\n                    </h3>\n                    ${this._serviceData?.service\n                      ? html` <a\n                          href=${documentationUrl(\n                            this.hass,\n                            \"/integrations/\" +\n                              computeDomain(this._serviceData?.service)\n                          )}\n                          title=${this.hass.localize(\n                            \"ui.components.service-control.integration_doc\"\n                          )}\n                          target=\"_blank\"\n                          rel=\"noreferrer\"\n                        >\n                          <ha-icon-button\n                            class=\"help-icon\"\n                            .path=${mdiHelpCircle}\n                            .label=${this.hass!.localize(\"ui.common.help\")}\n                          ></ha-icon-button>\n                        </a>`\n                      : \"\"}\n                  </div>`\n                : \"\"}\n              <table class=\"attributes\">\n                <tr>\n                  <th>\n                    ${this.hass.localize(\n                      \"ui.panel.developer-tools.tabs.services.column_parameter\"\n                    )}\n                  </th>\n                  <th>\n                    ${this.hass.localize(\n                      \"ui.panel.developer-tools.tabs.services.column_description\"\n                    )}\n                  </th>\n                  <th>\n                    ${this.hass.localize(\n                      \"ui.panel.developer-tools.tabs.services.column_example\"\n                    )}\n                  </th>\n                </tr>\n                ${(this._yamlMode\n                  ? fields\n                  : this._filterSelectorFields(fields)\n                ).map(\n                  (field) => html` <tr>\n                    <td><pre>${field.key}</pre></td>\n                    <td>${field.description}</td>\n                    <td>${field.example}</td>\n                  </tr>`\n                )}\n              </table>\n              ${this._yamlMode\n                ? html`<mwc-button @click=${this._fillExampleData}\n                    >${this.hass.localize(\n                      \"ui.panel.developer-tools.tabs.services.fill_example_data\"\n                    )}</mwc-button\n                  >`\n                : \"\"}\n            </ha-expansion-panel>\n          </div>`\n        : \"\"}\n    `;\n  }\n\n  private _filterSelectorFields = memoizeOne((fields) =>\n    fields.filter((field) => !field.selector)\n  );\n\n  private _isValid = memoizeOne((serviceData, fields, target): boolean => {\n    if (!serviceData?.service) {\n      return false;\n    }\n    const domain = computeDomain(serviceData.service);\n    const service = computeObjectId(serviceData.service);\n    if (!domain || !service) {\n      return false;\n    }\n    if (\n      target &&\n      !serviceData.target &&\n      !serviceData.data?.entity_id &&\n      !serviceData.data?.device_id &&\n      !serviceData.data?.area_id\n    ) {\n      return false;\n    }\n    for (const field of fields) {\n      if (\n        field.required &&\n        (!serviceData.data || serviceData.data[field.key] === undefined)\n      ) {\n        return false;\n      }\n    }\n    return true;\n  });\n\n  private _fields = memoizeOne(\n    (\n      serviceDomains: HomeAssistant[\"services\"],\n      domainService: string | undefined\n    ): { target: boolean; fields: any[] } => {\n      if (!domainService) {\n        return { target: false, fields: [] };\n      }\n      const domain = computeDomain(domainService);\n      const service = computeObjectId(domainService);\n      if (!(domain in serviceDomains)) {\n        return { target: false, fields: [] };\n      }\n      if (!(service in serviceDomains[domain])) {\n        return { target: false, fields: [] };\n      }\n      const target = \"target\" in serviceDomains[domain][service];\n      const fields = serviceDomains[domain][service].fields;\n      const result = Object.keys(fields).map((field) => ({\n        key: field,\n        ...fields[field],\n      }));\n\n      return {\n        target,\n        fields: result,\n      };\n    }\n  );\n\n  private async _callService(ev) {\n    const button = ev.currentTarget as HaProgressButton;\n    if (!this._serviceData?.service) {\n      return;\n    }\n    try {\n      await callExecuteScript(this.hass, [this._serviceData]);\n    } catch (err: any) {\n      const [domain, service] = this._serviceData.service.split(\".\", 2);\n      if (\n        err.error?.code === ERR_CONNECTION_LOST &&\n        serviceCallWillDisconnect(domain, service)\n      ) {\n        return;\n      }\n      forwardHaptic(\"failure\");\n      button.actionError();\n      showToast(this, {\n        message:\n          this.hass.localize(\n            \"ui.notification_toast.service_call_failed\",\n            \"service\",\n            this._serviceData.service\n          ) + ` ${err.message}`,\n      });\n      return;\n    }\n    button.actionSuccess();\n  }\n\n  private _toggleYaml() {\n    this._yamlMode = !this._yamlMode;\n  }\n\n  private _yamlChanged(ev) {\n    if (!ev.detail.isValid) {\n      return;\n    }\n    this._serviceDataChanged(ev);\n  }\n\n  private _checkUiSupported() {\n    if (this._serviceData && hasTemplate(this._serviceData)) {\n      this._yamlMode = true;\n      this._uiAvailable = false;\n    } else {\n      this._uiAvailable = true;\n    }\n  }\n\n  private _serviceDataChanged(ev) {\n    this._serviceData = ev.detail.value;\n    this._checkUiSupported();\n  }\n\n  private _serviceChanged(ev) {\n    ev.stopPropagation();\n    this._serviceData = { service: ev.detail.value || \"\", data: {} };\n    this._yamlEditor?.setValue(this._serviceData);\n  }\n\n  private _fillExampleData() {\n    const { fields } = this._fields(\n      this.hass.services,\n      this._serviceData?.service\n    );\n    const example = {};\n    fields.forEach((field) => {\n      if (field.example) {\n        let value: any = \"\";\n        try {\n          value = load(field.example);\n        } catch (err: any) {\n          value = field.example;\n        }\n        example[field.key] = value;\n      }\n    });\n    this._serviceData = { ...this._serviceData!, data: example };\n    this._yamlEditor?.setValue(this._serviceData);\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .content {\n          padding: 16px;\n          max-width: 1200px;\n          margin: auto;\n        }\n        .button-row {\n          padding: 8px 16px;\n          border-top: 1px solid var(--divider-color);\n          border-bottom: 1px solid var(--divider-color);\n          background: var(--card-background-color);\n          position: sticky;\n          bottom: 0;\n          box-sizing: border-box;\n          width: 100%;\n        }\n        .button-row .buttons {\n          display: flex;\n          justify-content: space-between;\n          max-width: 1200px;\n          margin: auto;\n        }\n        .switch-mode-container {\n          display: flex;\n          align-items: center;\n        }\n        .switch-mode-container .error {\n          margin-left: 8px;\n        }\n        .attributes {\n          width: 100%;\n        }\n\n        .attributes th {\n          text-align: left;\n          background-color: var(--card-background-color);\n          border-bottom: 1px solid var(--primary-text-color);\n        }\n\n        :host([rtl]) .attributes th {\n          text-align: right;\n        }\n\n        .attributes tr {\n          vertical-align: top;\n          direction: ltr;\n        }\n\n        .attributes tr:nth-child(odd) {\n          background-color: var(--table-row-background-color, #eee);\n        }\n\n        .attributes tr:nth-child(even) {\n          background-color: var(--table-row-alternative-background-color, #eee);\n        }\n\n        .attributes td:nth-child(3) {\n          white-space: pre-wrap;\n          word-break: break-word;\n        }\n\n        .attributes td {\n          padding: 4px;\n          vertical-align: middle;\n        }\n\n        .help-icon {\n          color: var(--secondary-text-color);\n        }\n        .description {\n          justify-content: space-between;\n          display: flex;\n          align-items: center;\n        }\n      `,\n    ];\n  }\n}\n\ncustomElements.define(\"developer-tools-service\", HaPanelDevService);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"developer-tools-service\": HaPanelDevService;\n  }\n}\n"],"names":[],"sourceRoot":""}