{"version":3,"file":"9cf3c181.js","mappings":";;;;AAgBA;AACA;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;;;AChBA;AACA;;;;;AAKA;;;;AAIA;AACA;;;AAKA;;AAIA;AACA;;;;;AAMA;;AAIA;AAGA;AACA;AAEA;AACA;;;AAIA;;;AAOA;;;;AAQA;AAGA;AAzHA;;;AA6HA;AAGA;AAhIA;;;AAoIA;;AAGA;AACA;AACA;;;;;AAQA;;;;;;;;AAwEA;;;AC3KA;AACA;;;;;AAOA;;;;AAMA;AAIA;;;AAKA;;AAIA;AACA;;;;AAKA;;AAIA;;AAIA;;AAEA;;;AAOA;AACA;AACA;AAlGA;;;AAsGA;;AAGA;AACA;AACA;;;;;AAQA;;;ACtDA;AACA;;;;;AAKA;;;;AAIA;AACA;;;AAGA;;AAIA;AACA;;;;AAKA;;AAEA;AAGA;AACA;AAEA;AACA;;AAGA;;;AAOA;AAGA;AA3GA;;;AA+GA;AAGA;AAlHA;;;AAsHA;;AAGA;AACA;AACA;;;;;AAQA;;;ACnIA;AAwFA;;;;;AAKA;;;;AAIA;AAIA;;;AAKA;;AAGA;AACA;;AAEA;;;AAIA;;AAIA;AAGA;AACA;AAEA;AACA;AAEA;;;AAGA;;;AAOA;AAGA;AACA;;;AAGA;AAGA;AACA;;;AAGA;;AAGA;AACA;AACA;;;;;AAOA;;AAEA;AAGA;AACA;AAEA;AACA;AAEA;;;AAGA;;;AAOA;AAGA;AACA;;;AAGA;AAGA;AACA;;;AAGA;;AAGA;AACA;AACA;;;;;AAQA;;;ACrJA;AACA;;;;;AAKA;;;;AAIA;AACA;;;AAKA;;AAIA;AACA;;;;;AAMA;;AAIA;AAGA;AACA;AAEA;AACA;;AAGA;;AAMA;;AAGA;AAGA;AArHA;;AAwHA;;AAGA;AAGA;AA9HA;;;AAkIA;AAEA;;AAGA;AACA;AACA;;;AAKA;;;AAKA;;;ACzHA;;AAMA;AAIA;;;;AAMA;AAGA;;AAIA;AAGA;;;;;AAUA;;;;;;;;AAUA","sources":["webpack://home-assistant-frontend/./src/components/ha-settings-row.ts","webpack://home-assistant-frontend/./src/panels/config/energy/components/ha-energy-battery-settings.ts","webpack://home-assistant-frontend/./src/panels/config/energy/components/ha-energy-device-settings.ts","webpack://home-assistant-frontend/./src/panels/config/energy/components/ha-energy-gas-settings.ts","webpack://home-assistant-frontend/./src/panels/config/energy/components/ha-energy-grid-settings.ts","webpack://home-assistant-frontend/./src/panels/config/energy/components/ha-energy-solar-settings.ts","webpack://home-assistant-frontend/./src/panels/config/energy/components/ha-energy-validation-result.ts"],"sourcesContent":["import \"@polymer/paper-item/paper-item-body\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-settings-row\")\nexport class HaSettingsRow extends LitElement {\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @property({ type: Boolean, attribute: \"three-line\" })\n  public threeLine = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"prefix-wrap\">\n        <slot name=\"prefix\"></slot>\n        <paper-item-body\n          ?two-line=${!this.threeLine}\n          ?three-line=${this.threeLine}\n        >\n          <slot name=\"heading\"></slot>\n          <div secondary><slot name=\"description\"></slot></div>\n        </paper-item-body>\n      </div>\n      <div class=\"content\"><slot></slot></div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n        padding: 0 16px;\n        align-content: normal;\n        align-self: auto;\n        align-items: center;\n      }\n      paper-item-body {\n        padding: 8px 16px 8px 0;\n      }\n      paper-item-body[two-line] {\n        min-height: calc(\n          var(--paper-item-body-two-line-min-height, 72px) - 16px\n        );\n        flex: 1;\n      }\n      .content {\n        display: contents;\n      }\n      :host(:not([narrow])) .content {\n        display: var(--settings-row-content-display, flex);\n        justify-content: flex-end;\n        flex: 1;\n        padding: 16px 0;\n      }\n      .content ::slotted(*) {\n        width: var(--settings-row-content-width);\n      }\n      :host([narrow]) {\n        align-items: normal;\n        flex-direction: column;\n        border-top: 1px solid var(--divider-color);\n        padding-bottom: 8px;\n      }\n      ::slotted(ha-switch) {\n        padding: 16px 0;\n      }\n      div[secondary] {\n        white-space: normal;\n      }\n      .prefix-wrap {\n        display: var(--settings-row-prefix-display);\n      }\n      :host([narrow]) .prefix-wrap {\n        display: flex;\n        align-items: center;\n      }\n    `;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-settings-row\": HaSettingsRow;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { mdiBatteryHigh, mdiDelete, mdiPencil } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-icon-button\";\nimport \"../../../../components/ha-settings-row\";\nimport {\n  BatterySourceTypeEnergyPreference,\n  EnergyPreferences,\n  EnergyPreferencesValidation,\n  EnergyValidationIssue,\n  saveEnergyPreferences,\n} from \"../../../../data/energy\";\nimport {\n  StatisticsMetaData,\n  getStatisticLabel,\n} from \"../../../../data/recorder\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { documentationUrl } from \"../../../../util/documentation-url\";\nimport { showEnergySettingsBatteryDialog } from \"../dialogs/show-dialogs-energy\";\nimport \"./ha-energy-validation-result\";\nimport { energyCardStyles } from \"./styles\";\n\n@customElement(\"ha-energy-battery-settings\")\nexport class EnergyBatterySettings extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false })\n  public preferences!: EnergyPreferences;\n\n  @property({ attribute: false })\n  public statsMetadata?: Record<string, StatisticsMetaData>;\n\n  @property({ attribute: false })\n  public validationResult?: EnergyPreferencesValidation;\n\n  protected render(): TemplateResult {\n    const batterySources: BatterySourceTypeEnergyPreference[] = [];\n    const batteryValidation: EnergyValidationIssue[][] = [];\n\n    this.preferences.energy_sources.forEach((source, idx) => {\n      if (source.type !== \"battery\") {\n        return;\n      }\n      batterySources.push(source);\n\n      if (this.validationResult) {\n        batteryValidation.push(this.validationResult.energy_sources[idx]);\n      }\n    });\n\n    return html`\n      <ha-card outlined>\n        <h1 class=\"card-header\">\n          <ha-svg-icon .path=${mdiBatteryHigh}></ha-svg-icon>\n          ${this.hass.localize(\"ui.panel.config.energy.battery.title\")}\n        </h1>\n\n        <div class=\"card-content\">\n          <p>\n            ${this.hass.localize(\"ui.panel.config.energy.battery.sub\")}\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=${documentationUrl(this.hass, \"/docs/energy/battery/\")}\n              >${this.hass.localize(\n                \"ui.panel.config.energy.battery.learn_more\"\n              )}</a\n            >\n          </p>\n          ${batteryValidation.map(\n            (result) =>\n              html`\n                <ha-energy-validation-result\n                  .hass=${this.hass}\n                  .issues=${result}\n                ></ha-energy-validation-result>\n              `\n          )}\n\n          <h3>\n            ${this.hass.localize(\n              \"ui.panel.config.energy.battery.battery_systems\"\n            )}\n          </h3>\n          ${batterySources.map((source) => {\n            const toEntityState = this.hass.states[source.stat_energy_to];\n            return html`\n              <div class=\"row\" .source=${source}>\n                ${toEntityState?.attributes.icon\n                  ? html`<ha-icon\n                      .icon=${toEntityState.attributes.icon}\n                    ></ha-icon>`\n                  : html`<ha-svg-icon .path=${mdiBatteryHigh}></ha-svg-icon>`}\n                <div class=\"content\">\n                  <span\n                    >${getStatisticLabel(\n                      this.hass,\n                      source.stat_energy_from,\n                      this.statsMetadata?.[source.stat_energy_from]\n                    )}</span\n                  >\n                  <span\n                    >${getStatisticLabel(\n                      this.hass,\n                      source.stat_energy_to,\n                      this.statsMetadata?.[source.stat_energy_to]\n                    )}</span\n                  >\n                </div>\n                <ha-icon-button\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.energy.battery.edit_battery_system\"\n                  )}\n                  @click=${this._editSource}\n                  .path=${mdiPencil}\n                ></ha-icon-button>\n                <ha-icon-button\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.energy.battery.delete_battery_system\"\n                  )}\n                  @click=${this._deleteSource}\n                  .path=${mdiDelete}\n                ></ha-icon-button>\n              </div>\n            `;\n          })}\n          <div class=\"row border-bottom\">\n            <ha-svg-icon .path=${mdiBatteryHigh}></ha-svg-icon>\n            <mwc-button @click=${this._addSource}\n              >${this.hass.localize(\n                \"ui.panel.config.energy.battery.add_battery_system\"\n              )}</mwc-button\n            >\n          </div>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private _addSource() {\n    showEnergySettingsBatteryDialog(this, {\n      saveCallback: async (source) => {\n        await this._savePreferences({\n          ...this.preferences,\n          energy_sources: this.preferences.energy_sources.concat(source),\n        });\n      },\n    });\n  }\n\n  private _editSource(ev) {\n    const origSource: BatterySourceTypeEnergyPreference =\n      ev.currentTarget.closest(\".row\").source;\n    showEnergySettingsBatteryDialog(this, {\n      source: { ...origSource },\n      saveCallback: async (newSource) => {\n        await this._savePreferences({\n          ...this.preferences,\n          energy_sources: this.preferences.energy_sources.map((src) =>\n            src === origSource ? newSource : src\n          ),\n        });\n      },\n    });\n  }\n\n  private async _deleteSource(ev) {\n    const sourceToDelete: BatterySourceTypeEnergyPreference =\n      ev.currentTarget.closest(\".row\").source;\n\n    if (\n      !(await showConfirmationDialog(this, {\n        title: this.hass.localize(\"ui.panel.config.energy.delete_source\"),\n      }))\n    ) {\n      return;\n    }\n\n    try {\n      await this._savePreferences({\n        ...this.preferences,\n        energy_sources: this.preferences.energy_sources.filter(\n          (source) => source !== sourceToDelete\n        ),\n      });\n    } catch (err: any) {\n      showAlertDialog(this, { title: `Failed to save config: ${err.message}` });\n    }\n  }\n\n  private async _savePreferences(preferences: EnergyPreferences) {\n    const result = await saveEnergyPreferences(this.hass, preferences);\n    fireEvent(this, \"value-changed\", { value: result });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      energyCardStyles,\n      css`\n        .row {\n          height: 58px;\n        }\n        .content {\n          display: flex;\n          flex-direction: column;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-energy-battery-settings\": EnergyBatterySettings;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { mdiDelete, mdiDevices } from \"@mdi/js\";\nimport { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-icon-button\";\nimport \"../../../../components/ha-state-icon\";\nimport {\n  DeviceConsumptionEnergyPreference,\n  EnergyPreferences,\n  EnergyPreferencesValidation,\n  saveEnergyPreferences,\n} from \"../../../../data/energy\";\nimport {\n  StatisticsMetaData,\n  getStatisticLabel,\n} from \"../../../../data/recorder\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { documentationUrl } from \"../../../../util/documentation-url\";\nimport { showEnergySettingsDeviceDialog } from \"../dialogs/show-dialogs-energy\";\nimport \"./ha-energy-validation-result\";\nimport { energyCardStyles } from \"./styles\";\n\n@customElement(\"ha-energy-device-settings\")\nexport class EnergyDeviceSettings extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false })\n  public preferences!: EnergyPreferences;\n\n  @property({ attribute: false })\n  public statsMetadata?: Record<string, StatisticsMetaData>;\n\n  @property({ attribute: false })\n  public validationResult?: EnergyPreferencesValidation;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-card outlined>\n        <h1 class=\"card-header\">\n          <ha-svg-icon .path=${mdiDevices}></ha-svg-icon>\n          ${this.hass.localize(\n            \"ui.panel.config.energy.device_consumption.title\"\n          )}\n        </h1>\n\n        <div class=\"card-content\">\n          <p>\n            ${this.hass.localize(\n              \"ui.panel.config.energy.device_consumption.sub\"\n            )}\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=${documentationUrl(\n                this.hass,\n                \"/docs/energy/individual-devices/\"\n              )}\n              >${this.hass.localize(\n                \"ui.panel.config.energy.device_consumption.learn_more\"\n              )}</a\n            >\n          </p>\n          ${this.validationResult?.device_consumption.map(\n            (result) =>\n              html`\n                <ha-energy-validation-result\n                  .hass=${this.hass}\n                  .issues=${result}\n                ></ha-energy-validation-result>\n              `\n          )}\n          <h3>\n            ${this.hass.localize(\n              \"ui.panel.config.energy.device_consumption.devices\"\n            )}\n          </h3>\n          ${this.preferences.device_consumption.map((device) => {\n            const entityState = this.hass.states[device.stat_consumption];\n            return html`\n              <div class=\"row\">\n                <ha-state-icon .state=${entityState}></ha-state-icon>\n                <span class=\"content\"\n                  >${getStatisticLabel(\n                    this.hass,\n                    device.stat_consumption,\n                    this.statsMetadata?.[device.stat_consumption]\n                  )}</span\n                >\n                <ha-icon-button\n                  .label=${this.hass.localize(\"ui.common.delete\")}\n                  @click=${this._deleteDevice}\n                  .device=${device}\n                  .path=${mdiDelete}\n                ></ha-icon-button>\n              </div>\n            `;\n          })}\n          <div class=\"row\">\n            <ha-svg-icon .path=${mdiDevices}></ha-svg-icon>\n            <mwc-button @click=${this._addDevice}\n              >${this.hass.localize(\n                \"ui.panel.config.energy.device_consumption.add_device\"\n              )}</mwc-button\n            >\n          </div>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private _addDevice() {\n    showEnergySettingsDeviceDialog(this, {\n      saveCallback: async (device) => {\n        await this._savePreferences({\n          ...this.preferences,\n          device_consumption:\n            this.preferences.device_consumption.concat(device),\n        });\n      },\n    });\n  }\n\n  private async _deleteDevice(ev) {\n    const deviceToDelete: DeviceConsumptionEnergyPreference =\n      ev.currentTarget.device;\n\n    if (\n      !(await showConfirmationDialog(this, {\n        title: this.hass.localize(\"ui.panel.config.energy.delete_source\"),\n      }))\n    ) {\n      return;\n    }\n\n    try {\n      await this._savePreferences({\n        ...this.preferences,\n        device_consumption: this.preferences.device_consumption.filter(\n          (device) => device !== deviceToDelete\n        ),\n      });\n    } catch (err: any) {\n      showAlertDialog(this, { title: `Failed to save config: ${err.message}` });\n    }\n  }\n\n  private async _savePreferences(preferences: EnergyPreferences) {\n    const result = await saveEnergyPreferences(this.hass, preferences);\n    fireEvent(this, \"value-changed\", { value: result });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [haStyle, energyCardStyles];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-energy-device-settings\": EnergyDeviceSettings;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { mdiDelete, mdiFire, mdiPencil } from \"@mdi/js\";\nimport { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-icon-button\";\nimport {\n  EnergyPreferences,\n  EnergyPreferencesValidation,\n  EnergyValidationIssue,\n  GasSourceTypeEnergyPreference,\n  getEnergyGasUnitCategory,\n  saveEnergyPreferences,\n} from \"../../../../data/energy\";\nimport {\n  StatisticsMetaData,\n  getStatisticLabel,\n} from \"../../../../data/recorder\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { documentationUrl } from \"../../../../util/documentation-url\";\nimport { showEnergySettingsGasDialog } from \"../dialogs/show-dialogs-energy\";\nimport \"./ha-energy-validation-result\";\nimport { energyCardStyles } from \"./styles\";\n\n@customElement(\"ha-energy-gas-settings\")\nexport class EnergyGasSettings extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false })\n  public preferences!: EnergyPreferences;\n\n  @property({ attribute: false })\n  public statsMetadata?: Record<string, StatisticsMetaData>;\n\n  @property({ attribute: false })\n  public validationResult?: EnergyPreferencesValidation;\n\n  protected render(): TemplateResult {\n    const gasSources: GasSourceTypeEnergyPreference[] = [];\n    const gasValidation: EnergyValidationIssue[][] = [];\n\n    this.preferences.energy_sources.forEach((source, idx) => {\n      if (source.type !== \"gas\") {\n        return;\n      }\n      gasSources.push(source);\n\n      if (this.validationResult) {\n        gasValidation.push(this.validationResult.energy_sources[idx]);\n      }\n    });\n\n    return html`\n      <ha-card outlined>\n        <h1 class=\"card-header\">\n          <ha-svg-icon .path=${mdiFire}></ha-svg-icon>\n          ${this.hass.localize(\"ui.panel.config.energy.gas.title\")}\n        </h1>\n\n        <div class=\"card-content\">\n          <p>\n            ${this.hass.localize(\"ui.panel.config.energy.gas.sub\")}\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=${documentationUrl(this.hass, \"/docs/energy/gas/\")}\n              >${this.hass.localize(\"ui.panel.config.energy.gas.learn_more\")}</a\n            >\n          </p>\n          ${gasValidation.map(\n            (result) =>\n              html`\n                <ha-energy-validation-result\n                  .hass=${this.hass}\n                  .issues=${result}\n                ></ha-energy-validation-result>\n              `\n          )}\n          <h3>\n            ${this.hass.localize(\"ui.panel.config.energy.gas.gas_consumption\")}\n          </h3>\n          ${gasSources.map((source) => {\n            const entityState = this.hass.states[source.stat_energy_from];\n            return html`\n              <div class=\"row\" .source=${source}>\n                ${entityState?.attributes.icon\n                  ? html`<ha-icon\n                      .icon=${entityState.attributes.icon}\n                    ></ha-icon>`\n                  : html`<ha-svg-icon .path=${mdiFire}></ha-svg-icon>`}\n                <span class=\"content\"\n                  >${getStatisticLabel(\n                    this.hass,\n                    source.stat_energy_from,\n                    this.statsMetadata?.[source.stat_energy_from]\n                  )}</span\n                >\n                <ha-icon-button\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.energy.gas.edit_gas_source\"\n                  )}\n                  @click=${this._editSource}\n                  .path=${mdiPencil}\n                ></ha-icon-button>\n                <ha-icon-button\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.energy.gas.delete_gas_source\"\n                  )}\n                  @click=${this._deleteSource}\n                  .path=${mdiDelete}\n                ></ha-icon-button>\n              </div>\n            `;\n          })}\n          <div class=\"row border-bottom\">\n            <ha-svg-icon .path=${mdiFire}></ha-svg-icon>\n            <mwc-button @click=${this._addSource}\n              >${this.hass.localize(\n                \"ui.panel.config.energy.gas.add_gas_source\"\n              )}</mwc-button\n            >\n          </div>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private _addSource() {\n    showEnergySettingsGasDialog(this, {\n      allowedGasUnitCategory: getEnergyGasUnitCategory(\n        this.preferences,\n        this.statsMetadata\n      ),\n      saveCallback: async (source) => {\n        delete source.unit_of_measurement;\n        await this._savePreferences({\n          ...this.preferences,\n          energy_sources: this.preferences.energy_sources.concat(source),\n        });\n      },\n    });\n  }\n\n  private _editSource(ev) {\n    const origSource: GasSourceTypeEnergyPreference =\n      ev.currentTarget.closest(\".row\").source;\n    showEnergySettingsGasDialog(this, {\n      source: { ...origSource },\n      allowedGasUnitCategory: getEnergyGasUnitCategory(\n        this.preferences,\n        this.statsMetadata,\n        origSource.stat_energy_from\n      ),\n      metadata: this.statsMetadata?.[origSource.stat_energy_from],\n      saveCallback: async (newSource) => {\n        await this._savePreferences({\n          ...this.preferences,\n          energy_sources: this.preferences.energy_sources.map((src) =>\n            src === origSource ? newSource : src\n          ),\n        });\n      },\n    });\n  }\n\n  private async _deleteSource(ev) {\n    const sourceToDelete: GasSourceTypeEnergyPreference =\n      ev.currentTarget.closest(\".row\").source;\n\n    if (\n      !(await showConfirmationDialog(this, {\n        title: this.hass.localize(\"ui.panel.config.energy.delete_source\"),\n      }))\n    ) {\n      return;\n    }\n\n    try {\n      await this._savePreferences({\n        ...this.preferences,\n        energy_sources: this.preferences.energy_sources.filter(\n          (source) => source !== sourceToDelete\n        ),\n      });\n    } catch (err: any) {\n      showAlertDialog(this, { title: `Failed to save config: ${err.message}` });\n    }\n  }\n\n  private async _savePreferences(preferences: EnergyPreferences) {\n    const result = await saveEnergyPreferences(this.hass, preferences);\n    fireEvent(this, \"value-changed\", { value: result });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [haStyle, energyCardStyles];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-energy-gas-settings\": EnergyGasSettings;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport {\n  mdiDelete,\n  mdiHomeExportOutline,\n  mdiHomeImportOutline,\n  mdiPencil,\n  mdiTransmissionTower,\n} from \"@mdi/js\";\nimport { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-icon-button\";\nimport {\n  ConfigEntry,\n  deleteConfigEntry,\n  getConfigEntries,\n} from \"../../../../data/config_entries\";\nimport {\n  emptyGridSourceEnergyPreference,\n  EnergyPreferences,\n  EnergyPreferencesValidation,\n  energySourcesByType,\n  EnergyValidationIssue,\n  FlowFromGridSourceEnergyPreference,\n  FlowToGridSourceEnergyPreference,\n  GridSourceTypeEnergyPreference,\n  saveEnergyPreferences,\n} from \"../../../../data/energy\";\nimport {\n  StatisticsMetaData,\n  getStatisticLabel,\n} from \"../../../../data/recorder\";\nimport { showConfigFlowDialog } from \"../../../../dialogs/config-flow/show-dialog-config-flow\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { documentationUrl } from \"../../../../util/documentation-url\";\nimport {\n  showEnergySettingsGridFlowFromDialog,\n  showEnergySettingsGridFlowToDialog,\n} from \"../dialogs/show-dialogs-energy\";\nimport \"./ha-energy-validation-result\";\nimport { energyCardStyles } from \"./styles\";\n\n@customElement(\"ha-energy-grid-settings\")\nexport class EnergyGridSettings extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false })\n  public preferences!: EnergyPreferences;\n\n  @property({ attribute: false })\n  public statsMetadata?: Record<string, StatisticsMetaData>;\n\n  @property({ attribute: false })\n  public validationResult?: EnergyPreferencesValidation;\n\n  protected firstUpdated() {\n    // this._fetchCO2SignalConfigEntries();\n  }\n\n  protected render(): TemplateResult {\n    const gridIdx = this.preferences.energy_sources.findIndex(\n      (source) => source.type === \"grid\"\n    );\n\n    let gridSource: GridSourceTypeEnergyPreference;\n    let gridValidation: EnergyValidationIssue[] | undefined;\n\n    if (gridIdx === -1) {\n      gridSource = emptyGridSourceEnergyPreference();\n    } else {\n      gridSource = this.preferences.energy_sources[\n        gridIdx\n      ] as GridSourceTypeEnergyPreference;\n      if (this.validationResult) {\n        gridValidation = this.validationResult.energy_sources[gridIdx];\n      }\n    }\n\n    return html`\n      <ha-card outlined>\n        <h1 class=\"card-header\">\n          <ha-svg-icon .path=${mdiTransmissionTower}></ha-svg-icon>\n          ${this.hass.localize(\"ui.panel.config.energy.grid.title\")}\n        </h1>\n\n        <div class=\"card-content\">\n          <p>\n            ${this.hass.localize(\"ui.panel.config.energy.grid.sub\")}\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=${documentationUrl(\n                this.hass,\n                \"/docs/energy/electricity-grid/\"\n              )}\n              >${this.hass.localize(\n                \"ui.panel.config.energy.grid.learn_more\"\n              )}</a\n            >\n          </p>\n          ${gridValidation\n            ? html`\n                <ha-energy-validation-result\n                  .hass=${this.hass}\n                  .issues=${gridValidation}\n                ></ha-energy-validation-result>\n              `\n            : \"\"}\n\n          <h3>\n            ${this.hass.localize(\n              \"ui.panel.config.energy.grid.grid_consumption\"\n            )}\n          </h3>\n          ${gridSource.flow_from.map((flow) => {\n            const entityState = this.hass.states[flow.stat_energy_from];\n            return html`\n              <div class=\"row\" .source=${flow}>\n                ${entityState?.attributes.icon\n                  ? html`<ha-icon\n                      .icon=${entityState?.attributes.icon}\n                    ></ha-icon>`\n                  : html`<ha-svg-icon\n                      .path=${mdiHomeImportOutline}\n                    ></ha-svg-icon>`}\n                <span class=\"content\"\n                  >${getStatisticLabel(\n                    this.hass,\n                    flow.stat_energy_from,\n                    this.statsMetadata?.[flow.stat_energy_from]\n                  )}</span\n                >\n                <ha-icon-button\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.energy.grid.edit_consumption\"\n                  )}\n                  @click=${this._editFromSource}\n                  .path=${mdiPencil}\n                ></ha-icon-button>\n                <ha-icon-button\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.energy.grid.delete_consumption\"\n                  )}\n                  @click=${this._deleteFromSource}\n                  .path=${mdiDelete}\n                ></ha-icon-button>\n              </div>\n            `;\n          })}\n          <div class=\"row border-bottom\">\n            <ha-svg-icon .path=${mdiHomeImportOutline}></ha-svg-icon>\n            <mwc-button @click=${this._addFromSource}\n              >${this.hass.localize(\n                \"ui.panel.config.energy.grid.add_consumption\"\n              )}</mwc-button\n            >\n          </div>\n\n          <h3>\n            ${this.hass.localize(\"ui.panel.config.energy.grid.return_to_grid\")}\n          </h3>\n          ${gridSource.flow_to.map((flow) => {\n            const entityState = this.hass.states[flow.stat_energy_to];\n            return html`\n              <div class=\"row\" .source=${flow}>\n                ${entityState?.attributes.icon\n                  ? html`<ha-icon\n                      .icon=${entityState.attributes.icon}\n                    ></ha-icon>`\n                  : html`<ha-svg-icon\n                      .path=${mdiHomeExportOutline}\n                    ></ha-svg-icon>`}\n                <span class=\"content\"\n                  >${getStatisticLabel(\n                    this.hass,\n                    flow.stat_energy_to,\n                    this.statsMetadata?.[flow.stat_energy_to]\n                  )}</span\n                >\n                <ha-icon-button\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.energy.grid.edit_return\"\n                  )}\n                  @click=${this._editToSource}\n                  .path=${mdiPencil}\n                ></ha-icon-button>\n                <ha-icon-button\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.energy.grid.delete_return\"\n                  )}\n                  @click=${this._deleteToSource}\n                  .path=${mdiDelete}\n                ></ha-icon-button>\n              </div>\n            `;\n          })}\n          <div class=\"row border-bottom\">\n            <ha-svg-icon .path=${mdiHomeExportOutline}></ha-svg-icon>\n            <mwc-button @click=${this._addToSource}\n              >${this.hass.localize(\n                \"ui.panel.config.energy.grid.add_return\"\n              )}</mwc-button\n            >\n          </div>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private _addFromSource() {\n    showEnergySettingsGridFlowFromDialog(this, {\n      saveCallback: async (flow) => {\n        let preferences: EnergyPreferences;\n        const gridSource = this.preferences.energy_sources.find(\n          (src) => src.type === \"grid\"\n        ) as GridSourceTypeEnergyPreference | undefined;\n\n        if (!gridSource) {\n          preferences = {\n            ...this.preferences,\n            energy_sources: [\n              ...this.preferences.energy_sources,\n              {\n                ...emptyGridSourceEnergyPreference(),\n                flow_from: [flow],\n              },\n            ],\n          };\n        } else {\n          preferences = {\n            ...this.preferences,\n            energy_sources: this.preferences.energy_sources.map((src) =>\n              src.type === \"grid\"\n                ? { ...src, flow_from: [...gridSource.flow_from, flow] }\n                : src\n            ),\n          };\n        }\n        await this._savePreferences(preferences);\n      },\n    });\n  }\n\n  private _addToSource() {\n    showEnergySettingsGridFlowToDialog(this, {\n      saveCallback: async (flow) => {\n        let preferences: EnergyPreferences;\n        const gridSource = this.preferences.energy_sources.find(\n          (src) => src.type === \"grid\"\n        ) as GridSourceTypeEnergyPreference | undefined;\n\n        if (!gridSource) {\n          preferences = {\n            ...this.preferences,\n            energy_sources: [\n              ...this.preferences.energy_sources,\n              {\n                ...emptyGridSourceEnergyPreference(),\n                flow_to: [flow],\n              },\n            ],\n          };\n        } else {\n          preferences = {\n            ...this.preferences,\n            energy_sources: this.preferences.energy_sources.map((src) =>\n              src.type === \"grid\"\n                ? { ...src, flow_to: [...gridSource.flow_to, flow] }\n                : src\n            ),\n          };\n        }\n        await this._savePreferences(preferences);\n      },\n    });\n  }\n\n  private _editFromSource(ev) {\n    const origSource: FlowFromGridSourceEnergyPreference =\n      ev.currentTarget.closest(\".row\").source;\n    showEnergySettingsGridFlowFromDialog(this, {\n      source: { ...origSource },\n      saveCallback: async (source) => {\n        const flowFrom = energySourcesByType(this.preferences).grid![0]\n          .flow_from;\n\n        const preferences: EnergyPreferences = {\n          ...this.preferences,\n          energy_sources: this.preferences.energy_sources.map((src) =>\n            src.type === \"grid\"\n              ? {\n                  ...src,\n                  flow_from: flowFrom.map((flow) =>\n                    flow === origSource ? source : flow\n                  ),\n                }\n              : src\n          ),\n        };\n        await this._savePreferences(preferences);\n      },\n    });\n  }\n\n  private _editToSource(ev) {\n    const origSource: FlowToGridSourceEnergyPreference =\n      ev.currentTarget.closest(\".row\").source;\n    showEnergySettingsGridFlowToDialog(this, {\n      source: { ...origSource },\n      saveCallback: async (source) => {\n        const flowTo = energySourcesByType(this.preferences).grid![0].flow_to;\n\n        const preferences: EnergyPreferences = {\n          ...this.preferences,\n          energy_sources: this.preferences.energy_sources.map((src) =>\n            src.type === \"grid\"\n              ? {\n                  ...src,\n                  flow_to: flowTo.map((flow) =>\n                    flow === origSource ? source : flow\n                  ),\n                }\n              : src\n          ),\n        };\n        await this._savePreferences(preferences);\n      },\n    });\n  }\n\n  private async _deleteFromSource(ev) {\n    const sourceToDelete: FlowFromGridSourceEnergyPreference =\n      ev.currentTarget.closest(\".row\").source;\n\n    if (\n      !(await showConfirmationDialog(this, {\n        title: this.hass.localize(\"ui.panel.config.energy.delete_source\"),\n      }))\n    ) {\n      return;\n    }\n\n    const flowFrom = energySourcesByType(\n      this.preferences\n    ).grid![0].flow_from.filter((flow) => flow !== sourceToDelete);\n\n    const preferences: EnergyPreferences = {\n      ...this.preferences,\n      energy_sources: this.preferences.energy_sources.map((source) =>\n        source.type === \"grid\" ? { ...source, flow_from: flowFrom } : source\n      ),\n    };\n\n    try {\n      await this._savePreferences(preferences);\n    } catch (err: any) {\n      showAlertDialog(this, { title: `Failed to save config: ${err.message}` });\n    }\n  }\n\n  private async _deleteToSource(ev) {\n    const sourceToDelete: FlowToGridSourceEnergyPreference =\n      ev.currentTarget.closest(\".row\").source;\n\n    if (\n      !(await showConfirmationDialog(this, {\n        title: this.hass.localize(\"ui.panel.config.energy.delete_source\"),\n      }))\n    ) {\n      return;\n    }\n\n    const flowTo = energySourcesByType(\n      this.preferences\n    ).grid![0].flow_to.filter((flow) => flow !== sourceToDelete);\n\n    const preferences: EnergyPreferences = {\n      ...this.preferences,\n      energy_sources: this.preferences.energy_sources.map((source) =>\n        source.type === \"grid\" ? { ...source, flow_to: flowTo } : source\n      ),\n    };\n\n    try {\n      await this._savePreferences(preferences);\n    } catch (err: any) {\n      showAlertDialog(this, { title: `Failed to save config: ${err.message}` });\n    }\n  }\n\n  private async _savePreferences(preferences: EnergyPreferences) {\n    const result = await saveEnergyPreferences(this.hass, preferences);\n    fireEvent(this, \"value-changed\", { value: result });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [haStyle, energyCardStyles];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-energy-grid-settings\": EnergyGridSettings;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { mdiDelete, mdiPencil, mdiSolarPower } from \"@mdi/js\";\nimport { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-icon-button\";\nimport {\n  EnergyInfo,\n  EnergyPreferences,\n  EnergyPreferencesValidation,\n  EnergyValidationIssue,\n  saveEnergyPreferences,\n  SolarSourceTypeEnergyPreference,\n} from \"../../../../data/energy\";\nimport {\n  StatisticsMetaData,\n  getStatisticLabel,\n} from \"../../../../data/recorder\";\nimport {\n  showConfirmationDialog,\n  showAlertDialog,\n} from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { documentationUrl } from \"../../../../util/documentation-url\";\nimport { showEnergySettingsSolarDialog } from \"../dialogs/show-dialogs-energy\";\nimport \"./ha-energy-validation-result\";\nimport { energyCardStyles } from \"./styles\";\n\n@customElement(\"ha-energy-solar-settings\")\nexport class EnergySolarSettings extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false })\n  public preferences!: EnergyPreferences;\n\n  @property({ attribute: false })\n  public statsMetadata?: Record<string, StatisticsMetaData>;\n\n  @property({ attribute: false })\n  public validationResult?: EnergyPreferencesValidation;\n\n  @property({ attribute: false })\n  public info?: EnergyInfo;\n\n  protected render(): TemplateResult {\n    const solarSources: SolarSourceTypeEnergyPreference[] = [];\n    const solarValidation: EnergyValidationIssue[][] = [];\n\n    this.preferences.energy_sources.forEach((source, idx) => {\n      if (source.type !== \"solar\") {\n        return;\n      }\n      solarSources.push(source);\n\n      if (this.validationResult) {\n        solarValidation.push(this.validationResult.energy_sources[idx]);\n      }\n    });\n\n    return html`\n      <ha-card outlined>\n        <h1 class=\"card-header\">\n          <ha-svg-icon .path=${mdiSolarPower}></ha-svg-icon>\n          ${this.hass.localize(\"ui.panel.config.energy.solar.title\")}\n        </h1>\n\n        <div class=\"card-content\">\n          <p>\n            ${this.hass.localize(\"ui.panel.config.energy.solar.sub\")}\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=${documentationUrl(this.hass, \"/docs/energy/solar-panels/\")}\n              >${this.hass.localize(\n                \"ui.panel.config.energy.solar.learn_more\"\n              )}</a\n            >\n          </p>\n          ${solarValidation.map(\n            (result) =>\n              html`\n                <ha-energy-validation-result\n                  .hass=${this.hass}\n                  .issues=${result}\n                ></ha-energy-validation-result>\n              `\n          )}\n\n          <h3>\n            ${this.hass.localize(\n              \"ui.panel.config.energy.solar.solar_production\"\n            )}\n          </h3>\n          ${solarSources.map((source) => {\n            const entityState = this.hass.states[source.stat_energy_from];\n            return html`\n              <div class=\"row\" .source=${source}>\n                ${entityState?.attributes.icon\n                  ? html`<ha-icon\n                      .icon=${entityState.attributes.icon}\n                    ></ha-icon>`\n                  : html`<ha-svg-icon .path=${mdiSolarPower}></ha-svg-icon>`}\n                <span class=\"content\"\n                  >${getStatisticLabel(\n                    this.hass,\n                    source.stat_energy_from,\n                    this.statsMetadata?.[source.stat_energy_from]\n                  )}</span\n                >\n                ${this.info\n                  ? html`\n                      <ha-icon-button\n                        .label=${this.hass.localize(\n                          \"ui.panel.config.energy.solar.edit_solar_production\"\n                        )}\n                        @click=${this._editSource}\n                        .path=${mdiPencil}\n                      ></ha-icon-button>\n                    `\n                  : \"\"}\n                <ha-icon-button\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.energy.solar.delete_solar_production\"\n                  )}\n                  @click=${this._deleteSource}\n                  .path=${mdiDelete}\n                ></ha-icon-button>\n              </div>\n            `;\n          })}\n          ${this.info\n            ? html`\n                <div class=\"row border-bottom\">\n                  <ha-svg-icon .path=${mdiSolarPower}></ha-svg-icon>\n                  <mwc-button @click=${this._addSource}>\n                    ${this.hass.localize(\n                      \"ui.panel.config.energy.solar.add_solar_production\"\n                    )}\n                  </mwc-button>\n                </div>\n              `\n            : \"\"}\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private _addSource() {\n    showEnergySettingsSolarDialog(this, {\n      info: this.info!,\n      saveCallback: async (source) => {\n        await this._savePreferences({\n          ...this.preferences,\n          energy_sources: this.preferences.energy_sources.concat(source),\n        });\n      },\n    });\n  }\n\n  private _editSource(ev) {\n    const origSource: SolarSourceTypeEnergyPreference =\n      ev.currentTarget.closest(\".row\").source;\n    showEnergySettingsSolarDialog(this, {\n      info: this.info!,\n      source: { ...origSource },\n      saveCallback: async (newSource) => {\n        await this._savePreferences({\n          ...this.preferences,\n          energy_sources: this.preferences.energy_sources.map((src) =>\n            src === origSource ? newSource : src\n          ),\n        });\n      },\n    });\n  }\n\n  private async _deleteSource(ev) {\n    const sourceToDelete: SolarSourceTypeEnergyPreference =\n      ev.currentTarget.closest(\".row\").source;\n\n    if (\n      !(await showConfirmationDialog(this, {\n        title: this.hass.localize(\"ui.panel.config.energy.delete_source\"),\n      }))\n    ) {\n      return;\n    }\n\n    try {\n      await this._savePreferences({\n        ...this.preferences,\n        energy_sources: this.preferences.energy_sources.filter(\n          (source) => source !== sourceToDelete\n        ),\n      });\n    } catch (err: any) {\n      showAlertDialog(this, { title: `Failed to save config: ${err.message}` });\n    }\n  }\n\n  private async _savePreferences(preferences: EnergyPreferences) {\n    const result = await saveEnergyPreferences(this.hass, preferences);\n    fireEvent(this, \"value-changed\", { value: result });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [haStyle, energyCardStyles];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-energy-solar-settings\": EnergySolarSettings;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { groupBy } from \"../../../../common/util/group-by\";\nimport \"../../../../components/ha-alert\";\nimport { EnergyValidationIssue } from \"../../../../data/energy\";\nimport { HomeAssistant } from \"../../../../types\";\n\n@customElement(\"ha-energy-validation-result\")\nclass EnergyValidationMessage extends LitElement {\n  @property({ attribute: false })\n  public hass!: HomeAssistant;\n\n  @property()\n  public issues!: EnergyValidationIssue[];\n\n  public render() {\n    if (this.issues.length === 0) {\n      return html``;\n    }\n\n    const grouped = groupBy(this.issues, (issue) => issue.type);\n\n    return Object.entries(grouped).map(\n      ([issueType, gIssues]) => html`\n          <ha-alert\n            alert-type=\"warning\"\n            .title=${\n              this.hass.localize(\n                `ui.panel.config.energy.validation.issues.${issueType}.title`\n              ) || issueType\n            }\n          >\n            ${this.hass.localize(\n              `ui.panel.config.energy.validation.issues.${issueType}.description`,\n              { currency: this.hass.config.currency }\n            )}\n            ${\n              issueType === \"recorder_untracked\"\n                ? html`(<a\n                      href=\"https://www.home-assistant.io/integrations/recorder#configure-filter\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      >${this.hass.localize(\n                        \"ui.panel.config.common.learn_more\"\n                      )}</a\n                    >)`\n                : \"\"\n            }\n            <ul>\n              ${gIssues.map(\n                (issue) =>\n                  html`<li>\n                    ${issue.identifier}${issue.value\n                      ? html` (${issue.value})`\n                      : \"\"}\n                  </li>`\n              )}\n            </ul>\n          </ha-alert>\n        </div>\n      `\n    );\n  }\n\n  static styles = css`\n    ul {\n      padding-left: 24px;\n      margin: 4px 0;\n    }\n    a {\n      color: var(--primary-color);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-energy-validation-result\": EnergyValidationMessage;\n  }\n}\n"],"names":[],"sourceRoot":""}