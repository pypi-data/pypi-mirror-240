{"version":3,"file":"c95c1c42.js","mappings":";;;;AA6BA;;;AAIA;;;;;;;;;;;;;;;;;AAqBA;;ACnCA;AACA;AACA;;AAEA;AAIA;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;;;;ACvDA;AACA;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA","sources":["webpack://home-assistant-frontend/./src/components/ha-bar.ts","webpack://home-assistant-frontend/./src/components/ha-metric.ts","webpack://home-assistant-frontend/./src/components/ha-settings-row.ts"],"sourcesContent":["import { css, CSSResultGroup, LitElement, svg, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport {\n  getValueInPercentage,\n  normalize,\n  roundWithOneDecimal,\n} from \"../util/calculate\";\n\n@customElement(\"ha-bar\")\nexport class HaBar extends LitElement {\n  @property({ type: Number }) public min = 0;\n\n  @property({ type: Number }) public max = 100;\n\n  @property({ type: Number }) public value!: number;\n\n  protected render(): TemplateResult {\n    const valuePrecentage = roundWithOneDecimal(\n      getValueInPercentage(\n        normalize(this.value, this.min, this.max),\n        this.min,\n        this.max\n      )\n    );\n\n    return svg`\n      <svg>\n        <g>\n          <rect/>\n          <rect width=\"${valuePrecentage}%\"/>\n        </g>\n      </svg>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      rect {\n        height: 100%;\n      }\n      rect:first-child {\n        width: 100%;\n        fill: var(--ha-bar-background-color, var(--secondary-background-color));\n      }\n      rect:last-child {\n        fill: var(--ha-bar-primary-color, var(--primary-color));\n        rx: var(--ha-bar-border-radius, 4px);\n      }\n      svg {\n        border-radius: var(--ha-bar-border-radius, 4px);\n        height: 12px;\n        width: 100%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-bar\": HaBar;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { roundWithOneDecimal } from \"../util/calculate\";\nimport \"./ha-bar\";\nimport \"./ha-settings-row\";\n\n@customElement(\"ha-metric\")\nclass HaMetric extends LitElement {\n  @property({ type: Number }) public value!: number;\n\n  @property({ type: String }) public heading!: string;\n\n  @property({ type: String }) public tooltip?: string;\n\n  protected render(): TemplateResult {\n    const roundedValue = roundWithOneDecimal(this.value);\n    return html`\n      <ha-settings-row>\n        <span slot=\"heading\"> ${this.heading} </span>\n        <div slot=\"description\" .title=${this.tooltip ?? \"\"}>\n          <span class=\"value\"> ${roundedValue} % </span>\n          <ha-bar\n            class=${classMap({\n              \"target-warning\": roundedValue > 50,\n              \"target-critical\": roundedValue > 85,\n            })}\n            .value=${this.value}\n          ></ha-bar>\n        </div>\n      </ha-settings-row>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-settings-row {\n        padding: 0;\n        height: 54px;\n        width: 100%;\n      }\n      ha-settings-row > div[slot=\"description\"] {\n        white-space: normal;\n        color: var(--secondary-text-color);\n        display: flex;\n        justify-content: space-between;\n      }\n      ha-bar {\n        --ha-bar-primary-color: var(\n          --metric-bar-ok-color,\n          var(--success-color)\n        );\n      }\n      .target-warning {\n        --ha-bar-primary-color: var(\n          --metric-bar-warning-color,\n          var(--warning-color)\n        );\n      }\n      .target-critical {\n        --ha-bar-primary-color: var(\n          --metric-bar-critical-color,\n          var(--error-color)\n        );\n      }\n      .value {\n        width: 48px;\n        padding-right: 4px;\n        flex-shrink: 0;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-metric\": HaMetric;\n  }\n}\n","import \"@polymer/paper-item/paper-item-body\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-settings-row\")\nexport class HaSettingsRow extends LitElement {\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @property({ type: Boolean, attribute: \"three-line\" })\n  public threeLine = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"prefix-wrap\">\n        <slot name=\"prefix\"></slot>\n        <paper-item-body\n          ?two-line=${!this.threeLine}\n          ?three-line=${this.threeLine}\n        >\n          <slot name=\"heading\"></slot>\n          <div secondary><slot name=\"description\"></slot></div>\n        </paper-item-body>\n      </div>\n      <div class=\"content\"><slot></slot></div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n        padding: 0 16px;\n        align-content: normal;\n        align-self: auto;\n        align-items: center;\n      }\n      paper-item-body {\n        padding: 8px 16px 8px 0;\n      }\n      paper-item-body[two-line] {\n        min-height: calc(\n          var(--paper-item-body-two-line-min-height, 72px) - 16px\n        );\n        flex: 1;\n      }\n      .content {\n        display: contents;\n      }\n      :host(:not([narrow])) .content {\n        display: var(--settings-row-content-display, flex);\n        justify-content: flex-end;\n        flex: 1;\n        padding: 16px 0;\n      }\n      .content ::slotted(*) {\n        width: var(--settings-row-content-width);\n      }\n      :host([narrow]) {\n        align-items: normal;\n        flex-direction: column;\n        border-top: 1px solid var(--divider-color);\n        padding-bottom: 8px;\n      }\n      ::slotted(ha-switch) {\n        padding: 16px 0;\n      }\n      div[secondary] {\n        white-space: normal;\n      }\n      .prefix-wrap {\n        display: var(--settings-row-prefix-display);\n      }\n      :host([narrow]) .prefix-wrap {\n        display: flex;\n        align-items: center;\n      }\n    `;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-settings-row\": HaSettingsRow;\n  }\n}\n"],"names":[],"sourceRoot":""}