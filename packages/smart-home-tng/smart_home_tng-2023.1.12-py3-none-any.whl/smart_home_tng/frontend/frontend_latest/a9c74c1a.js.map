{"version":3,"file":"a9c74c1a.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;AAOA;AACA;AAKA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsGA","sources":["webpack://home-assistant-frontend/./src/components/entity/state-badge.ts"],"sourcesContent":["import { mdiAlert } from \"@mdi/js\";\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { computeActiveState } from \"../../common/entity/compute_active_state\";\nimport { computeDomain } from \"../../common/entity/compute_domain\";\nimport { computeStateDomain } from \"../../common/entity/compute_state_domain\";\nimport { iconColorCSS } from \"../../common/style/icon_color_css\";\nimport { cameraUrlWithWidthHeight } from \"../../data/camera\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-state-icon\";\n\nexport class StateBadge extends LitElement {\n  public hass?: HomeAssistant;\n\n  @property() public stateObj?: HassEntity;\n\n  @property() public overrideIcon?: string;\n\n  @property() public overrideImage?: string;\n\n  @property({ type: Boolean }) public stateColor?: boolean;\n\n  @property({ type: Boolean, reflect: true, attribute: \"icon\" })\n  private _showIcon = true;\n\n  @state() private _iconStyle: { [name: string]: string } = {};\n\n  protected render(): TemplateResult {\n    const stateObj = this.stateObj;\n\n    // We either need a `stateObj` or one override\n    if (!stateObj && !this.overrideIcon && !this.overrideImage) {\n      return html`<div class=\"missing\">\n        <ha-svg-icon .path=${mdiAlert}></ha-svg-icon>\n      </div>`;\n    }\n\n    if (!this._showIcon) {\n      return html``;\n    }\n\n    const domain = stateObj ? computeStateDomain(stateObj) : undefined;\n\n    return html`<ha-state-icon\n      style=${styleMap(this._iconStyle)}\n      data-domain=${ifDefined(\n        this.stateColor || (domain === \"light\" && this.stateColor !== false)\n          ? domain\n          : undefined\n      )}\n      data-state=${stateObj ? computeActiveState(stateObj) : \"\"}\n      .icon=${this.overrideIcon}\n      .state=${stateObj}\n    ></ha-state-icon>`;\n  }\n\n  public willUpdate(changedProps: PropertyValues) {\n    super.willUpdate(changedProps);\n    if (\n      !changedProps.has(\"stateObj\") &&\n      !changedProps.has(\"overrideImage\") &&\n      !changedProps.has(\"overrideIcon\")\n    ) {\n      return;\n    }\n    const stateObj = this.stateObj;\n\n    const iconStyle: { [name: string]: string } = {};\n    const hostStyle: Partial<CSSStyleDeclaration> = {\n      backgroundImage: \"\",\n    };\n\n    this._showIcon = true;\n\n    if (stateObj && this.overrideImage === undefined) {\n      // hide icon if we have entity picture\n      if (\n        (stateObj.attributes.entity_picture_local ||\n          stateObj.attributes.entity_picture) &&\n        !this.overrideIcon\n      ) {\n        let imageUrl =\n          stateObj.attributes.entity_picture_local ||\n          stateObj.attributes.entity_picture;\n        if (this.hass) {\n          imageUrl = this.hass.hassUrl(imageUrl);\n        }\n        if (computeDomain(stateObj.entity_id) === \"camera\") {\n          imageUrl = cameraUrlWithWidthHeight(imageUrl, 80, 80);\n        }\n        hostStyle.backgroundImage = `url(${imageUrl})`;\n        this._showIcon = false;\n      } else if (stateObj.state === \"on\") {\n        if (this.stateColor !== false && stateObj.attributes.rgb_color) {\n          iconStyle.color = `rgb(${stateObj.attributes.rgb_color.join(\",\")})`;\n        }\n        if (stateObj.attributes.brightness && this.stateColor !== false) {\n          const brightness = stateObj.attributes.brightness;\n          if (typeof brightness !== \"number\") {\n            const errorMessage = `Type error: state-badge expected number, but type of ${\n              stateObj.entity_id\n            }.attributes.brightness is ${typeof brightness} (${brightness})`;\n            // eslint-disable-next-line\n            console.warn(errorMessage);\n          }\n          // lowest brightness will be around 50% (that's pretty dark)\n          iconStyle.filter = `brightness(${(brightness + 245) / 5}%)`;\n        }\n      }\n    } else if (this.overrideImage) {\n      let imageUrl = this.overrideImage;\n      if (this.hass) {\n        imageUrl = this.hass.hassUrl(imageUrl);\n      }\n      hostStyle.backgroundImage = `url(${imageUrl})`;\n      this._showIcon = false;\n    }\n\n    this._iconStyle = iconStyle;\n    Object.assign(this.style, hostStyle);\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      iconColorCSS,\n      css`\n        :host {\n          position: relative;\n          display: inline-block;\n          width: 40px;\n          color: var(--paper-item-icon-color, #44739e);\n          border-radius: 50%;\n          height: 40px;\n          text-align: center;\n          background-size: cover;\n          line-height: 40px;\n          vertical-align: middle;\n          box-sizing: border-box;\n        }\n        :host(:focus) {\n          outline: none;\n        }\n        :host(:not([icon]):focus) {\n          border: 2px solid var(--divider-color);\n        }\n        :host([icon]:focus) {\n          background: var(--divider-color);\n        }\n        ha-state-icon {\n          transition: color 0.3s ease-in-out, filter 0.3s ease-in-out;\n        }\n        .missing {\n          color: #fce588;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"state-badge\": StateBadge;\n  }\n}\n\ncustomElements.define(\"state-badge\", StateBadge);\n"],"names":[],"sourceRoot":""}