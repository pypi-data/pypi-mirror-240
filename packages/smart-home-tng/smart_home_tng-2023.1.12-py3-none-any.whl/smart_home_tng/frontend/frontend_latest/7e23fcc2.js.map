{"version":3,"file":"7e23fcc2.js","mappings":";AA6EA;AAGA;;AAEA;;;AAIA;AACA;AAGA;;AAGA;;AAqIA;AACA;AAGA;AACA;AACA;;;;AAIA;AACA;;AAGA;;ACzMA;AACA;;AAEA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoFA;;;;;;;;;;AAWA","sources":["webpack://home-assistant-frontend/./src/components/entity/ha-statistic-picker.ts","webpack://home-assistant-frontend/./src/components/ha-textfield.ts"],"sourcesContent":["import { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { ComboBoxLitRenderer } from \"@vaadin/combo-box/lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { ensureArray } from \"../../common/ensure-array\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeStateName } from \"../../common/entity/compute_state_name\";\nimport { stringCompare } from \"../../common/string/compare\";\nimport { getStatisticIds, StatisticsMetaData } from \"../../data/recorder\";\nimport { PolymerChangedEvent } from \"../../polymer-types\";\nimport { HomeAssistant } from \"../../types\";\nimport { documentationUrl } from \"../../util/documentation-url\";\nimport \"../ha-combo-box\";\nimport type { HaComboBox } from \"../ha-combo-box\";\nimport \"../ha-svg-icon\";\nimport \"./state-badge\";\n\n@customElement(\"ha-statistic-picker\")\nexport class HaStatisticPicker extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property({ attribute: \"statistic-types\" })\n  public statisticTypes?: \"mean\" | \"sum\";\n\n  @property({ type: Array }) public statisticIds?: StatisticsMetaData[];\n\n  @property({ type: Boolean }) public disabled?: boolean;\n\n  /**\n   * Show only statistics natively stored with these units of measurements.\n   * @type {Array}\n   * @attr include-statistics-unit-of-measurement\n   */\n  @property({\n    type: Array,\n    attribute: \"include-statistics-unit-of-measurement\",\n  })\n  public includeStatisticsUnitOfMeasurement?: string | string[];\n\n  /**\n   * Show only statistics displayed with these units of measurements.\n   * @attr include-display-unit-of-measurement\n   */\n  @property({ attribute: \"include-display-unit-of-measurement\" })\n  public includeDisplayUnitOfMeasurement?: string | string[];\n\n  /**\n   * Show only statistics with these device classes.\n   * @attr include-device-classes\n   */\n  @property({ attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  /**\n   * Show only statistics on entities.\n   * @type {Boolean}\n   * @attr entities-only\n   */\n  @property({ type: Boolean, attribute: \"entities-only\" })\n  public entitiesOnly = false;\n\n  @state() private _opened?: boolean;\n\n  @query(\"ha-combo-box\", true) public comboBox!: HaComboBox;\n\n  private _init = false;\n\n  private _rowRenderer: ComboBoxLitRenderer<{\n    id: string;\n    name: string;\n    state?: HassEntity;\n  }> = (item) => html`<mwc-list-item graphic=\"avatar\" twoline>\n    ${item.state\n      ? html`<state-badge slot=\"graphic\" .stateObj=${item.state}></state-badge>`\n      : \"\"}\n    <span>${item.name}</span>\n    <span slot=\"secondary\"\n      >${item.id === \"\" || item.id === \"__missing\"\n        ? html`<a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=${documentationUrl(this.hass, \"/more-info/statistics/\")}\n            >${this.hass.localize(\n              \"ui.components.statistic-picker.learn_more\"\n            )}</a\n          >`\n        : item.id}</span\n    >\n  </mwc-list-item>`;\n\n  private _getStatistics = memoizeOne(\n    (\n      statisticIds: StatisticsMetaData[],\n      includeStatisticsUnitOfMeasurement?: string | string[],\n      includeDisplayUnitOfMeasurement?: string | string[],\n      includeDeviceClasses?: string[],\n      entitiesOnly?: boolean\n    ): Array<{ id: string; name: string; state?: HassEntity }> => {\n      if (!statisticIds.length) {\n        return [\n          {\n            id: \"\",\n            name: this.hass.localize(\n              \"ui.components.statistic-picker.no_statistics\"\n            ),\n          },\n        ];\n      }\n\n      if (includeStatisticsUnitOfMeasurement) {\n        const includeUnits = ensureArray(includeStatisticsUnitOfMeasurement);\n        statisticIds = statisticIds.filter((meta) =>\n          includeUnits.includes(meta.statistics_unit_of_measurement)\n        );\n      }\n      if (includeDisplayUnitOfMeasurement) {\n        const includeUnits = ensureArray(includeDisplayUnitOfMeasurement);\n        statisticIds = statisticIds.filter((meta) =>\n          includeUnits.includes(meta.display_unit_of_measurement)\n        );\n      }\n\n      const output: Array<{\n        id: string;\n        name: string;\n        state?: HassEntity;\n      }> = [];\n      statisticIds.forEach((meta) => {\n        const entityState = this.hass.states[meta.statistic_id];\n        if (!entityState) {\n          if (!entitiesOnly) {\n            output.push({\n              id: meta.statistic_id,\n              name: meta.name || meta.statistic_id,\n            });\n          }\n          return;\n        }\n        if (\n          !includeDeviceClasses ||\n          includeDeviceClasses.includes(\n            entityState!.attributes.device_class || \"\"\n          )\n        ) {\n          output.push({\n            id: meta.statistic_id,\n            name: computeStateName(entityState),\n            state: entityState,\n          });\n        }\n      });\n\n      if (!output.length) {\n        return [\n          {\n            id: \"\",\n            name: this.hass.localize(\"ui.components.statistic-picker.no_match\"),\n          },\n        ];\n      }\n\n      if (output.length > 1) {\n        output.sort((a, b) => stringCompare(a.name || \"\", b.name || \"\"));\n      }\n\n      output.push({\n        id: \"__missing\",\n        name: this.hass.localize(\n          \"ui.components.statistic-picker.missing_entity\"\n        ),\n      });\n\n      return output;\n    }\n  );\n\n  public open() {\n    this.comboBox?.open();\n  }\n\n  public focus() {\n    this.comboBox?.focus();\n  }\n\n  public willUpdate(changedProps: PropertyValues) {\n    if (\n      (!this.hasUpdated && !this.statisticIds) ||\n      changedProps.has(\"statisticTypes\")\n    ) {\n      this._getStatisticIds();\n    }\n    if (\n      (!this._init && this.statisticIds) ||\n      (changedProps.has(\"_opened\") && this._opened)\n    ) {\n      this._init = true;\n      if (this.hasUpdated) {\n        (this.comboBox as any).items = this._getStatistics(\n          this.statisticIds!,\n          this.includeStatisticsUnitOfMeasurement,\n          this.includeDisplayUnitOfMeasurement,\n          this.includeDeviceClasses,\n          this.entitiesOnly\n        );\n      } else {\n        this.updateComplete.then(() => {\n          (this.comboBox as any).items = this._getStatistics(\n            this.statisticIds!,\n            this.includeStatisticsUnitOfMeasurement,\n            this.includeDisplayUnitOfMeasurement,\n            this.includeDeviceClasses,\n            this.entitiesOnly\n          );\n        });\n      }\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-combo-box\n        .hass=${this.hass}\n        .label=${this.label === undefined && this.hass\n          ? this.hass.localize(\"ui.components.statistic-picker.statistic\")\n          : this.label}\n        .value=${this._value}\n        .renderer=${this._rowRenderer}\n        .disabled=${this.disabled}\n        item-value-path=\"id\"\n        item-id-path=\"id\"\n        item-label-path=\"name\"\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._statisticChanged}\n      ></ha-combo-box>\n    `;\n  }\n\n  private async _getStatisticIds() {\n    this.statisticIds = await getStatisticIds(this.hass, this.statisticTypes);\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  private _statisticChanged(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    let newValue = ev.detail.value;\n    if (newValue === \"__missing\") {\n      newValue = \"\";\n    }\n\n    if (newValue !== this._value) {\n      this._setValue(newValue);\n    }\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    setTimeout(() => {\n      fireEvent(this, \"value-changed\", { value });\n      fireEvent(this, \"change\");\n    }, 0);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-statistic-picker\": HaStatisticPicker;\n  }\n}\n","import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { TemplateResult, html, PropertyValues, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public iconTrailing?: boolean;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      (changedProperties.has(\"invalid\") &&\n        (this.invalid || changedProperties.get(\"invalid\") !== undefined)) ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid ? this.errorMessage || \"Invalid\" : \"\"\n      );\n      this.reportValidity();\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n        padding-inline-start: var(--text-field-suffix-padding-left, 12px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 0px);\n        direction: var(--direction);\n      }\n      .mdc-text-field--with-leading-icon {\n        padding-inline-start: var(--text-field-suffix-padding-left, 0px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 16px);\n        direction: var(--direction);\n      }\n\n      .mdc-text-field:not(.mdc-text-field--disabled)\n        .mdc-text-field__affix--suffix {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon--leading {\n        margin-inline-start: 16px;\n        margin-inline-end: 8px;\n        direction: var(--direction);\n      }\n\n      input {\n        text-align: var(--text-field-text-align, start);\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n\n      .mdc-floating-label {\n        inset-inline-start: 16px !important;\n        inset-inline-end: initial !important;\n        transform-origin: var(--float-start);\n        direction: var(--direction);\n        transform-origin: var(--float-start);\n      }\n\n      .mdc-text-field--with-leading-icon.mdc-text-field--filled\n        .mdc-floating-label {\n        max-width: calc(100% - 48px);\n        inset-inline-start: 48px !important;\n        inset-inline-end: initial !important;\n        direction: var(--direction);\n      }\n\n      .mdc-text-field__input[type=\"number\"] {\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          .mdc-text-field__affix--suffix,\n          .mdc-text-field--with-leading-icon,\n          .mdc-text-field__icon--leading,\n          .mdc-floating-label,\n          .mdc-text-field--with-leading-icon.mdc-text-field--filled\n            .mdc-floating-label,\n          .mdc-text-field__input[type=\"number\"] {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n"],"names":[],"sourceRoot":""}