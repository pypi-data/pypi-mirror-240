{"version":3,"file":"5cdca862.js","mappings":";AA+HA;AAEA;AAGA;AACA;AAGA;;AAGA;AACA;AACA;;;AAGA;AAEA;;;AAKA;;AAEA;;;AAGA;;;;AAIA;;AAEA;;;AAGA;;;;;AAMA;AAEA;AAEA;;AAEA;AACA;;;;;AAOA;AACA;;;AAGA;AAEA;;AAGA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;;;;AAIA;AACA;AAEA;;AAGA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;;;;AAIA;AACA;AAEA;AAEA;AAIA;;AAGA;;;AAGA;AACA;;;;AAKA;;AAGA;;;AAGA;AACA;;;AAGA;AAEA;;;AAGA;AACA;;;AAIA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;AAmDA;AACA;AACA;AACA;AAMA;;;;;AAKA;AACA;AACA;AACA;;;AAKA;ACxXA;AAKA;AACA;AAIA;;;;;;;;;;;;;;;;AAoBA;;;;AC0BA;AACA;;;;AAIA;;AAEA;AACA;;;;;;AAMA;AAGA;AACA;AACA;AACA;AACA;;;;AAIA;;;AAKA;;AAEA;;;;;AAKA;;;AAIA;AACA;;;AAGA;AACA;;;;AAIA;;;AAKA;;;;AA7DA;;;;;;;;;;;;;;AA2FA;;ACxIA;AACA;AACA;AACA;;;;AAIA;;AAIA;;;;;AAUA;;AAdA;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8EA","sources":["webpack://home-assistant-frontend/./hassio/src/components/supervisor-backup-content.ts","webpack://home-assistant-frontend/./hassio/src/components/supervisor-formfield-label.ts","webpack://home-assistant-frontend/./hassio/src/dialogs/backup/dialog-hassio-backup.ts","webpack://home-assistant-frontend/./src/components/buttons/ha-progress-button.ts"],"sourcesContent":["import { mdiFolder, mdiHomeAssistant, mdiPuzzle } from \"@mdi/js\";\nimport { PaperInputElement } from \"@polymer/paper-input/paper-input\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { atLeastVersion } from \"../../../src/common/config/version\";\nimport { formatDate } from \"../../../src/common/datetime/format_date\";\nimport { formatDateTime } from \"../../../src/common/datetime/format_date_time\";\nimport { LocalizeFunc } from \"../../../src/common/translations/localize\";\nimport \"../../../src/components/ha-checkbox\";\nimport \"../../../src/components/ha-formfield\";\nimport \"../../../src/components/ha-radio\";\nimport type { HaRadio } from \"../../../src/components/ha-radio\";\nimport {\n  HassioFullBackupCreateParams,\n  HassioPartialBackupCreateParams,\n  HassioBackupDetail,\n} from \"../../../src/data/hassio/backup\";\nimport { Supervisor } from \"../../../src/data/supervisor/supervisor\";\nimport { PolymerChangedEvent } from \"../../../src/polymer-types\";\nimport { HomeAssistant, TranslationDict } from \"../../../src/types\";\nimport \"./supervisor-formfield-label\";\n\ntype BackupOrRestoreKey = keyof TranslationDict[\"supervisor\"][\"backup\"] &\n  keyof TranslationDict[\"ui\"][\"panel\"][\"page-onboarding\"][\"restore\"];\n\ninterface CheckboxItem {\n  slug: string;\n  checked: boolean;\n  name: string;\n}\n\ninterface AddonCheckboxItem extends CheckboxItem {\n  version: string;\n}\n\nconst _computeFolders = (folders): CheckboxItem[] => {\n  const list: CheckboxItem[] = [];\n  if (folders.includes(\"ssl\")) {\n    list.push({ slug: \"ssl\", name: \"SSL\", checked: false });\n  }\n  if (folders.includes(\"share\")) {\n    list.push({ slug: \"share\", name: \"Share\", checked: false });\n  }\n  if (folders.includes(\"media\")) {\n    list.push({ slug: \"media\", name: \"Media\", checked: false });\n  }\n  if (folders.includes(\"addons/local\")) {\n    list.push({ slug: \"addons/local\", name: \"Local add-ons\", checked: false });\n  }\n  return list.sort((a, b) => (a.name > b.name ? 1 : -1));\n};\n\nconst _computeAddons = (addons): AddonCheckboxItem[] =>\n  addons\n    .map((addon) => ({\n      slug: addon.slug,\n      name: addon.name,\n      version: addon.version,\n      checked: false,\n    }))\n    .sort((a, b) => (a.name > b.name ? 1 : -1));\n\n@customElement(\"supervisor-backup-content\")\nexport class SupervisorBackupContent extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public localize?: LocalizeFunc;\n\n  @property({ attribute: false }) public supervisor?: Supervisor;\n\n  @property({ attribute: false }) public backup?: HassioBackupDetail;\n\n  @property() public backupType: HassioBackupDetail[\"type\"] = \"full\";\n\n  @property({ attribute: false }) public folders?: CheckboxItem[];\n\n  @property({ attribute: false }) public addons?: AddonCheckboxItem[];\n\n  @property({ type: Boolean }) public homeAssistant = false;\n\n  @property({ type: Boolean }) public backupHasPassword = false;\n\n  @property({ type: Boolean }) public onboarding = false;\n\n  @property() public backupName = \"\";\n\n  @property() public backupPassword = \"\";\n\n  @property() public confirmBackupPassword = \"\";\n\n  @query(\"paper-input, ha-radio, ha-checkbox\", true) private _focusTarget;\n\n  public willUpdate(changedProps) {\n    super.willUpdate(changedProps);\n    if (!this.hasUpdated) {\n      this.folders = _computeFolders(\n        this.backup\n          ? this.backup.folders\n          : [\"ssl\", \"share\", \"media\", \"addons/local\"]\n      );\n      this.addons = _computeAddons(\n        this.backup ? this.backup.addons : this.supervisor?.addon.addons\n      );\n      this.backupType = this.backup?.type || \"full\";\n      this.backupName = this.backup?.name || \"\";\n      this.backupHasPassword = this.backup?.protected || false;\n    }\n  }\n\n  public override focus() {\n    this._focusTarget?.focus();\n  }\n\n  private _localize = (key: BackupOrRestoreKey) =>\n    this.supervisor?.localize(`backup.${key}`) ||\n    this.localize!(`ui.panel.page-onboarding.restore.${key}`);\n\n  protected render(): TemplateResult {\n    if (!this.onboarding && !this.supervisor) {\n      return html``;\n    }\n    const foldersSection =\n      this.backupType === \"partial\" ? this._getSection(\"folders\") : undefined;\n    const addonsSection =\n      this.backupType === \"partial\" ? this._getSection(\"addons\") : undefined;\n\n    return html`\n      ${this.backup\n        ? html`<div class=\"details\">\n            ${this.backup.type === \"full\"\n              ? this._localize(\"full_backup\")\n              : this._localize(\"partial_backup\")}\n            (${Math.ceil(this.backup.size * 10) / 10 + \" MB\"})<br />\n            ${this.hass\n              ? formatDateTime(new Date(this.backup.date), this.hass.locale)\n              : this.backup.date}\n          </div>`\n        : html`<paper-input\n            name=\"backupName\"\n            .label=${this._localize(\"name\")}\n            .value=${this.backupName}\n            @value-changed=${this._handleTextValueChanged}\n          >\n          </paper-input>`}\n      ${!this.backup || this.backup.type === \"full\"\n        ? html`<div class=\"sub-header\">\n              ${!this.backup\n                ? this._localize(\"type\")\n                : this._localize(\"select_type\")}\n            </div>\n            <div class=\"backup-types\">\n              <ha-formfield .label=${this._localize(\"full_backup\")}>\n                <ha-radio\n                  @change=${this._handleRadioValueChanged}\n                  value=\"full\"\n                  name=\"backupType\"\n                  .checked=${this.backupType === \"full\"}\n                >\n                </ha-radio>\n              </ha-formfield>\n              <ha-formfield .label=${this._localize(\"partial_backup\")}>\n                <ha-radio\n                  @change=${this._handleRadioValueChanged}\n                  value=\"partial\"\n                  name=\"backupType\"\n                  .checked=${this.backupType === \"partial\"}\n                >\n                </ha-radio>\n              </ha-formfield>\n            </div>`\n        : \"\"}\n      ${this.backupType === \"partial\"\n        ? html`<div class=\"partial-picker\">\n            ${!this.backup || this.backup.homeassistant\n              ? html`<ha-formfield\n                  .label=${html`<supervisor-formfield-label\n                    label=\"Home Assistant\"\n                    .iconPath=${mdiHomeAssistant}\n                    .version=${this.backup\n                      ? this.backup.homeassistant\n                      : this.hass.config.version}\n                  >\n                  </supervisor-formfield-label>`}\n                >\n                  <ha-checkbox\n                    .checked=${this.homeAssistant}\n                    @change=${this.toggleHomeAssistant}\n                  >\n                  </ha-checkbox>\n                </ha-formfield>`\n              : \"\"}\n            ${foldersSection?.templates.length\n              ? html`\n                  <ha-formfield\n                    .label=${html`<supervisor-formfield-label\n                      .label=${this._localize(\"folders\")}\n                      .iconPath=${mdiFolder}\n                    >\n                    </supervisor-formfield-label>`}\n                  >\n                    <ha-checkbox\n                      @change=${this._toggleSection}\n                      .checked=${foldersSection.checked}\n                      .indeterminate=${foldersSection.indeterminate}\n                      .section=${\"folders\"}\n                    >\n                    </ha-checkbox>\n                  </ha-formfield>\n                  <div class=\"section-content\">${foldersSection.templates}</div>\n                `\n              : \"\"}\n            ${addonsSection?.templates.length\n              ? html`\n                  <ha-formfield\n                    .label=${html`<supervisor-formfield-label\n                      .label=${this._localize(\"addons\")}\n                      .iconPath=${mdiPuzzle}\n                    >\n                    </supervisor-formfield-label>`}\n                  >\n                    <ha-checkbox\n                      @change=${this._toggleSection}\n                      .checked=${addonsSection.checked}\n                      .indeterminate=${addonsSection.indeterminate}\n                      .section=${\"addons\"}\n                    >\n                    </ha-checkbox>\n                  </ha-formfield>\n                  <div class=\"section-content\">${addonsSection.templates}</div>\n                `\n              : \"\"}\n          </div> `\n        : \"\"}\n      ${this.backupType === \"partial\" &&\n      (!this.backup || this.backupHasPassword)\n        ? html`<hr />`\n        : \"\"}\n      ${!this.backup\n        ? html`<ha-formfield\n            class=\"password\"\n            .label=${this._localize(\"password_protection\")}\n          >\n            <ha-checkbox\n              .checked=${this.backupHasPassword}\n              @change=${this._toggleHasPassword}\n            >\n            </ha-checkbox>\n          </ha-formfield>`\n        : \"\"}\n      ${this.backupHasPassword\n        ? html`\n            <paper-input\n              .label=${this._localize(\"password\")}\n              type=\"password\"\n              name=\"backupPassword\"\n              .value=${this.backupPassword}\n              @value-changed=${this._handleTextValueChanged}\n            >\n            </paper-input>\n            ${!this.backup\n              ? html` <paper-input\n                  .label=${this._localize(\"confirm_password\")}\n                  type=\"password\"\n                  name=\"confirmBackupPassword\"\n                  .value=${this.confirmBackupPassword}\n                  @value-changed=${this._handleTextValueChanged}\n                >\n                </paper-input>`\n              : \"\"}\n          `\n        : \"\"}\n    `;\n  }\n\n  private toggleHomeAssistant() {\n    this.homeAssistant = !this.homeAssistant;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .partial-picker ha-formfield {\n        display: block;\n      }\n      .partial-picker ha-checkbox {\n        --mdc-checkbox-touch-target-size: 32px;\n      }\n      .partial-picker {\n        display: block;\n        margin: 0px -6px;\n      }\n      supervisor-formfield-label {\n        display: inline-flex;\n        align-items: center;\n      }\n      hr {\n        border-color: var(--divider-color);\n        border-bottom: none;\n        margin: 16px 0;\n      }\n      .details {\n        color: var(--secondary-text-color);\n      }\n      .section-content {\n        display: flex;\n        flex-direction: column;\n        margin-left: 30px;\n      }\n      ha-formfield.password {\n        display: block;\n        margin: 0 -14px -16px;\n      }\n      .backup-types {\n        display: flex;\n        margin-left: -13px;\n      }\n      .sub-header {\n        margin-top: 8px;\n      }\n    `;\n  }\n\n  public backupDetails():\n    | HassioPartialBackupCreateParams\n    | HassioFullBackupCreateParams {\n    const data: any = {};\n\n    if (!this.backup) {\n      data.name = this.backupName || formatDate(new Date(), this.hass.locale);\n    }\n\n    if (this.backupHasPassword) {\n      data.password = this.backupPassword;\n      if (!this.backup) {\n        data.confirm_password = this.confirmBackupPassword;\n      }\n    }\n\n    if (this.backupType === \"full\") {\n      return data;\n    }\n\n    const addons = this.addons\n      ?.filter((addon) => addon.checked)\n      .map((addon) => addon.slug);\n    const folders = this.folders\n      ?.filter((folder) => folder.checked)\n      .map((folder) => folder.slug);\n\n    if (addons?.length) {\n      data.addons = addons;\n    }\n    if (folders?.length) {\n      data.folders = folders;\n    }\n    data.homeassistant = this.homeAssistant;\n\n    return data;\n  }\n\n  private _getSection(section: string) {\n    const templates: TemplateResult[] = [];\n    const addons =\n      section === \"addons\"\n        ? new Map(\n            this.supervisor?.addon.addons.map((item) => [item.slug, item])\n          )\n        : undefined;\n    let checkedItems = 0;\n    this[section].forEach((item) => {\n      templates.push(html`<ha-formfield\n        .label=${html`<supervisor-formfield-label\n          .label=${item.name}\n          .iconPath=${section === \"addons\" ? mdiPuzzle : mdiFolder}\n          .imageUrl=${section === \"addons\" &&\n          !this.onboarding &&\n          atLeastVersion(this.hass.config.version, 0, 105) &&\n          addons?.get(item.slug)?.icon\n            ? `/api/hassio/addons/${item.slug}/icon`\n            : undefined}\n          .version=${item.version}\n        >\n        </supervisor-formfield-label>`}\n      >\n        <ha-checkbox\n          .item=${item}\n          .checked=${item.checked}\n          .section=${section}\n          @change=${this._updateSectionEntry}\n        >\n        </ha-checkbox>\n      </ha-formfield>`);\n\n      if (item.checked) {\n        checkedItems++;\n      }\n    });\n\n    const checked = checkedItems === this[section].length;\n\n    return {\n      templates,\n      checked,\n      indeterminate: !checked && checkedItems !== 0,\n    };\n  }\n\n  private _handleRadioValueChanged(ev: CustomEvent) {\n    const input = ev.currentTarget as HaRadio;\n    this[input.name] = input.value;\n  }\n\n  private _handleTextValueChanged(ev: PolymerChangedEvent<string>) {\n    const input = ev.currentTarget as PaperInputElement;\n    this[input.name!] = ev.detail.value;\n  }\n\n  private _toggleHasPassword(): void {\n    this.backupHasPassword = !this.backupHasPassword;\n  }\n\n  private _toggleSection(ev): void {\n    const section = ev.currentTarget.section;\n\n    this[section] = (section === \"addons\" ? this.addons : this.folders)!.map(\n      (item) => ({\n        ...item,\n        checked: ev.currentTarget.checked,\n      })\n    );\n  }\n\n  private _updateSectionEntry(ev): void {\n    const item = ev.currentTarget.item;\n    const section = ev.currentTarget.section;\n    this[section] = this[section].map((entry) =>\n      entry.slug === item.slug\n        ? {\n            ...entry,\n            checked: ev.currentTarget.checked,\n          }\n        : entry\n    );\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"supervisor-backup-content\": SupervisorBackupContent;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../../../src/components/ha-svg-icon\";\n\n@customElement(\"supervisor-formfield-label\")\nclass SupervisorFormfieldLabel extends LitElement {\n  @property({ type: String }) public label!: string;\n\n  @property({ type: String }) public imageUrl?: string;\n\n  @property({ type: String }) public iconPath?: string;\n\n  @property({ type: String }) public version?: string;\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.imageUrl\n        ? html`<img loading=\"lazy\" .src=${this.imageUrl} class=\"icon\" />`\n        : this.iconPath\n        ? html`<ha-svg-icon .path=${this.iconPath} class=\"icon\"></ha-svg-icon>`\n        : \"\"}\n      <span class=\"label\">${this.label}</span>\n      ${this.version\n        ? html`<span class=\"version\">(${this.version})</span>`\n        : \"\"}\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n        align-items: center;\n      }\n      .label {\n        margin-right: 4px;\n      }\n      .version {\n        color: var(--secondary-text-color);\n      }\n      .icon {\n        max-height: 22px;\n        max-width: 22px;\n        margin-right: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"supervisor-formfield-label\": SupervisorFormfieldLabel;\n  }\n}\n","import { ActionDetail } from \"@material/mwc-list\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { mdiClose, mdiDotsVertical } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../src/common/dom/fire_event\";\nimport { slugify } from \"../../../../src/common/string/slugify\";\nimport \"../../../../src/components/buttons/ha-progress-button\";\nimport \"../../../../src/components/ha-alert\";\nimport \"../../../../src/components/ha-button-menu\";\nimport \"../../../../src/components/ha-header-bar\";\nimport \"../../../../src/components/ha-icon-button\";\nimport { getSignedPath } from \"../../../../src/data/auth\";\nimport { extractApiErrorMessage } from \"../../../../src/data/hassio/common\";\nimport {\n  fetchHassioBackupInfo,\n  HassioBackupDetail,\n} from \"../../../../src/data/hassio/backup\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../../src/dialogs/generic/show-dialog-box\";\nimport { HassDialog } from \"../../../../src/dialogs/make-dialog-manager\";\nimport { haStyle, haStyleDialog } from \"../../../../src/resources/styles\";\nimport { HomeAssistant } from \"../../../../src/types\";\nimport { fileDownload } from \"../../../../src/util/file_download\";\nimport \"../../components/supervisor-backup-content\";\nimport type { SupervisorBackupContent } from \"../../components/supervisor-backup-content\";\nimport { HassioBackupDialogParams } from \"./show-dialog-hassio-backup\";\nimport { atLeastVersion } from \"../../../../src/common/config/version\";\nimport { stopPropagation } from \"../../../../src/common/dom/stop_propagation\";\n\n@customElement(\"dialog-hassio-backup\")\nclass HassioBackupDialog\n  extends LitElement\n  implements HassDialog<HassioBackupDialogParams>\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _error?: string;\n\n  @state() private _backup?: HassioBackupDetail;\n\n  @state() private _dialogParams?: HassioBackupDialogParams;\n\n  @state() private _restoringBackup = false;\n\n  @query(\"supervisor-backup-content\")\n  private _backupContent!: SupervisorBackupContent;\n\n  public async showDialog(dialogParams: HassioBackupDialogParams) {\n    this._backup = await fetchHassioBackupInfo(this.hass, dialogParams.slug);\n    this._dialogParams = dialogParams;\n    this._restoringBackup = false;\n  }\n\n  public closeDialog() {\n    this._backup = undefined;\n    this._dialogParams = undefined;\n    this._restoringBackup = false;\n    this._error = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._dialogParams || !this._backup) {\n      return html``;\n    }\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        @closed=${this.closeDialog}\n        .heading=${this._backup.name}\n      >\n        <div slot=\"heading\">\n          <ha-header-bar>\n            <span slot=\"title\">${this._backup.name}</span>\n            <ha-icon-button\n              .label=${this.hass?.localize(\"ui.common.close\") || \"Close\"}\n              .path=${mdiClose}\n              slot=\"actionItems\"\n              dialogAction=\"cancel\"\n            ></ha-icon-button>\n          </ha-header-bar>\n        </div>\n        ${this._restoringBackup\n          ? html` <ha-circular-progress active></ha-circular-progress>`\n          : html`<supervisor-backup-content\n              .hass=${this.hass}\n              .supervisor=${this._dialogParams.supervisor}\n              .backup=${this._backup}\n              .onboarding=${this._dialogParams.onboarding || false}\n              .localize=${this._dialogParams.localize}\n              dialogInitialFocus\n            >\n            </supervisor-backup-content>`}\n        ${this._error\n          ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`\n          : \"\"}\n\n        <mwc-button\n          .disabled=${this._restoringBackup}\n          slot=\"secondaryAction\"\n          @click=${this._restoreClicked}\n        >\n          Restore\n        </mwc-button>\n\n        ${!this._dialogParams.onboarding\n          ? html`<ha-button-menu\n              fixed\n              slot=\"primaryAction\"\n              @action=${this._handleMenuAction}\n              @closed=${stopPropagation}\n            >\n              <ha-icon-button\n                .label=${this.hass!.localize(\"ui.common.menu\") || \"Menu\"}\n                .path=${mdiDotsVertical}\n                slot=\"trigger\"\n              ></ha-icon-button>\n              <mwc-list-item\n                >${this._dialogParams.supervisor?.localize(\n                  \"backup.download_backup\"\n                )}</mwc-list-item\n              >\n              <mwc-list-item class=\"error\"\n                >${this._dialogParams.supervisor?.localize(\n                  \"backup.delete_backup_title\"\n                )}</mwc-list-item\n              >\n            </ha-button-menu>`\n          : \"\"}\n      </ha-dialog>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      haStyleDialog,\n      css`\n        ha-circular-progress {\n          display: block;\n          text-align: center;\n        }\n        ha-header-bar {\n          --mdc-theme-on-primary: var(--primary-text-color);\n          --mdc-theme-primary: var(--mdc-theme-surface);\n          flex-shrink: 0;\n          display: block;\n        }\n        ha-icon-button {\n          color: var(--secondary-text-color);\n        }\n      `,\n    ];\n  }\n\n  private _handleMenuAction(ev: CustomEvent<ActionDetail>) {\n    switch (ev.detail.index) {\n      case 0:\n        this._downloadClicked();\n        break;\n      case 1:\n        this._deleteClicked();\n        break;\n    }\n  }\n\n  private async _restoreClicked() {\n    const backupDetails = this._backupContent.backupDetails();\n    this._restoringBackup = true;\n    if (this._backupContent.backupType === \"full\") {\n      await this._fullRestoreClicked(backupDetails);\n    } else {\n      await this._partialRestoreClicked(backupDetails);\n    }\n    this._restoringBackup = false;\n  }\n\n  private async _partialRestoreClicked(backupDetails) {\n    if (\n      this._dialogParams?.supervisor !== undefined &&\n      this._dialogParams?.supervisor.info.state !== \"running\"\n    ) {\n      await showAlertDialog(this, {\n        title: \"Could not restore backup\",\n        text: `Restoring a backup is not possible right now because the system is in ${this._dialogParams?.supervisor.info.state} state.`,\n      });\n      return;\n    }\n    if (\n      !(await showConfirmationDialog(this, {\n        title: \"Are you sure you want partially to restore this backup?\",\n        confirmText: \"restore\",\n        dismissText: \"cancel\",\n      }))\n    ) {\n      return;\n    }\n\n    if (!this._dialogParams?.onboarding) {\n      try {\n        await this.hass!.callApi(\n          \"POST\",\n\n          `hassio/${\n            atLeastVersion(this.hass!.config.version, 2021, 9)\n              ? \"backups\"\n              : \"snapshots\"\n          }/${this._backup!.slug}/restore/partial`,\n          backupDetails\n        );\n        this.closeDialog();\n      } catch (error: any) {\n        this._error = error.body.message;\n      }\n    } else {\n      fireEvent(this, \"restoring\");\n      await fetch(`/api/hassio/backups/${this._backup!.slug}/restore/partial`, {\n        method: \"POST\",\n        body: JSON.stringify(backupDetails),\n      });\n      this.closeDialog();\n    }\n  }\n\n  private async _fullRestoreClicked(backupDetails) {\n    if (\n      this._dialogParams?.supervisor !== undefined &&\n      this._dialogParams?.supervisor.info.state !== \"running\"\n    ) {\n      await showAlertDialog(this, {\n        title: \"Could not restore backup\",\n        text: `Restoring a backup is not possible right now because the system is in ${this._dialogParams?.supervisor.info.state} state.`,\n      });\n      return;\n    }\n    if (\n      !(await showConfirmationDialog(this, {\n        title:\n          \"Are you sure you want to wipe your system and restore this backup?\",\n        confirmText: \"restore\",\n        dismissText: \"cancel\",\n      }))\n    ) {\n      return;\n    }\n\n    if (!this._dialogParams?.onboarding) {\n      this.hass!.callApi(\n        \"POST\",\n        `hassio/${\n          atLeastVersion(this.hass!.config.version, 2021, 9)\n            ? \"backups\"\n            : \"snapshots\"\n        }/${this._backup!.slug}/restore/full`,\n        backupDetails\n      ).then(\n        () => {\n          this.closeDialog();\n        },\n        (error) => {\n          this._error = error.body.message;\n        }\n      );\n    } else {\n      fireEvent(this, \"restoring\");\n      fetch(`/api/hassio/backups/${this._backup!.slug}/restore/full`, {\n        method: \"POST\",\n        body: JSON.stringify(backupDetails),\n      });\n      this.closeDialog();\n    }\n  }\n\n  private async _deleteClicked() {\n    if (\n      !(await showConfirmationDialog(this, {\n        title: \"Are you sure you want to delete this backup?\",\n        confirmText: \"delete\",\n        dismissText: \"cancel\",\n      }))\n    ) {\n      return;\n    }\n\n    this.hass!.callApi(\n      atLeastVersion(this.hass!.config.version, 2021, 9) ? \"DELETE\" : \"POST\",\n      `hassio/${\n        atLeastVersion(this.hass!.config.version, 2021, 9)\n          ? `backups/${this._backup!.slug}`\n          : `snapshots/${this._backup!.slug}/remove`\n      }`\n    ).then(\n      () => {\n        if (this._dialogParams!.onDelete) {\n          this._dialogParams!.onDelete();\n        }\n        this.closeDialog();\n      },\n      (error) => {\n        this._error = error.body.message;\n      }\n    );\n  }\n\n  private async _downloadClicked() {\n    let signedPath: { path: string };\n    try {\n      signedPath = await getSignedPath(\n        this.hass!,\n        `/api/hassio/${\n          atLeastVersion(this.hass!.config.version, 2021, 9)\n            ? \"backups\"\n            : \"snapshots\"\n        }/${this._backup!.slug}/download`\n      );\n    } catch (err: any) {\n      await showAlertDialog(this, {\n        text: extractApiErrorMessage(err),\n      });\n      return;\n    }\n\n    if (window.location.href.includes(\"ui.nabu.casa\")) {\n      const confirm = await showConfirmationDialog(this, {\n        title: \"Potential slow download\",\n        text: \"Downloading backups over the Nabu Casa URL will take some time, it is recommended to use your local URL instead, do you want to continue?\",\n        confirmText: \"continue\",\n        dismissText: \"cancel\",\n      });\n      if (!confirm) {\n        return;\n      }\n    }\n\n    fileDownload(\n      signedPath.path,\n      `home_assistant_backup_${slugify(this._computeName)}.tar`\n    );\n  }\n\n  private get _computeName() {\n    return this._backup\n      ? this._backup.name || this._backup.slug\n      : \"Unnamed backup\";\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-hassio-backup\": HassioBackupDialog;\n  }\n}\n","import \"@material/mwc-button\";\nimport { mdiAlertOctagram, mdiCheckBold } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../ha-circular-progress\";\nimport \"../ha-svg-icon\";\n\n@customElement(\"ha-progress-button\")\nexport class HaProgressButton extends LitElement {\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public progress = false;\n\n  @property({ type: Boolean }) public raised = false;\n\n  @state() private _result?: \"success\" | \"error\";\n\n  public render(): TemplateResult {\n    const overlay = this._result || this.progress;\n    return html`\n      <mwc-button\n        ?raised=${this.raised}\n        .disabled=${this.disabled || this.progress}\n        @click=${this._buttonTapped}\n        class=${this._result || \"\"}\n      >\n        <slot></slot>\n      </mwc-button>\n      ${!overlay\n        ? \"\"\n        : html`\n            <div class=\"progress\">\n              ${this._result === \"success\"\n                ? html`<ha-svg-icon .path=${mdiCheckBold}></ha-svg-icon>`\n                : this._result === \"error\"\n                ? html`<ha-svg-icon .path=${mdiAlertOctagram}></ha-svg-icon>`\n                : this.progress\n                ? html`\n                    <ha-circular-progress\n                      size=\"small\"\n                      active\n                    ></ha-circular-progress>\n                  `\n                : \"\"}\n            </div>\n          `}\n    `;\n  }\n\n  public actionSuccess(): void {\n    this._setResult(\"success\");\n  }\n\n  public actionError(): void {\n    this._setResult(\"error\");\n  }\n\n  private _setResult(result: \"success\" | \"error\"): void {\n    this._result = result;\n    setTimeout(() => {\n      this._result = undefined;\n    }, 2000);\n  }\n\n  private _buttonTapped(ev: Event): void {\n    if (this.progress) {\n      ev.stopPropagation();\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        outline: none;\n        display: inline-block;\n        position: relative;\n      }\n\n      mwc-button {\n        transition: all 1s;\n      }\n\n      mwc-button.success {\n        --mdc-theme-primary: white;\n        background-color: var(--success-color);\n        transition: none;\n        border-radius: 4px;\n        pointer-events: none;\n      }\n\n      mwc-button[raised].success {\n        --mdc-theme-primary: var(--success-color);\n        --mdc-theme-on-primary: white;\n      }\n\n      mwc-button.error {\n        --mdc-theme-primary: white;\n        background-color: var(--error-color);\n        transition: none;\n        border-radius: 4px;\n        pointer-events: none;\n      }\n\n      mwc-button[raised].error {\n        --mdc-theme-primary: var(--error-color);\n        --mdc-theme-on-primary: white;\n      }\n\n      .progress {\n        bottom: 4px;\n        position: absolute;\n        text-align: center;\n        top: 4px;\n        width: 100%;\n      }\n\n      ha-svg-icon {\n        color: white;\n      }\n\n      mwc-button.success slot,\n      mwc-button.error slot {\n        visibility: hidden;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-progress-button\": HaProgressButton;\n  }\n}\n"],"names":[],"sourceRoot":""}