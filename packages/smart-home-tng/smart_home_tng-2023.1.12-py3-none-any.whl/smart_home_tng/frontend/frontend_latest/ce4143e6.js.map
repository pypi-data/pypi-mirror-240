{"version":3,"file":"ce4143e6.js","mappings":";AAaA;;AAEA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;;;;;;;;;;;;;;;;;;;ACtFA;;;;;AAYA;ACmCA;AAMA;AACA;;;;;AAKA;AACA;;AAEA;;;AAGA;;AAEA;AACA;;;AAGA;AAEA;AAGA;;;AAIA;AACA;AACA;;AAGA;AACA;;AAMA;;;;AASA;;AAIA;;;;AAOA;AAxBA;AA2BA;;AAGA;;AAGA;AACA;AACA;;AAGA;;AAEA;;AAGA;;AAEA;AAEA;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuFA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-header-bar.ts","webpack://home-assistant-frontend/./src/panels/config/logs/dialog-system-log-detail.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","// @ts-ignore\nimport topAppBarStyles from \"@material/top-app-bar/dist/mdc.top-app-bar.min.css\";\nimport { css, html, LitElement, unsafeCSS } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-header-bar\")\nexport class HaHeaderBar extends LitElement {\n  protected render() {\n    return html`<header class=\"mdc-top-app-bar\">\n      <div class=\"mdc-top-app-bar__row\">\n        <section\n          class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-start\"\n          id=\"navigation\"\n        >\n          <slot name=\"navigationIcon\"></slot>\n          <span class=\"mdc-top-app-bar__title\">\n            <slot name=\"title\"></slot>\n          </span>\n        </section>\n        <section\n          class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-end\"\n          id=\"actions\"\n          role=\"toolbar\"\n        >\n          <slot name=\"actionItems\"></slot>\n        </section>\n      </div>\n    </header>`;\n  }\n\n  static get styles() {\n    return [\n      unsafeCSS(topAppBarStyles),\n      css`\n        .mdc-top-app-bar {\n          position: static;\n          color: var(--mdc-theme-on-primary, #fff);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-header-bar\": HaHeaderBar;\n  }\n}\n","import { mdiClose, mdiContentCopy } from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { copyToClipboard } from \"../../../common/util/copy-clipboard\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-dialog\";\nimport \"../../../components/ha-header-bar\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-svg-icon\";\nimport {\n  domainToName,\n  fetchIntegrationManifest,\n  integrationIssuesUrl,\n  IntegrationManifest,\n} from \"../../../data/integration\";\nimport {\n  getLoggedErrorIntegration,\n  isCustomIntegrationError,\n} from \"../../../data/system_log\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport { showToast } from \"../../../util/toast\";\nimport type { SystemLogDetailDialogParams } from \"./show-dialog-system-log-detail\";\nimport { formatSystemLogTime } from \"./util\";\n\nclass DialogSystemLogDetail extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _params?: SystemLogDetailDialogParams;\n\n  @state() private _manifest?: IntegrationManifest;\n\n  public async showDialog(params: SystemLogDetailDialogParams): Promise<void> {\n    this._params = params;\n    this._manifest = undefined;\n    await this.updateComplete;\n  }\n\n  public closeDialog() {\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    if (!changedProps.has(\"_params\") || !this._params) {\n      return;\n    }\n    const integration = getLoggedErrorIntegration(this._params.item);\n    if (integration) {\n      this._fetchManifest(integration);\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n    const item = this._params.item;\n\n    const integration = getLoggedErrorIntegration(item);\n\n    const showDocumentation =\n      this._manifest &&\n      (this._manifest.is_built_in ||\n        // Custom components with our official docs should not link to our docs\n        !this._manifest.documentation.includes(\"://www.home-assistant.io\"));\n\n    const title = this.hass.localize(\n      \"ui.panel.config.logs.details\",\n      \"level\",\n      html`<span class=${item.level.toLowerCase()}\n        >${this.hass.localize(\n          `ui.panel.config.logs.level.${item.level.toLowerCase()}`\n        )}</span\n      >`\n    );\n\n    return html`\n      <ha-dialog open @closed=${this.closeDialog} hideActions .heading=${title}>\n        <ha-header-bar slot=\"heading\">\n          <ha-icon-button\n            slot=\"navigationIcon\"\n            dialogAction=\"cancel\"\n            .label=${this.hass.localize(\"ui.common.close\")}\n            .path=${mdiClose}\n          ></ha-icon-button>\n          <span slot=\"title\"> ${title} </span>\n          <ha-icon-button\n            id=\"copy\"\n            @click=${this._copyLog}\n            slot=\"actionItems\"\n            .label=${this.hass.localize(\"ui.panel.config.logs.copy\")}\n            .path=${mdiContentCopy}\n          ></ha-icon-button>\n        </ha-header-bar>\n        ${this.isCustomIntegration\n          ? html`<ha-alert alert-type=\"warning\">\n              ${this.hass.localize(\n                \"ui.panel.config.logs.error_from_custom_integration\"\n              )}\n            </ha-alert>`\n          : \"\"}\n        <div class=\"contents\" tabindex=\"-1\" dialogInitialFocus>\n          <p>\n            Logger: ${item.name}<br />\n            Source: ${item.source.join(\":\")}\n            ${integration\n              ? html`\n                  <br />\n                  Integration: ${domainToName(this.hass.localize, integration)}\n                  ${!this._manifest ||\n                  // Can happen with custom integrations\n                  !showDocumentation\n                    ? \"\"\n                    : html`\n                        (<a\n                          href=${this._manifest.is_built_in\n                            ? documentationUrl(\n                                this.hass,\n                                `/integrations/${this._manifest.domain}`\n                              )\n                            : this._manifest.documentation}\n                          target=\"_blank\"\n                          rel=\"noreferrer\"\n                          >documentation</a\n                        >${this._manifest.is_built_in ||\n                        this._manifest.issue_tracker\n                          ? html`,\n                              <a\n                                href=${integrationIssuesUrl(\n                                  integration,\n                                  this._manifest\n                                )}\n                                target=\"_blank\"\n                                rel=\"noreferrer\"\n                                >issues</a\n                              >`\n                          : \"\"})\n                      `}\n                `\n              : \"\"}\n            <br />\n            ${item.count > 0\n              ? html`\n                  First occurred:\n                  ${formatSystemLogTime(item.first_occurred, this.hass!.locale)}\n                  (${item.count} occurrences) <br />\n                `\n              : \"\"}\n            Last logged:\n            ${formatSystemLogTime(item.timestamp, this.hass!.locale)}\n          </p>\n          ${item.message.length > 1\n            ? html`\n                <ul>\n                  ${item.message.map((msg) => html` <li>${msg}</li> `)}\n                </ul>\n              `\n            : item.message[0]}\n          ${item.exception ? html` <pre>${item.exception}</pre> ` : html``}\n        </div>\n      </ha-dialog>\n    `;\n  }\n\n  private get isCustomIntegration(): boolean {\n    return this._manifest\n      ? !this._manifest.is_built_in\n      : isCustomIntegrationError(this._params!.item);\n  }\n\n  private async _fetchManifest(integration: string) {\n    try {\n      this._manifest = await fetchIntegrationManifest(this.hass, integration);\n    } catch (err: any) {\n      // Ignore if loading manifest fails. Probably bad JSON in manifest\n    }\n  }\n\n  private async _copyLog(): Promise<void> {\n    const copyElement = this.shadowRoot?.querySelector(\n      \".contents\"\n    ) as HTMLElement;\n\n    let text = copyElement.innerText;\n\n    if (this.isCustomIntegration) {\n      text =\n        this.hass.localize(\n          \"ui.panel.config.logs.error_from_custom_integration\"\n        ) +\n        \"\\n\\n\" +\n        text;\n    }\n\n    await copyToClipboard(text);\n    showToast(this, {\n      message: this.hass.localize(\"ui.common.copied_clipboard\"),\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --dialog-content-padding: 0px;\n        }\n\n        a {\n          color: var(--primary-color);\n        }\n        p {\n          margin-top: 0;\n        }\n        pre {\n          margin-bottom: 0;\n          font-family: var(--code-font-family, monospace);\n        }\n        ha-alert {\n          display: block;\n          margin: -4px 0;\n        }\n        .contents {\n          padding: 16px;\n          outline: none;\n          direction: ltr;\n        }\n        .error {\n          color: var(--error-color);\n        }\n        .warning {\n          color: var(--warning-color);\n        }\n\n        ha-header-bar {\n          --mdc-theme-on-primary: var(--primary-text-color);\n          --mdc-theme-primary: var(--mdc-theme-surface);\n          flex-shrink: 0;\n          border-bottom: 1px solid\n            var(--mdc-dialog-scroll-divider-color, rgba(0, 0, 0, 0.12));\n        }\n\n        @media all and (min-width: 451px) and (min-height: 501px) {\n          ha-dialog {\n            --mdc-dialog-max-width: 90vw;\n          }\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-system-log-detail\": DialogSystemLogDetail;\n  }\n}\n\ncustomElements.define(\"dialog-system-log-detail\", DialogSystemLogDetail);\n"],"names":[],"sourceRoot":""}