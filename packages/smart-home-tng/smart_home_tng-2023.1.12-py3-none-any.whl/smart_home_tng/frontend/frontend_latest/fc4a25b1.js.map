{"version":3,"file":"fc4a25b1.js","mappings":";;AAsDA;AACA;AACA;AAgFA;AACA;AACA;;AAkBA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;AAMA;;AAEA;;;;;AAMA","sources":["webpack://home-assistant-frontend/./src/panels/config/users/ha-config-users.ts"],"sourcesContent":["import { mdiCheck, mdiPlus } from \"@mdi/js\";\nimport { html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { HASSDomEvent } from \"../../../common/dom/fire_event\";\nimport { LocalizeFunc } from \"../../../common/translations/localize\";\nimport {\n  DataTableColumnContainer,\n  RowClickedEvent,\n} from \"../../../components/data-table/ha-data-table\";\nimport \"../../../components/data-table/ha-data-table-icon\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-help-tooltip\";\nimport \"../../../components/ha-svg-icon\";\nimport {\n  computeUserBadges,\n  deleteUser,\n  fetchUsers,\n  updateUser,\n  User,\n} from \"../../../data/user\";\nimport { showConfirmationDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-tabs-subpage-data-table\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { configSections } from \"../ha-panel-config\";\nimport { showAddUserDialog } from \"./show-dialog-add-user\";\nimport { showUserDetailDialog } from \"./show-dialog-user-detail\";\n\n@customElement(\"ha-config-users\")\nexport class HaConfigUsers extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public _users: User[] = [];\n\n  @property({ type: Boolean }) public isWide!: boolean;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property({ attribute: false }) public route!: Route;\n\n  private _columns = memoizeOne(\n    (narrow: boolean, localize: LocalizeFunc): DataTableColumnContainer => {\n      const columns: DataTableColumnContainer<User> = {\n        name: {\n          title: localize(\"ui.panel.config.users.picker.headers.name\"),\n          sortable: true,\n          filterable: true,\n          width: \"25%\",\n          direction: \"asc\",\n          grows: true,\n          template: (name, user) =>\n            narrow\n              ? html` ${name}<br />\n                  <div class=\"secondary\">\n                    ${user.username ? `${user.username} |` : \"\"}\n                    ${localize(`groups.${user.group_ids[0]}`)}\n                  </div>`\n              : html` ${name ||\n                this.hass!.localize(\n                  \"ui.panel.config.users.editor.unnamed_user\"\n                )}`,\n        },\n        username: {\n          title: localize(\"ui.panel.config.users.picker.headers.username\"),\n          sortable: true,\n          filterable: true,\n          width: \"20%\",\n          direction: \"asc\",\n          hidden: narrow,\n          template: (username) => html`${username || \"â€”\"}`,\n        },\n        group_ids: {\n          title: localize(\"ui.panel.config.users.picker.headers.group\"),\n          sortable: true,\n          filterable: true,\n          width: \"20%\",\n          direction: \"asc\",\n          hidden: narrow,\n          template: (groupIds: User[\"group_ids\"]) =>\n            html` ${localize(`groups.${groupIds[0]}`)} `,\n        },\n        is_active: {\n          title: this.hass.localize(\n            \"ui.panel.config.users.picker.headers.is_active\"\n          ),\n          type: \"icon\",\n          sortable: true,\n          filterable: true,\n          width: \"80px\",\n          hidden: narrow,\n          template: (is_active) =>\n            is_active\n              ? html`<ha-svg-icon .path=${mdiCheck}></ha-svg-icon>`\n              : \"\",\n        },\n        system_generated: {\n          title: this.hass.localize(\n            \"ui.panel.config.users.picker.headers.system\"\n          ),\n          type: \"icon\",\n          sortable: true,\n          filterable: true,\n          width: \"80px\",\n          hidden: narrow,\n          template: (generated) =>\n            generated\n              ? html`<ha-svg-icon .path=${mdiCheck}></ha-svg-icon>`\n              : \"\",\n        },\n        local_only: {\n          title: this.hass.localize(\n            \"ui.panel.config.users.picker.headers.local\"\n          ),\n          type: \"icon\",\n          sortable: true,\n          filterable: true,\n          width: \"80px\",\n          hidden: narrow,\n          template: (local) =>\n            local ? html`<ha-svg-icon .path=${mdiCheck}></ha-svg-icon>` : \"\",\n        },\n        icons: {\n          title: \"\",\n          label: this.hass.localize(\n            \"ui.panel.config.users.picker.headers.icon\"\n          ),\n          type: \"icon\",\n          sortable: false,\n          filterable: false,\n          width: \"104px\",\n          hidden: !narrow,\n          template: (_, user) => {\n            const badges = computeUserBadges(this.hass, user, false);\n            return html`${badges.map(\n              ([icon, tooltip]) =>\n                html`<ha-data-table-icon\n                  .path=${icon}\n                  .tooltip=${tooltip}\n                ></ha-data-table-icon>`\n            )}`;\n          },\n        },\n      };\n\n      return columns;\n    }\n  );\n\n  protected firstUpdated(changedProperties: PropertyValues) {\n    super.firstUpdated(changedProperties);\n    this._fetchUsers();\n  }\n\n  protected render() {\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        backPath=\"/config\"\n        .tabs=${configSections.persons}\n        .columns=${this._columns(this.narrow, this.hass.localize)}\n        .data=${this._users}\n        @row-click=${this._editUser}\n        hasFab\n        clickable\n      >\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\"ui.panel.config.users.picker.add_user\")}\n          extended\n          @click=${this._addUser}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  private async _fetchUsers() {\n    this._users = await fetchUsers(this.hass);\n\n    this._users.forEach((user) => {\n      if (user.is_owner) {\n        user.group_ids.unshift(\"owner\");\n      }\n    });\n  }\n\n  private _editUser(ev: HASSDomEvent<RowClickedEvent>) {\n    const id = ev.detail.id;\n    const entry = this._users.find((user) => user.id === id);\n\n    if (!entry) {\n      return;\n    }\n\n    showUserDetailDialog(this, {\n      entry,\n      updateEntry: async (values) => {\n        const updated = await updateUser(this.hass!, entry!.id, values);\n        this._users = this._users!.map((ent) =>\n          ent === entry ? updated.user : ent\n        );\n      },\n      removeEntry: async () => {\n        if (\n          !(await showConfirmationDialog(this, {\n            title: this.hass!.localize(\n              \"ui.panel.config.users.editor.confirm_user_deletion\",\n              \"name\",\n              entry.name\n            ),\n            dismissText: this.hass!.localize(\"ui.common.cancel\"),\n            confirmText: this.hass!.localize(\"ui.common.delete\"),\n          }))\n        ) {\n          return false;\n        }\n\n        try {\n          await deleteUser(this.hass!, entry!.id);\n          this._users = this._users!.filter((ent) => ent !== entry);\n          return true;\n        } catch (err: any) {\n          return false;\n        }\n      },\n    });\n  }\n\n  private _addUser() {\n    showAddUserDialog(this, {\n      userAddedCallback: async (user: User) => {\n        if (user) {\n          this._users = [...this._users, user];\n        }\n      },\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-users\": HaConfigUsers;\n  }\n}\n"],"names":[],"sourceRoot":""}