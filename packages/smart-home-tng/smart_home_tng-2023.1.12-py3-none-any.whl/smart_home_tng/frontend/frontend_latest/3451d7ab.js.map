{"version":3,"file":"3451d7ab.js","mappings":";;AAsFA;;;AAGA;AAEA;AC9EA;;AAEA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;;;;;;;;;;;;;ACzEA;;;;AC3BA;;;AC6BA;AACA;;;;;;;;;;;;AAcA;;;;;AAQA;AACA;;;;;AAKA;;;;;AAOA;AACA;;;AAGA;AAEA;;;;;AAOA;AACA;;AAEA;;AAGA;AACA;;AAIA;AACA;;;AAnEA","sources":["webpack://home-assistant-frontend/mwc-formfield-base.ts","webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-formfield.ts","webpack://home-assistant-frontend/./src/components/ha-radio.ts","webpack://home-assistant-frontend/./src/panels/developer-tools/statistics/dialog-statistics-fix-units-changed.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n// tslint:disable:no-new-decorators\n\nimport {MDCFormFieldAdapter} from '@material/form-field/adapter.js';\nimport MDCFormFieldFoundation from '@material/form-field/foundation.js';\nimport {BaseElement, EventType, SpecificEventListener} from '@material/mwc-base/base-element.js';\nimport {FormElement} from '@material/mwc-base/form-element.js';\nimport {observer} from '@material/mwc-base/observer.js';\nimport {html} from 'lit';\nimport {property, query, queryAssignedNodes} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\n\nexport class FormfieldBase extends BaseElement {\n  @property({type: Boolean}) alignEnd = false;\n  @property({type: Boolean}) spaceBetween = false;\n  @property({type: Boolean}) nowrap = false;\n\n  @property({type: String})\n  @observer(async function(this: FormfieldBase, label: string) {\n    this.input?.setAttribute('aria-label', label);\n  })\n  label = '';\n\n  @query('.mdc-form-field') protected mdcRoot!: HTMLElement;\n\n  protected mdcFoundation!: MDCFormFieldFoundation;\n\n  protected readonly mdcFoundationClass = MDCFormFieldFoundation;\n\n  protected createAdapter(): MDCFormFieldAdapter {\n    return {\n      registerInteractionHandler:\n          <K extends EventType>(type: K, handler: SpecificEventListener<K>) => {\n            this.labelEl.addEventListener(type, handler);\n          },\n      deregisterInteractionHandler:\n          <K extends EventType>(type: K, handler: SpecificEventListener<K>) => {\n            this.labelEl.removeEventListener(type, handler);\n          },\n      activateInputRipple: async () => {\n        const input = this.input;\n        if (input instanceof FormElement) {\n          const ripple = await input.ripple;\n          if (ripple) {\n            ripple.startPress();\n          }\n        }\n      },\n      deactivateInputRipple: async () => {\n        const input = this.input;\n        if (input instanceof FormElement) {\n          const ripple = await input.ripple;\n          if (ripple) {\n            ripple.endPress();\n          }\n        }\n      },\n    };\n  }\n\n  @queryAssignedNodes('', true, '*')\n  protected slottedInputs!: HTMLElement[]|null;\n\n  @query('label') protected labelEl!: HTMLLabelElement;\n\n  protected get input() {\n    return this.slottedInputs?.[0] ?? null;\n  }\n\n  protected override render() {\n    const classes = {\n      'mdc-form-field--align-end': this.alignEnd,\n      'mdc-form-field--space-between': this.spaceBetween,\n      'mdc-form-field--nowrap': this.nowrap\n    };\n\n    return html`\n      <div class=\"mdc-form-field ${classMap(classes)}\">\n        <slot></slot>\n        <label class=\"mdc-label\"\n               @click=\"${this._labelClick}\">${this.label}</label>\n      </div>`;\n  }\n\n  override click() {\n    this._labelClick();\n  }\n\n  protected _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      input.click();\n    }\n  }\n}\n","import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { FormfieldBase } from \"@material/mwc-formfield/mwc-formfield-base\";\nimport { styles } from \"@material/mwc-formfield/mwc-formfield.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n@customElement(\"ha-formfield\")\nexport class HaFormfield extends FormfieldBase {\n  protected _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      switch (input.tagName) {\n        case \"HA-CHECKBOX\":\n        case \"HA-RADIO\":\n          (input as any).checked = !(input as any).checked;\n          fireEvent(input, \"change\");\n          break;\n        default:\n          input.click();\n          break;\n      }\n    }\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host(:not([alignEnd])) ::slotted(ha-switch) {\n        margin-right: 10px;\n        margin-inline-end: 10px;\n        margin-inline-start: inline;\n      }\n      .mdc-form-field > label {\n        direction: var(--direction);\n        margin-inline-start: 0;\n        margin-inline-end: auto;\n        padding-inline-start: 4px;\n        padding-inline-end: 0;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-formfield\": HaFormfield;\n  }\n}\n","import { RadioBase } from \"@material/mwc-radio/mwc-radio-base\";\nimport { styles } from \"@material/mwc-radio/mwc-radio.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-radio\")\nexport class HaRadio extends RadioBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-radio\": HaRadio;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { LitElement, TemplateResult, html, CSSResultGroup } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../../components/ha-dialog\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { haStyle, haStyleDialog } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport {\n  changeStatisticUnit,\n  clearStatistics,\n  updateStatisticsMetadata,\n} from \"../../../data/recorder\";\nimport \"../../../components/ha-formfield\";\nimport \"../../../components/ha-radio\";\nimport type { DialogStatisticsUnitsChangedParams } from \"./show-dialog-statistics-fix-units-changed\";\n\n@customElement(\"dialog-statistics-fix-units-changed\")\nexport class DialogStatisticsFixUnitsChanged extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _params?: DialogStatisticsUnitsChangedParams;\n\n  @state() private _action?: \"update\" | \"clear\" | \"change\";\n\n  public showDialog(params: DialogStatisticsUnitsChangedParams): void {\n    this._params = params;\n    this._action = \"update\";\n  }\n\n  public closeDialog(): void {\n    this._params = undefined;\n    this._action = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this._params) {\n      return html``;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${this.hass.localize(\n          \"ui.panel.developer-tools.tabs.statistics.fix_issue.units_changed.title\"\n        )}\n      >\n        <p>\n          The unit of this entity changed, we can't store values in multiple\n          units. <br />If the historic statistic values have a wrong unit, you\n          can update the units of the old values. The values will not be\n          updated.<br />Otherwise you can choose to delete all historic\n          statistic values, and start over.\n        </p>\n\n        <h3>How do you want to fix this issue?</h3>\n        <ha-formfield\n          .label=${this.hass.localize(\n            \"ui.panel.developer-tools.tabs.statistics.fix_issue.units_changed.update\",\n            this._params.issue.data\n          )}\n        >\n          <ha-radio\n            value=\"update\"\n            name=\"action\"\n            .checked=${this._action === \"update\"}\n            @change=${this._handleActionChanged}\n            dialogInitialFocus\n          ></ha-radio>\n        </ha-formfield>\n        <ha-formfield\n          .label=${this.hass.localize(\n            `ui.panel.developer-tools.tabs.statistics.fix_issue.units_changed.clear`\n          )}\n        >\n          <ha-radio\n            value=\"clear\"\n            name=\"action\"\n            .checked=${this._action === \"clear\"}\n            @change=${this._handleActionChanged}\n          ></ha-radio>\n        </ha-formfield>\n        ${this._params.issue.type === \"units_changed_can_convert\"\n          ? html`<ha-formfield\n              .label=${this.hass.localize(\n                `ui.panel.developer-tools.tabs.statistics.fix_issue.units_changed.change`\n              )}\n            >\n              <ha-radio\n                value=\"change\"\n                name=\"action\"\n                .checked=${this._action === \"change\"}\n                @change=${this._handleActionChanged}\n              ></ha-radio>\n            </ha-formfield>`\n          : \"\"}\n\n        <mwc-button slot=\"primaryAction\" @click=${this._fixIssue}>\n          ${this.hass.localize(\n            \"ui.panel.developer-tools.tabs.statistics.fix_issue.fix\"\n          )}\n        </mwc-button>\n        <mwc-button slot=\"secondaryAction\" @click=${this.closeDialog}>\n          ${this.hass.localize(\"ui.common.close\")}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _handleActionChanged(ev): void {\n    this._action = ev.target.value;\n  }\n\n  private async _fixIssue(): Promise<void> {\n    if (this._action === \"clear\") {\n      await clearStatistics(this.hass, [this._params!.issue.data.statistic_id]);\n    } else if (this._action === \"update\") {\n      await updateStatisticsMetadata(\n        this.hass,\n        this._params!.issue.data.statistic_id,\n        this._params!.issue.data.state_unit\n      );\n    } else if (this._action === \"change\") {\n      await changeStatisticUnit(\n        this.hass,\n        this._params!.issue.data.statistic_id,\n        this._params!.issue.data.metadata_unit,\n        this._params!.issue.data.state_unit\n      );\n    }\n    this._params?.fixedCallback();\n    this.closeDialog();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [haStyle, haStyleDialog];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-statistics-fix-units-changed\": DialogStatisticsFixUnitsChanged;\n  }\n}\n"],"names":[],"sourceRoot":""}