{"version":3,"file":"cebfeab4.js","mappings":";AAsBA;AACA;;AAGA;;;;;;;AAQA;;AAGA;;AAIA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;;ACzCA;AACA;;AAEA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoFA;;;;;;;;;;AAWA;;ACEA;;AAKA;;;AAKA;;;AAKA;AACA;;AAEA;;AAEA;;;;AAIA;;AAMA;AACA;;;AAGA;;;;AAKA;;;AAKA;;AAEA;;AAPA;AAYA;;AAIA;;AAKA;AACA;;AAEA;;AAIA;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6JA","sources":["webpack://home-assistant-frontend/./src/components/ha-chip.ts","webpack://home-assistant-frontend/./src/components/ha-textfield.ts","webpack://home-assistant-frontend/./src/panels/lovelace/cards/hui-alarm-panel-card.ts"],"sourcesContent":["// @ts-ignore\nimport chipStyles from \"@material/chips/dist/mdc.chips.min.css\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  TemplateResult,\n  unsafeCSS,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-chip\")\nexport class HaChip extends LitElement {\n  @property({ type: Boolean }) public hasIcon = false;\n\n  @property({ type: Boolean }) public hasTrailingIcon = false;\n\n  @property({ type: Boolean }) public noText = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"mdc-chip ${this.noText ? \"no-text\" : \"\"}\">\n        ${this.hasIcon\n          ? html`<div class=\"mdc-chip__icon mdc-chip__icon--leading\">\n              <slot name=\"icon\"></slot>\n            </div>`\n          : null}\n        <div class=\"mdc-chip__ripple\"></div>\n        <span role=\"gridcell\">\n          <span role=\"button\" tabindex=\"0\" class=\"mdc-chip__primary-action\">\n            <span class=\"mdc-chip__text\"><slot></slot></span>\n          </span>\n        </span>\n        ${this.hasTrailingIcon\n          ? html`<div class=\"mdc-chip__icon mdc-chip__icon--trailing\">\n              <slot name=\"trailing-icon\"></slot>\n            </div>`\n          : null}\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ${unsafeCSS(chipStyles)}\n      .mdc-chip {\n        background-color: var(\n          --ha-chip-background-color,\n          rgba(var(--rgb-primary-text-color), 0.15)\n        );\n        color: var(--ha-chip-text-color, var(--primary-text-color));\n      }\n\n      .mdc-chip.no-text {\n        padding: 0 10px;\n      }\n\n      .mdc-chip:hover {\n        color: var(--ha-chip-text-color, var(--primary-text-color));\n      }\n\n      .mdc-chip__icon--leading,\n      .mdc-chip__icon--trailing {\n        --mdc-icon-size: 18px;\n        line-height: 14px;\n        color: var(--ha-chip-icon-color, var(--ha-chip-text-color));\n      }\n      .mdc-chip.mdc-chip--selected .mdc-chip__checkmark,\n      .mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden) {\n        margin-right: -4px;\n        margin-inline-start: -4px;\n        margin-inline-end: 4px;\n        direction: var(--direction);\n      }\n\n      span[role=\"gridcell\"] {\n        line-height: 14px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-chip\": HaChip;\n  }\n}\n","import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { TemplateResult, html, PropertyValues, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public iconTrailing?: boolean;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      (changedProperties.has(\"invalid\") &&\n        (this.invalid || changedProperties.get(\"invalid\") !== undefined)) ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid ? this.errorMessage || \"Invalid\" : \"\"\n      );\n      this.reportValidity();\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n        padding-inline-start: var(--text-field-suffix-padding-left, 12px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 0px);\n        direction: var(--direction);\n      }\n      .mdc-text-field--with-leading-icon {\n        padding-inline-start: var(--text-field-suffix-padding-left, 0px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 16px);\n        direction: var(--direction);\n      }\n\n      .mdc-text-field:not(.mdc-text-field--disabled)\n        .mdc-text-field__affix--suffix {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon--leading {\n        margin-inline-start: 16px;\n        margin-inline-end: 8px;\n        direction: var(--direction);\n      }\n\n      input {\n        text-align: var(--text-field-text-align, start);\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n\n      .mdc-floating-label {\n        inset-inline-start: 16px !important;\n        inset-inline-end: initial !important;\n        transform-origin: var(--float-start);\n        direction: var(--direction);\n        transform-origin: var(--float-start);\n      }\n\n      .mdc-text-field--with-leading-icon.mdc-text-field--filled\n        .mdc-floating-label {\n        max-width: calc(100% - 48px);\n        inset-inline-start: 48px !important;\n        inset-inline-end: initial !important;\n        direction: var(--direction);\n      }\n\n      .mdc-text-field__input[type=\"number\"] {\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          .mdc-text-field__affix--suffix,\n          .mdc-text-field--with-leading-icon,\n          .mdc-text-field__icon--leading,\n          .mdc-floating-label,\n          .mdc-text-field--with-leading-icon.mdc-text-field--filled\n            .mdc-floating-label,\n          .mdc-text-field__input[type=\"number\"] {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { applyThemesOnElement } from \"../../../common/dom/apply_themes_on_element\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { alarmPanelIcon } from \"../../../common/entity/alarm_panel_icon\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-chip\";\nimport type { HaTextField } from \"../../../components/ha-textfield\";\nimport \"../../../components/ha-textfield\";\nimport {\n  callAlarmAction,\n  FORMAT_NUMBER,\n} from \"../../../data/alarm_control_panel\";\nimport { UNAVAILABLE } from \"../../../data/entity\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { findEntities } from \"../common/find-entities\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport type { LovelaceCard } from \"../types\";\nimport { AlarmPanelCardConfig } from \"./types\";\n\nconst BUTTONS = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\", \"0\", \"clear\"];\n\n@customElement(\"hui-alarm-panel-card\")\nclass HuiAlarmPanelCard extends LitElement implements LovelaceCard {\n  public static async getConfigElement() {\n    await import(\"../editor/config-elements/hui-alarm-panel-card-editor\");\n    return document.createElement(\"hui-alarm-panel-card-editor\");\n  }\n\n  public static getStubConfig(\n    hass: HomeAssistant,\n    entities: string[],\n    entitiesFallback: string[]\n  ): AlarmPanelCardConfig {\n    const includeDomains = [\"alarm_control_panel\"];\n    const maxEntities = 1;\n    const foundEntities = findEntities(\n      hass,\n      maxEntities,\n      entities,\n      entitiesFallback,\n      includeDomains\n    );\n\n    return {\n      type: \"alarm-panel\",\n      states: [\"arm_home\", \"arm_away\"],\n      entity: foundEntities[0] || \"\",\n    };\n  }\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: AlarmPanelCardConfig;\n\n  @query(\"#alarmCode\") private _input?: HaTextField;\n\n  public async getCardSize(): Promise<number> {\n    if (!this._config || !this.hass) {\n      return 9;\n    }\n\n    const stateObj = this.hass.states[this._config.entity];\n\n    return !stateObj || stateObj.attributes.code_format !== FORMAT_NUMBER\n      ? 4\n      : 9;\n  }\n\n  public setConfig(config: AlarmPanelCardConfig): void {\n    if (\n      !config ||\n      !config.entity ||\n      config.entity.split(\".\")[0] !== \"alarm_control_panel\"\n    ) {\n      throw new Error(\"Invalid configuration\");\n    }\n\n    const defaults = {\n      states: [\"arm_away\", \"arm_home\"] as const,\n    };\n\n    this._config = { ...defaults, ...config };\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    const oldConfig = changedProps.get(\"_config\") as\n      | AlarmPanelCardConfig\n      | undefined;\n\n    if (\n      !oldHass ||\n      !oldConfig ||\n      oldHass.themes !== this.hass.themes ||\n      oldConfig.theme !== this._config.theme\n    ) {\n      applyThemesOnElement(this, this.hass.themes, this._config.theme);\n    }\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    if (changedProps.has(\"_config\")) {\n      return true;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n\n    if (\n      !oldHass ||\n      oldHass.themes !== this.hass!.themes ||\n      oldHass.locale !== this.hass!.locale\n    ) {\n      return true;\n    }\n    return (\n      oldHass.states[this._config!.entity] !==\n      this.hass!.states[this._config!.entity]\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n    const stateObj = this.hass.states[this._config.entity];\n\n    if (!stateObj) {\n      return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        </hui-warning>\n      `;\n    }\n\n    const stateLabel = this._stateDisplay(stateObj.state);\n\n    return html`\n      <ha-card>\n        <h1 class=\"card-header\">\n          ${this._config.name ||\n          stateObj.attributes.friendly_name ||\n          stateLabel}\n          <ha-chip\n            hasIcon\n            class=${classMap({ [stateObj.state]: true })}\n            @click=${this._handleMoreInfo}\n          >\n            <ha-svg-icon slot=\"icon\" .path=${alarmPanelIcon(stateObj.state)}>\n            </ha-svg-icon>\n            ${stateLabel}\n          </ha-chip>\n        </h1>\n        <div id=\"armActions\" class=\"actions\">\n          ${(stateObj.state === \"disarmed\"\n            ? this._config.states!\n            : ([\"disarm\"] as const)\n          ).map(\n            (stateAction) => html`\n              <mwc-button\n                .action=${stateAction}\n                @click=${this._handleActionClick}\n                outlined\n              >\n                ${this._actionDisplay(stateAction)}\n              </mwc-button>\n            `\n          )}\n        </div>\n        ${!stateObj.attributes.code_format\n          ? html``\n          : html`\n              <ha-textfield\n                id=\"alarmCode\"\n                .label=${this.hass.localize(\"ui.card.alarm_control_panel.code\")}\n                type=\"password\"\n                .inputMode=${stateObj.attributes.code_format === FORMAT_NUMBER\n                  ? \"numeric\"\n                  : \"text\"}\n              ></ha-textfield>\n            `}\n        ${stateObj.attributes.code_format !== FORMAT_NUMBER\n          ? html``\n          : html`\n              <div id=\"keypad\">\n                ${BUTTONS.map((value) =>\n                  value === \"\"\n                    ? html` <mwc-button disabled></mwc-button> `\n                    : html`\n                        <mwc-button\n                          .value=${value}\n                          @click=${this._handlePadClick}\n                          outlined\n                          class=${classMap({\n                            numberkey: value !== \"clear\",\n                          })}\n                        >\n                          ${value === \"clear\"\n                            ? this.hass!.localize(\n                                `ui.card.alarm_control_panel.clear_code`\n                              )\n                            : value}\n                        </mwc-button>\n                      `\n                )}\n              </div>\n            `}\n      </ha-card>\n    `;\n  }\n\n  private _actionDisplay(\n    entityState: NonNullable<AlarmPanelCardConfig[\"states\"]>[number]\n  ): string {\n    return this.hass!.localize(`ui.card.alarm_control_panel.${entityState}`);\n  }\n\n  private _stateDisplay(entityState: string): string {\n    return entityState === UNAVAILABLE\n      ? this.hass!.localize(\"state.default.unavailable\")\n      : this.hass!.localize(\n          `component.alarm_control_panel.state._.${entityState}`\n        ) || entityState;\n  }\n\n  private _handlePadClick(e: MouseEvent): void {\n    const val = (e.currentTarget! as any).value;\n    this._input!.value = val === \"clear\" ? \"\" : this._input!.value + val;\n  }\n\n  private _handleActionClick(e: MouseEvent): void {\n    const input = this._input;\n    callAlarmAction(\n      this.hass!,\n      this._config!.entity,\n      (e.currentTarget! as any).action,\n      input?.value || undefined\n    );\n    if (input) {\n      input.value = \"\";\n    }\n  }\n\n  private _handleMoreInfo() {\n    fireEvent(this, \"hass-more-info\", {\n      entityId: this._config!.entity,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-card {\n        padding-bottom: 16px;\n        position: relative;\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        box-sizing: border-box;\n        --alarm-color-disarmed: var(--label-badge-green);\n        --alarm-color-pending: var(--label-badge-yellow);\n        --alarm-color-triggered: var(--label-badge-red);\n        --alarm-color-armed: var(--label-badge-red);\n        --alarm-color-autoarm: rgba(0, 153, 255, 0.1);\n        --alarm-state-color: var(--alarm-color-armed);\n      }\n\n      ha-chip {\n        --ha-chip-background-color: var(--alarm-state-color);\n        --primary-text-color: var(--text-primary-color);\n        line-height: initial;\n      }\n\n      .card-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        width: 100%;\n        box-sizing: border-box;\n      }\n\n      .unavailable {\n        --alarm-state-color: var(--state-unavailable-color);\n      }\n\n      .disarmed {\n        --alarm-state-color: var(--alarm-color-disarmed);\n      }\n\n      .triggered {\n        --alarm-state-color: var(--alarm-color-triggered);\n        animation: pulse 1s infinite;\n      }\n\n      .arming {\n        --alarm-state-color: var(--alarm-color-pending);\n        animation: pulse 1s infinite;\n      }\n\n      .pending {\n        --alarm-state-color: var(--alarm-color-pending);\n        animation: pulse 1s infinite;\n      }\n\n      @keyframes pulse {\n        0% {\n          opacity: 1;\n        }\n        50% {\n          opacity: 0;\n        }\n        100% {\n          opacity: 1;\n        }\n      }\n\n      ha-textfield {\n        display: block;\n        margin: 8px;\n        max-width: 150px;\n        text-align: center;\n      }\n\n      .state {\n        margin-left: 16px;\n        position: relative;\n        bottom: 16px;\n        color: var(--alarm-state-color);\n        animation: none;\n      }\n\n      #keypad {\n        display: flex;\n        justify-content: center;\n        flex-wrap: wrap;\n        margin: auto;\n        width: 100%;\n        max-width: 300px;\n        direction: ltr;\n      }\n\n      #keypad mwc-button {\n        padding: 8px;\n        width: 30%;\n        box-sizing: border-box;\n      }\n\n      .actions {\n        margin: 0;\n        display: flex;\n        flex-wrap: wrap;\n        justify-content: center;\n      }\n\n      .actions mwc-button {\n        margin: 0 4px 4px;\n      }\n\n      mwc-button#disarm {\n        color: var(--error-color);\n      }\n\n      mwc-button.numberkey {\n        --mdc-typography-button-font-size: var(--keypad-font-size, 0.875rem);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-alarm-panel-card\": HuiAlarmPanelCard;\n  }\n}\n"],"names":[],"sourceRoot":""}