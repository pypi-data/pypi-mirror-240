{"version":3,"file":"32ece823.js","mappings":";AAaA;;AAEA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;;;AChEA;AACA;;AAKA;;AAGA;;AAIA;AACA;;AAIA;AAEA;;;;;;AAOA;;;;AAMA;;;;AAMA;AACA;;AAIA;AAEA;;;AAhGA;;;;;AAyGA;;;;AAMA;AACA;;AAEA;AAEA;;;AApHA;;;;;AA6HA;;;;AAQA;AACA;;AAEA;;AA5FA;;;;;;;;;;;;;;;;;;;;;;;AA+LA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zwave_js/dialog-zwave_js-remove-node.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { mdiCheckCircle, mdiCloseCircle } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/ha-circular-progress\";\nimport { createCloseHeading } from \"../../../../../components/ha-dialog\";\nimport { haStyleDialog } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { ZWaveJSRemoveNodeDialogParams } from \"./show-dialog-zwave_js-remove-node\";\n\nexport interface ZWaveJSRemovedNode {\n  node_id: number;\n  manufacturer: string;\n  label: string;\n}\n\n@customElement(\"dialog-zwave_js-remove-node\")\nclass DialogZWaveJSRemoveNode extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private entry_id?: string;\n\n  @state() private _status = \"\";\n\n  @state() private _node?: ZWaveJSRemovedNode;\n\n  private _removeNodeTimeoutHandle?: number;\n\n  private _subscribed?: Promise<() => Promise<void>>;\n\n  public disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this._unsubscribe();\n  }\n\n  public async showDialog(\n    params: ZWaveJSRemoveNodeDialogParams\n  ): Promise<void> {\n    this.entry_id = params.entry_id;\n  }\n\n  protected render(): TemplateResult {\n    if (!this.entry_id) {\n      return html``;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\"ui.panel.config.zwave_js.remove_node.title\")\n        )}\n      >\n        ${this._status === \"\"\n          ? html`\n              <p>\n                ${this.hass.localize(\n                  \"ui.panel.config.zwave_js.remove_node.introduction\"\n                )}\n              </p>\n              <mwc-button slot=\"primaryAction\" @click=${this._startExclusion}>\n                ${this.hass.localize(\n                  \"ui.panel.config.zwave_js.remove_node.start_exclusion\"\n                )}\n              </mwc-button>\n            `\n          : ``}\n        ${this._status === \"started\"\n          ? html`\n              <div class=\"flex-container\">\n                <ha-circular-progress active></ha-circular-progress>\n                <div class=\"status\">\n                  <p>\n                    <b\n                      >${this.hass.localize(\n                        \"ui.panel.config.zwave_js.remove_node.controller_in_exclusion_mode\"\n                      )}</b\n                    >\n                  </p>\n                  <p>\n                    ${this.hass.localize(\n                      \"ui.panel.config.zwave_js.remove_node.follow_device_instructions\"\n                    )}\n                  </p>\n                </div>\n              </div>\n              <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n                ${this.hass.localize(\n                  \"ui.panel.config.zwave_js.remove_node.cancel_exclusion\"\n                )}\n              </mwc-button>\n            `\n          : ``}\n        ${this._status === \"failed\"\n          ? html`\n              <div class=\"flex-container\">\n                <ha-svg-icon\n                  .path=${mdiCloseCircle}\n                  class=\"failed\"\n                ></ha-svg-icon>\n                <div class=\"status\">\n                  <p>\n                    ${this.hass.localize(\n                      \"ui.panel.config.zwave_js.remove_node.exclusion_failed\"\n                    )}\n                  </p>\n                </div>\n              </div>\n              <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n                ${this.hass.localize(\"ui.common.close\")}\n              </mwc-button>\n            `\n          : ``}\n        ${this._status === \"finished\"\n          ? html`\n              <div class=\"flex-container\">\n                <ha-svg-icon\n                  .path=${mdiCheckCircle}\n                  class=\"success\"\n                ></ha-svg-icon>\n                <div class=\"status\">\n                  <p>\n                    ${this.hass.localize(\n                      \"ui.panel.config.zwave_js.remove_node.exclusion_finished\",\n                      \"id\",\n                      this._node!.node_id\n                    )}\n                  </p>\n                </div>\n              </div>\n              <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n                ${this.hass.localize(\"ui.common.close\")}\n              </mwc-button>\n            `\n          : ``}\n      </ha-dialog>\n    `;\n  }\n\n  private _startExclusion(): void {\n    if (!this.hass) {\n      return;\n    }\n    this._subscribed = this.hass.connection.subscribeMessage(\n      (message) => this._handleMessage(message),\n      {\n        type: \"zwave_js/remove_node\",\n        entry_id: this.entry_id,\n      }\n    );\n    this._removeNodeTimeoutHandle = window.setTimeout(\n      () => this._unsubscribe(),\n      120000\n    );\n  }\n\n  private _handleMessage(message: any): void {\n    if (message.event === \"exclusion started\") {\n      this._status = \"started\";\n    }\n    if (message.event === \"exclusion failed\") {\n      this._unsubscribe();\n      this._status = \"failed\";\n    }\n    if (message.event === \"exclusion stopped\") {\n      if (this._status !== \"finished\") {\n        this._status = \"\";\n      }\n      this._unsubscribe();\n    }\n    if (message.event === \"node removed\") {\n      this._status = \"finished\";\n      this._node = message.node;\n      this._unsubscribe();\n    }\n  }\n\n  private _unsubscribe(): void {\n    if (this._subscribed) {\n      this._subscribed.then((unsub) => unsub());\n      this._subscribed = undefined;\n    }\n    if (this._status === \"started\") {\n      this.hass.callWS({\n        type: \"zwave_js/stop_exclusion\",\n        entry_id: this.entry_id,\n      });\n    }\n    if (this._status !== \"finished\") {\n      this._status = \"\";\n    }\n    if (this._removeNodeTimeoutHandle) {\n      clearTimeout(this._removeNodeTimeoutHandle);\n    }\n  }\n\n  public closeDialog(): void {\n    this._unsubscribe();\n    this.entry_id = undefined;\n    this._status = \"\";\n\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        .success {\n          color: var(--success-color);\n        }\n\n        .failed {\n          color: var(--error-color);\n        }\n\n        .flex-container {\n          display: flex;\n          align-items: center;\n        }\n\n        ha-svg-icon {\n          width: 68px;\n          height: 48px;\n        }\n\n        .flex-container ha-circular-progress,\n        .flex-container ha-svg-icon {\n          margin-right: 20px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-zwave_js-remove-node\": DialogZWaveJSRemoveNode;\n  }\n}\n"],"names":[],"sourceRoot":""}