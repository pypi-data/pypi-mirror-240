{"version":3,"file":"c6bd974d.js","mappings":";AA6BA;AACA;;;AAGA;AACA;;AAEA;;;AAIA;AACA;;;;;;;AAOA;;;AAKA;AACA;;;;;;AAMA;;;AAKA;AACA;;;;;;AAMA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4EA;ACvGA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAKA;;;;;;;;AA+CA;;;;;;;;;;;;;ACrEA;ACzBA;AAGA","sources":["webpack://home-assistant-frontend/./src/components/entity/state-info.ts","webpack://home-assistant-frontend/./src/components/ha-button-menu.ts","webpack://home-assistant-frontend/./src/components/ha-formfield.ts","webpack://home-assistant-frontend/./src/components/ha-state-icon.ts"],"sourcesContent":["import \"@polymer/paper-tooltip/paper-tooltip\";\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { computeStateName } from \"../../common/entity/compute_state_name\";\nimport { computeRTL } from \"../../common/util/compute_rtl\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-relative-time\";\nimport \"./state-badge\";\n\n@customElement(\"state-info\")\nclass StateInfo extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj?: HassEntity;\n\n  @property({ type: Boolean }) public inDialog = false;\n\n  // property used only in CSS\n  @property({ type: Boolean, reflect: true }) public rtl = false;\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this.stateObj) {\n      return html``;\n    }\n\n    const name = computeStateName(this.stateObj);\n\n    return html`<state-badge\n        .stateObj=${this.stateObj}\n        .stateColor=${true}\n      ></state-badge>\n      <div class=\"info\">\n        <div class=\"name\" .title=${name} .inDialog=${this.inDialog}>\n          ${name}\n        </div>\n        ${this.inDialog\n          ? html`<div class=\"time-ago\">\n              <ha-relative-time\n                id=\"last_changed\"\n                .hass=${this.hass}\n                .datetime=${this.stateObj.last_changed}\n                capitalize\n              ></ha-relative-time>\n              <paper-tooltip animation-delay=\"0\" for=\"last_changed\">\n                <div>\n                  <div class=\"row\">\n                    <span class=\"column-name\">\n                      ${this.hass.localize(\n                        \"ui.dialogs.more_info_control.last_changed\"\n                      )}:\n                    </span>\n                    <ha-relative-time\n                      .hass=${this.hass}\n                      .datetime=${this.stateObj.last_changed}\n                      capitalize\n                    ></ha-relative-time>\n                  </div>\n                  <div class=\"row\">\n                    <span>\n                      ${this.hass.localize(\n                        \"ui.dialogs.more_info_control.last_updated\"\n                      )}:\n                    </span>\n                    <ha-relative-time\n                      .hass=${this.hass}\n                      .datetime=${this.stateObj.last_updated}\n                      capitalize\n                    ></ha-relative-time>\n                  </div>\n                </div>\n              </paper-tooltip>\n            </div>`\n          : html`<div class=\"extra-info\"><slot></slot></div>`}\n      </div>`;\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    if (!changedProps.has(\"hass\")) {\n      return;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (!oldHass || oldHass.locale !== this.hass.locale) {\n      this.rtl = computeRTL(this.hass);\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        min-width: 120px;\n        white-space: nowrap;\n      }\n\n      state-badge {\n        float: left;\n      }\n      :host([rtl]) state-badge {\n        float: right;\n      }\n\n      .info {\n        margin-left: 56px;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        height: 100%;\n      }\n\n      :host([rtl]) .info {\n        margin-right: 56px;\n        margin-left: 0;\n        text-align: right;\n      }\n\n      .name {\n        color: var(--primary-text-color);\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n\n      .name[in-dialog],\n      :host([secondary-line]) .name {\n        line-height: 20px;\n      }\n\n      .time-ago,\n      .extra-info,\n      .extra-info > * {\n        color: var(--secondary-text-color);\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n\n      .row {\n        display: flex;\n        flex-direction: row;\n        flex-wrap: no-wrap;\n        width: 100%;\n        justify-content: space-between;\n        margin: 0 2px 4px 0;\n      }\n\n      .row:last-child {\n        margin-bottom: 0px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"state-info\": StateInfo;\n  }\n}\n","import type { Button } from \"@material/mwc-button\";\nimport \"@material/mwc-menu\";\nimport type { Corner, Menu, MenuCorner } from \"@material/mwc-menu\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HaIconButton } from \"./ha-icon-button\";\n\n@customElement(\"ha-button-menu\")\nexport class HaButtonMenu extends LitElement {\n  protected readonly [FOCUS_TARGET];\n\n  @property() public corner: Corner = \"TOP_START\";\n\n  @property() public menuCorner: MenuCorner = \"START\";\n\n  @property({ type: Number }) public x: number | null = null;\n\n  @property({ type: Number }) public y: number | null = null;\n\n  @property({ type: Boolean }) public multi = false;\n\n  @property({ type: Boolean }) public activatable = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public fixed = false;\n\n  @query(\"mwc-menu\", true) private _menu?: Menu;\n\n  public get items() {\n    return this._menu?.items;\n  }\n\n  public get selected() {\n    return this._menu?.selected;\n  }\n\n  public override focus() {\n    if (this._menu?.open) {\n      this._menu.focusItemAtIndex(0);\n    } else {\n      this._triggerButton?.focus();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div @click=${this._handleClick}>\n        <slot name=\"trigger\" @slotchange=${this._setTriggerAria}></slot>\n      </div>\n      <mwc-menu\n        .corner=${this.corner}\n        .menuCorner=${this.menuCorner}\n        .fixed=${this.fixed}\n        .multi=${this.multi}\n        .activatable=${this.activatable}\n        .y=${this.y}\n        .x=${this.x}\n      >\n        <slot></slot>\n      </mwc-menu>\n    `;\n  }\n\n  protected firstUpdated(changedProps): void {\n    super.firstUpdated(changedProps);\n\n    if (document.dir === \"rtl\") {\n      this.updateComplete.then(() => {\n        this.querySelectorAll(\"mwc-list-item\").forEach((item) => {\n          const style = document.createElement(\"style\");\n          style.innerHTML =\n            \"span.material-icons:first-of-type { margin-left: var(--mdc-list-item-graphic-margin, 32px) !important; margin-right: 0px !important;}\";\n          item!.shadowRoot!.appendChild(style);\n        });\n      });\n    }\n  }\n\n  private _handleClick(): void {\n    if (this.disabled) {\n      return;\n    }\n    this._menu!.anchor = this;\n    this._menu!.show();\n  }\n\n  private get _triggerButton() {\n    return this.querySelector(\n      'ha-icon-button[slot=\"trigger\"], mwc-button[slot=\"trigger\"]'\n    ) as HaIconButton | Button | null;\n  }\n\n  private _setTriggerAria() {\n    if (this._triggerButton) {\n      this._triggerButton.ariaHasPopup = \"menu\";\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ::slotted([disabled]) {\n        color: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-menu\": HaButtonMenu;\n  }\n}\n","import { FormfieldBase } from \"@material/mwc-formfield/mwc-formfield-base\";\nimport { styles } from \"@material/mwc-formfield/mwc-formfield.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n@customElement(\"ha-formfield\")\nexport class HaFormfield extends FormfieldBase {\n  protected _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      switch (input.tagName) {\n        case \"HA-CHECKBOX\":\n        case \"HA-RADIO\":\n          (input as any).checked = !(input as any).checked;\n          fireEvent(input, \"change\");\n          break;\n        default:\n          input.click();\n          break;\n      }\n    }\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host(:not([alignEnd])) ::slotted(ha-switch) {\n        margin-right: 10px;\n        margin-inline-end: 10px;\n        margin-inline-start: inline;\n      }\n      .mdc-form-field > label {\n        direction: var(--direction);\n        margin-inline-start: 0;\n        margin-inline-end: auto;\n        padding-inline-start: 4px;\n        padding-inline-end: 0;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-formfield\": HaFormfield;\n  }\n}\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { stateIconPath } from \"../common/entity/state_icon_path\";\nimport \"./ha-icon\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-state-icon\")\nexport class HaStateIcon extends LitElement {\n  @property({ attribute: false }) public state?: HassEntity;\n\n  @property() public icon?: string;\n\n  protected render(): TemplateResult {\n    if (this.icon || this.state?.attributes.icon) {\n      return html`<ha-icon\n        .icon=${this.icon || this.state?.attributes.icon}\n      ></ha-icon>`;\n    }\n    return html`<ha-svg-icon .path=${stateIconPath(this.state)}></ha-svg-icon>`;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-state-icon\": HaStateIcon;\n  }\n}\n"],"names":[],"sourceRoot":""}