{"version":3,"file":"6712ea00.js","mappings":";;AAgFA;;AAKA;;AAeA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;;;;;;;;;;AAUA;AAMA;;;;;;;;;;;;;;AAeA;AACA;;AAKA;AAGA;;;;AAQA;;;;;AAKA;;;;;;;AAOA;;AAEA;;;;AAIA;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgNA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/cards/hui-humidifier-card.ts"],"sourcesContent":["import { mdiDotsVertical } from \"@mdi/js\";\nimport \"@thomasloven/round-slider\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  svg,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { applyThemesOnElement } from \"../../../common/dom/apply_themes_on_element\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { computeRTLDirection } from \"../../../common/util/compute_rtl\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-icon-button\";\nimport { UNAVAILABLE_STATES } from \"../../../data/entity\";\nimport { HumidifierEntity } from \"../../../data/humidifier\";\nimport { HomeAssistant } from \"../../../types\";\nimport { findEntities } from \"../common/find-entities\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport { LovelaceCard, LovelaceCardEditor } from \"../types\";\nimport { HumidifierCardConfig } from \"./types\";\n\n@customElement(\"hui-humidifier-card\")\nexport class HuiHumidifierCard extends LitElement implements LovelaceCard {\n  public static async getConfigElement(): Promise<LovelaceCardEditor> {\n    await import(\"../editor/config-elements/hui-humidifier-card-editor\");\n    return document.createElement(\"hui-humidifier-card-editor\");\n  }\n\n  public static getStubConfig(\n    hass: HomeAssistant,\n    entities: string[],\n    entitiesFallback: string[]\n  ): HumidifierCardConfig {\n    const includeDomains = [\"humidifier\"];\n    const maxEntities = 1;\n    const foundEntities = findEntities(\n      hass,\n      maxEntities,\n      entities,\n      entitiesFallback,\n      includeDomains\n    );\n\n    return { type: \"humidifier\", entity: foundEntities[0] || \"\" };\n  }\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: HumidifierCardConfig;\n\n  @state() private _setHum?: number;\n\n  public getCardSize(): number {\n    return 6;\n  }\n\n  public setConfig(config: HumidifierCardConfig): void {\n    if (!config.entity || config.entity.split(\".\")[0] !== \"humidifier\") {\n      throw new Error(\"Specify an entity from within the humidifier domain\");\n    }\n\n    this._config = config;\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n    const stateObj = this.hass.states[this._config.entity] as HumidifierEntity;\n\n    if (!stateObj) {\n      return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        </hui-warning>\n      `;\n    }\n\n    const name =\n      this._config!.name ||\n      computeStateName(this.hass!.states[this._config!.entity]);\n    const targetHumidity =\n      stateObj.attributes.humidity !== null &&\n      Number.isFinite(Number(stateObj.attributes.humidity))\n        ? stateObj.attributes.humidity\n        : stateObj.attributes.min_humidity;\n\n    const rtlDirection = computeRTLDirection(this.hass);\n\n    const slider = UNAVAILABLE_STATES.includes(stateObj.state)\n      ? html` <round-slider disabled=\"true\"></round-slider> `\n      : html`\n          <round-slider\n            .value=${targetHumidity}\n            .min=${stateObj.attributes.min_humidity}\n            .max=${stateObj.attributes.max_humidity}\n            .rtl=${rtlDirection === \"rtl\"}\n            step=\"1\"\n            @value-changing=${this._dragEvent}\n            @value-changed=${this._setHumidity}\n          ></round-slider>\n        `;\n\n    const setValues = svg`\n      <svg viewBox=\"0 0 40 20\">\n        <text\n          x=\"50%\"\n          dx=\"1\"\n          y=\"60%\"\n          text-anchor=\"middle\"\n          style=\"font-size: 13px;\"\n          class=\"set-value\"\n        >\n          ${\n            UNAVAILABLE_STATES.includes(stateObj.state) ||\n            this._setHum === undefined ||\n            this._setHum === null\n              ? \"\"\n              : svg`\n                    ${this._setHum.toFixed()}\n                    <tspan dx=\"-3\" dy=\"-6.5\" style=\"font-size: 4px;\">\n                      %\n                    </tspan>\n                    `\n          }\n        </text>\n      </svg>\n      <svg id=\"set-values\">\n        <g>\n          <text\n            dy=\"22\"\n            text-anchor=\"middle\"\n            id=\"set-mode\"\n          >\n            ${this.hass!.localize(`state.default.${stateObj.state}`)}\n            ${\n              stateObj.attributes.mode &&\n              !UNAVAILABLE_STATES.includes(stateObj.state)\n                ? html`\n                    -\n                    ${this.hass!.localize(\n                      `state_attributes.humidifier.mode.${stateObj.attributes.mode}`\n                    ) || stateObj.attributes.mode}\n                  `\n                : \"\"\n            }\n          </text>\n        </g>\n      </svg>\n    `;\n\n    return html`\n      <ha-card>\n        <ha-icon-button\n          .path=${mdiDotsVertical}\n          class=\"more-info\"\n          @click=${this._handleMoreInfo}\n          tabindex=\"0\"\n        ></ha-icon-button>\n\n        <div class=\"content\">\n          <div id=\"controls\">\n            <div id=\"slider\">\n              ${slider}\n              <div id=\"slider-center\">\n                <div id=\"humidity\">${setValues}</div>\n              </div>\n            </div>\n          </div>\n          <div id=\"info\" .title=${name}>${name}</div>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n\n    if (\n      !this._config ||\n      !this.hass ||\n      (!changedProps.has(\"hass\") && !changedProps.has(\"_config\"))\n    ) {\n      return;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    const oldConfig = changedProps.get(\"_config\") as\n      | HumidifierCardConfig\n      | undefined;\n\n    if (\n      !oldHass ||\n      !oldConfig ||\n      oldHass.themes !== this.hass.themes ||\n      oldConfig.theme !== this._config.theme\n    ) {\n      applyThemesOnElement(this, this.hass.themes, this._config.theme);\n    }\n\n    const stateObj = this.hass.states[this._config.entity];\n    if (!stateObj) {\n      return;\n    }\n\n    if (!oldHass || oldHass.states[this._config.entity] !== stateObj) {\n      this._rescale_svg();\n    }\n  }\n\n  public willUpdate(changedProps: PropertyValues) {\n    if (!this.hass || !this._config || !changedProps.has(\"hass\")) {\n      return;\n    }\n\n    const stateObj = this.hass.states[this._config.entity];\n    if (!stateObj) {\n      return;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n\n    if (!oldHass || oldHass.states[this._config.entity] !== stateObj) {\n      this._setHum = this._getSetHum(stateObj);\n    }\n  }\n\n  private _rescale_svg() {\n    // Set the viewbox of the SVG containing the set humidity to perfectly\n    // fit the text\n    // That way it will auto-scale correctly\n    // This is not done to the SVG containing the current humidity, because\n    // it should not be centered on the text, but only on the value\n    if (this.shadowRoot && this.shadowRoot.querySelector(\"ha-card\")) {\n      (\n        this.shadowRoot.querySelector(\"ha-card\") as LitElement\n      ).updateComplete.then(() => {\n        const svgRoot = this.shadowRoot!.querySelector(\"#set-values\");\n        const box = svgRoot!.querySelector(\"g\")!.getBBox();\n        svgRoot!.setAttribute(\n          \"viewBox\",\n          `${box!.x} ${box!.y} ${box!.width} ${box!.height}`\n        );\n        svgRoot!.setAttribute(\"width\", `${box!.width}`);\n        svgRoot!.setAttribute(\"height\", `${box!.height}`);\n      });\n    }\n  }\n\n  private _getSetHum(stateObj: HassEntity): undefined | number {\n    if (UNAVAILABLE_STATES.includes(stateObj.state)) {\n      return undefined;\n    }\n\n    return stateObj.attributes.humidity;\n  }\n\n  private _dragEvent(e): void {\n    this._setHum = e.detail.value;\n  }\n\n  private _setHumidity(e): void {\n    this.hass!.callService(\"humidifier\", \"set_humidity\", {\n      entity_id: this._config!.entity,\n      humidity: e.detail.value,\n    });\n  }\n\n  private _handleMoreInfo() {\n    fireEvent(this, \"hass-more-info\", {\n      entityId: this._config!.entity,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n      }\n\n      ha-card {\n        height: 100%;\n        position: relative;\n        overflow: hidden;\n        --name-font-size: 1.2rem;\n        --brightness-font-size: 1.2rem;\n        --rail-border-color: transparent;\n      }\n\n      .more-info {\n        position: absolute;\n        cursor: pointer;\n        top: 0;\n        right: 0;\n        border-radius: 100%;\n        color: var(--secondary-text-color);\n        z-index: 25;\n        inset-inline-start: initial;\n        inset-inline-end: 0;\n        direction: var(--direction);\n      }\n\n      .content {\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n      }\n\n      #controls {\n        display: flex;\n        justify-content: center;\n        padding: 16px;\n        position: relative;\n      }\n\n      #slider {\n        height: 100%;\n        width: 100%;\n        position: relative;\n        max-width: 250px;\n        min-width: 100px;\n      }\n\n      round-slider {\n        --round-slider-path-color: var(--slider-track-color);\n        --round-slider-bar-color: var(--primary-color);\n        padding-bottom: 10%;\n      }\n\n      #slider-center {\n        position: absolute;\n        width: calc(100% - 40px);\n        height: calc(100% - 40px);\n        box-sizing: border-box;\n        border-radius: 100%;\n        left: 20px;\n        top: 20px;\n        text-align: center;\n        overflow-wrap: break-word;\n        pointer-events: none;\n      }\n\n      #humidity {\n        position: absolute;\n        transform: translate(-50%, -50%);\n        width: 100%;\n        height: 50%;\n        top: 45%;\n        left: 50%;\n        direction: ltr;\n      }\n\n      #set-values {\n        max-width: 80%;\n        transform: translate(0, -50%);\n        font-size: 20px;\n      }\n\n      #set-mode {\n        fill: var(--secondary-text-color);\n        font-size: 16px;\n      }\n\n      #info {\n        display: flex-vertical;\n        justify-content: center;\n        text-align: center;\n        padding: 16px;\n        margin-top: -60px;\n        font-size: var(--name-font-size);\n      }\n\n      text {\n        fill: var(--primary-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-humidifier-card\": HuiHumidifierCard;\n  }\n}\n"],"names":[],"sourceRoot":""}