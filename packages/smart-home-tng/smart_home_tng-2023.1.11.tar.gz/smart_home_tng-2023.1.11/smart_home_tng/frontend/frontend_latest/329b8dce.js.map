{"version":3,"file":"329b8dce.js","mappings":";AAaA;;AAEA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;;;;;;;;;;;;;ACzEA;;;;;;;;;;;;;;;;;;;;ACIA;;;ACUA;AACA;;AAOA;;AAEA;AACA;;;AAKA;;AAQA;;;AAGA;AACA;AACA;;;;AAIA;;AAGA;AACA;;;AAKA;;AAQA;;;AAGA;AACA;AACA;;;AAGA;;;AAIA;AACA;;AAEA;;;;AAIA;AACA;;AAEA;;;AA9EA;;;;AA6IA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-formfield.ts","webpack://home-assistant-frontend/./src/components/ha-switch.ts","webpack://home-assistant-frontend/./src/dialogs/config-entry-system-options/dialog-config-entry-system-options.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { FormfieldBase } from \"@material/mwc-formfield/mwc-formfield-base\";\nimport { styles } from \"@material/mwc-formfield/mwc-formfield.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n@customElement(\"ha-formfield\")\nexport class HaFormfield extends FormfieldBase {\n  protected _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      switch (input.tagName) {\n        case \"HA-CHECKBOX\":\n        case \"HA-RADIO\":\n          (input as any).checked = !(input as any).checked;\n          fireEvent(input, \"change\");\n          break;\n        default:\n          input.click();\n          break;\n      }\n    }\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host(:not([alignEnd])) ::slotted(ha-switch) {\n        margin-right: 10px;\n        margin-inline-end: 10px;\n        margin-inline-start: inline;\n      }\n      .mdc-form-field > label {\n        direction: var(--direction);\n        margin-inline-start: 0;\n        margin-inline-end: auto;\n        padding-inline-start: 4px;\n        padding-inline-end: 0;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-formfield\": HaFormfield;\n  }\n}\n","import { SwitchBase } from \"@material/mwc-switch/deprecated/mwc-switch-base\";\nimport { styles } from \"@material/mwc-switch/deprecated/mwc-switch.css\";\nimport { css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { forwardHaptic } from \"../data/haptics\";\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends SwitchBase {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--switch-checked-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n        background-color: var(--switch-checked-button-color);\n        border-color: var(--switch-checked-button-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__track {\n        background-color: var(--switch-checked-track-color);\n        border-color: var(--switch-checked-track-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n        background-color: var(--switch-unchecked-button-color);\n        border-color: var(--switch-unchecked-button-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n        background-color: var(--switch-unchecked-track-color);\n        border-color: var(--switch-unchecked-track-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeRTLDirection } from \"../../common/util/compute_rtl\";\nimport \"../../components/ha-dialog\";\nimport \"../../components/ha-formfield\";\nimport \"../../components/ha-switch\";\nimport type { HaSwitch } from \"../../components/ha-switch\";\nimport {\n  ConfigEntryMutableParams,\n  updateConfigEntry,\n} from \"../../data/config_entries\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport type { HomeAssistant } from \"../../types\";\nimport { showAlertDialog } from \"../generic/show-dialog-box\";\nimport { ConfigEntrySystemOptionsDialogParams } from \"./show-dialog-config-entry-system-options\";\n\n@customElement(\"dialog-config-entry-system-options\")\nclass DialogConfigEntrySystemOptions extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _disableNewEntities!: boolean;\n\n  @state() private _disablePolling!: boolean;\n\n  @state() private _error?: string;\n\n  @state() private _params?: ConfigEntrySystemOptionsDialogParams;\n\n  @state() private _submitting = false;\n\n  public async showDialog(\n    params: ConfigEntrySystemOptionsDialogParams\n  ): Promise<void> {\n    this._params = params;\n    this._error = undefined;\n    this._disableNewEntities = params.entry.pref_disable_new_entities;\n    this._disablePolling = params.entry.pref_disable_polling;\n  }\n\n  public closeDialog(): void {\n    this._error = \"\";\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${this.hass.localize(\n          \"ui.dialogs.config_entry_system_options.title\",\n          \"integration\",\n          this.hass.localize(`component.${this._params.entry.domain}.title`) ||\n            this._params.entry.domain\n        )}\n      >\n        ${this._error ? html` <div class=\"error\">${this._error}</div> ` : \"\"}\n        <ha-formfield\n          .label=${html`<p>\n              ${this.hass.localize(\n                \"ui.dialogs.config_entry_system_options.enable_new_entities_label\"\n              )}\n            </p>\n            <p class=\"secondary\">\n              ${this.hass.localize(\n                \"ui.dialogs.config_entry_system_options.enable_new_entities_description\",\n                \"integration\",\n                this.hass.localize(\n                  `component.${this._params.entry.domain}.title`\n                ) || this._params.entry.domain\n              )}\n            </p>`}\n          .dir=${computeRTLDirection(this.hass)}\n        >\n          <ha-switch\n            .checked=${!this._disableNewEntities}\n            @change=${this._disableNewEntitiesChanged}\n            .disabled=${this._submitting}\n            dialogInitialFocus\n          ></ha-switch>\n        </ha-formfield>\n        ${this._allowUpdatePolling()\n          ? html`\n              <ha-formfield\n                .label=${html`<p>\n                    ${this.hass.localize(\n                      \"ui.dialogs.config_entry_system_options.enable_polling_label\"\n                    )}\n                  </p>\n                  <p class=\"secondary\">\n                    ${this.hass.localize(\n                      \"ui.dialogs.config_entry_system_options.enable_polling_description\",\n                      \"integration\",\n                      this.hass.localize(\n                        `component.${this._params.entry.domain}.title`\n                      ) || this._params.entry.domain\n                    )}\n                  </p>`}\n                .dir=${computeRTLDirection(this.hass)}\n              >\n                <ha-switch\n                  .checked=${!this._disablePolling}\n                  @change=${this._disablePollingChanged}\n                  .disabled=${this._submitting}\n                ></ha-switch>\n              </ha-formfield>\n            `\n          : \"\"}\n        <mwc-button\n          slot=\"secondaryAction\"\n          @click=${this.closeDialog}\n          .disabled=${this._submitting}\n        >\n          ${this.hass.localize(\"ui.common.cancel\")}\n        </mwc-button>\n        <mwc-button\n          slot=\"primaryAction\"\n          @click=${this._updateEntry}\n          .disabled=${this._submitting}\n        >\n          ${this.hass.localize(\"ui.dialogs.config_entry_system_options.update\")}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _allowUpdatePolling() {\n    return (\n      this._params!.manifest &&\n      (this._params!.manifest.iot_class === \"local_polling\" ||\n        this._params!.manifest.iot_class === \"cloud_polling\")\n    );\n  }\n\n  private _disableNewEntitiesChanged(ev: Event): void {\n    this._error = undefined;\n    this._disableNewEntities = !(ev.target as HaSwitch).checked;\n  }\n\n  private _disablePollingChanged(ev: Event): void {\n    this._error = undefined;\n    this._disablePolling = !(ev.target as HaSwitch).checked;\n  }\n\n  private async _updateEntry(): Promise<void> {\n    this._submitting = true;\n    const data: ConfigEntryMutableParams = {\n      pref_disable_new_entities: this._disableNewEntities,\n    };\n    if (this._allowUpdatePolling()) {\n      data.pref_disable_polling = this._disablePolling;\n    }\n    try {\n      const result = await updateConfigEntry(\n        this.hass,\n        this._params!.entry.entry_id,\n        data\n      );\n      if (result.require_restart) {\n        await showAlertDialog(this, {\n          text: this.hass.localize(\n            \"ui.dialogs.config_entry_system_options.restart_home_assistant\"\n          ),\n        });\n      }\n      this._params!.entryUpdated(result.config_entry);\n      this.closeDialog();\n    } catch (err: any) {\n      this._error = err.message || \"Unknown error\";\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        .error {\n          color: var(--error-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-config-entry-system-options\": DialogConfigEntrySystemOptions;\n  }\n}\n"],"names":[],"sourceRoot":""}