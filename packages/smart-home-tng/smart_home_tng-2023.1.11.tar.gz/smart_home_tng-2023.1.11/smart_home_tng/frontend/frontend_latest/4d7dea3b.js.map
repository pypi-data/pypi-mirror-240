{"version":3,"file":"4d7dea3b.js","mappings":";AAaA;;AAEA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;;;;AC7DA;AACA;;AASA;AAEA;AAGA;;;AAIA;AACA;AAGA;;;AAKA;;;;AAIA;AAGA;;;AAKA;AACA;;;AAGA;AACA;;AAEA;AACA;;;AAtDA;;;;;;;;;AAsGA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/panels/config/automation/automation-rename-dialog/dialog-automation-rename.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@material/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { createCloseHeading } from \"../../../../components/ha-dialog\";\nimport { HassDialog } from \"../../../../dialogs/make-dialog-manager\";\nimport { haStyle, haStyleDialog } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { AutomationRenameDialog } from \"./show-dialog-automation-rename\";\nimport \"../../../../components/ha-textarea\";\nimport \"../../../../components/ha-alert\";\nimport \"../../../../components/ha-textfield\";\n\n@customElement(\"ha-dialog-automation-rename\")\nclass DialogAutomationRename extends LitElement implements HassDialog {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _opened = false;\n\n  @state() private _error?: string;\n\n  private _params!: AutomationRenameDialog;\n\n  private _newName?: string;\n\n  private _newDescription?: string;\n\n  public showDialog(params: AutomationRenameDialog): void {\n    this._opened = true;\n    this._params = params;\n    this._newName =\n      params.config.alias ||\n      this.hass.localize(\"ui.panel.config.automation.editor.default_name\");\n    this._newDescription = params.config.description || \"\";\n  }\n\n  public closeDialog(): void {\n    this._params.onClose();\n\n    if (this._opened) {\n      fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n    }\n    this._opened = false;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._opened) {\n      return html``;\n    }\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\n            this._params.config.alias\n              ? \"ui.panel.config.automation.editor.rename\"\n              : \"ui.panel.config.automation.editor.save\"\n          )\n        )}\n      >\n        ${this._error\n          ? html`<ha-alert alert-type=\"error\"\n              >${this.hass.localize(\n                \"ui.panel.config.automation.editor.missing_name\"\n              )}</ha-alert\n            >`\n          : \"\"}\n        <ha-textfield\n          dialogInitialFocus\n          .value=${this._newName}\n          .placeholder=${this.hass.localize(\n            \"ui.panel.config.automation.editor.default_name\"\n          )}\n          .label=${this.hass.localize(\n            \"ui.panel.config.automation.editor.alias\"\n          )}\n          required\n          type=\"string\"\n          @input=${this._valueChanged}\n        ></ha-textfield>\n\n        <ha-textarea\n          .label=${this.hass.localize(\n            \"ui.panel.config.automation.editor.description.label\"\n          )}\n          .placeholder=${this.hass.localize(\n            \"ui.panel.config.automation.editor.description.placeholder\"\n          )}\n          name=\"description\"\n          autogrow\n          .value=${this._newDescription}\n          @input=${this._valueChanged}\n        ></ha-textarea>\n\n        <mwc-button @click=${this.closeDialog} slot=\"secondaryAction\">\n          ${this.hass.localize(\"ui.dialogs.generic.cancel\")}\n        </mwc-button>\n        <mwc-button @click=${this._save} slot=\"primaryAction\">\n          ${this.hass.localize(\n            this._params.config.alias\n              ? \"ui.panel.config.automation.editor.rename\"\n              : \"ui.panel.config.automation.editor.save\"\n          )}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const target = ev.target as any;\n    if (target.name === \"description\") {\n      this._newDescription = target.value;\n    } else {\n      this._newName = target.value;\n    }\n  }\n\n  private _save(): void {\n    if (!this._newName) {\n      this._error = \"Name is required\";\n      return;\n    }\n    this._params.updateAutomation({\n      ...this._params.config,\n      alias: this._newName,\n      description: this._newDescription,\n    });\n    this.closeDialog();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      haStyleDialog,\n      css`\n        ha-textfield,\n        ha-textarea {\n          display: block;\n        }\n        ha-alert {\n          display: block;\n          margin-bottom: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog-automation-rename\": DialogAutomationRename;\n  }\n}\n"],"names":[],"sourceRoot":""}