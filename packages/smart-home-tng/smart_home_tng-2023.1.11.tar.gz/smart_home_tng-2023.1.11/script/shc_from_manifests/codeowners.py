"""
Code Generator for Smart Home - The Next Generation.

Generates helper code from component manifests.

Smart Home - TNG is a Home Automation framework for observing the state
of entities and react to changes. It is based on Home Assistant from
home-assistant.io and the Home Assistant Community.

Copyright (c) 2022, Andreas Nixdorf

This program is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation, either version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program.  If not, see
http://www.gnu.org/licenses/.
"""

import typing

from .code_generator import CodeGenerator
from .config import Config
from .integration import Integration

_NAME: typing.Final = "codeowners"

_BASE: typing.Final = """
# This file is generated by script/shc_from_manifests
# People marked here will be automatically requested for a review
# when the code that they own is touched.
# https://github.com/blog/2392-introducing-code-owners
# https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners

# Smart Home - The Next Generation Core
setup.cfg @nixe64
pyproject.toml @nixe64
/smart_home_tng/*.py @nixe64
/smart_home_tng/core/*.py @nixe64

# Integrations
""".strip()

_INDIVIDUAL_FILES: typing.Final = """
# Individual files
"""

_REMOVE_CODEOWNERS: typing.Final = """
# Remove codeowners from files
/smart_home_tng/components/*/translations/
"""


# pylint: disable=unused-variable
class CodeOwnersGenerator(CodeGenerator):
    """Generate CODEOWNERS."""

    def __init__(self):
        super().__init__(_NAME)

    def generate_and_validate(
        self, integrations: dict[str, Integration], config: Config
    ):
        """Generate CODEOWNERS."""
        parts = [_BASE]

        for domain in sorted(integrations):
            integration = integrations[domain]

            if not integration.manifest:
                continue

            codeowners = integration.manifest["codeowners"]

            if not codeowners:
                continue

            for owner in codeowners:
                if not owner.startswith("@"):
                    integration.add_error(
                        "codeowners", "Code owners need to be valid GitHub handles."
                    )

            parts.append(f"/smart_home_tng/components/{domain}/ {' '.join(codeowners)}")

            if (config.root / "tests/components" / domain / "__init__.py").exists():
                parts.append(f"/tests/components/{domain}/ {' '.join(codeowners)}")

        parts.append(f"\n{_INDIVIDUAL_FILES.strip()}")
        parts.append(f"\n{_REMOVE_CODEOWNERS.strip()}")

        return "\n".join(parts)

    def validate(self, integrations: dict[str, Integration], config: Config):
        """Validate CODEOWNERS."""
        codeowners_path = config.root / ".github" / "CODEOWNERS"
        config.cache["codeowners"] = content = self.generate_and_validate(
            integrations, config
        )

        if config.specific_integrations:
            return

        if not codeowners_path.is_file():
            config.add_error(
                "codeowners",
                "File CODEOWNERS is not up to date. Run python3 -m script.shc_from_manifests",
                fixable=True,
            )
            return

        with open(str(codeowners_path), encoding="utf-8") as fp:
            if fp.read().strip() != content:
                config.add_error(
                    "codeowners",
                    "File CODEOWNERS is not up to date. Run python3 -m script.shc_from_manifests.",
                    fixable=True,
                )
            return

    def generate(self, integrations: dict[str, Integration], config: Config):
        """Generate CODEOWNERS."""
        codeowners_path = config.root / ".github" / "CODEOWNERS"
        with open(str(codeowners_path), "w", encoding="utf-8") as fp:
            fp.write(f"{config.cache['codeowners']}\n")
