{"version":3,"file":"91818ef5.js","mappings":";;;AAuCA;AACA;;AAEA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoFA;;;;;;;;;;AAWA;;;;AC/GA;;;AAGA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAGA;;;AAIA;AACA;;AAEA;;;AAIA;AAEA;;AAEA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDA","sources":["webpack://home-assistant-frontend/./src/components/ha-textfield.ts","webpack://home-assistant-frontend/./src/dialogs/more-info/controls/more-info-configurator.ts"],"sourcesContent":["import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { TemplateResult, html, PropertyValues, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public iconTrailing?: boolean;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      (changedProperties.has(\"invalid\") &&\n        (this.invalid || changedProperties.get(\"invalid\") !== undefined)) ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid ? this.errorMessage || \"Invalid\" : \"\"\n      );\n      this.reportValidity();\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n        padding-inline-start: var(--text-field-suffix-padding-left, 12px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 0px);\n        direction: var(--direction);\n      }\n      .mdc-text-field--with-leading-icon {\n        padding-inline-start: var(--text-field-suffix-padding-left, 0px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 16px);\n        direction: var(--direction);\n      }\n\n      .mdc-text-field:not(.mdc-text-field--disabled)\n        .mdc-text-field__affix--suffix {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon--leading {\n        margin-inline-start: 16px;\n        margin-inline-end: 8px;\n        direction: var(--direction);\n      }\n\n      input {\n        text-align: var(--text-field-text-align, start);\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n\n      .mdc-floating-label {\n        inset-inline-start: 16px !important;\n        inset-inline-end: initial !important;\n        transform-origin: var(--float-start);\n        direction: var(--direction);\n        transform-origin: var(--float-start);\n      }\n\n      .mdc-text-field--with-leading-icon.mdc-text-field--filled\n        .mdc-floating-label {\n        max-width: calc(100% - 48px);\n        inset-inline-start: 48px !important;\n        inset-inline-end: initial !important;\n        direction: var(--direction);\n      }\n\n      .mdc-text-field__input[type=\"number\"] {\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          .mdc-text-field__affix--suffix,\n          .mdc-text-field--with-leading-icon,\n          .mdc-text-field__icon--leading,\n          .mdc-floating-label,\n          .mdc-text-field--with-leading-icon.mdc-text-field--filled\n            .mdc-floating-label,\n          .mdc-text-field__input[type=\"number\"] {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n","import \"@material/mwc-button\";\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-circular-progress\";\nimport \"../../../components/ha-markdown\";\nimport \"../../../components/ha-textfield\";\nimport type { HomeAssistant } from \"../../../types\";\n\n@customElement(\"more-info-configurator\")\nexport class MoreInfoConfigurator extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj?: HassEntity;\n\n  @state() private _isConfiguring = false;\n\n  private _fieldInput = {};\n\n  protected render(): TemplateResult {\n    if (this.stateObj?.state !== \"configure\") {\n      return html``;\n    }\n\n    return html`\n      <div class=\"container\">\n        <ha-markdown\n          breaks\n          .content=${this.stateObj.attributes.description}\n        ></ha-markdown>\n\n        ${this.stateObj.attributes.errors\n          ? html`<ha-alert alert-type=\"error\">\n              ${this.stateObj.attributes.errors}\n            </ha-alert>`\n          : \"\"}\n        ${this.stateObj.attributes.fields.map(\n          (field) => html`<ha-textfield\n            .label=${field.name}\n            .name=${field.id}\n            .type=${field.type}\n            @change=${this._fieldChanged}\n          ></ha-textfield>`\n        )}\n        ${this.stateObj.attributes.submit_caption\n          ? html`<p class=\"submit\">\n              <mwc-button\n                raised\n                .disabled=${this._isConfiguring}\n                @click=${this._submitClicked}\n              >\n                ${this._isConfiguring\n                  ? html`<ha-circular-progress\n                      active\n                      alt=\"Configuring\"\n                    ></ha-circular-progress>`\n                  : \"\"}\n                ${this.stateObj.attributes.submit_caption}\n              </mwc-button>\n            </p>`\n          : \"\"}\n      </div>\n    `;\n  }\n\n  private _fieldChanged(ev) {\n    const el = ev.target;\n    this._fieldInput[el.name] = el.value;\n  }\n\n  private _submitClicked() {\n    const data = {\n      configure_id: this.stateObj!.attributes.configure_id,\n      fields: this._fieldInput,\n    };\n\n    this._isConfiguring = true;\n\n    this.hass.callService(\"configurator\", \"configure\", data).then(\n      () => {\n        this._isConfiguring = false;\n      },\n      () => {\n        this._isConfiguring = false;\n      }\n    );\n  }\n\n  static styles = css`\n    .container {\n      display: flex;\n      flex-direction: column;\n    }\n    p {\n      margin: 8px 0;\n    }\n\n    a {\n      color: var(--primary-color);\n    }\n\n    p > img {\n      max-width: 100%;\n    }\n\n    p.center {\n      text-align: center;\n    }\n\n    p.submit {\n      text-align: center;\n      height: 41px;\n    }\n\n    ha-circular-progress {\n      width: 14px;\n      height: 14px;\n      margin-right: 20px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"more-info-configurator\": MoreInfoConfigurator;\n  }\n}\n"],"names":[],"sourceRoot":""}