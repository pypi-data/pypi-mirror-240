{"version":3,"file":"b4bf68be.js","mappings":";;;;;;AAoEA;AACA;;AAEA;AACA;;AAIA;;;;;;;AAOA;AACA;AACA;AACA;AACA;;;AAIA;;;;;;;;;;;;AA2CA","sources":["webpack://home-assistant-frontend/./src/panels/energy/ha-panel-energy.ts"],"sourcesContent":["import \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../components/ha-menu-button\";\nimport { LovelaceConfig } from \"../../data/lovelace\";\nimport \"../../layouts/ha-app-layout\";\nimport { haStyle } from \"../../resources/styles\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../lovelace/components/hui-energy-period-selector\";\nimport { Lovelace } from \"../lovelace/types\";\nimport \"../lovelace/views/hui-view\";\n\nconst LOVELACE_CONFIG: LovelaceConfig = {\n  views: [\n    {\n      strategy: {\n        type: \"energy\",\n      },\n    },\n  ],\n};\n\n@customElement(\"ha-panel-energy\")\nclass PanelEnergy extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @state() private _viewIndex = 0;\n\n  @state() private _lovelace?: Lovelace;\n\n  public willUpdate(changedProps: PropertyValues) {\n    if (!this.hasUpdated) {\n      this.hass.loadFragmentTranslation(\"lovelace\");\n    }\n    if (!changedProps.has(\"hass\")) {\n      return;\n    }\n    const oldHass = changedProps.get(\"hass\") as this[\"hass\"];\n    if (oldHass?.locale !== this.hass.locale) {\n      this._setLovelace();\n    }\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (\n      changedProps.has(\"narrow\") &&\n      changedProps.get(\"narrow\") !== undefined\n    ) {\n      this._reloadView();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-app-layout>\n        <app-header fixed slot=\"header\">\n          <app-toolbar>\n            <ha-menu-button\n              .hass=${this.hass}\n              .narrow=${this.narrow}\n            ></ha-menu-button>\n            <div main-title>${this.hass.localize(\"panel.energy\")}</div>\n            ${this.narrow\n              ? \"\"\n              : html`\n                  <hui-energy-period-selector\n                    .hass=${this.hass}\n                    collectionKey=\"energy_dashboard\"\n                  ></hui-energy-period-selector>\n                `}\n          </app-toolbar>\n        </app-header>\n        <hui-view\n          .hass=${this.hass}\n          .narrow=${this.narrow}\n          .lovelace=${this._lovelace}\n          .index=${this._viewIndex}\n          @reload-energy-panel=${this._reloadView}\n        ></hui-view>\n      </ha-app-layout>\n    `;\n  }\n\n  private _setLovelace() {\n    this._lovelace = {\n      config: LOVELACE_CONFIG,\n      rawConfig: LOVELACE_CONFIG,\n      editMode: false,\n      urlPath: \"energy\",\n      mode: \"generated\",\n      locale: this.hass.locale,\n      enableFullEditMode: () => undefined,\n      saveConfig: async () => undefined,\n      deleteConfig: async () => undefined,\n      setEditMode: () => undefined,\n    };\n  }\n\n  private _reloadView() {\n    // Force strategy to be re-run by make a copy of the view\n    const config = this._lovelace!.config;\n    this._lovelace = {\n      ...this._lovelace!,\n      config: { ...config, views: [{ ...config.views[0] }] },\n    };\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        app-toolbar {\n          display: flex;\n          justify-content: space-between;\n        }\n        hui-energy-period-selector {\n          width: 100%;\n          padding-left: 16px;\n          padding-inline-start: 16px;\n          --disabled-text-color: rgba(var(--rgb-text-primary-color), 0.5);\n          direction: var(--direction);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-panel-energy\": PanelEnergy;\n  }\n}\n\ndeclare global {\n  interface HASSDomEvents {\n    \"reload-energy-panel\": undefined;\n  }\n}\n"],"names":[],"sourceRoot":""}