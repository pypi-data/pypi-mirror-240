{"version":3,"file":"bc593ccc.js","mappings":";AAaA;;AAEA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;;;;;;;;;;;;;;;;;;;ACtFA;;;;;AAYA;;;;ACuCA;AACA;AACA;AACA;;;;AAIA;;;AAGA;AACA;;;AAGA;;;;AAMA;;;;AAMA;;AAIA;AACA;AACA;;AAEA;;;AAIA;AACA;AACA;AACA;;;;;AAMA;AACA;;AAEA;AAEA;AACA;;AAEA;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2EA;;ACxLA;;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;;AAGA;;AAYA;AACA;AACA;;AAIA;AAOA;AACA;AACA;;AAyCA;;AAPA;AACA;;;AAMA;;;;;AA2BA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-header-bar.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/card-editor/hui-dialog-create-card.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/card-editor/hui-entity-picker-table.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","// @ts-ignore\nimport topAppBarStyles from \"@material/top-app-bar/dist/mdc.top-app-bar.min.css\";\nimport { css, html, LitElement, unsafeCSS } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-header-bar\")\nexport class HaHeaderBar extends LitElement {\n  protected render() {\n    return html`<header class=\"mdc-top-app-bar\">\n      <div class=\"mdc-top-app-bar__row\">\n        <section\n          class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-start\"\n          id=\"navigation\"\n        >\n          <slot name=\"navigationIcon\"></slot>\n          <span class=\"mdc-top-app-bar__title\">\n            <slot name=\"title\"></slot>\n          </span>\n        </section>\n        <section\n          class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-end\"\n          id=\"actions\"\n          role=\"toolbar\"\n        >\n          <slot name=\"actionItems\"></slot>\n        </section>\n      </div>\n    </header>`;\n  }\n\n  static get styles() {\n    return [\n      unsafeCSS(topAppBarStyles),\n      css`\n        .mdc-top-app-bar {\n          position: static;\n          color: var(--mdc-theme-on-primary, #fff);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-header-bar\": HaHeaderBar;\n  }\n}\n","import \"@material/mwc-tab-bar/mwc-tab-bar\";\nimport \"@material/mwc-tab/mwc-tab\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { cache } from \"lit/directives/cache\";\nimport { classMap } from \"lit/directives/class-map\";\nimport memoize from \"memoize-one\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { computeDomain } from \"../../../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../../../common/entity/compute_state_name\";\nimport { DataTableRowData } from \"../../../../components/data-table/ha-data-table\";\nimport \"../../../../components/ha-dialog\";\nimport \"../../../../components/ha-header-bar\";\nimport type { LovelaceViewConfig } from \"../../../../data/lovelace\";\nimport type { HassDialog } from \"../../../../dialogs/make-dialog-manager\";\nimport { haStyleDialog } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport \"./hui-card-picker\";\nimport \"./hui-entity-picker-table\";\nimport { CreateCardDialogParams } from \"./show-create-card-dialog\";\nimport { showEditCardDialog } from \"./show-edit-card-dialog\";\nimport { showSuggestCardDialog } from \"./show-suggest-card-dialog\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"selected-changed\": SelectedChangedEvent;\n  }\n}\n\ninterface SelectedChangedEvent {\n  selectedEntities: string[];\n}\n\n@customElement(\"hui-dialog-create-card\")\nexport class HuiCreateDialogCard\n  extends LitElement\n  implements HassDialog<CreateCardDialogParams>\n{\n  @property({ attribute: false }) protected hass!: HomeAssistant;\n\n  @state() private _params?: CreateCardDialogParams;\n\n  @state() private _viewConfig!: LovelaceViewConfig;\n\n  @state() private _selectedEntities: string[] = [];\n\n  @state() private _currTabIndex = 0;\n\n  public async showDialog(params: CreateCardDialogParams): Promise<void> {\n    this._params = params;\n    const [view] = params.path;\n    this._viewConfig = params.lovelaceConfig.views[view];\n  }\n\n  public closeDialog(): boolean {\n    this._params = undefined;\n    this._currTabIndex = 0;\n    this._selectedEntities = [];\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n    return true;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n\n    const title = this._viewConfig.title\n      ? this.hass!.localize(\n          \"ui.panel.lovelace.editor.edit_card.pick_card_view_title\",\n          \"name\",\n          `\"${this._viewConfig.title}\"`\n        )\n      : this.hass!.localize(\"ui.panel.lovelace.editor.edit_card.pick_card\");\n\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        @keydown=${this._ignoreKeydown}\n        @closed=${this._cancel}\n        .heading=${title}\n        class=${classMap({ table: this._currTabIndex === 1 })}\n      >\n        <div slot=\"heading\">\n          <ha-header-bar>\n            <span slot=\"title\"> ${title} </span>\n          </ha-header-bar>\n          <mwc-tab-bar\n            .activeIndex=${this._currTabIndex}\n            @MDCTabBar:activated=${this._handleTabChanged}\n          >\n            <mwc-tab\n              .label=${this.hass!.localize(\n                \"ui.panel.lovelace.editor.cardpicker.by_card\"\n              )}\n              dialogInitialFocus\n            ></mwc-tab>\n            <mwc-tab\n              .label=${this.hass!.localize(\n                \"ui.panel.lovelace.editor.cardpicker.by_entity\"\n              )}\n            ></mwc-tab>\n          </mwc-tab-bar>\n        </div>\n        ${cache(\n          this._currTabIndex === 0\n            ? html`\n                <hui-card-picker\n                  .lovelace=${this._params.lovelaceConfig}\n                  .hass=${this.hass}\n                  @config-changed=${this._handleCardPicked}\n                ></hui-card-picker>\n              `\n            : html`\n                <hui-entity-picker-table\n                  no-label-float\n                  .hass=${this.hass}\n                  .narrow=${true}\n                  .entities=${this._allEntities(this.hass.states)}\n                  @selected-changed=${this._handleSelectedChanged}\n                ></hui-entity-picker-table>\n              `\n        )}\n\n        <div slot=\"primaryAction\">\n          <mwc-button @click=${this._cancel}>\n            ${this.hass!.localize(\"ui.common.cancel\")}\n          </mwc-button>\n          ${this._selectedEntities.length\n            ? html`\n                <mwc-button @click=${this._suggestCards}>\n                  ${this.hass!.localize(\"ui.common.continue\")}\n                </mwc-button>\n              `\n            : \"\"}\n        </div>\n      </ha-dialog>\n    `;\n  }\n\n  private _ignoreKeydown(ev: KeyboardEvent) {\n    ev.stopPropagation();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          /* overrule the ha-style-dialog max-height on small screens */\n          ha-dialog {\n            --mdc-dialog-max-height: 100%;\n            height: 100%;\n          }\n        }\n\n        @media all and (min-width: 850px) {\n          ha-dialog {\n            --mdc-dialog-min-width: 845px;\n          }\n        }\n\n        ha-dialog {\n          --mdc-dialog-max-width: 845px;\n          --dialog-content-padding: 2px 24px 20px 24px;\n          --dialog-z-index: 5;\n        }\n\n        ha-dialog.table {\n          --dialog-content-padding: 0;\n        }\n\n        ha-header-bar {\n          --mdc-theme-on-primary: var(--primary-text-color);\n          --mdc-theme-primary: var(--mdc-theme-surface);\n          flex-shrink: 0;\n          border-bottom: 1px solid\n            var(--mdc-dialog-scroll-divider-color, rgba(0, 0, 0, 0.12));\n        }\n\n        @media (min-width: 1200px) {\n          ha-dialog {\n            --mdc-dialog-max-width: calc(100% - 32px);\n            --mdc-dialog-min-width: 1000px;\n          }\n        }\n\n        .header_button {\n          color: inherit;\n          text-decoration: none;\n        }\n\n        mwc-tab-bar {\n          border-bottom: 1px solid\n            var(--mdc-dialog-scroll-divider-color, rgba(0, 0, 0, 0.12));\n        }\n\n        hui-card-picker {\n          --card-picker-search-shape: 0;\n          --card-picker-search-margin: -2px -24px 0;\n        }\n        hui-entity-picker-table {\n          display: block;\n          height: calc(100vh - 198px);\n          --mdc-shape-small: 0;\n        }\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          hui-entity-picker-table {\n            height: calc(100vh - 158px);\n          }\n        }\n      `,\n    ];\n  }\n\n  private _handleCardPicked(ev) {\n    const config = ev.detail.config;\n    if (this._params!.entities && this._params!.entities.length) {\n      if (Object.keys(config).includes(\"entities\")) {\n        config.entities = this._params!.entities;\n      } else if (Object.keys(config).includes(\"entity\")) {\n        config.entity = this._params!.entities[0];\n      }\n    }\n\n    showEditCardDialog(this, {\n      lovelaceConfig: this._params!.lovelaceConfig,\n      saveConfig: this._params!.saveConfig,\n      path: this._params!.path,\n      cardConfig: config,\n    });\n\n    this.closeDialog();\n  }\n\n  private _handleTabChanged(ev: CustomEvent): void {\n    const newTab = ev.detail.index;\n    if (newTab === this._currTabIndex) {\n      return;\n    }\n\n    this._currTabIndex = ev.detail.index;\n    this._selectedEntities = [];\n  }\n\n  private _handleSelectedChanged(ev: CustomEvent): void {\n    this._selectedEntities = ev.detail.selectedEntities;\n  }\n\n  private _cancel(ev?: Event) {\n    if (ev) {\n      ev.stopPropagation();\n    }\n    this.closeDialog();\n  }\n\n  private _suggestCards(): void {\n    showSuggestCardDialog(this, {\n      lovelaceConfig: this._params!.lovelaceConfig,\n      saveConfig: this._params!.saveConfig,\n      path: this._params!.path as [number],\n      entities: this._selectedEntities,\n    });\n\n    this.closeDialog();\n  }\n\n  private _allEntities = memoize((entities) =>\n    Object.keys(entities).map((entity) => {\n      const stateObj = this.hass.states[entity];\n      return {\n        icon: \"\",\n        entity_id: entity,\n        stateObj,\n        name: computeStateName(stateObj),\n        domain: computeDomain(entity),\n        last_changed: stateObj!.last_changed,\n      } as DataTableRowData;\n    })\n  );\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-dialog-create-card\": HuiCreateDialogCard;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport type { HASSDomEvent } from \"../../../../common/dom/fire_event\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { computeRTLDirection } from \"../../../../common/util/compute_rtl\";\nimport \"../../../../components/data-table/ha-data-table\";\nimport type {\n  DataTableColumnContainer,\n  DataTableRowData,\n  SelectionChangedEvent,\n} from \"../../../../components/data-table/ha-data-table\";\nimport \"../../../../components/entity/state-badge\";\nimport \"../../../../components/ha-relative-time\";\nimport type { HomeAssistant } from \"../../../../types\";\n\n@customElement(\"hui-entity-picker-table\")\nexport class HuiEntityPickerTable extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow?: boolean;\n\n  @property({ type: Boolean, attribute: \"no-label-float\" })\n  public noLabelFloat? = false;\n\n  @property({ type: Array }) public entities!: DataTableRowData[];\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-data-table\n        .hass=${this.hass}\n        selectable\n        .id=${\"entity_id\"}\n        .columns=${this._columns(this.narrow!)}\n        .data=${this.entities}\n        .dir=${computeRTLDirection(this.hass)}\n        .searchLabel=${this.hass.localize(\n          \"ui.panel.lovelace.unused_entities.search\"\n        )}\n        .noLabelFloat=${this.noLabelFloat}\n        .noDataText=${this.hass.localize(\n          \"ui.panel.lovelace.unused_entities.no_data\"\n        )}\n        @selection-changed=${this._handleSelectionChanged}\n      ></ha-data-table>\n    `;\n  }\n\n  private _columns = memoizeOne((narrow: boolean) => {\n    const columns: DataTableColumnContainer = {\n      icon: {\n        title: \"\",\n        label: this.hass!.localize(\n          \"ui.panel.lovelace.unused_entities.state_icon\"\n        ),\n        type: \"icon\",\n        template: (_icon, entity: any) => html`\n          <state-badge\n            @click=${this._handleEntityClicked}\n            .hass=${this.hass!}\n            .stateObj=${entity.stateObj}\n          ></state-badge>\n        `,\n      },\n      name: {\n        title: this.hass!.localize(\"ui.panel.lovelace.unused_entities.entity\"),\n        sortable: true,\n        filterable: true,\n        grows: true,\n        direction: \"asc\",\n        template: (name, entity: any) => html`\n          <div @click=${this._handleEntityClicked} style=\"cursor: pointer;\">\n            ${name}\n            ${narrow\n              ? html` <div class=\"secondary\">${entity.entity_id}</div> `\n              : \"\"}\n          </div>\n        `,\n      },\n    };\n\n    columns.entity_id = {\n      title: this.hass!.localize(\"ui.panel.lovelace.unused_entities.entity_id\"),\n      sortable: true,\n      filterable: true,\n      width: \"30%\",\n      hidden: narrow,\n    };\n\n    columns.domain = {\n      title: this.hass!.localize(\"ui.panel.lovelace.unused_entities.domain\"),\n      sortable: true,\n      filterable: true,\n      width: \"15%\",\n      hidden: narrow,\n    };\n\n    columns.last_changed = {\n      title: this.hass!.localize(\n        \"ui.panel.lovelace.unused_entities.last_changed\"\n      ),\n      type: \"numeric\",\n      sortable: true,\n      width: \"15%\",\n      hidden: narrow,\n      template: (lastChanged: string) => html`\n        <ha-relative-time\n          .hass=${this.hass!}\n          .datetime=${lastChanged}\n          capitalize\n        ></ha-relative-time>\n      `,\n    };\n\n    return columns;\n  });\n\n  private _handleSelectionChanged(\n    ev: HASSDomEvent<SelectionChangedEvent>\n  ): void {\n    const selectedEntities = ev.detail.value;\n\n    fireEvent(this, \"selected-changed\", { selectedEntities });\n  }\n\n  private _handleEntityClicked(ev: Event) {\n    const entityId = (\n      (ev.target as HTMLElement).closest(\".mdc-data-table__row\") as any\n    ).rowId;\n    fireEvent(this, \"hass-more-info\", {\n      entityId,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-data-table {\n        --data-table-border-width: 0;\n        height: 100%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-entity-picker-table\": HuiEntityPickerTable;\n  }\n}\n"],"names":[],"sourceRoot":""}