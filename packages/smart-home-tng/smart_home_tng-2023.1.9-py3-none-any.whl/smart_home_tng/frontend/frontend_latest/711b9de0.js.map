{"version":3,"file":"711b9de0.js","mappings":";;AA0EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AAEA;AAkCA;AACA;ACnHA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;AAuCA;;;;;;AClCA;;;;AAKA;;;;ACVA;AACA;AACA;;AAGA;;;;;AASA","sources":["webpack://home-assistant-frontend/mwc-fab-base.ts","webpack://home-assistant-frontend/./src/components/data-table/ha-data-table-icon.ts","webpack://home-assistant-frontend/./src/components/ha-fab.ts","webpack://home-assistant-frontend/./src/components/ha-help-tooltip.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\nimport '@material/mwc-ripple/mwc-ripple';\n\nimport {Ripple} from '@material/mwc-ripple/mwc-ripple';\nimport {RippleHandlers} from '@material/mwc-ripple/ripple-handlers';\nimport {html, LitElement, TemplateResult} from 'lit';\nimport {eventOptions, property, queryAsync, state} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\n/**\n * Fab Base class logic and template definition\n * @soyCompatible\n */\nexport class FabBase extends LitElement {\n  static override shadowRootOptions:\n      ShadowRootInit = {mode: 'open', delegatesFocus: true};\n\n  @queryAsync('mwc-ripple') ripple!: Promise<Ripple|null>;\n\n  @property({type: Boolean}) mini = false;\n\n  @property({type: Boolean}) exited = false;\n\n  @property({type: Boolean}) disabled = false;\n\n  @property({type: Boolean}) extended = false;\n\n  @property({type: Boolean}) showIconAtEnd = false;\n\n  @property({type: Boolean}) reducedTouchTarget = false;\n\n  @property() icon = '';\n\n  @property() label = '';\n\n  @state() protected shouldRenderRipple = false;\n\n  @state() protected useStateLayerCustomProperties = false;\n\n  protected rippleHandlers = new RippleHandlers(() => {\n    this.shouldRenderRipple = true;\n    return this.ripple;\n  });\n\n  /**\n   * @soyTemplate\n   * @soyClasses fabClasses: .mdc-fab\n   */\n  protected override render(): TemplateResult {\n    const hasTouchTarget = this.mini && !this.reducedTouchTarget;\n    /** @classMap */\n    const classes = {\n      'mdc-fab--mini': this.mini,\n      'mdc-fab--touch': hasTouchTarget,\n      'mdc-fab--exited': this.exited,\n      'mdc-fab--extended': this.extended,\n      'icon-end': this.showIconAtEnd,\n    };\n\n    const ariaLabel = this.label ? this.label : this.icon;\n\n    /*\n     * Some internal styling is sensitive to whitespace in this template, take\n     * care when modifying it.\n     */\n    return html`<button\n          class=\"mdc-fab ${classMap(classes)}\"\n          ?disabled=\"${this.disabled}\"\n          aria-label=\"${ariaLabel}\"\n          @mouseenter=${this.handleRippleMouseEnter}\n          @mouseleave=${this.handleRippleMouseLeave}\n          @focus=${this.handleRippleFocus}\n          @blur=${this.handleRippleBlur}\n          @mousedown=${this.handleRippleActivate}\n          @touchstart=${this.handleRippleStartPress}\n          @touchend=${this.handleRippleDeactivate}\n          @touchcancel=${this.handleRippleDeactivate}><!--\n        -->${this.renderBeforeRipple()}<!--\n        -->${this.renderRipple()}<!--\n        -->${this.showIconAtEnd ? this.renderLabel() : ''}<!--\n        --><span class=\"material-icons mdc-fab__icon\"><!--\n          --><slot name=\"icon\">${this.icon}</slot><!--\n       --></span><!--\n        -->${!this.showIconAtEnd ? this.renderLabel() : ''}<!--\n        -->${this.renderTouchTarget()}<!--\n      --></button>`;\n  }\n\n  /** @soyTemplate */\n  protected renderIcon(): TemplateResult {\n    // TODO(b/191914389): reimplement once Wit issue is resolved\n    return html``;\n  }\n\n  /** @soyTemplate */\n  protected renderTouchTarget(): TemplateResult {\n    const hasTouchTarget = this.mini && !this.reducedTouchTarget;\n\n    return html`${\n        hasTouchTarget ? html`<div class=\"mdc-fab__touch\"></div>` : ''}`;\n  }\n\n  /** @soyTemplate */\n  protected renderLabel(): TemplateResult {\n    const showLabel = this.label !== '' && this.extended;\n\n    return html`${\n        showLabel ? html`<span class=\"mdc-fab__label\">${this.label}</span>` :\n                    ''}`;\n  }\n\n  /** @soyTemplate */\n  protected renderBeforeRipple(): TemplateResult {\n    return html``;\n  }\n\n  /** @soyTemplate */\n  protected renderRipple(): TemplateResult|string {\n    return this.shouldRenderRipple ? html`<mwc-ripple class=\"ripple\"\n        .internalUseStateLayerCustomProperties=\"${\n                                         this.useStateLayerCustomProperties}\"\n         ></mwc-ripple>` :\n                                     '';\n  }\n\n  protected handleRippleActivate(event?: Event) {\n    const onUp = () => {\n      window.removeEventListener('mouseup', onUp);\n\n      this.handleRippleDeactivate();\n    };\n\n    window.addEventListener('mouseup', onUp);\n    this.handleRippleStartPress(event);\n  }\n\n  @eventOptions({passive: true})\n  protected handleRippleStartPress(event?: Event) {\n    this.rippleHandlers.startPress(event);\n  }\n\n  protected handleRippleDeactivate() {\n    this.rippleHandlers.endPress();\n  }\n\n  protected handleRippleMouseEnter() {\n    this.rippleHandlers.startHover();\n  }\n\n  protected handleRippleMouseLeave() {\n    this.rippleHandlers.endHover();\n  }\n\n  protected handleRippleFocus() {\n    this.rippleHandlers.startFocus();\n  }\n\n  protected handleRippleBlur() {\n    this.rippleHandlers.endFocus();\n  }\n}\n","import { css, html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../ha-svg-icon\";\n\n@customElement(\"ha-data-table-icon\")\nclass HaDataTableIcon extends LitElement {\n  @property() public tooltip!: string;\n\n  @property() public path!: string;\n\n  @state() private _hovered = false;\n\n  protected render(): TemplateResult {\n    return html`\n      ${this._hovered ? html`<div>${this.tooltip}</div>` : \"\"}\n      <ha-svg-icon .path=${this.path}></ha-svg-icon>\n    `;\n  }\n\n  protected override firstUpdated(changedProps: PropertyValues): void {\n    super.firstUpdated(changedProps);\n    const show = () => {\n      this._hovered = true;\n    };\n    const hide = () => {\n      this._hovered = false;\n    };\n    this.addEventListener(\"mouseenter\", show);\n    this.addEventListener(\"focus\", show);\n    this.addEventListener(\"mouseleave\", hide);\n    this.addEventListener(\"blur\", hide);\n    this.addEventListener(\"tap\", hide);\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ha-svg-icon {\n        color: var(--secondary-text-color);\n      }\n      div {\n        position: absolute;\n        right: 28px;\n        z-index: 1002;\n        outline: none;\n        font-size: 10px;\n        line-height: 1;\n        background-color: var(--paper-tooltip-background, #616161);\n        color: var(--paper-tooltip-text-color, white);\n        padding: 8px;\n        border-radius: 2px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-data-table-icon\": HaDataTableIcon;\n  }\n}\n","import { FabBase } from \"@material/mwc-fab/mwc-fab-base\";\nimport { styles } from \"@material/mwc-fab/mwc-fab.css\";\nimport { customElement } from \"lit/decorators\";\nimport { css } from \"lit\";\n\n@customElement(\"ha-fab\")\nexport class HaFab extends FabBase {\n  protected firstUpdated(changedProperties) {\n    super.firstUpdated(changedProperties);\n    this.style.setProperty(\"--mdc-theme-secondary\", \"var(--primary-color)\");\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host .mdc-fab--extended .mdc-fab__icon {\n        margin-inline-start: -8px;\n        margin-inline-end: 12px;\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          :host .mdc-fab--extended .mdc-fab__icon {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-fab\": HaFab;\n  }\n}\n","import { mdiHelpCircle } from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-help-tooltip\")\nexport class HaHelpTooltip extends LitElement {\n  @property() public label!: string;\n\n  @property() public position = \"top\";\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-svg-icon .path=${mdiHelpCircle}></ha-svg-icon>\n      <paper-tooltip\n        offset=\"4\"\n        .position=${this.position}\n        .fitToVisibleBounds=${true}\n        >${this.label}</paper-tooltip\n      >\n    `;\n  }\n\n  static get styles() {\n    return css`\n      ha-svg-icon {\n        --mdc-icon-size: var(--ha-help-tooltip-size, 14px);\n        color: var(--ha-help-tooltip-color, var(--disabled-text-color));\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-help-tooltip\": HaHelpTooltip;\n  }\n}\n"],"names":[],"sourceRoot":""}