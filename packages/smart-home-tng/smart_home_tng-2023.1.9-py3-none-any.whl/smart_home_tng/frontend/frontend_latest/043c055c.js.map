{"version":3,"file":"043c055c.js","mappings":";;AA0FA;;AAKA;;AAKA;;AASA;;AAGA;;AASA;AAKA;;AAEA;AACA;AACA;AACA;AACA;AAIA;AAGA;AACA;;AAEA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgJA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/cards/hui-gauge-card.ts"],"sourcesContent":["import { HassEntity } from \"home-assistant-js-websocket/dist/types\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { applyThemesOnElement } from \"../../../common/dom/apply_themes_on_element\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { isValidEntityId } from \"../../../common/entity/valid_entity_id\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-gauge\";\nimport { UNAVAILABLE } from \"../../../data/entity\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { findEntities } from \"../common/find-entities\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport type { LovelaceCard, LovelaceCardEditor } from \"../types\";\nimport type { GaugeCardConfig } from \"./types\";\n\nexport const severityMap = {\n  red: \"var(--error-color)\",\n  green: \"var(--success-color)\",\n  yellow: \"var(--warning-color)\",\n  normal: \"var(--info-color)\",\n};\n\n@customElement(\"hui-gauge-card\")\nclass HuiGaugeCard extends LitElement implements LovelaceCard {\n  public static async getConfigElement(): Promise<LovelaceCardEditor> {\n    await import(\"../editor/config-elements/hui-gauge-card-editor\");\n    return document.createElement(\"hui-gauge-card-editor\");\n  }\n\n  public static getStubConfig(\n    hass: HomeAssistant,\n    entities: string[],\n    entitiesFallback: string[]\n  ): GaugeCardConfig {\n    const includeDomains = [\"counter\", \"input_number\", \"number\", \"sensor\"];\n    const maxEntities = 1;\n    const entityFilter = (stateObj: HassEntity): boolean =>\n      !isNaN(Number(stateObj.state));\n\n    const foundEntities = findEntities(\n      hass,\n      maxEntities,\n      entities,\n      entitiesFallback,\n      includeDomains,\n      entityFilter\n    );\n\n    return { type: \"gauge\", entity: foundEntities[0] || \"\" };\n  }\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: GaugeCardConfig;\n\n  public getCardSize(): number {\n    return 4;\n  }\n\n  public setConfig(config: GaugeCardConfig): void {\n    if (!config.entity) {\n      throw new Error(\"Entity must be specified\");\n    }\n    if (!isValidEntityId(config.entity)) {\n      throw new Error(\"Invalid entity\");\n    }\n\n    this._config = { min: 0, max: 100, ...config };\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity];\n\n    if (!stateObj) {\n      return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        </hui-warning>\n      `;\n    }\n\n    const entityState = Number(stateObj.state);\n\n    if (stateObj.state === UNAVAILABLE) {\n      return html`\n        <hui-warning\n          >${this.hass.localize(\n            \"ui.panel.lovelace.warning.entity_unavailable\",\n            \"entity\",\n            this._config.entity\n          )}</hui-warning\n        >\n      `;\n    }\n\n    if (isNaN(entityState)) {\n      return html`\n        <hui-warning\n          >${this.hass.localize(\n            \"ui.panel.lovelace.warning.entity_non_numeric\",\n            \"entity\",\n            this._config.entity\n          )}</hui-warning\n        >\n      `;\n    }\n\n    const name = this._config.name ?? computeStateName(stateObj);\n\n    // Use `stateObj.state` as value to keep formatting (e.g trailing zeros)\n    // for consistent value display across gauge, entity, entity-row, etc.\n    return html`\n      <ha-card @click=${this._handleClick} tabindex=\"0\">\n        <ha-gauge\n          .min=${this._config.min!}\n          .max=${this._config.max!}\n          .value=${stateObj.state}\n          .locale=${this.hass!.locale}\n          .label=${this._config!.unit ||\n          this.hass?.states[this._config!.entity].attributes\n            .unit_of_measurement ||\n          \"\"}\n          style=${styleMap({\n            \"--gauge-color\": this._computeSeverity(entityState),\n          })}\n          .needle=${this._config!.needle}\n          .levels=${this._config!.needle ? this._severityLevels() : undefined}\n        ></ha-gauge>\n        <div class=\"name\" .title=${name}>${name}</div>\n      </ha-card>\n    `;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n    if (!this._config || !this.hass) {\n      return;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    const oldConfig = changedProps.get(\"_config\") as\n      | GaugeCardConfig\n      | undefined;\n\n    if (\n      !oldHass ||\n      !oldConfig ||\n      oldHass.themes !== this.hass.themes ||\n      oldConfig.theme !== this._config.theme\n    ) {\n      applyThemesOnElement(this, this.hass.themes, this._config.theme);\n    }\n  }\n\n  private _computeSeverity(numberValue: number): string | undefined {\n    if (this._config!.needle) {\n      return undefined;\n    }\n\n    // new format\n    let segments = this._config!.segments;\n    if (segments) {\n      segments = [...segments].sort((a, b) => a?.from - b?.from);\n\n      for (let i = 0; i < segments.length; i++) {\n        const segment = segments[i];\n        if (\n          segment &&\n          numberValue >= segment.from &&\n          (i + 1 === segments.length || numberValue < segments[i + 1]?.from)\n        ) {\n          return segment.color;\n        }\n      }\n      return severityMap.normal;\n    }\n\n    // old format\n    const sections = this._config!.severity;\n\n    if (!sections) {\n      return severityMap.normal;\n    }\n\n    const sectionsArray = Object.keys(sections);\n    const sortable = sectionsArray.map((severity) => [\n      severity,\n      sections[severity],\n    ]);\n\n    for (const severity of sortable) {\n      if (severityMap[severity[0]] == null || isNaN(severity[1])) {\n        return severityMap.normal;\n      }\n    }\n    sortable.sort((a, b) => a[1] - b[1]);\n\n    if (numberValue >= sortable[0][1] && numberValue < sortable[1][1]) {\n      return severityMap[sortable[0][0]];\n    }\n    if (numberValue >= sortable[1][1] && numberValue < sortable[2][1]) {\n      return severityMap[sortable[1][0]];\n    }\n    if (numberValue >= sortable[2][1]) {\n      return severityMap[sortable[2][0]];\n    }\n    return severityMap.normal;\n  }\n\n  private _severityLevels() {\n    // new format\n    const segments = this._config!.segments;\n    if (segments) {\n      return segments.map((segment) => ({\n        level: segment?.from,\n        stroke: segment?.color,\n        label: segment?.label,\n      }));\n    }\n\n    // old format\n    const sections = this._config!.severity;\n\n    if (!sections) {\n      return [{ level: 0, stroke: severityMap.normal }];\n    }\n\n    const sectionsArray = Object.keys(sections);\n    return sectionsArray.map((severity) => ({\n      level: sections[severity],\n      stroke: severityMap[severity],\n    }));\n  }\n\n  private _handleClick(): void {\n    fireEvent(this, \"hass-more-info\", { entityId: this._config!.entity });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-card {\n        cursor: pointer;\n        height: 100%;\n        overflow: hidden;\n        padding: 16px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-direction: column;\n        box-sizing: border-box;\n      }\n\n      ha-card:focus {\n        outline: none;\n        background: var(--divider-color);\n      }\n\n      ha-gauge {\n        width: 100%;\n        max-width: 250px;\n      }\n\n      .name {\n        text-align: center;\n        line-height: initial;\n        color: var(--primary-text-color);\n        width: 100%;\n        font-size: 15px;\n        margin-top: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-gauge-card\": HuiGaugeCard;\n  }\n}\n"],"names":[],"sourceRoot":""}