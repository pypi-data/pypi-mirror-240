{"version":3,"file":"b486c545.js","mappings":";AAsKA;AACA;AAPA;;;;AA0HA","sources":["webpack://home-assistant-frontend/./src/components/ha-icon.ts"],"sourcesContent":["import \"@polymer/iron-icon/iron-icon\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { debounce } from \"../common/util/debounce\";\nimport { CustomIcon, customIcons } from \"../data/custom_icons\";\nimport {\n  checkCacheVersion,\n  Chunks,\n  findIconChunk,\n  getIcon,\n  Icons,\n  MDI_PREFIXES,\n  writeCache,\n} from \"../data/iconsets\";\nimport \"./ha-svg-icon\";\n\ninterface DeprecatedIcon {\n  [key: string]: {\n    removeIn: string;\n    newName?: string;\n  };\n}\n\nconst mdiDeprecatedIcons: DeprecatedIcon = {\n  \"android-messages\": {\n    newName: \"message-text\",\n    removeIn: \"2022.10\",\n  },\n  \"book-variant-multiple\": {\n    newName: \"bookmark-box-multiple\",\n    removeIn: \"2022.10\",\n  },\n  \"desktop-mac\": {\n    newName: \"monitor\",\n    removeIn: \"2022.10\",\n  },\n  \"desktop-mac-dashboard\": {\n    newName: \"monitor-dashboard\",\n    removeIn: \"2022.10\",\n  },\n  discord: {\n    removeIn: \"2022.10\",\n  },\n  \"diving-scuba\": {\n    newName: \"diving-scuba-mask\",\n    removeIn: \"2022.10\",\n  },\n  \"email-send\": {\n    newName: \"email-arrow-right\",\n    removeIn: \"2022.10\",\n  },\n  \"email-send-outline\": {\n    newName: \"email-arrow-right-outline\",\n    removeIn: \"2022.10\",\n  },\n  \"email-receive\": {\n    newName: \"email-arrow-left\",\n    removeIn: \"2022.10\",\n  },\n  \"email-receive-outline\": {\n    newName: \"email-arrow-left-outline\",\n    removeIn: \"2022.10\",\n  },\n  \"format-textdirection-r-to-l\": {\n    newName: \"format-pilcrow-arrow-left\",\n    removeIn: \"2022.10\",\n  },\n  \"format-textdirection-l-to-r\": {\n    newName: \"format-pilcrow-arrow-right\",\n    removeIn: \"2022.10\",\n  },\n  \"google-controller\": {\n    newName: \"controller\",\n    removeIn: \"2022.10\",\n  },\n  \"google-controller-off\": {\n    newName: \"controller-off\",\n    removeIn: \"2022.10\",\n  },\n  \"google-home\": {\n    removeIn: \"2022.10\",\n  },\n  lecturn: {\n    newName: \"lectern\",\n    removeIn: \"2022.10\",\n  },\n  receipt: {\n    newName: \"receipt-text\",\n    removeIn: \"2022.10\",\n  },\n  \"receipt-outline\": {\n    newName: \"receipt-text-outline\",\n    removeIn: \"2022.10\",\n  },\n  \"tablet-android\": {\n    newName: \"tablet\",\n    removeIn: \"2022.10\",\n  },\n  \"text-to-speech\": {\n    newName: \"microphone-message\",\n    removeIn: \"2022.10\",\n  },\n  \"text-to-speech-off\": {\n    newName: \"microphone-message-off\",\n    removeIn: \"2022.10\",\n  },\n  \"timeline-help\": {\n    newName: \"timeline-question\",\n    removeIn: \"2022.10\",\n  },\n  \"timeline-help-outline\": {\n    newName: \"timeline-question-outline\",\n    removeIn: \"2022.10\",\n  },\n  \"vector-point\": {\n    newName: \"vector-point-select\",\n    removeIn: \"2022.10\",\n  },\n};\n\nconst chunks: Chunks = {};\n\n// Supervisor doesn't use icons, and should not update/downgrade the icon DB.\nif (!__SUPERVISOR__) {\n  checkCacheVersion();\n}\n\nconst debouncedWriteCache = debounce(() => writeCache(chunks), 2000);\n\nconst cachedIcons: Record<string, string> = {};\n\n@customElement(\"ha-icon\")\nexport class HaIcon extends LitElement {\n  @property() public icon?: string;\n\n  @state() private _path?: string;\n\n  @state() private _viewBox?: string;\n\n  @state() private _legacy = false;\n\n  public willUpdate(changedProps: PropertyValues) {\n    super.willUpdate(changedProps);\n    if (changedProps.has(\"icon\")) {\n      this._path = undefined;\n      this._viewBox = undefined;\n      this._loadIcon();\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this.icon) {\n      return html``;\n    }\n    if (this._legacy) {\n      return html`<iron-icon .icon=${this.icon}></iron-icon>`;\n    }\n    return html`<ha-svg-icon\n      .path=${this._path}\n      .viewBox=${this._viewBox}\n    ></ha-svg-icon>`;\n  }\n\n  private async _loadIcon() {\n    if (!this.icon) {\n      return;\n    }\n    const requestedIcon = this.icon;\n    const [iconPrefix, origIconName] = this.icon.split(\":\", 2);\n\n    let iconName = origIconName;\n\n    if (!iconPrefix || !iconName) {\n      return;\n    }\n\n    if (!MDI_PREFIXES.includes(iconPrefix)) {\n      if (iconPrefix in customIcons) {\n        const customIcon = customIcons[iconPrefix];\n        if (customIcon && typeof customIcon.getIcon === \"function\") {\n          this._setCustomPath(customIcon.getIcon(iconName), requestedIcon);\n        }\n        return;\n      }\n      this._legacy = true;\n      return;\n    }\n\n    this._legacy = false;\n\n    if (iconName in mdiDeprecatedIcons) {\n      const deprecatedIcon = mdiDeprecatedIcons[iconName];\n      let message: string;\n\n      if (deprecatedIcon.newName) {\n        message = `Icon ${iconPrefix}:${iconName} was renamed to ${iconPrefix}:${deprecatedIcon.newName}, please change your config, it will be removed in version ${deprecatedIcon.removeIn}.`;\n        iconName = deprecatedIcon.newName!;\n      } else {\n        message = `Icon ${iconPrefix}:${iconName} was removed from MDI, please replace this icon with an other icon in your config, it will be removed in version ${deprecatedIcon.removeIn}.`;\n      }\n      // eslint-disable-next-line no-console\n      console.warn(message);\n      fireEvent(this, \"write_log\", {\n        level: \"warning\",\n        message,\n      });\n    }\n\n    if (iconName in cachedIcons) {\n      this._path = cachedIcons[iconName];\n      return;\n    }\n\n    let databaseIcon: string | undefined;\n    try {\n      databaseIcon = await getIcon(iconName);\n    } catch (_err) {\n      // Firefox in private mode doesn't support IDB\n      // iOS Safari sometimes doesn't open the DB\n      databaseIcon = undefined;\n    }\n\n    if (databaseIcon) {\n      if (this.icon === requestedIcon) {\n        this._path = databaseIcon;\n      }\n      cachedIcons[iconName] = databaseIcon;\n      return;\n    }\n    const chunk = findIconChunk(iconName);\n\n    if (chunk in chunks) {\n      this._setPath(chunks[chunk], iconName, requestedIcon);\n      return;\n    }\n\n    const iconPromise = fetch(`/static/mdi/${chunk}.json`).then((response) =>\n      response.json()\n    );\n    chunks[chunk] = iconPromise;\n    this._setPath(iconPromise, iconName, requestedIcon);\n    debouncedWriteCache();\n  }\n\n  private async _setCustomPath(\n    promise: Promise<CustomIcon>,\n    requestedIcon: string\n  ) {\n    const icon = await promise;\n    if (this.icon !== requestedIcon) {\n      return;\n    }\n    this._path = icon.path;\n    this._viewBox = icon.viewBox;\n  }\n\n  private async _setPath(\n    promise: Promise<Icons>,\n    iconName: string,\n    requestedIcon: string\n  ) {\n    const iconPack = await promise;\n    if (this.icon === requestedIcon) {\n      this._path = iconPack[iconName];\n    }\n    cachedIcons[iconName] = iconPack[iconName];\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        fill: currentcolor;\n      }\n    `;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon\": HaIcon;\n  }\n}\n"],"names":[],"sourceRoot":""}