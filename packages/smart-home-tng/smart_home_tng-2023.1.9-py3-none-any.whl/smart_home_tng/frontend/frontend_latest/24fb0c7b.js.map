{"version":3,"file":"24fb0c7b.js","mappings":";AA+PA;;AAEA;AAEA;;AAIA;;;;AAMA;;;;;AAKA;;;;;;;AAWA;;AAGA;;;;AAMA;;;AAOA;AAIA;;AAGA;;;;AAMA;AAGA;;;;AAKA;;;;;;;;;;;;AAaA;;AAGA;AAEA;;;;;AAMA;;;;;AAMA;;AAIA;;AAGA;;;AAIA;;;;;AAQA;;;;;AAOA;;;AAOA;;AAIA;AAGA;;;;;AAMA;;AAIA;AAGA;AAEA;;;;;AAMA;AAGA;;AAMA;AAEA;;;;;AAMA;AAGA;;AAOA;;;;;;AAOA;;;;AAWA;;;AAIA;;;;AAMA;;;;;;;;;;AAWA;;;;;;;;AAUA;;;;;AAOA;;;;AAMA;AAEA;;;;;;AAMA;;;AAIA;;AAIA;AAEA;;;AAIA;;AAIA;AAEA;;;;;;;;AASA;;;;AAOA;AAEA;;;;;AAMA;;;;AAKA;;;AAGA;;;;;;AAOA;;;;;;AAUA;AAEA;;;;;;AAOA;;;;;;AAMA;AAEA;;;;;;AAOA;;;;;;AAMA;AAEA;;;;;;AAOA;;;;;;AAMA;AAEA;;;;;;AAOA;;;;;;AAMA;AAEA;;;;;;AAOA;;;;;;;AAOA;AAEA;;;;;;AAOA;;;;;;AAMA;;;;AAKA;;;;AAKA;;;;AAMA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgOA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/cards/energy/hui-energy-distribution-card.ts"],"sourcesContent":["import {\n  mdiArrowDown,\n  mdiArrowLeft,\n  mdiArrowRight,\n  mdiArrowUp,\n  mdiBatteryHigh,\n  mdiFire,\n  mdiHome,\n  mdiLeaf,\n  mdiSolarPower,\n  mdiTransmissionTower,\n} from \"@mdi/js\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { css, html, LitElement, svg } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport \"@material/mwc-button\";\nimport { formatNumber } from \"../../../../common/number/format_number\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-svg-icon\";\nimport {\n  EnergyData,\n  energySourcesByType,\n  getEnergyDataCollection,\n  getEnergyGasUnit,\n} from \"../../../../data/energy\";\nimport { calculateStatisticsSumGrowth } from \"../../../../data/recorder\";\nimport { SubscribeMixin } from \"../../../../mixins/subscribe-mixin\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { LovelaceCard } from \"../../types\";\nimport { EnergyDistributionCardConfig } from \"../types\";\n\nconst CIRCLE_CIRCUMFERENCE = 238.76104;\n\n@customElement(\"hui-energy-distribution-card\")\nclass HuiEnergyDistrubutionCard\n  extends SubscribeMixin(LitElement)\n  implements LovelaceCard\n{\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _config?: EnergyDistributionCardConfig;\n\n  @state() private _data?: EnergyData;\n\n  protected hassSubscribeRequiredHostProps = [\"_config\"];\n\n  public setConfig(config: EnergyDistributionCardConfig): void {\n    this._config = config;\n  }\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      getEnergyDataCollection(this.hass, {\n        key: this._config?.collection_key,\n      }).subscribe((data) => {\n        this._data = data;\n      }),\n    ];\n  }\n\n  public getCardSize(): Promise<number> | number {\n    return 3;\n  }\n\n  protected render() {\n    if (!this._config) {\n      return html``;\n    }\n\n    if (!this._data) {\n      return html`${this.hass.localize(\n        \"ui.panel.lovelace.cards.energy.loading\"\n      )}`;\n    }\n\n    const prefs = this._data.prefs;\n    const types = energySourcesByType(prefs);\n\n    // The strategy only includes this card if we have a grid.\n    const hasConsumption = true;\n\n    const hasSolarProduction = types.solar !== undefined;\n    const hasBattery = types.battery !== undefined;\n    const hasGas = types.gas !== undefined;\n    const hasReturnToGrid = hasConsumption && types.grid![0].flow_to.length > 0;\n\n    const totalFromGrid =\n      calculateStatisticsSumGrowth(\n        this._data.stats,\n        types.grid![0].flow_from.map((flow) => flow.stat_energy_from)\n      ) ?? 0;\n\n    let gasUsage: number | null = null;\n    if (hasGas) {\n      gasUsage =\n        calculateStatisticsSumGrowth(\n          this._data.stats,\n          types.gas!.map((source) => source.stat_energy_from)\n        ) ?? 0;\n    }\n\n    let totalSolarProduction: number | null = null;\n\n    if (hasSolarProduction) {\n      totalSolarProduction =\n        calculateStatisticsSumGrowth(\n          this._data.stats,\n          types.solar!.map((source) => source.stat_energy_from)\n        ) || 0;\n    }\n\n    let totalBatteryIn: number | null = null;\n    let totalBatteryOut: number | null = null;\n\n    if (hasBattery) {\n      totalBatteryIn =\n        calculateStatisticsSumGrowth(\n          this._data.stats,\n          types.battery!.map((source) => source.stat_energy_to)\n        ) || 0;\n      totalBatteryOut =\n        calculateStatisticsSumGrowth(\n          this._data.stats,\n          types.battery!.map((source) => source.stat_energy_from)\n        ) || 0;\n    }\n\n    let returnedToGrid: number | null = null;\n\n    if (hasReturnToGrid) {\n      returnedToGrid =\n        calculateStatisticsSumGrowth(\n          this._data.stats,\n          types.grid![0].flow_to.map((flow) => flow.stat_energy_to)\n        ) || 0;\n    }\n\n    let solarConsumption: number | null = null;\n    if (hasSolarProduction) {\n      solarConsumption =\n        (totalSolarProduction || 0) -\n        (returnedToGrid || 0) -\n        (totalBatteryIn || 0);\n    }\n\n    let batteryFromGrid: null | number = null;\n    let batteryToGrid: null | number = null;\n    if (solarConsumption !== null && solarConsumption < 0) {\n      // What we returned to the grid and what went in to the battery is more than produced,\n      // so we have used grid energy to fill the battery\n      // or returned battery energy to the grid\n      if (hasBattery) {\n        batteryFromGrid = solarConsumption * -1;\n        if (batteryFromGrid > totalFromGrid) {\n          batteryToGrid = Math.min(0, batteryFromGrid - totalFromGrid);\n          batteryFromGrid = totalFromGrid;\n        }\n      }\n      solarConsumption = 0;\n    }\n\n    let solarToBattery: null | number = null;\n    if (hasSolarProduction && hasBattery) {\n      if (!batteryToGrid) {\n        batteryToGrid = Math.max(\n          0,\n          (returnedToGrid || 0) -\n            (totalSolarProduction || 0) -\n            (totalBatteryIn || 0) -\n            (batteryFromGrid || 0)\n        );\n      }\n      solarToBattery = totalBatteryIn! - (batteryFromGrid || 0);\n    } else if (!hasSolarProduction && hasBattery) {\n      batteryToGrid = returnedToGrid;\n    }\n\n    let batteryConsumption: number | null = null;\n    if (hasBattery) {\n      batteryConsumption = (totalBatteryOut || 0) - (batteryToGrid || 0);\n    }\n\n    const gridConsumption = Math.max(0, totalFromGrid - (batteryFromGrid || 0));\n\n    const totalHomeConsumption = Math.max(\n      0,\n      gridConsumption + (solarConsumption || 0) + (batteryConsumption || 0)\n    );\n\n    let homeSolarCircumference: number | undefined;\n    if (hasSolarProduction) {\n      homeSolarCircumference =\n        CIRCLE_CIRCUMFERENCE * (solarConsumption! / totalHomeConsumption);\n    }\n\n    let homeBatteryCircumference: number | undefined;\n    if (batteryConsumption) {\n      homeBatteryCircumference =\n        CIRCLE_CIRCUMFERENCE * (batteryConsumption / totalHomeConsumption);\n    }\n\n    let lowCarbonEnergy: number | undefined;\n\n    let homeLowCarbonCircumference: number | undefined;\n    let homeHighCarbonCircumference: number | undefined;\n\n    // This fallback is used in the demo\n    let electricityMapUrl = \"https://app.electricitymap.org\";\n\n    if (this._data.co2SignalEntity && this._data.fossilEnergyConsumption) {\n      // Calculate high carbon consumption\n      const highCarbonEnergy = Object.values(\n        this._data.fossilEnergyConsumption\n      ).reduce((sum, a) => sum + a, 0);\n\n      const co2State = this.hass.states[this._data.co2SignalEntity];\n\n      if (co2State?.attributes.country_code) {\n        electricityMapUrl += `/zone/${co2State.attributes.country_code}`;\n      }\n\n      if (highCarbonEnergy !== null) {\n        lowCarbonEnergy = totalFromGrid - highCarbonEnergy;\n\n        let highCarbonConsumption: number;\n        if (gridConsumption !== totalFromGrid) {\n          // Only get the part that was used for consumption and not the battery\n          highCarbonConsumption =\n            highCarbonEnergy * (gridConsumption / totalFromGrid);\n        } else {\n          highCarbonConsumption = highCarbonEnergy;\n        }\n\n        homeHighCarbonCircumference =\n          CIRCLE_CIRCUMFERENCE * (highCarbonConsumption / totalHomeConsumption);\n\n        homeLowCarbonCircumference =\n          CIRCLE_CIRCUMFERENCE -\n          (homeSolarCircumference || 0) -\n          (homeBatteryCircumference || 0) -\n          homeHighCarbonCircumference;\n      }\n    }\n\n    const totalLines =\n      gridConsumption +\n      (solarConsumption || 0) +\n      (returnedToGrid ? returnedToGrid - (batteryToGrid || 0) : 0) +\n      (solarToBattery || 0) +\n      (batteryConsumption || 0) +\n      (batteryFromGrid || 0) +\n      (batteryToGrid || 0);\n\n    return html`\n      <ha-card .header=${this._config.title}>\n        <div class=\"card-content\">\n          ${lowCarbonEnergy !== undefined || hasSolarProduction || hasGas\n            ? html`<div class=\"row\">\n                ${lowCarbonEnergy === undefined\n                  ? html`<div class=\"spacer\"></div>`\n                  : html`<div class=\"circle-container low-carbon\">\n                      <span class=\"label\"\n                        >${this.hass.localize(\n                          \"ui.panel.lovelace.cards.energy.energy_distribution.non_fossil\"\n                        )}</span\n                      >\n                      <a\n                        class=\"circle\"\n                        href=${electricityMapUrl}\n                        target=\"_blank\"\n                        rel=\"noopener no referrer\"\n                      >\n                        <ha-svg-icon .path=${mdiLeaf}></ha-svg-icon>\n                        ${lowCarbonEnergy\n                          ? formatNumber(lowCarbonEnergy, this.hass.locale, {\n                              maximumFractionDigits: 1,\n                            })\n                          : \"—\"}\n                        kWh\n                      </a>\n                      <svg width=\"80\" height=\"30\">\n                        <line x1=\"40\" y1=\"0\" x2=\"40\" y2=\"30\"></line>\n                      </svg>\n                    </div>`}\n                ${hasSolarProduction\n                  ? html`<div class=\"circle-container solar\">\n                      <span class=\"label\"\n                        >${this.hass.localize(\n                          \"ui.panel.lovelace.cards.energy.energy_distribution.solar\"\n                        )}</span\n                      >\n                      <div class=\"circle\">\n                        <ha-svg-icon .path=${mdiSolarPower}></ha-svg-icon>\n                        ${formatNumber(\n                          totalSolarProduction || 0,\n                          this.hass.locale,\n                          { maximumFractionDigits: 1 }\n                        )}\n                        kWh\n                      </div>\n                    </div>`\n                  : hasGas\n                  ? html`<div class=\"spacer\"></div>`\n                  : \"\"}\n                ${hasGas\n                  ? html`<div class=\"circle-container gas\">\n                      <span class=\"label\"\n                        >${this.hass.localize(\n                          \"ui.panel.lovelace.cards.energy.energy_distribution.gas\"\n                        )}</span\n                      >\n                      <div class=\"circle\">\n                        <ha-svg-icon .path=${mdiFire}></ha-svg-icon>\n                        ${formatNumber(gasUsage || 0, this.hass.locale, {\n                          maximumFractionDigits: 1,\n                        })}\n                        ${getEnergyGasUnit(prefs, this._data.statsMetadata) ||\n                        \"m³\"}\n                      </div>\n                      <svg width=\"80\" height=\"30\">\n                        <path d=\"M40 0 v30\" id=\"gas\" />\n                        ${gasUsage\n                          ? svg`<circle\n                    r=\"1\"\n                    class=\"gas\"\n                    vector-effect=\"non-scaling-stroke\"\n                  >\n                    <animateMotion\n                      dur=\"2s\"\n                      repeatCount=\"indefinite\"\n                      calcMode=\"linear\"\n                    >\n                      <mpath xlink:href=\"#gas\" />\n                    </animateMotion>\n                  </circle>`\n                          : \"\"}\n                      </svg>\n                    </div>`\n                  : html`<div class=\"spacer\"></div>`}\n              </div>`\n            : \"\"}\n          <div class=\"row\">\n            <div class=\"circle-container grid\">\n              <div class=\"circle\">\n                <ha-svg-icon .path=${mdiTransmissionTower}></ha-svg-icon>\n                ${returnedToGrid !== null\n                  ? html`<span class=\"return\">\n                      <ha-svg-icon\n                        class=\"small\"\n                        .path=${mdiArrowLeft}\n                      ></ha-svg-icon\n                      >${formatNumber(returnedToGrid, this.hass.locale, {\n                        maximumFractionDigits: 1,\n                      })}\n                      kWh\n                    </span>`\n                  : \"\"}\n                <span class=\"consumption\">\n                  ${hasReturnToGrid\n                    ? html`<ha-svg-icon\n                        class=\"small\"\n                        .path=${mdiArrowRight}\n                      ></ha-svg-icon>`\n                    : \"\"}${formatNumber(totalFromGrid, this.hass.locale, {\n                    maximumFractionDigits: 1,\n                  })}\n                  kWh\n                </span>\n              </div>\n              <span class=\"label\"\n                >${this.hass.localize(\n                  \"ui.panel.lovelace.cards.energy.energy_distribution.grid\"\n                )}</span\n              >\n            </div>\n            <div class=\"circle-container home\">\n              <div\n                class=\"circle ${classMap({\n                  border:\n                    homeSolarCircumference === undefined &&\n                    homeLowCarbonCircumference === undefined,\n                })}\"\n              >\n                <ha-svg-icon .path=${mdiHome}></ha-svg-icon>\n                ${formatNumber(totalHomeConsumption, this.hass.locale, {\n                  maximumFractionDigits: 1,\n                })}\n                kWh\n                ${homeSolarCircumference !== undefined ||\n                homeLowCarbonCircumference !== undefined\n                  ? html`<svg>\n                      ${homeSolarCircumference !== undefined\n                        ? svg`<circle\n                            class=\"solar\"\n                            cx=\"40\"\n                            cy=\"40\"\n                            r=\"38\"\n                            stroke-dasharray=\"${homeSolarCircumference} ${\n                            CIRCLE_CIRCUMFERENCE - homeSolarCircumference\n                          }\"\n                            shape-rendering=\"geometricPrecision\"\n                            stroke-dashoffset=\"-${\n                              CIRCLE_CIRCUMFERENCE - homeSolarCircumference\n                            }\"\n                          />`\n                        : \"\"}\n                      ${homeBatteryCircumference\n                        ? svg`<circle\n                            class=\"battery\"\n                            cx=\"40\"\n                            cy=\"40\"\n                            r=\"38\"\n                            stroke-dasharray=\"${homeBatteryCircumference} ${\n                            CIRCLE_CIRCUMFERENCE - homeBatteryCircumference\n                          }\"\n                            stroke-dashoffset=\"-${\n                              CIRCLE_CIRCUMFERENCE -\n                              homeBatteryCircumference -\n                              (homeSolarCircumference || 0)\n                            }\"\n                            shape-rendering=\"geometricPrecision\"\n                          />`\n                        : \"\"}\n                      ${homeLowCarbonCircumference\n                        ? svg`<circle\n                            class=\"low-carbon\"\n                            cx=\"40\"\n                            cy=\"40\"\n                            r=\"38\"\n                            stroke-dasharray=\"${homeLowCarbonCircumference} ${\n                            CIRCLE_CIRCUMFERENCE - homeLowCarbonCircumference\n                          }\"\n                            stroke-dashoffset=\"-${\n                              CIRCLE_CIRCUMFERENCE -\n                              homeLowCarbonCircumference -\n                              (homeBatteryCircumference || 0) -\n                              (homeSolarCircumference || 0)\n                            }\"\n                            shape-rendering=\"geometricPrecision\"\n                          />`\n                        : \"\"}\n                      <circle\n                        class=\"grid\"\n                        cx=\"40\"\n                        cy=\"40\"\n                        r=\"38\"\n                        stroke-dasharray=\"${homeHighCarbonCircumference ??\n                        CIRCLE_CIRCUMFERENCE -\n                          homeSolarCircumference! -\n                          (homeBatteryCircumference ||\n                            0)} ${homeHighCarbonCircumference !== undefined\n                          ? CIRCLE_CIRCUMFERENCE - homeHighCarbonCircumference\n                          : homeSolarCircumference! +\n                            (homeBatteryCircumference || 0)}\"\n                        stroke-dashoffset=\"0\"\n                        shape-rendering=\"geometricPrecision\"\n                      />\n                    </svg>`\n                  : \"\"}\n              </div>\n              <span class=\"label\"\n                >${this.hass.localize(\n                  \"ui.panel.lovelace.cards.energy.energy_distribution.home\"\n                )}</span\n              >\n            </div>\n          </div>\n          ${hasBattery\n            ? html`<div class=\"row\">\n                <div class=\"spacer\"></div>\n                <div class=\"circle-container battery\">\n                  <div class=\"circle\">\n                    <ha-svg-icon .path=${mdiBatteryHigh}></ha-svg-icon>\n                    <span class=\"battery-in\">\n                      <ha-svg-icon\n                        class=\"small\"\n                        .path=${mdiArrowDown}\n                      ></ha-svg-icon\n                      >${formatNumber(totalBatteryIn || 0, this.hass.locale, {\n                        maximumFractionDigits: 1,\n                      })}\n                      kWh</span\n                    >\n                    <span class=\"battery-out\">\n                      <ha-svg-icon\n                        class=\"small\"\n                        .path=${mdiArrowUp}\n                      ></ha-svg-icon\n                      >${formatNumber(totalBatteryOut || 0, this.hass.locale, {\n                        maximumFractionDigits: 1,\n                      })}\n                      kWh</span\n                    >\n                  </div>\n                  <span class=\"label\"\n                    >${this.hass.localize(\n                      \"ui.panel.lovelace.cards.energy.energy_distribution.battery\"\n                    )}</span\n                  >\n                </div>\n                <div class=\"spacer\"></div>\n              </div>`\n            : \"\"}\n          <div class=\"lines ${classMap({ battery: hasBattery })}\">\n            <svg\n              viewBox=\"0 0 100 100\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              preserveAspectRatio=\"xMidYMid slice\"\n            >\n              ${hasReturnToGrid && hasSolarProduction\n                ? svg`<path\n                    id=\"return\"\n                    class=\"return\"\n                    d=\"M${hasBattery ? 45 : 47},0 v15 c0,${\n                    hasBattery ? \"35 -10,30 -30,30\" : \"40 -10,35 -30,35\"\n                  } h-20\"\n                    vector-effect=\"non-scaling-stroke\"\n                  ></path> `\n                : \"\"}\n              ${hasSolarProduction\n                ? svg`<path\n                    id=\"solar\"\n                    class=\"solar\"\n                    d=\"M${hasBattery ? 55 : 53},0 v15 c0,${\n                    hasBattery ? \"35 10,30 30,30\" : \"40 10,35 30,35\"\n                  } h20\"\n                    vector-effect=\"non-scaling-stroke\"\n                  ></path>`\n                : \"\"}\n              ${hasBattery\n                ? svg`<path\n                    id=\"battery-house\"\n                    class=\"battery-house\"\n                    d=\"M55,100 v-15 c0,-35 10,-30 30,-30 h20\"\n                    vector-effect=\"non-scaling-stroke\"\n                  ></path>\n                  <path\n                    id=\"battery-grid\"\n                    class=${classMap({\n                      \"battery-from-grid\": Boolean(batteryFromGrid),\n                      \"battery-to-grid\": Boolean(batteryToGrid),\n                    })}\n                    d=\"M45,100 v-15 c0,-35 -10,-30 -30,-30 h-20\"\n                    vector-effect=\"non-scaling-stroke\"\n                  ></path>\n                  `\n                : \"\"}\n              ${hasBattery && hasSolarProduction\n                ? svg`<path\n                    id=\"battery-solar\"\n                    class=\"battery-solar\"\n                    d=\"M50,0 V100\"\n                    vector-effect=\"non-scaling-stroke\"\n                  ></path>`\n                : \"\"}\n              <path\n                class=\"grid\"\n                id=\"grid\"\n                d=\"M0,${hasBattery ? 50 : hasSolarProduction ? 56 : 53} H100\"\n                vector-effect=\"non-scaling-stroke\"\n              ></path>\n              ${returnedToGrid && hasSolarProduction\n                ? svg`<circle\n                    r=\"1\"\n                    class=\"return\"\n                    vector-effect=\"non-scaling-stroke\"\n                  >\n                    <animateMotion\n                      dur=\"${\n                        6 -\n                        ((returnedToGrid - (batteryToGrid || 0)) / totalLines) *\n                          6\n                      }s\"\n                      repeatCount=\"indefinite\"\n                      calcMode=\"linear\"\n                    >\n                      <mpath xlink:href=\"#return\" />\n                    </animateMotion>\n                  </circle>`\n                : \"\"}\n              ${solarConsumption\n                ? svg`<circle\n                    r=\"1\"\n                    class=\"solar\"\n                    vector-effect=\"non-scaling-stroke\"\n                  >\n                    <animateMotion\n                      dur=\"${6 - (solarConsumption / totalLines) * 5}s\"\n                      repeatCount=\"indefinite\"\n                      calcMode=\"linear\"\n                    >\n                      <mpath xlink:href=\"#solar\" />\n                    </animateMotion>\n                  </circle>`\n                : \"\"}\n              ${gridConsumption\n                ? svg`<circle\n                    r=\"1\"\n                    class=\"grid\"\n                    vector-effect=\"non-scaling-stroke\"\n                  >\n                    <animateMotion\n                      dur=\"${6 - (gridConsumption / totalLines) * 5}s\"\n                      repeatCount=\"indefinite\"\n                      calcMode=\"linear\"\n                    >\n                      <mpath xlink:href=\"#grid\" />\n                    </animateMotion>\n                  </circle>`\n                : \"\"}\n              ${solarToBattery\n                ? svg`<circle\n                    r=\"1\"\n                    class=\"battery-solar\"\n                    vector-effect=\"non-scaling-stroke\"\n                  >\n                    <animateMotion\n                      dur=\"${6 - (solarToBattery / totalLines) * 5}s\"\n                      repeatCount=\"indefinite\"\n                      calcMode=\"linear\"\n                    >\n                      <mpath xlink:href=\"#battery-solar\" />\n                    </animateMotion>\n                  </circle>`\n                : \"\"}\n              ${batteryConsumption\n                ? svg`<circle\n                    r=\"1\"\n                    class=\"battery-house\"\n                    vector-effect=\"non-scaling-stroke\"\n                  >\n                    <animateMotion\n                      dur=\"${6 - (batteryConsumption / totalLines) * 5}s\"\n                      repeatCount=\"indefinite\"\n                      calcMode=\"linear\"\n                    >\n                      <mpath xlink:href=\"#battery-house\" />\n                    </animateMotion>\n                  </circle>`\n                : \"\"}\n              ${batteryFromGrid\n                ? svg`<circle\n                    r=\"1\"\n                    class=\"battery-from-grid\"\n                    vector-effect=\"non-scaling-stroke\"\n                  >\n                    <animateMotion\n                      dur=\"${6 - (batteryFromGrid / totalLines) * 5}s\"\n                      repeatCount=\"indefinite\"\n                      keyPoints=\"1;0\" keyTimes=\"0;1\"\n                      calcMode=\"linear\"\n                    >\n                      <mpath xlink:href=\"#battery-grid\" />\n                    </animateMotion>\n                  </circle>`\n                : \"\"}\n              ${batteryToGrid\n                ? svg`<circle\n                    r=\"1\"\n                    class=\"battery-to-grid\"\n                    vector-effect=\"non-scaling-stroke\"\n                  >\n                    <animateMotion\n                      dur=\"${6 - (batteryToGrid / totalLines) * 5}s\"\n                      repeatCount=\"indefinite\"\n                      calcMode=\"linear\"\n                    >\n                      <mpath xlink:href=\"#battery-grid\" />\n                    </animateMotion>\n                  </circle>`\n                : \"\"}\n            </svg>\n          </div>\n        </div>\n        ${this._config.link_dashboard\n          ? html`\n              <div class=\"card-actions\">\n                <a href=\"/energy\"\n                  ><mwc-button>\n                    ${this.hass.localize(\n                      \"ui.panel.lovelace.cards.energy.energy_distribution.go_to_energy_dashboard\"\n                    )}\n                  </mwc-button></a\n                >\n              </div>\n            `\n          : \"\"}\n      </ha-card>\n    `;\n  }\n\n  static styles = css`\n    :host {\n      --mdc-icon-size: 24px;\n    }\n    ha-card {\n      min-width: 210px;\n    }\n    .card-content {\n      position: relative;\n      direction: ltr;\n    }\n    .lines {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      width: 100%;\n      height: 146px;\n      display: flex;\n      justify-content: center;\n      padding: 0 16px 16px;\n      box-sizing: border-box;\n    }\n    .lines.battery {\n      bottom: 100px;\n      height: 156px;\n    }\n    .lines svg {\n      width: calc(100% - 160px);\n      height: 100%;\n      max-width: 340px;\n    }\n    .row {\n      display: flex;\n      justify-content: space-between;\n      max-width: 500px;\n      margin: 0 auto;\n    }\n    .circle-container {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n    }\n    .circle-container.low-carbon {\n      margin-right: 4px;\n    }\n    .circle-container.solar {\n      margin: 0 4px;\n      height: 130px;\n    }\n    .circle-container.gas {\n      margin-left: 4px;\n      height: 130px;\n    }\n    .circle-container.battery {\n      height: 110px;\n      justify-content: flex-end;\n    }\n    .spacer {\n      width: 84px;\n    }\n    .circle {\n      width: 80px;\n      height: 80px;\n      border-radius: 50%;\n      box-sizing: border-box;\n      border: 2px solid;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n      text-align: center;\n      font-size: 12px;\n      line-height: 12px;\n      position: relative;\n      text-decoration: none;\n      color: var(--primary-text-color);\n    }\n    ha-svg-icon {\n      padding-bottom: 2px;\n    }\n    ha-svg-icon.small {\n      --mdc-icon-size: 12px;\n    }\n    .label {\n      color: var(--secondary-text-color);\n      font-size: 12px;\n    }\n    line,\n    path {\n      stroke: var(--primary-text-color);\n      stroke-width: 1;\n      fill: none;\n    }\n    .circle svg {\n      position: absolute;\n      fill: none;\n      stroke-width: 4px;\n      width: 100%;\n      height: 100%;\n      top: 0;\n      left: 0;\n    }\n    .gas path,\n    .gas circle {\n      stroke: var(--energy-gas-color);\n    }\n    circle.gas {\n      stroke-width: 4;\n      fill: var(--energy-gas-color);\n    }\n    .gas .circle {\n      border-color: var(--energy-gas-color);\n    }\n    .low-carbon line {\n      stroke: var(--energy-non-fossil-color);\n    }\n    .low-carbon .circle {\n      border-color: var(--energy-non-fossil-color);\n    }\n    .low-carbon ha-svg-icon {\n      color: var(--energy-non-fossil-color);\n    }\n    circle.low-carbon {\n      stroke: var(--energy-non-fossil-color);\n      fill: var(--energy-non-fossil-color);\n    }\n    .solar .circle {\n      border-color: var(--energy-solar-color);\n    }\n    circle.solar,\n    path.solar {\n      stroke: var(--energy-solar-color);\n    }\n    circle.solar {\n      stroke-width: 4;\n      fill: var(--energy-solar-color);\n    }\n    .battery .circle {\n      border-color: var(--energy-battery-in-color);\n    }\n    circle.battery,\n    path.battery {\n      stroke: var(--energy-battery-out-color);\n    }\n    path.battery-house,\n    circle.battery-house {\n      stroke: var(--energy-battery-out-color);\n    }\n    circle.battery-house {\n      stroke-width: 4;\n      fill: var(--energy-battery-out-color);\n    }\n    path.battery-solar,\n    circle.battery-solar {\n      stroke: var(--energy-battery-in-color);\n    }\n    circle.battery-solar {\n      stroke-width: 4;\n      fill: var(--energy-battery-in-color);\n    }\n    .battery-in {\n      color: var(--energy-battery-in-color);\n    }\n    .battery-out {\n      color: var(--energy-battery-out-color);\n    }\n    path.battery-from-grid {\n      stroke: var(--energy-grid-consumption-color);\n    }\n    path.battery-to-grid {\n      stroke: var(--energy-grid-return-color);\n    }\n    path.return,\n    circle.return,\n    circle.battery-to-grid {\n      stroke: var(--energy-grid-return-color);\n    }\n    circle.return,\n    circle.battery-to-grid {\n      stroke-width: 4;\n      fill: var(--energy-grid-return-color);\n    }\n    .return {\n      color: var(--energy-grid-return-color);\n    }\n    .grid .circle {\n      border-color: var(--energy-grid-consumption-color);\n    }\n    .consumption {\n      color: var(--energy-grid-consumption-color);\n    }\n    circle.grid,\n    circle.battery-from-grid,\n    path.grid {\n      stroke: var(--energy-grid-consumption-color);\n    }\n    circle.grid,\n    circle.battery-from-grid {\n      stroke-width: 4;\n      fill: var(--energy-grid-consumption-color);\n    }\n    .home .circle {\n      border-width: 0;\n      border-color: var(--primary-color);\n    }\n    .home .circle.border {\n      border-width: 2px;\n    }\n    .circle svg circle {\n      animation: rotate-in 0.6s ease-in;\n      transition: stroke-dashoffset 0.4s, stroke-dasharray 0.4s;\n      fill: none;\n    }\n    @keyframes rotate-in {\n      from {\n        stroke-dashoffset: 238.76104;\n        stroke-dasharray: 238.76104;\n      }\n    }\n    .card-actions a {\n      text-decoration: none;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-energy-distribution-card\": HuiEnergyDistrubutionCard;\n  }\n}\n"],"names":[],"sourceRoot":""}