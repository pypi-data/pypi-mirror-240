{"version":3,"file":"48886a3c.js","mappings":";AAaA;;AAEA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;;;ACvEA;;;;AAIA;;AAMA;;AAIA;AAGA;;AAEA;AACA;AAEA;;;;AAIA;AACA;;;;;AASA;;;;;;;;;;;;;AA8BA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/dialogs/domain-toggler/dialog-domain-toggler.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { createCloseHeading } from \"../../components/ha-dialog\";\nimport \"../../components/ha-formfield\";\nimport \"../../components/ha-switch\";\nimport { domainToName } from \"../../data/integration\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport { HomeAssistant } from \"../../types\";\nimport { HassDialog } from \"../make-dialog-manager\";\nimport { HaDomainTogglerDialogParams } from \"./show-dialog-domain-toggler\";\n\n@customElement(\"dialog-domain-toggler\")\nclass DomainTogglerDialog\n  extends LitElement\n  implements HassDialog<HaDomainTogglerDialogParams>\n{\n  public hass!: HomeAssistant;\n\n  @state() private _params?: HaDomainTogglerDialogParams;\n\n  public showDialog(params: HaDomainTogglerDialogParams): void {\n    this._params = params;\n  }\n\n  public closeDialog() {\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n\n    const domains = this._params.domains\n      .map((domain) => [domainToName(this.hass.localize, domain), domain])\n      .sort();\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        scrimClickAction\n        escapeKeyAction\n        hideActions\n        .heading=${createCloseHeading(\n          this.hass,\n          this._params.title ||\n            this.hass.localize(\"ui.dialogs.domain_toggler.title\")\n        )}\n      >\n        ${this._params.description\n          ? html`<div class=\"description\">${this._params.description}</div>`\n          : \"\"}\n        <div class=\"domains\">\n          ${domains.map(\n            (domain) =>\n              html`\n                <ha-formfield .label=${domain[0]}>\n                  <ha-switch\n                    .domain=${domain[1]}\n                    .checked=${!this._params!.exposedDomains ||\n                    this._params!.exposedDomains.includes(domain[1])}\n                    @change=${this._handleSwitch}\n                  >\n                  </ha-switch>\n                </ha-formfield>\n                <mwc-button .domain=${domain[1]} @click=${this._handleReset}>\n                  ${this.hass.localize(\n                    \"ui.dialogs.domain_toggler.reset_entities\"\n                  )}\n                </mwc-button>\n              `\n          )}\n        </div>\n      </ha-dialog>\n    `;\n  }\n\n  private _handleSwitch(ev) {\n    this._params!.toggleDomain(ev.currentTarget.domain, ev.target.checked);\n    ev.currentTarget.blur();\n  }\n\n  private _handleReset(ev) {\n    this._params!.resetDomain(ev.currentTarget.domain);\n    ev.currentTarget.blur();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --mdc-dialog-max-width: 500px;\n        }\n        .description {\n          margin-bottom: 8px;\n        }\n        .domains {\n          display: grid;\n          grid-template-columns: auto auto;\n          grid-row-gap: 8px;\n          align-items: center;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-domain-toggler\": DomainTogglerDialog;\n  }\n}\n"],"names":[],"sourceRoot":""}