{"version":3,"file":"228c6c31.js","mappings":";;;AAkGA;AACA;AACA;;;;AApGA;AAyGA;AACA;;AAEA;;AAEA;;;;AAIA;;;AAGA;AACA;;;AAGA;;;AAGA;AAIA;;;AAIA;;AAGA;;AAIA;;AAGA;;;;;AAOA;AACA;AACA;;AAEA;;;;;;AAMA;AAEA;;;;AAIA;AACA;;AAIA;;;AAKA;;;AAIA;;;;;AAKA;AACA;AACA;;AAEA;;;;;;AAMA;AAEA;;;AAGA;;;;AAKA;AAEA;;;;;AAxHA;;AAEA;AACA;;AA6HA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqGA","sources":["webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zha/zha-group-page.ts"],"sourcesContent":["import \"@material/mwc-button\";\nimport { mdiDelete } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, state, query } from \"lit/decorators\";\nimport { HASSDomEvent } from \"../../../../../common/dom/fire_event\";\nimport { navigate } from \"../../../../../common/navigate\";\nimport { SelectionChangedEvent } from \"../../../../../components/data-table/ha-data-table\";\nimport \"../../../../../components/ha-circular-progress\";\nimport \"../../../../../components/ha-icon-button\";\nimport {\n  addMembersToGroup,\n  fetchGroup,\n  fetchGroupableDevices,\n  removeGroups,\n  removeMembersFromGroup,\n  ZHADeviceEndpoint,\n  ZHAGroup,\n} from \"../../../../../data/zha\";\nimport \"../../../../../layouts/hass-error-screen\";\nimport \"../../../../../layouts/hass-subpage\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport \"../../../ha-config-section\";\nimport { formatAsPaddedHex } from \"./functions\";\nimport \"./zha-device-endpoint-data-table\";\nimport type { ZHADeviceEndpointDataTable } from \"./zha-device-endpoint-data-table\";\n\n@customElement(\"zha-group-page\")\nexport class ZHAGroupPage extends LitElement {\n  @property({ type: Object }) public hass!: HomeAssistant;\n\n  @property({ type: Object }) public group?: ZHAGroup;\n\n  @property({ type: Number }) public groupId!: number;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property({ type: Boolean }) public isWide!: boolean;\n\n  @property({ type: Array }) public deviceEndpoints: ZHADeviceEndpoint[] = [];\n\n  @state() private _processingAdd = false;\n\n  @state() private _processingRemove = false;\n\n  @state()\n  private _filteredDeviceEndpoints: ZHADeviceEndpoint[] = [];\n\n  @state() private _selectedDevicesToAdd: string[] = [];\n\n  @state() private _selectedDevicesToRemove: string[] = [];\n\n  @query(\"#addMembers\", true)\n  private _zhaAddMembersDataTable!: ZHADeviceEndpointDataTable;\n\n  @query(\"#removeMembers\")\n  private _zhaRemoveMembersDataTable!: ZHADeviceEndpointDataTable;\n\n  private _firstUpdatedCalled = false;\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    if (this.hass && this._firstUpdatedCalled) {\n      this._fetchData();\n    }\n  }\n\n  public disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this._processingAdd = false;\n    this._processingRemove = false;\n    this._selectedDevicesToRemove = [];\n    this._selectedDevicesToAdd = [];\n    this.deviceEndpoints = [];\n    this._filteredDeviceEndpoints = [];\n  }\n\n  protected firstUpdated(changedProperties: PropertyValues): void {\n    super.firstUpdated(changedProperties);\n    if (this.hass) {\n      this._fetchData();\n    }\n    this._firstUpdatedCalled = true;\n  }\n\n  protected render() {\n    if (!this.group) {\n      return html`\n        <hass-error-screen\n          .hass=${this.hass}\n          .error=${this.hass.localize(\n            \"ui.panel.config.zha.groups.group_not_found\"\n          )}\n        ></hass-error-screen>\n      `;\n    }\n\n    return html`\n      <hass-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .header=${this.group.name}\n      >\n        <ha-icon-button\n          slot=\"toolbar-icon\"\n          .path=${mdiDelete}\n          @click=${this._deleteGroup}\n          .label=${this.hass.localize(\"ui.panel.config.zha.groups.delete\")}\n        ></ha-icon-button>\n        <ha-config-section .isWide=${this.isWide}>\n          <div class=\"header\">\n            ${this.hass.localize(\"ui.panel.config.zha.groups.group_info\")}\n          </div>\n\n          <p slot=\"introduction\">\n            ${this.hass.localize(\"ui.panel.config.zha.groups.group_details\")}\n          </p>\n\n          <p><b>Name:</b> ${this.group.name}</p>\n          <p><b>Group Id:</b> ${formatAsPaddedHex(this.group.group_id)}</p>\n\n          <div class=\"header\">\n            ${this.hass.localize(\"ui.panel.config.zha.groups.members\")}\n          </div>\n          <ha-card>\n            ${this.group.members.length\n              ? this.group.members.map(\n                  (member) =>\n                    html`<a\n                      href=\"/config/devices/device/${member.device\n                        .device_reg_id}\"\n                    >\n                      <paper-item\n                        >${member.device.user_given_name ||\n                        member.device.name}</paper-item\n                      >\n                    </a>`\n                )\n              : html` <paper-item> This group has no members </paper-item> `}\n          </ha-card>\n          ${this.group.members.length\n            ? html`\n                <div class=\"header\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.zha.groups.remove_members\"\n                  )}\n                </div>\n\n                <zha-device-endpoint-data-table\n                  id=\"removeMembers\"\n                  .hass=${this.hass}\n                  .deviceEndpoints=${this.group.members}\n                  .narrow=${this.narrow}\n                  selectable\n                  @selection-changed=${this._handleRemoveSelectionChanged}\n                >\n                </zha-device-endpoint-data-table>\n\n                <div class=\"buttons\">\n                  <mwc-button\n                    .disabled=${!this._selectedDevicesToRemove.length ||\n                    this._processingRemove}\n                    @click=${this._removeMembersFromGroup}\n                    class=\"button\"\n                  >\n                    <ha-circular-progress\n                      ?active=${this._processingRemove}\n                      alt=${this.hass.localize(\n                        \"ui.panel.config.zha.groups.removing_members\"\n                      )}\n                    ></ha-circular-progress>\n                    ${this.hass!.localize(\n                      \"ui.panel.config.zha.groups.remove_members\"\n                    )}</mwc-button\n                  >\n                </div>\n              `\n            : html``}\n\n          <div class=\"header\">\n            ${this.hass.localize(\"ui.panel.config.zha.groups.add_members\")}\n          </div>\n\n          <zha-device-endpoint-data-table\n            id=\"addMembers\"\n            .hass=${this.hass}\n            .deviceEndpoints=${this._filteredDeviceEndpoints}\n            .narrow=${this.narrow}\n            selectable\n            @selection-changed=${this._handleAddSelectionChanged}\n          >\n          </zha-device-endpoint-data-table>\n\n          <div class=\"buttons\">\n            <mwc-button\n              .disabled=${!this._selectedDevicesToAdd.length ||\n              this._processingAdd}\n              @click=${this._addMembersToGroup}\n              class=\"button\"\n            >\n              ${this._processingAdd\n                ? html`<ha-circular-progress\n                    active\n                    size=\"small\"\n                    title=\"Saving\"\n                  ></ha-circular-progress>`\n                : \"\"}\n              ${this.hass!.localize(\n                \"ui.panel.config.zha.groups.add_members\"\n              )}</mwc-button\n            >\n          </div>\n        </ha-config-section>\n      </hass-subpage>\n    `;\n  }\n\n  private async _fetchData() {\n    if (this.groupId !== null && this.groupId !== undefined) {\n      this.group = await fetchGroup(this.hass!, this.groupId);\n    }\n    this.deviceEndpoints = await fetchGroupableDevices(this.hass!);\n    // filter the groupable devices so we only show devices that aren't already in the group\n    this._filterDevices();\n  }\n\n  private _filterDevices() {\n    // filter the groupable devices so we only show devices that aren't already in the group\n    this._filteredDeviceEndpoints = this.deviceEndpoints.filter(\n      (deviceEndpoint) =>\n        !this.group!.members.some(\n          (member) =>\n            member.device.ieee === deviceEndpoint.device.ieee &&\n            member.endpoint_id === deviceEndpoint.endpoint_id\n        )\n    );\n  }\n\n  private _handleAddSelectionChanged(\n    ev: HASSDomEvent<SelectionChangedEvent>\n  ): void {\n    this._selectedDevicesToAdd = ev.detail.value;\n  }\n\n  private _handleRemoveSelectionChanged(\n    ev: HASSDomEvent<SelectionChangedEvent>\n  ): void {\n    this._selectedDevicesToRemove = ev.detail.value;\n  }\n\n  private async _addMembersToGroup(): Promise<void> {\n    this._processingAdd = true;\n    const members = this._selectedDevicesToAdd.map((member) => {\n      const memberParts = member.split(\"_\");\n      return { ieee: memberParts[0], endpoint_id: memberParts[1] };\n    });\n    this.group = await addMembersToGroup(this.hass, this.groupId, members);\n    this._filterDevices();\n    this._selectedDevicesToAdd = [];\n    this._zhaAddMembersDataTable.clearSelection();\n    this._processingAdd = false;\n  }\n\n  private async _removeMembersFromGroup(): Promise<void> {\n    this._processingRemove = true;\n    const members = this._selectedDevicesToRemove.map((member) => {\n      const memberParts = member.split(\"_\");\n      return { ieee: memberParts[0], endpoint_id: memberParts[1] };\n    });\n    this.group = await removeMembersFromGroup(this.hass, this.groupId, members);\n    this._filterDevices();\n    this._selectedDevicesToRemove = [];\n    this._zhaRemoveMembersDataTable.clearSelection();\n    this._processingRemove = false;\n  }\n\n  private async _deleteGroup(): Promise<void> {\n    await removeGroups(this.hass, [this.groupId]);\n    navigate(`/config/zha/groups`, { replace: true });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      css`\n        hass-subpage {\n          --app-header-text-color: var(--sidebar-icon-color);\n        }\n        .header {\n          font-family: var(--paper-font-display1_-_font-family);\n          -webkit-font-smoothing: var(\n            --paper-font-display1_-_-webkit-font-smoothing\n          );\n          font-size: var(--paper-font-display1_-_font-size);\n          font-weight: var(--paper-font-display1_-_font-weight);\n          letter-spacing: var(--paper-font-display1_-_letter-spacing);\n          line-height: var(--paper-font-display1_-_line-height);\n          opacity: var(--dark-primary-opacity);\n        }\n\n        .button {\n          float: right;\n        }\n\n        a {\n          color: var(--primary-color);\n          text-decoration: none;\n        }\n        .buttons {\n          align-items: flex-end;\n          padding: 8px;\n        }\n        .buttons .warning {\n          --mdc-theme-primary: var(--error-color);\n        }\n      `,\n    ];\n  }\n}\n"],"names":[],"sourceRoot":""}