{"version":3,"file":"96c1c46e.js","mappings":";;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;;;;;ACkBA;AAGA;AACA;;AAEA;;;AAIA;AAGA;AAGA;;;;AAUA;AAGA;AACA;;;AAGA;AAGA;;;AAIA;;;;AAWA;;;AAGA;;;;AAIA;;AAEA;;AAEA;;;AArEA;;;;;;;;;;;;;AAmHA","sources":["webpack://home-assistant-frontend/./src/components/ha-select.ts","webpack://home-assistant-frontend/./src/panels/config/storage/dialog-move-datadisk.ts"],"sourcesContent":["import { SelectBase } from \"@material/mwc-select/mwc-select-base\";\nimport { styles } from \"@material/mwc-select/mwc-select.css\";\nimport { css, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { debounce } from \"../common/util/debounce\";\nimport { nextRender } from \"../common/util/render-status\";\n\n@customElement(\"ha-select\")\nexport class HaSelect extends SelectBase {\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  protected override renderLeadingIcon() {\n    if (!this.icon) {\n      return nothing;\n    }\n\n    return html`<span class=\"mdc-select__icon\"\n      ><slot name=\"icon\"></slot\n    ></span>`;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"translations-updated\", this._translationsUpdated);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\n      \"translations-updated\",\n      this._translationsUpdated\n    );\n  }\n\n  private _translationsUpdated = debounce(async () => {\n    await nextRender();\n    this.layoutOptions();\n  }, 500);\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-select:not(.mdc-select--disabled) .mdc-select__icon {\n        color: var(--secondary-text-color);\n      }\n      .mdc-select__anchor {\n        width: var(--ha-select-min-width, 200px);\n      }\n      .mdc-select--filled .mdc-floating-label {\n        inset-inline-start: 12px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select--filled.mdc-select--with-leading-icon .mdc-floating-label {\n        inset-inline-start: 48px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select .mdc-select__anchor {\n        padding-inline-start: 12px;\n        padding-inline-end: 0px;\n        direction: var(--direction);\n      }\n      .mdc-select__anchor .mdc-floating-label--float-above {\n        transform-origin: var(--float-start);\n      }\n    `,\n  ];\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-select\": HaSelect;\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { stopPropagation } from \"../../../common/dom/stop_propagation\";\nimport \"../../../components/ha-circular-progress\";\nimport \"../../../components/ha-markdown\";\nimport \"../../../components/ha-select\";\nimport {\n  extractApiErrorMessage,\n  ignoreSupervisorError,\n} from \"../../../data/hassio/common\";\nimport {\n  DatadiskList,\n  fetchHassioHassOsInfo,\n  HassioHassOSInfo,\n  HassioHostInfo,\n  listDatadisks,\n  moveDatadisk,\n} from \"../../../data/hassio/host\";\nimport { showAlertDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport { haStyle, haStyleDialog } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport { MoveDatadiskDialogParams } from \"./show-dialog-move-datadisk\";\n\nconst calculateMoveTime = memoizeOne((hostInfo: HassioHostInfo): number => {\n  const speed = hostInfo.disk_life_time !== \"\" ? 30 : 10;\n  const moveTime = (hostInfo.disk_used * 1000) / 60 / speed;\n  const rebootTime = (hostInfo.startup_time * 4) / 60;\n  return Math.ceil((moveTime + rebootTime) / 10) * 10;\n});\n\n@customElement(\"dialog-move-datadisk\")\nclass MoveDatadiskDialog extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _hostInfo?: HassioHostInfo;\n\n  @state() private _selectedDevice?: string;\n\n  @state() private _devices?: DatadiskList[\"devices\"];\n\n  @state() private _osInfo?: HassioHassOSInfo;\n\n  @state() private _moving = false;\n\n  public async showDialog(\n    dialogParams: MoveDatadiskDialogParams\n  ): Promise<Promise<void>> {\n    this._hostInfo = dialogParams.hostInfo;\n\n    try {\n      this._osInfo = await fetchHassioHassOsInfo(this.hass);\n    } catch (err: any) {\n      await showAlertDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.config.hardware.available_hardware.failed_to_get\"\n        ),\n        text: extractApiErrorMessage(err),\n      });\n    }\n\n    listDatadisks(this.hass).then((data) => {\n      this._devices = data.devices;\n    });\n  }\n\n  public closeDialog(): void {\n    this._selectedDevice = undefined;\n    this._devices = undefined;\n    this._moving = false;\n    this._hostInfo = undefined;\n    this._osInfo = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._hostInfo || !this._osInfo) {\n      return html``;\n    }\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        escapeKeyAction\n        .heading=${this._moving\n          ? this.hass.localize(\"ui.panel.config.storage.datadisk.moving\")\n          : this.hass.localize(\"ui.panel.config.storage.datadisk.title\")}\n        @closed=${this.closeDialog}\n        ?hideActions=${this._moving}\n      >\n        ${this._moving\n          ? html` <ha-circular-progress alt=\"Moving\" size=\"large\" active>\n              </ha-circular-progress>\n              <p class=\"progress-text\">\n                ${this.hass.localize(\n                  \"ui.panel.config.storage.datadisk.moving_desc\"\n                )}\n              </p>`\n          : html`${this._devices?.length\n                ? html`\n                    ${this.hass.localize(\n                      \"ui.panel.config.storage.datadisk.description\",\n                      {\n                        current_path: this._osInfo.data_disk,\n                        time: calculateMoveTime(this._hostInfo),\n                      }\n                    )}\n                    <br /><br />\n\n                    <ha-select\n                      .label=${this.hass.localize(\n                        \"ui.panel.config.storage.datadisk.select_device\"\n                      )}\n                      @selected=${this._select_device}\n                      @closed=${stopPropagation}\n                      dialogInitialFocus\n                    >\n                      ${this._devices.map(\n                        (device) =>\n                          html`<mwc-list-item .value=${device}\n                            >${device}</mwc-list-item\n                          >`\n                      )}\n                    </ha-select>\n                  `\n                : this._devices === undefined\n                ? this.hass.localize(\n                    \"ui.panel.config.storage.datadisk.loading_devices\"\n                  )\n                : this.hass.localize(\n                    \"ui.panel.config.storage.datadisk.no_devices\"\n                  )}\n\n              <mwc-button\n                slot=\"secondaryAction\"\n                @click=${this.closeDialog}\n                dialogInitialFocus\n              >\n                ${this.hass.localize(\"ui.panel.config.storage.datadisk.cancel\")}\n              </mwc-button>\n\n              <mwc-button\n                .disabled=${!this._selectedDevice}\n                slot=\"primaryAction\"\n                @click=${this._moveDatadisk}\n              >\n                ${this.hass.localize(\"ui.panel.config.storage.datadisk.move\")}\n              </mwc-button>`}\n      </ha-dialog>\n    `;\n  }\n\n  private _select_device(ev) {\n    this._selectedDevice = ev.target.value;\n  }\n\n  private async _moveDatadisk() {\n    this._moving = true;\n    try {\n      await moveDatadisk(this.hass, this._selectedDevice!);\n    } catch (err: any) {\n      if (this.hass.connection.connected && !ignoreSupervisorError(err)) {\n        showAlertDialog(this, {\n          title: this.hass.localize(\n            \"ui.panel.config.storage.datadisk.failed_to_move\"\n          ),\n          text: extractApiErrorMessage(err),\n        });\n        this.closeDialog();\n      }\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      haStyleDialog,\n      css`\n        ha-select {\n          width: 100%;\n        }\n        ha-circular-progress {\n          display: block;\n          margin: 32px;\n          text-align: center;\n        }\n\n        .progress-text {\n          text-align: center;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-move-datadisk\": MoveDatadiskDialog;\n  }\n}\n"],"names":[],"sourceRoot":""}