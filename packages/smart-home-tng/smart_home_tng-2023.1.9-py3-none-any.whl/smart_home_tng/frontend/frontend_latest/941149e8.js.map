{"version":3,"file":"941149e8.js","mappings":";;;;AAmDA;;;AAKA;;AAIA;AACA;AAGA;AACA;AACA;;AAEA;;;AAOA;AAGA;AACA;;;AAKA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;;AAEA;AAGA;;AAEA;AAGA;AAGA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqGA;;AC7CA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;;AAIA;;;;AAKA;AACA;;;;;AAKA;AACA;;AAEA;;;AAGA;;;;;;AAMA;AACA;;AAEA;AACA;;;AAGA;AAEA;;AAEA;;;AAKA;;;;AAIA;AAEA;;AAGA;;AAIA;AACA;;AAEA;AAGA;;AAEA;;;;;AAMA;;AAIA;;AAEA;AACA;;;;AAKA;;AAEA;;;AAIA;;AAIA;;AAEA;AACA;;;;AAKA;;AAEA;;;;;;AAOA;AACA;;AAIA;;AAEA;;;AAGA;;;;;AAKA;AACA;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;;;;;AAMA;;AAIA;AACA;;AAGA;;AAIA;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;;AAGA;;AAIA;AACA;AACA;;;;AAIA;AACA;;;;AAMA;;;;AAKA;;AAIA;AACA;;AAIA;;;AAIA;;;AAyFA;;;AAMA;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsUA;ACruBA;;AAEA;AACA;;AAOA;AAUA;AAOA;;AAOA;;AAEA;;;AA4CA;;AAMA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AAGA;;;AAGA;;;;AAIA;AACA;AACA;;;;;AAKA;AACA;AACA;;AAEA;;;;;AAKA;AACA;AACA;;AAIA;;AAEA;;;;AAKA;AA6CA;;;AAGA;;;;AAIA;;;AAKA;;;;AAmEA;AC1UA;;;AAIA;;AAIA;AAGA;AACA;;;AAKA;;;;AAKA;;;AAGA;;;;;AAKA;AACA;;;;;;;;AAUA;AACA;AACA;AACA;AACA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA","sources":["webpack://home-assistant-frontend/./src/panels/config/script/blueprint-script-editor.ts","webpack://home-assistant-frontend/./src/panels/config/script/ha-script-editor.ts","webpack://home-assistant-frontend/./src/panels/config/script/ha-script-picker.ts","webpack://home-assistant-frontend/./src/panels/config/script/manual-script-editor.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/ha-blueprint-picker\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-circular-progress\";\nimport \"../../../components/ha-markdown\";\nimport \"../../../components/ha-textfield\";\nimport \"../../../components/ha-selector/ha-selector\";\nimport \"../../../components/ha-settings-row\";\n\nimport {\n  BlueprintOrError,\n  Blueprints,\n  fetchBlueprints,\n} from \"../../../data/blueprint\";\nimport { BlueprintScriptConfig } from \"../../../data/script\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport \"../ha-config-section\";\n\n@customElement(\"blueprint-script-editor\")\nexport class HaBlueprintScriptEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public isWide!: boolean;\n\n  @property({ reflect: true, type: Boolean }) public narrow!: boolean;\n\n  @property({ attribute: false }) public config!: BlueprintScriptConfig;\n\n  @state() private _blueprints?: Blueprints;\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    this._getBlueprints();\n  }\n\n  private get _blueprint(): BlueprintOrError | undefined {\n    if (!this._blueprints) {\n      return undefined;\n    }\n    return this._blueprints[this.config.use_blueprint.path];\n  }\n\n  protected render() {\n    const blueprint = this._blueprint;\n    return html`\n      <ha-card\n        outlined\n        class=\"blueprint\"\n        .header=${this.hass.localize(\n          \"ui.panel.config.automation.editor.blueprint.header\"\n        )}\n      >\n        <div class=\"blueprint-picker-container\">\n          ${this._blueprints\n            ? Object.keys(this._blueprints).length\n              ? html`\n                  <ha-blueprint-picker\n                    .hass=${this.hass}\n                    .label=${this.hass.localize(\n                      \"ui.panel.config.automation.editor.blueprint.blueprint_to_use\"\n                    )}\n                    .blueprints=${this._blueprints}\n                    .value=${this.config.use_blueprint.path}\n                    @value-changed=${this._blueprintChanged}\n                  ></ha-blueprint-picker>\n                `\n              : this.hass.localize(\n                  \"ui.panel.config.automation.editor.blueprint.no_blueprints\"\n                )\n            : html`<ha-circular-progress active></ha-circular-progress>`}\n        </div>\n\n        ${this.config.use_blueprint.path\n          ? blueprint && \"error\" in blueprint\n            ? html`<p class=\"warning padding\">\n                There is an error in this Blueprint: ${blueprint.error}\n              </p>`\n            : html`${blueprint?.metadata.description\n                ? html`<ha-markdown\n                    class=\"card-content\"\n                    breaks\n                    .content=${blueprint.metadata.description}\n                  ></ha-markdown>`\n                : \"\"}\n              ${blueprint?.metadata?.input &&\n              Object.keys(blueprint.metadata.input).length\n                ? Object.entries(blueprint.metadata.input).map(\n                    ([key, value]) =>\n                      html`<ha-settings-row .narrow=${this.narrow}>\n                        <span slot=\"heading\">${value?.name || key}</span>\n                        <span slot=\"description\">${value?.description}</span>\n                        ${value?.selector\n                          ? html`<ha-selector\n                              .hass=${this.hass}\n                              .selector=${value.selector}\n                              .key=${key}\n                              .value=${(this.config.use_blueprint.input &&\n                                this.config.use_blueprint.input[key]) ??\n                              value?.default}\n                              @value-changed=${this._inputChanged}\n                            ></ha-selector>`\n                          : html`<ha-textfield\n                              .key=${key}\n                              required\n                              .value=${(this.config.use_blueprint.input &&\n                                this.config.use_blueprint.input[key]) ??\n                              value?.default}\n                              @change=${this._inputChanged}\n                            ></ha-textfield>`}\n                      </ha-settings-row>`\n                  )\n                : html`<p class=\"padding\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.automation.editor.blueprint.no_inputs\"\n                    )}\n                  </p>`}`\n          : \"\"}\n      </ha-card>\n    `;\n  }\n\n  private async _getBlueprints() {\n    this._blueprints = await fetchBlueprints(this.hass, \"script\");\n  }\n\n  private _blueprintChanged(ev) {\n    ev.stopPropagation();\n    if (this.config.use_blueprint.path === ev.detail.value) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.config,\n        use_blueprint: {\n          path: ev.detail.value,\n        },\n      },\n    });\n  }\n\n  private _inputChanged(ev) {\n    ev.stopPropagation();\n    const target = ev.target as any;\n    const key = target.key;\n    const value = ev.detail?.value ?? target.value;\n    if (\n      (this.config.use_blueprint.input &&\n        this.config.use_blueprint.input[key] === value) ||\n      (!this.config.use_blueprint.input && value === \"\")\n    ) {\n      return;\n    }\n    const input = { ...this.config.use_blueprint.input, [key]: value };\n\n    if (value === \"\" || value === undefined) {\n      delete input[key];\n    }\n\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.config,\n        use_blueprint: {\n          ...this.config.use_blueprint,\n          input,\n        },\n      },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          display: block;\n        }\n        ha-card.blueprint {\n          margin: 0 auto;\n        }\n        .padding {\n          padding: 16px;\n        }\n        .link-button-row {\n          padding: 14px;\n        }\n        .blueprint-picker-container {\n          padding: 0 16px 16px;\n        }\n        ha-textfield,\n        ha-blueprint-picker {\n          display: block;\n        }\n        h3 {\n          margin: 16px;\n        }\n        .introduction {\n          margin-top: 0;\n          margin-bottom: 12px;\n        }\n        .introduction a {\n          color: var(--primary-color);\n        }\n        p {\n          margin-bottom: 0;\n        }\n        .description {\n          margin-bottom: 16px;\n        }\n        ha-settings-row {\n          --paper-time-input-justify-content: flex-end;\n          --settings-row-content-width: 100%;\n          --settings-row-prefix-display: contents;\n          border-top: 1px solid var(--divider-color);\n        }\n        ha-alert {\n          margin-bottom: 16px;\n          display: block;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"blueprint-script-editor\": HaBlueprintScriptEditor;\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport {\n  mdiCheck,\n  mdiContentDuplicate,\n  mdiContentSave,\n  mdiDelete,\n  mdiDotsVertical,\n  mdiInformationOutline,\n  mdiPlay,\n  mdiSort,\n  mdiTransitConnection,\n} from \"@mdi/js\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeObjectId } from \"../../../common/entity/compute_object_id\";\nimport { navigate } from \"../../../common/navigate\";\nimport { slugify } from \"../../../common/string/slugify\";\nimport { computeRTL } from \"../../../common/util/compute_rtl\";\nimport { copyToClipboard } from \"../../../common/util/copy-clipboard\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-fab\";\nimport type {\n  HaFormDataContainer,\n  SchemaUnion,\n} from \"../../../components/ha-form/types\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-svg-icon\";\nimport \"../../../components/ha-yaml-editor\";\nimport type { HaYamlEditor } from \"../../../components/ha-yaml-editor\";\nimport {\n  deleteScript,\n  getScriptConfig,\n  getScriptEditorInitData,\n  isMaxMode,\n  MODES,\n  MODES_MAX,\n  ScriptConfig,\n  showScriptEditor,\n  triggerScript,\n} from \"../../../data/script\";\nimport { showConfirmationDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/ha-app-layout\";\nimport \"../../../layouts/hass-subpage\";\nimport { KeyboardShortcutMixin } from \"../../../mixins/keyboard-shortcut-mixin\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { HomeAssistant, Route } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport { showToast } from \"../../../util/toast\";\nimport { HaDeviceAction } from \"../automation/action/types/ha-automation-action-device_id\";\nimport \"./blueprint-script-editor\";\nimport \"./manual-script-editor\";\nimport type { HaManualScriptEditor } from \"./manual-script-editor\";\n\nexport class HaScriptEditor extends KeyboardShortcutMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public scriptEntityId: string | null = null;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @property({ type: Boolean }) public isWide = false;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @state() private _config?: ScriptConfig;\n\n  @state() private _entityId?: string;\n\n  @state() private _idError = false;\n\n  @state() private _dirty = false;\n\n  @state() private _errors?: string;\n\n  @state() private _mode: \"gui\" | \"yaml\" = \"gui\";\n\n  @query(\"ha-yaml-editor\", true) private _yamlEditor?: HaYamlEditor;\n\n  @query(\"manual-script-editor\")\n  private _manualEditor?: HaManualScriptEditor;\n\n  private _schema = memoizeOne(\n    (\n      hasID: boolean,\n      useBluePrint?: boolean,\n      currentMode?: typeof MODES[number]\n    ) =>\n      [\n        {\n          name: \"alias\",\n          selector: {\n            text: {\n              type: \"text\",\n            },\n          },\n        },\n        {\n          name: \"icon\",\n          selector: {\n            icon: {},\n          },\n        },\n        ...(!hasID\n          ? ([\n              {\n                name: \"id\",\n                selector: {\n                  text: {},\n                },\n              },\n            ] as const)\n          : []),\n        ...(!useBluePrint\n          ? ([\n              {\n                name: \"mode\",\n                selector: {\n                  select: {\n                    mode: \"dropdown\",\n                    options: MODES.map((mode) => ({\n                      label: this.hass.localize(\n                        `ui.panel.config.script.editor.modes.${mode}`\n                      ),\n                      value: mode,\n                    })),\n                  },\n                },\n              },\n            ] as const)\n          : []),\n        ...(currentMode && isMaxMode(currentMode)\n          ? ([\n              {\n                name: \"max\",\n                required: true,\n                selector: {\n                  number: { mode: \"box\", min: 1, max: Infinity },\n                },\n              },\n            ] as const)\n          : []),\n      ] as const\n  );\n\n  protected render(): TemplateResult {\n    if (!this._config) {\n      return html``;\n    }\n\n    const schema = this._schema(\n      !!this.scriptEntityId,\n      \"use_blueprint\" in this._config,\n      this._config.mode\n    );\n\n    const data = {\n      mode: MODES[0],\n      icon: undefined,\n      max: this._config.mode && isMaxMode(this._config.mode) ? 10 : undefined,\n      ...this._config,\n      id: this._entityId,\n    };\n\n    return html`\n      <hass-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        .backCallback=${this._backTapped}\n        .header=${!this._config?.alias ? \"\" : this._config.alias}\n      >\n        ${this.scriptEntityId && !this.narrow\n          ? html`\n              <mwc-button @click=${this._showTrace} slot=\"toolbar-icon\">\n                ${this.hass.localize(\n                  \"ui.panel.config.script.editor.show_trace\"\n                )}\n              </mwc-button>\n            `\n          : \"\"}\n        <ha-button-menu corner=\"BOTTOM_START\" slot=\"toolbar-icon\">\n          <ha-icon-button\n            slot=\"trigger\"\n            .label=${this.hass.localize(\"ui.common.menu\")}\n            .path=${mdiDotsVertical}\n          ></ha-icon-button>\n\n          <mwc-list-item\n            graphic=\"icon\"\n            .disabled=${!this.scriptEntityId}\n            @click=${this._showInfo}\n          >\n            ${this.hass.localize(\"ui.panel.config.script.editor.show_info\")}\n            <ha-svg-icon\n              slot=\"graphic\"\n              .path=${mdiInformationOutline}\n            ></ha-svg-icon>\n          </mwc-list-item>\n\n          <mwc-list-item\n            graphic=\"icon\"\n            .disabled=${!this.scriptEntityId}\n            @click=${this._runScript}\n          >\n            ${this.hass.localize(\"ui.panel.config.script.picker.run_script\")}\n            <ha-svg-icon slot=\"graphic\" .path=${mdiPlay}></ha-svg-icon>\n          </mwc-list-item>\n\n          ${this.scriptEntityId && this.narrow\n            ? html`\n                <a href=\"/config/script/trace/${this.scriptEntityId}\">\n                  <mwc-list-item graphic=\"icon\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.script.editor.show_trace\"\n                    )}\n                    <ha-svg-icon\n                      slot=\"graphic\"\n                      .path=${mdiTransitConnection}\n                    ></ha-svg-icon>\n                  </mwc-list-item>\n                </a>\n              `\n            : \"\"}\n          ${this._config && !(\"use_blueprint\" in this._config)\n            ? html`\n                <mwc-list-item\n                  aria-label=${this.hass.localize(\n                    \"ui.panel.config.automation.editor.re_order\"\n                  )}\n                  graphic=\"icon\"\n                  .disabled=${this._mode !== \"gui\"}\n                  @click=${this._toggleReOrderMode}\n                >\n                  ${this.hass.localize(\n                    \"ui.panel.config.automation.editor.re_order\"\n                  )}\n                  <ha-svg-icon slot=\"graphic\" .path=${mdiSort}></ha-svg-icon>\n                </mwc-list-item>\n              `\n            : \"\"}\n\n          <li divider role=\"separator\"></li>\n\n          <mwc-list-item\n            aria-label=${this.hass.localize(\n              \"ui.panel.config.automation.editor.edit_ui\"\n            )}\n            graphic=\"icon\"\n            @click=${this._switchUiMode}\n          >\n            ${this.hass.localize(\"ui.panel.config.automation.editor.edit_ui\")}\n            ${this._mode === \"gui\"\n              ? html`\n                  <ha-svg-icon\n                    class=\"selected_menu_item\"\n                    slot=\"graphic\"\n                    .path=${mdiCheck}\n                  ></ha-svg-icon>\n                `\n              : ``}\n          </mwc-list-item>\n          <mwc-list-item\n            aria-label=${this.hass.localize(\n              \"ui.panel.config.automation.editor.edit_yaml\"\n            )}\n            graphic=\"icon\"\n            @click=${this._switchYamlMode}\n          >\n            ${this.hass.localize(\"ui.panel.config.automation.editor.edit_yaml\")}\n            ${this._mode === \"yaml\"\n              ? html`\n                  <ha-svg-icon\n                    class=\"selected_menu_item\"\n                    slot=\"graphic\"\n                    .path=${mdiCheck}\n                  ></ha-svg-icon>\n                `\n              : ``}\n          </mwc-list-item>\n\n          <li divider role=\"separator\"></li>\n\n          <mwc-list-item\n            .disabled=${!this.scriptEntityId}\n            .label=${this.hass.localize(\n              \"ui.panel.config.script.picker.duplicate\"\n            )}\n            graphic=\"icon\"\n            @click=${this._duplicate}\n          >\n            ${this.hass.localize(\"ui.panel.config.script.picker.duplicate\")}\n            <ha-svg-icon\n              slot=\"graphic\"\n              .path=${mdiContentDuplicate}\n            ></ha-svg-icon>\n          </mwc-list-item>\n\n          <mwc-list-item\n            .disabled=${!this.scriptEntityId}\n            aria-label=${this.hass.localize(\n              \"ui.panel.config.script.picker.delete\"\n            )}\n            class=${classMap({ warning: Boolean(this.scriptEntityId) })}\n            graphic=\"icon\"\n            @click=${this._deleteConfirm}\n          >\n            ${this.hass.localize(\"ui.panel.config.script.picker.delete\")}\n            <ha-svg-icon\n              class=${classMap({ warning: Boolean(this.scriptEntityId) })}\n              slot=\"graphic\"\n              .path=${mdiDelete}\n            >\n            </ha-svg-icon>\n          </mwc-list-item>\n        </ha-button-menu>\n        <div\n          class=\"content ${classMap({\n            \"yaml-mode\": this._mode === \"yaml\",\n          })}\"\n        >\n          ${this._errors ? html`<div class=\"errors\">${this._errors}</div>` : \"\"}\n          ${this._mode === \"gui\"\n            ? html`\n                <div\n                  class=${classMap({\n                    rtl: computeRTL(this.hass),\n                  })}\n                >\n                  ${this._config\n                    ? html`\n                        <div class=\"config-container\">\n                          <ha-card outlined>\n                            <div class=\"card-content\">\n                              <ha-form\n                                .schema=${schema}\n                                .data=${data}\n                                .hass=${this.hass}\n                                .computeLabel=${this._computeLabelCallback}\n                                .computeHelper=${this._computeHelperCallback}\n                                @value-changed=${this._valueChanged}\n                              ></ha-form>\n                            </div>\n                          </ha-card>\n                        </div>\n\n                        ${\"use_blueprint\" in this._config\n                          ? html`\n                              <blueprint-script-editor\n                                .hass=${this.hass}\n                                .narrow=${this.narrow}\n                                .isWide=${this.isWide}\n                                .config=${this._config}\n                                @value-changed=${this._configChanged}\n                              ></blueprint-script-editor>\n                            `\n                          : html`\n                              <manual-script-editor\n                                .hass=${this.hass}\n                                .narrow=${this.narrow}\n                                .isWide=${this.isWide}\n                                .config=${this._config}\n                                @value-changed=${this._configChanged}\n                              ></manual-script-editor>\n                            `}\n                      `\n                    : \"\"}\n                </div>\n              `\n            : this._mode === \"yaml\"\n            ? html`\n                <ha-yaml-editor\n                  .hass=${this.hass}\n                  .defaultValue=${this._preprocessYaml()}\n                  @value-changed=${this._yamlChanged}\n                ></ha-yaml-editor>\n                <ha-card outlined>\n                  <div class=\"card-actions\">\n                    <mwc-button @click=${this._copyYaml}>\n                      ${this.hass.localize(\n                        \"ui.panel.config.automation.editor.copy_to_clipboard\"\n                      )}\n                    </mwc-button>\n                  </div>\n                </ha-card>\n              `\n            : ``}\n        </div>\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.script.editor.save_script\"\n          )}\n          extended\n          @click=${this._saveScript}\n          class=${classMap({\n            dirty: this._dirty,\n          })}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiContentSave}></ha-svg-icon>\n        </ha-fab>\n      </hass-subpage>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n\n    const oldScript = changedProps.get(\"scriptEntityId\");\n    if (\n      changedProps.has(\"scriptEntityId\") &&\n      this.scriptEntityId &&\n      this.hass &&\n      // Only refresh config if we picked a new script. If same ID, don't fetch it.\n      (!oldScript || oldScript !== this.scriptEntityId)\n    ) {\n      getScriptConfig(this.hass, computeObjectId(this.scriptEntityId)).then(\n        (config) => {\n          // Normalize data: ensure sequence is a list\n          // Happens when people copy paste their scripts into the config\n          const value = config.sequence;\n          if (value && !Array.isArray(value)) {\n            config.sequence = [value];\n          }\n          this._dirty = false;\n          this._config = config;\n        },\n        (resp) => {\n          alert(\n            resp.status_code === 404\n              ? this.hass.localize(\n                  \"ui.panel.config.script.editor.load_error_not_editable\"\n                )\n              : this.hass.localize(\n                  \"ui.panel.config.script.editor.load_error_unknown\",\n                  \"err_no\",\n                  resp.status_code\n                )\n          );\n          history.back();\n        }\n      );\n    }\n\n    if (\n      changedProps.has(\"scriptEntityId\") &&\n      !this.scriptEntityId &&\n      this.hass\n    ) {\n      const initData = getScriptEditorInitData();\n      this._dirty = !!initData;\n      const baseConfig: Partial<ScriptConfig> = {\n        alias: this.hass.localize(\"ui.panel.config.script.editor.default_name\"),\n      };\n      if (!initData || !(\"use_blueprint\" in initData)) {\n        baseConfig.sequence = [{ ...HaDeviceAction.defaultConfig }];\n      }\n      this._config = {\n        ...baseConfig,\n        ...initData,\n      } as ScriptConfig;\n    }\n  }\n\n  private _computeLabelCallback = (\n    schema: SchemaUnion<ReturnType<typeof this._schema>>,\n    data: HaFormDataContainer\n  ): string => {\n    switch (schema.name) {\n      case \"mode\":\n        return this.hass.localize(\"ui.panel.config.script.editor.modes.label\");\n      case \"max\":\n        // Mode must be one of max modes per schema definition above\n        return this.hass.localize(\n          `ui.panel.config.script.editor.max.${\n            data.mode as typeof MODES_MAX[number]\n          }`\n        );\n      default:\n        return this.hass.localize(\n          `ui.panel.config.script.editor.${schema.name}`\n        );\n    }\n  };\n\n  private _computeHelperCallback = (\n    schema: SchemaUnion<ReturnType<typeof this._schema>>\n  ): string | undefined | TemplateResult => {\n    if (schema.name === \"mode\") {\n      return html`\n        <a\n          style=\"color: var(--secondary-text-color)\"\n          href=${documentationUrl(\n            this.hass,\n            \"/integrations/script/#script-modes\"\n          )}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          >${this.hass.localize(\n            \"ui.panel.config.script.editor.modes.learn_more\"\n          )}</a\n        >\n      `;\n    }\n    return undefined;\n  };\n\n  private async _showInfo() {\n    if (!this.scriptEntityId) {\n      return;\n    }\n    fireEvent(this, \"hass-more-info\", { entityId: this.scriptEntityId });\n  }\n\n  private async _showTrace() {\n    if (this.scriptEntityId) {\n      const result = await this.confirmUnsavedChanged();\n      if (result) {\n        navigate(`/config/script/trace/${this.scriptEntityId}`);\n      }\n    }\n  }\n\n  private async _runScript(ev: CustomEvent) {\n    ev.stopPropagation();\n    await triggerScript(this.hass, this.scriptEntityId as string);\n    showToast(this, {\n      message: this.hass.localize(\n        \"ui.notification_toast.triggered\",\n        \"name\",\n        this._config!.alias\n      ),\n    });\n  }\n\n  private _modeChanged(mode) {\n    const curMode = this._config!.mode || MODES[0];\n\n    if (mode === curMode) {\n      return;\n    }\n\n    this._config = { ...this._config!, mode };\n    if (!isMaxMode(mode)) {\n      delete this._config.max;\n    }\n    this._dirty = true;\n  }\n\n  private _aliasChanged(alias: string) {\n    if (\n      this.scriptEntityId ||\n      (this._entityId && this._entityId !== slugify(this._config!.alias))\n    ) {\n      return;\n    }\n\n    const aliasSlugify = slugify(alias);\n    let id = aliasSlugify;\n    let i = 2;\n    while (this.hass.states[`script.${id}`]) {\n      id = `${aliasSlugify}_${i}`;\n      i++;\n    }\n\n    this._entityId = id;\n  }\n\n  private _idChanged(id: string) {\n    this._entityId = id;\n    if (this.hass.states[`script.${this._entityId}`]) {\n      this._idError = true;\n    } else {\n      this._idError = false;\n    }\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const values = ev.detail.value as any;\n    const currentId = this._entityId;\n    let changed = false;\n\n    for (const key of Object.keys(values)) {\n      if (key === \"sequence\") {\n        continue;\n      }\n\n      const value = values[key];\n\n      if (\n        value === this._config![key] ||\n        (key === \"id\" && currentId === value)\n      ) {\n        continue;\n      }\n\n      changed = true;\n\n      switch (key) {\n        case \"id\":\n          this._idChanged(value);\n          break;\n        case \"alias\":\n          this._aliasChanged(value);\n          break;\n        case \"mode\":\n          this._modeChanged(value);\n          break;\n      }\n\n      if (values[key] === undefined) {\n        const newConfig = { ...this._config! };\n        delete newConfig![key];\n        this._config = newConfig;\n      } else {\n        this._config = { ...this._config!, [key]: value };\n      }\n    }\n\n    if (changed) {\n      this._dirty = true;\n    }\n  }\n\n  private _configChanged(ev) {\n    this._config = ev.detail.value;\n    this._dirty = true;\n  }\n\n  private _preprocessYaml() {\n    return this._config;\n  }\n\n  private async _copyYaml(): Promise<void> {\n    if (this._yamlEditor?.yaml) {\n      await copyToClipboard(this._yamlEditor.yaml);\n      showToast(this, {\n        message: this.hass.localize(\"ui.common.copied_clipboard\"),\n      });\n    }\n  }\n\n  private _yamlChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    if (!ev.detail.isValid) {\n      return;\n    }\n    this._config = ev.detail.value;\n    this._errors = undefined;\n    this._dirty = true;\n  }\n\n  private async confirmUnsavedChanged(): Promise<boolean> {\n    if (this._dirty) {\n      return showConfirmationDialog(this, {\n        text: this.hass!.localize(\n          \"ui.panel.config.automation.editor.unsaved_confirm\"\n        ),\n        confirmText: this.hass!.localize(\"ui.common.leave\"),\n        dismissText: this.hass!.localize(\"ui.common.stay\"),\n      });\n    }\n    return true;\n  }\n\n  private _backTapped = async () => {\n    const result = await this.confirmUnsavedChanged();\n    if (result) {\n      history.back();\n    }\n  };\n\n  private async _duplicate() {\n    const result = await this.confirmUnsavedChanged();\n    if (result) {\n      showScriptEditor({\n        ...this._config,\n        alias: `${this._config?.alias} (${this.hass.localize(\n          \"ui.panel.config.script.picker.duplicate\"\n        )})`,\n      });\n    }\n  }\n\n  private async _deleteConfirm() {\n    showConfirmationDialog(this, {\n      text: this.hass.localize(\"ui.panel.config.script.editor.delete_confirm\"),\n      confirmText: this.hass!.localize(\"ui.common.delete\"),\n      dismissText: this.hass!.localize(\"ui.common.cancel\"),\n      confirm: () => this._delete(),\n    });\n  }\n\n  private async _delete() {\n    await deleteScript(\n      this.hass,\n      computeObjectId(this.scriptEntityId as string)\n    );\n    history.back();\n  }\n\n  private _switchUiMode() {\n    this._mode = \"gui\";\n  }\n\n  private _switchYamlMode() {\n    this._mode = \"yaml\";\n  }\n\n  private _toggleReOrderMode() {\n    if (this._manualEditor) {\n      this._manualEditor.reOrderMode = !this._manualEditor.reOrderMode;\n    }\n  }\n\n  private _saveScript(): void {\n    if (this._idError) {\n      showToast(this, {\n        message: this.hass.localize(\n          \"ui.panel.config.script.editor.id_already_exists_save_error\"\n        ),\n        dismissable: false,\n        duration: 0,\n        action: {\n          action: () => {},\n          text: this.hass.localize(\"ui.dialogs.generic.ok\"),\n        },\n      });\n      return;\n    }\n    const id = this.scriptEntityId\n      ? computeObjectId(this.scriptEntityId)\n      : this._entityId || Date.now();\n    this.hass!.callApi(\"POST\", \"config/script/config/\" + id, this._config).then(\n      () => {\n        this._dirty = false;\n\n        if (!this.scriptEntityId) {\n          navigate(`/config/script/edit/${id}`, { replace: true });\n        }\n      },\n      (errors) => {\n        this._errors = errors.body.message || errors.error || errors.body;\n        showToast(this, {\n          message: errors.body.message || errors.error || errors.body,\n        });\n        throw errors;\n      }\n    );\n  }\n\n  protected handleKeyboardSave() {\n    this._saveScript();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-card {\n          overflow: hidden;\n        }\n        p {\n          margin-bottom: 0;\n        }\n        .errors {\n          padding: 20px;\n          font-weight: bold;\n          color: var(--error-color);\n        }\n        .yaml-mode {\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n          padding-bottom: 0;\n        }\n        .config-container,\n        manual-script-editor,\n        blueprint-script-editor {\n          margin: 0 auto;\n          max-width: 1040px;\n          padding: 28px 20px 0;\n        }\n        ha-yaml-editor {\n          flex-grow: 1;\n          --code-mirror-height: 100%;\n          min-height: 0;\n        }\n        .yaml-mode ha-card {\n          overflow: initial;\n          --ha-card-border-radius: 0;\n          border-bottom: 1px solid var(--divider-color);\n        }\n        span[slot=\"introduction\"] a {\n          color: var(--primary-color);\n        }\n        ha-fab {\n          position: relative;\n          bottom: calc(-80px - env(safe-area-inset-bottom));\n          transition: bottom 0.3s;\n        }\n        ha-fab.dirty {\n          bottom: 0;\n        }\n        .selected_menu_item {\n          color: var(--primary-color);\n        }\n        li[role=\"separator\"] {\n          border-bottom-color: var(--divider-color);\n        }\n        .header {\n          display: flex;\n          margin: 16px 0;\n          align-items: center;\n        }\n        .header .name {\n          font-size: 20px;\n          font-weight: 400;\n          flex: 1;\n        }\n        .header a {\n          color: var(--secondary-text-color);\n        }\n        ha-button-menu a {\n          text-decoration: none;\n          color: var(--primary-color);\n        }\n      `,\n    ];\n  }\n}\n\ncustomElements.define(\"ha-script-editor\", HaScriptEditor);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-script-editor\": HaScriptEditor;\n  }\n}\n","import {\n  mdiContentDuplicate,\n  mdiDelete,\n  mdiHelpCircle,\n  mdiInformationOutline,\n  mdiPlay,\n  mdiPlus,\n  mdiTransitConnection,\n} from \"@mdi/js\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { formatDateTime } from \"../../../common/datetime/format_date_time\";\nimport { fireEvent, HASSDomEvent } from \"../../../common/dom/fire_event\";\nimport { computeObjectId } from \"../../../common/entity/compute_object_id\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { navigate } from \"../../../common/navigate\";\nimport { computeRTL } from \"../../../common/util/compute_rtl\";\nimport {\n  DataTableColumnContainer,\n  RowClickedEvent,\n} from \"../../../components/data-table/ha-data-table\";\nimport \"../../../components/ha-button-related-filter-menu\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-icon-overflow-menu\";\nimport \"../../../components/ha-svg-icon\";\nimport {\n  deleteScript,\n  getScriptConfig,\n  showScriptEditor,\n  triggerScript,\n} from \"../../../data/script\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-tabs-subpage-data-table\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport { showToast } from \"../../../util/toast\";\nimport { configSections } from \"../ha-panel-config\";\n\n@customElement(\"ha-script-picker\")\nclass HaScriptPicker extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public scripts!: HassEntity[];\n\n  @property() public isWide!: boolean;\n\n  @property() public narrow!: boolean;\n\n  @property() public route!: Route;\n\n  @property() private _activeFilters?: string[];\n\n  @state() private _filteredScripts?: string[] | null;\n\n  @state() private _filterValue?;\n\n  private _scripts = memoizeOne(\n    (scripts: HassEntity[], filteredScripts?: string[] | null) => {\n      if (filteredScripts === null) {\n        return [];\n      }\n      return (\n        filteredScripts\n          ? scripts.filter((script) =>\n              filteredScripts!.includes(script.entity_id)\n            )\n          : scripts\n      ).map((script) => ({\n        ...script,\n        name: computeStateName(script),\n        last_triggered: script.attributes.last_triggered || undefined,\n      }));\n    }\n  );\n\n  private _columns = memoizeOne((narrow, _locale): DataTableColumnContainer => {\n    const columns: DataTableColumnContainer = {\n      icon: {\n        title: \"\",\n        label: this.hass.localize(\n          \"ui.panel.config.script.picker.headers.state\"\n        ),\n        type: \"icon\",\n        template: (_icon, script) =>\n          html` <ha-state-icon .state=${script}></ha-state-icon>`,\n      },\n      name: {\n        title: this.hass.localize(\"ui.panel.config.script.picker.headers.name\"),\n        sortable: true,\n        filterable: true,\n        direction: \"asc\",\n        grows: true,\n        template: narrow\n          ? (name, script: any) => html`\n              ${name}\n              <div class=\"secondary\">\n                ${this.hass.localize(\"ui.card.automation.last_triggered\")}:\n                ${script.attributes.last_triggered\n                  ? formatDateTime(\n                      new Date(script.attributes.last_triggered),\n                      this.hass.locale\n                    )\n                  : this.hass.localize(\"ui.components.relative_time.never\")}\n              </div>\n            `\n          : undefined,\n      },\n    };\n    if (!narrow) {\n      columns.last_triggered = {\n        sortable: true,\n        width: \"40%\",\n        title: this.hass.localize(\"ui.card.automation.last_triggered\"),\n        template: (last_triggered) => html`\n          ${last_triggered\n            ? formatDateTime(new Date(last_triggered), this.hass.locale)\n            : this.hass.localize(\"ui.components.relative_time.never\")}\n        `,\n      };\n    }\n\n    columns.actions = {\n      title: \"\",\n      width: this.narrow ? undefined : \"10%\",\n      type: \"overflow-menu\",\n      template: (_: string, script: any) =>\n        html`\n          <ha-icon-overflow-menu\n            .hass=${this.hass}\n            narrow\n            .items=${[\n              {\n                path: mdiInformationOutline,\n                label: this.hass.localize(\n                  \"ui.panel.config.script.picker.show_info\"\n                ),\n                action: () => this._showInfo(script),\n              },\n              {\n                path: mdiPlay,\n                label: this.hass.localize(\"ui.panel.config.script.picker.run\"),\n                action: () => this._runScript(script),\n              },\n              {\n                path: mdiTransitConnection,\n                label: this.hass.localize(\n                  \"ui.panel.config.script.picker.show_trace\"\n                ),\n                action: () => this._showTrace(script),\n              },\n              {\n                divider: true,\n              },\n              {\n                path: mdiContentDuplicate,\n                label: this.hass.localize(\n                  \"ui.panel.config.script.picker.duplicate\"\n                ),\n                action: () => this._duplicate(script),\n              },\n              {\n                label: this.hass.localize(\n                  \"ui.panel.config.script.picker.delete\"\n                ),\n                path: mdiDelete,\n                action: () => this._deleteConfirm(script),\n                warning: true,\n              },\n            ]}\n          >\n          </ha-icon-overflow-menu>\n        `,\n    };\n\n    return columns;\n  });\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        back-path=\"/config\"\n        .route=${this.route}\n        .tabs=${configSections.automations}\n        .columns=${this._columns(this.narrow, this.hass.locale)}\n        .data=${this._scripts(this.scripts, this._filteredScripts)}\n        .activeFilters=${this._activeFilters}\n        id=\"entity_id\"\n        .noDataText=${this.hass.localize(\n          \"ui.panel.config.script.picker.no_scripts\"\n        )}\n        @clear-filter=${this._clearFilter}\n        hasFab\n        clickable\n        @row-click=${this._handleRowClicked}\n      >\n        <ha-icon-button\n          slot=\"toolbar-icon\"\n          .label=${this.hass.localize(\"ui.common.help\")}\n          .path=${mdiHelpCircle}\n          @click=${this._showHelp}\n        ></ha-icon-button>\n        <ha-button-related-filter-menu\n          slot=\"filter-menu\"\n          corner=\"BOTTOM_START\"\n          .narrow=${this.narrow}\n          .hass=${this.hass}\n          .value=${this._filterValue}\n          exclude-domains='[\"script\"]'\n          @related-changed=${this._relatedFilterChanged}\n        >\n        </ha-button-related-filter-menu>\n        <a href=\"/config/script/edit/new\" slot=\"fab\">\n          <ha-fab\n            ?is-wide=${this.isWide}\n            ?narrow=${this.narrow}\n            .label=${this.hass.localize(\n              \"ui.panel.config.script.picker.add_script\"\n            )}\n            extended\n            ?rtl=${computeRTL(this.hass)}\n          >\n            <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n          </ha-fab>\n        </a>\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  private _relatedFilterChanged(ev: CustomEvent) {\n    this._filterValue = ev.detail.value;\n    if (!this._filterValue) {\n      this._clearFilter();\n      return;\n    }\n    this._activeFilters = [ev.detail.filter];\n    this._filteredScripts = ev.detail.items.script || null;\n  }\n\n  private _clearFilter() {\n    this._filteredScripts = undefined;\n    this._activeFilters = undefined;\n    this._filterValue = undefined;\n  }\n\n  private _handleRowClicked(ev: HASSDomEvent<RowClickedEvent>) {\n    navigate(`/config/script/edit/${ev.detail.id}`);\n  }\n\n  private _runScript = async (script: any) => {\n    await triggerScript(this.hass, script.entity_id);\n    showToast(this, {\n      message: this.hass.localize(\n        \"ui.notification_toast.triggered\",\n        \"name\",\n        computeStateName(script)\n      ),\n    });\n  };\n\n  private _showInfo(script: any) {\n    fireEvent(this, \"hass-more-info\", { entityId: script.entity_id });\n  }\n\n  private _showTrace(script: any) {\n    navigate(`/config/script/trace/${script.entity_id}`);\n  }\n\n  private _showHelp() {\n    showAlertDialog(this, {\n      title: this.hass.localize(\"ui.panel.config.script.caption\"),\n      text: html`\n        ${this.hass.localize(\"ui.panel.config.script.picker.introduction\")}\n        <p>\n          <a\n            href=${documentationUrl(this.hass, \"/docs/scripts/\")}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            ${this.hass.localize(\"ui.panel.config.script.picker.learn_more\")}\n          </a>\n        </p>\n      `,\n    });\n  }\n\n  private async _duplicate(script: any) {\n    try {\n      const config = await getScriptConfig(\n        this.hass,\n        computeObjectId(script.entity_id)\n      );\n      showScriptEditor({\n        ...config,\n        alias: `${config?.alias} (${this.hass.localize(\n          \"ui.panel.config.script.picker.duplicate\"\n        )})`,\n      });\n    } catch (err: any) {\n      await showAlertDialog(this, {\n        text:\n          err.status_code === 404\n            ? this.hass.localize(\n                \"ui.panel.config.script.editor.load_error_not_duplicable\"\n              )\n            : this.hass.localize(\n                \"ui.panel.config.script.editor.load_error_unknown\",\n                \"err_no\",\n                err.status_code\n              ),\n      });\n    }\n  }\n\n  private async _deleteConfirm(script: any) {\n    showConfirmationDialog(this, {\n      text: this.hass.localize(\"ui.panel.config.script.editor.delete_confirm\"),\n      confirmText: this.hass!.localize(\"ui.common.delete\"),\n      dismissText: this.hass!.localize(\"ui.common.cancel\"),\n      confirm: () => this._delete(script),\n    });\n  }\n\n  private async _delete(script: any) {\n    try {\n      await deleteScript(this.hass, computeObjectId(script.entity_id));\n    } catch (err: any) {\n      await showAlertDialog(this, {\n        text:\n          err.status_code === 400\n            ? this.hass.localize(\n                \"ui.panel.config.script.editor.load_error_not_deletable\"\n              )\n            : this.hass.localize(\n                \"ui.panel.config.script.editor.load_error_unknown\",\n                \"err_no\",\n                err.status_code\n              ),\n      });\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        a {\n          text-decoration: none;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-script-picker\": HaScriptPicker;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { mdiHelpCircle } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-icon-button\";\nimport { Action, ScriptConfig } from \"../../../data/script\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport \"../automation/action/ha-automation-action\";\n\n@customElement(\"manual-script-editor\")\nexport class HaManualScriptEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public isWide!: boolean;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property({ attribute: false }) public config!: ScriptConfig;\n\n  @property({ type: Boolean, reflect: true, attribute: \"re-order-mode\" })\n  public reOrderMode = false;\n\n  protected render() {\n    return html`\n      ${this.reOrderMode\n        ? html`\n            <ha-alert\n              alert-type=\"info\"\n              .title=${this.hass.localize(\n                \"ui.panel.config.automation.editor.re_order_mode.title\"\n              )}\n            >\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.re_order_mode.description\"\n              )}\n              <mwc-button slot=\"action\" @click=${this._exitReOrderMode}>\n                ${this.hass.localize(\n                  \"ui.panel.config.automation.editor.re_order_mode.exit\"\n                )}\n              </mwc-button>\n            </ha-alert>\n          `\n        : \"\"}\n\n      <div class=\"header\">\n        <h2 id=\"sequence-heading\" class=\"name\">\n          ${this.hass.localize(\"ui.panel.config.script.editor.sequence\")}\n        </h2>\n        <a\n          href=${documentationUrl(this.hass, \"/docs/scripts/\")}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          <ha-icon-button\n            .path=${mdiHelpCircle}\n            .label=${this.hass.localize(\n              \"ui.panel.config.script.editor.link_available_actions\"\n            )}\n          ></ha-icon-button>\n        </a>\n      </div>\n\n      <ha-automation-action\n        role=\"region\"\n        aria-labelledby=\"sequence-heading\"\n        .actions=${this.config.sequence}\n        @value-changed=${this._sequenceChanged}\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .reOrderMode=${this.reOrderMode}\n      ></ha-automation-action>\n    `;\n  }\n\n  private _sequenceChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.config!, sequence: ev.detail.value as Action[] },\n    });\n  }\n\n  private _exitReOrderMode() {\n    this.reOrderMode = !this.reOrderMode;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          display: block;\n        }\n        ha-card {\n          overflow: hidden;\n        }\n        .description {\n          margin: 0;\n        }\n        p {\n          margin-bottom: 0;\n        }\n        .header {\n          display: flex;\n          align-items: center;\n        }\n        .header:first-child {\n          margin-top: -16px;\n        }\n        .header .name {\n          font-size: 20px;\n          font-weight: 400;\n          flex: 1;\n        }\n        .header a {\n          color: var(--secondary-text-color);\n        }\n        ha-alert {\n          display: block;\n          margin-bottom: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"manual-script-editor\": HaManualScriptEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}