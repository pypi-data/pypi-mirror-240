{"version":3,"file":"8daa9fa6.js","mappings":";;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;;ACJA;AACA;AACA;AACA;;;;;;AAMA;;;;AAIA;;AAGA;AAGA;AACA;;;;;;;;;AASA;;;AAIA;AAGA;AApGA;;;;;;AA4GA;;;;;;;;;;;;;;;AA6DA","sources":["webpack://home-assistant-frontend/./src/components/ha-select.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zwave_js/zwave_js-logs.ts"],"sourcesContent":["import { SelectBase } from \"@material/mwc-select/mwc-select-base\";\nimport { styles } from \"@material/mwc-select/mwc-select.css\";\nimport { css, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { debounce } from \"../common/util/debounce\";\nimport { nextRender } from \"../common/util/render-status\";\n\n@customElement(\"ha-select\")\nexport class HaSelect extends SelectBase {\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  protected override renderLeadingIcon() {\n    if (!this.icon) {\n      return nothing;\n    }\n\n    return html`<span class=\"mdc-select__icon\"\n      ><slot name=\"icon\"></slot\n    ></span>`;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"translations-updated\", this._translationsUpdated);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\n      \"translations-updated\",\n      this._translationsUpdated\n    );\n  }\n\n  private _translationsUpdated = debounce(async () => {\n    await nextRender();\n    this.layoutOptions();\n  }, 500);\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-select:not(.mdc-select--disabled) .mdc-select__icon {\n        color: var(--secondary-text-color);\n      }\n      .mdc-select__anchor {\n        width: var(--ha-select-min-width, 200px);\n      }\n      .mdc-select--filled .mdc-floating-label {\n        inset-inline-start: 12px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select--filled.mdc-select--with-leading-icon .mdc-floating-label {\n        inset-inline-start: 48px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select .mdc-select__anchor {\n        padding-inline-start: 12px;\n        padding-inline-end: 0px;\n        direction: var(--direction);\n      }\n      .mdc-select__anchor .mdc-floating-label--float-above {\n        transform-origin: var(--float-start);\n      }\n    `,\n  ];\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-select\": HaSelect;\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport { mdiDownload } from \"@mdi/js\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { css, CSSResultArray, html, LitElement } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { capitalizeFirstLetter } from \"../../../../../common/string/capitalize-first-letter\";\nimport \"../../../../../components/ha-icon-button\";\nimport \"../../../../../components/ha-select\";\nimport {\n  fetchZWaveJSLogConfig,\n  setZWaveJSLogLevel,\n  subscribeZWaveJSLogs,\n  ZWaveJSLogConfig,\n} from \"../../../../../data/zwave_js\";\nimport \"../../../../../layouts/hass-tabs-subpage\";\nimport { SubscribeMixin } from \"../../../../../mixins/subscribe-mixin\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../../../../types\";\nimport { fileDownload } from \"../../../../../util/file_download\";\nimport { configTabs } from \"./zwave_js-config-router\";\n\n@customElement(\"zwave_js-logs\")\nclass ZWaveJSLogs extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Object }) public route!: Route;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property() public configEntryId!: string;\n\n  @state() private _logConfig?: ZWaveJSLogConfig;\n\n  @query(\"textarea\", true) private _textarea?: HTMLTextAreaElement;\n\n  public hassSubscribe(): Array<UnsubscribeFunc | Promise<UnsubscribeFunc>> {\n    return [\n      subscribeZWaveJSLogs(this.hass, this.configEntryId, (update) => {\n        if (!this.hasUpdated) {\n          return;\n        }\n        if (update.type === \"log_message\") {\n          if (Array.isArray(update.log_message.message)) {\n            for (const line of update.log_message.message) {\n              this._textarea!.value += `${line}\\n`;\n            }\n          } else {\n            this._textarea!.value += `${update.log_message.message}\\n`;\n          }\n        } else {\n          this._logConfig = update.log_config;\n        }\n      }).then((unsub) => {\n        this._textarea!.value += `${this.hass.localize(\n          \"ui.panel.config.zwave_js.logs.subscribed_to_logs\"\n        )}\\n`;\n        return unsub;\n      }),\n    ];\n  }\n\n  protected render() {\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        .tabs=${configTabs}\n      >\n        <div class=\"container\">\n          <ha-card>\n            <div class=\"card-header\">\n              <h1>\n                ${this.hass.localize(\"ui.panel.config.zwave_js.logs.title\")}\n              </h1>\n            </div>\n            <div class=\"card-content\">\n              ${this._logConfig\n                ? html`\n                    <ha-select\n                      .label=${this.hass.localize(\n                        \"ui.panel.config.zwave_js.logs.log_level\"\n                      )}\n                      .value=${this._logConfig.level}\n                      @selected=${this._dropdownSelected}\n                    >\n                      <mwc-list-item value=\"error\">Error</mwc-list-item>\n                      <mwc-list-item value=\"warn\">Warn</mwc-list-item>\n                      <mwc-list-item value=\"info\">Info</mwc-list-item>\n                      <mwc-list-item value=\"verbose\">Verbose</mwc-list-item>\n                      <mwc-list-item value=\"debug\">Debug</mwc-list-item>\n                      <mwc-list-item value=\"silly\">Silly</mwc-list-item>\n                    </ha-select>\n                  `\n                : \"\"}\n            </div>\n            <ha-icon-button\n              .label=${this.hass.localize(\n                \"ui.panel.config.zwave_js.logs.download_logs\"\n              )}\n              @click=${this._downloadLogs}\n              .path=${mdiDownload}\n            ></ha-icon-button>\n          </ha-card>\n          <textarea readonly></textarea>\n        </div>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    this._fetchData();\n  }\n\n  private async _fetchData() {\n    if (!this.configEntryId) {\n      return;\n    }\n    this._logConfig = await fetchZWaveJSLogConfig(\n      this.hass!,\n      this.configEntryId\n    );\n  }\n\n  private _downloadLogs() {\n    fileDownload(\n      `data:text/plain;charset=utf-8,${encodeURIComponent(\n        this._textarea!.value\n      )}`,\n      `zwave_js.log`\n    );\n  }\n\n  private _dropdownSelected(ev) {\n    if (ev.target === undefined || this._logConfig === undefined) {\n      return;\n    }\n    const selected = ev.target.value;\n    if (this._logConfig.level === selected) {\n      return;\n    }\n    setZWaveJSLogLevel(this.hass!, this.configEntryId, selected);\n    this._textarea!.value += `${this.hass.localize(\n      \"ui.panel.config.zwave_js.logs.log_level_changed\",\n      { level: capitalizeFirstLetter(selected) }\n    )}\\n`;\n  }\n\n  static get styles(): CSSResultArray {\n    return [\n      haStyle,\n      css`\n        .container {\n          display: flex;\n          flex-direction: column;\n          height: 100%;\n          box-sizing: border-box;\n          padding: 16px;\n        }\n        textarea {\n          flex-grow: 1;\n          padding: 16px;\n        }\n        ha-card {\n          margin: 16px 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"zwave_js-logs\": ZWaveJSLogs;\n  }\n}\n"],"names":[],"sourceRoot":""}