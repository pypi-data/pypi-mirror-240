{"version":3,"file":"9030ed31.js","mappings":";;AAyOA;AACA;;;AAIA;AACA;AACA;AACA;;;AAGA;;;AAIA;;AAIA;AACA;;;AAOA;;;;;;;AAQA;AACA;AAEA;;;;AAKA;AAEA;;AAmBA;AACA;AACA;;AAOA;AAOA;AACA;;AAEA;;AAGA;;AAIA;AAEA;;AAEA;;AAGA;;;;AAcA;AACA;AACA;;AAhBA;;;;AAKA;;;;;;;AAiBA;;AAkBA;;AAEA;AACA;AACA;AAMA;AAGA;;AAEA;;;;;;;AAQA;AACA;AACA;AACA;;;;AAIA;AAEA;;;AAOA;AAUA;;AAOA;;;;AAlEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+lBA;;;;ACz7BA","sources":["webpack://home-assistant-frontend/./src/components/data-table/ha-data-table.ts","webpack://home-assistant-frontend/./src/components/ha-checkbox.ts"],"sourcesContent":["import { mdiArrowDown, mdiArrowUp } from \"@mdi/js\";\nimport deepClone from \"deep-clone-simple\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport {\n  customElement,\n  eventOptions,\n  property,\n  query,\n  state,\n} from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport memoizeOne from \"memoize-one\";\nimport { restoreScroll } from \"../../common/decorators/restore-scroll\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../search-input\";\nimport { debounce } from \"../../common/util/debounce\";\nimport { nextRender } from \"../../common/util/render-status\";\nimport { haStyleScrollbar } from \"../../resources/styles\";\nimport \"../ha-checkbox\";\nimport type { HaCheckbox } from \"../ha-checkbox\";\nimport \"../ha-svg-icon\";\nimport { filterData, sortData } from \"./sort-filter\";\nimport { HomeAssistant } from \"../../types\";\nimport \"@lit-labs/virtualizer\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"selection-changed\": SelectionChangedEvent;\n    \"row-click\": RowClickedEvent;\n    \"sorting-changed\": SortingChangedEvent;\n  }\n}\n\nexport interface RowClickedEvent {\n  id: string;\n}\n\nexport interface SelectionChangedEvent {\n  value: string[];\n}\n\nexport interface SortingChangedEvent {\n  column: string;\n  direction: SortingDirection;\n}\n\nexport type SortingDirection = \"desc\" | \"asc\" | null;\n\nexport interface DataTableColumnContainer<T = any> {\n  [key: string]: DataTableColumnData<T>;\n}\n\nexport interface DataTableSortColumnData {\n  sortable?: boolean;\n  filterable?: boolean;\n  filterKey?: string;\n  valueColumn?: string;\n  direction?: SortingDirection;\n}\n\nexport interface DataTableColumnData<T = any> extends DataTableSortColumnData {\n  title: TemplateResult | string;\n  label?: TemplateResult | string;\n  type?: \"numeric\" | \"icon\" | \"icon-button\" | \"overflow-menu\";\n  template?: (data: any, row: T) => TemplateResult | string;\n  width?: string;\n  maxWidth?: string;\n  grows?: boolean;\n  forceLTR?: boolean;\n  hidden?: boolean;\n}\n\nexport type ClonedDataTableColumnData = Omit<DataTableColumnData, \"title\"> & {\n  title?: TemplateResult | string;\n};\n\nexport interface DataTableRowData {\n  [key: string]: any;\n  selectable?: boolean;\n}\n\nexport interface SortableColumnContainer {\n  [key: string]: ClonedDataTableColumnData;\n}\n\n@customElement(\"ha-data-table\")\nexport class HaDataTable extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Object }) public columns: DataTableColumnContainer = {};\n\n  @property({ type: Array }) public data: DataTableRowData[] = [];\n\n  @property({ type: Boolean }) public selectable = false;\n\n  @property({ type: Boolean }) public clickable = false;\n\n  @property({ type: Boolean }) public hasFab = false;\n\n  /**\n   * Add an extra row at the bottom of the data table\n   * @type {TemplateResult}\n   */\n  @property({ attribute: false }) public appendRow?;\n\n  @property({ type: Boolean, attribute: \"auto-height\" })\n  public autoHeight = false;\n\n  @property({ type: String }) public id = \"id\";\n\n  @property({ type: String }) public noDataText?: string;\n\n  @property({ type: String }) public searchLabel?: string;\n\n  @property({ type: Boolean, attribute: \"no-label-float\" })\n  public noLabelFloat? = false;\n\n  @property({ type: String }) public filter = \"\";\n\n  @state() private _filterable = false;\n\n  @state() private _filter = \"\";\n\n  @state() private _sortColumn?: string;\n\n  @state() private _sortDirection: SortingDirection = null;\n\n  @state() private _filteredData: DataTableRowData[] = [];\n\n  @state() private _headerHeight = 0;\n\n  @query(\"slot[name='header']\") private _header!: HTMLSlotElement;\n\n  @state() private _items: DataTableRowData[] = [];\n\n  private _checkableRowsCount?: number;\n\n  private _checkedRows: string[] = [];\n\n  private _sortColumns: SortableColumnContainer = {};\n\n  private curRequest = 0;\n\n  // @ts-ignore\n  @restoreScroll(\".scroller\") private _savedScrollPos?: number;\n\n  private _debounceSearch = debounce(\n    (value: string) => {\n      this._filter = value;\n    },\n    100,\n    false\n  );\n\n  public clearSelection(): void {\n    this._checkedRows = [];\n    this._checkedRowsChanged();\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (this._items.length) {\n      // Force update of location of rows\n      this._items = [...this._items];\n    }\n  }\n\n  protected firstUpdated() {\n    this.updateComplete.then(() => this._calcTableHeight());\n  }\n\n  public willUpdate(properties: PropertyValues) {\n    super.willUpdate(properties);\n\n    if (properties.has(\"columns\")) {\n      this._filterable = Object.values(this.columns).some(\n        (column) => column.filterable\n      );\n\n      for (const columnId in this.columns) {\n        if (this.columns[columnId].direction) {\n          this._sortDirection = this.columns[columnId].direction!;\n          this._sortColumn = columnId;\n          break;\n        }\n      }\n\n      const clonedColumns: DataTableColumnContainer = deepClone(this.columns);\n      Object.values(clonedColumns).forEach(\n        (column: ClonedDataTableColumnData) => {\n          delete column.title;\n          delete column.type;\n          delete column.template;\n        }\n      );\n\n      this._sortColumns = clonedColumns;\n    }\n\n    if (properties.has(\"filter\")) {\n      this._debounceSearch(this.filter);\n    }\n\n    if (properties.has(\"data\")) {\n      this._checkableRowsCount = this.data.filter(\n        (row) => row.selectable !== false\n      ).length;\n    }\n\n    if (\n      properties.has(\"data\") ||\n      properties.has(\"columns\") ||\n      properties.has(\"_filter\") ||\n      properties.has(\"_sortColumn\") ||\n      properties.has(\"_sortDirection\")\n    ) {\n      this._sortFilterData();\n    }\n  }\n\n  protected render() {\n    return html`\n      <div class=\"mdc-data-table\">\n        <slot name=\"header\" @slotchange=${this._calcTableHeight}>\n          ${this._filterable\n            ? html`\n                <div class=\"table-header\">\n                  <search-input\n                    .hass=${this.hass}\n                    @value-changed=${this._handleSearchChange}\n                    .label=${this.searchLabel}\n                    .noLabelFloat=${this.noLabelFloat}\n                  ></search-input>\n                </div>\n              `\n            : \"\"}\n        </slot>\n        <div\n          class=\"mdc-data-table__table ${classMap({\n            \"auto-height\": this.autoHeight,\n          })}\"\n          role=\"table\"\n          aria-rowcount=${this._filteredData.length + 1}\n          style=${styleMap({\n            height: this.autoHeight\n              ? `${(this._filteredData.length || 1) * 53 + 53}px`\n              : `calc(100% - ${this._headerHeight}px)`,\n          })}\n        >\n          <div class=\"mdc-data-table__header-row\" role=\"row\" aria-rowindex=\"1\">\n            ${this.selectable\n              ? html`\n                  <div\n                    class=\"mdc-data-table__header-cell mdc-data-table__header-cell--checkbox\"\n                    role=\"columnheader\"\n                  >\n                    <ha-checkbox\n                      class=\"mdc-data-table__row-checkbox\"\n                      @change=${this._handleHeaderRowCheckboxClick}\n                      .indeterminate=${this._checkedRows.length &&\n                      this._checkedRows.length !== this._checkableRowsCount}\n                      .checked=${this._checkedRows.length &&\n                      this._checkedRows.length === this._checkableRowsCount}\n                    >\n                    </ha-checkbox>\n                  </div>\n                `\n              : \"\"}\n            ${Object.entries(this.columns).map(([key, column]) => {\n              if (column.hidden) {\n                return \"\";\n              }\n              const sorted = key === this._sortColumn;\n              const classes = {\n                \"mdc-data-table__header-cell--numeric\":\n                  column.type === \"numeric\",\n                \"mdc-data-table__header-cell--icon\": column.type === \"icon\",\n                \"mdc-data-table__header-cell--icon-button\":\n                  column.type === \"icon-button\",\n                \"mdc-data-table__header-cell--overflow-menu\":\n                  column.type === \"overflow-menu\",\n                sortable: Boolean(column.sortable),\n                \"not-sorted\": Boolean(column.sortable && !sorted),\n                grows: Boolean(column.grows),\n              };\n              return html`\n                <div\n                  aria-label=${column.label}\n                  class=\"mdc-data-table__header-cell ${classMap(classes)}\"\n                  style=${column.width\n                    ? styleMap({\n                        [column.grows ? \"minWidth\" : \"width\"]: column.width,\n                        maxWidth: column.maxWidth || \"\",\n                      })\n                    : \"\"}\n                  role=\"columnheader\"\n                  aria-sort=${ifDefined(\n                    sorted\n                      ? this._sortDirection === \"desc\"\n                        ? \"descending\"\n                        : \"ascending\"\n                      : undefined\n                  )}\n                  @click=${this._handleHeaderClick}\n                  .columnId=${key}\n                >\n                  ${column.sortable\n                    ? html`\n                        <ha-svg-icon\n                          .path=${sorted && this._sortDirection === \"desc\"\n                            ? mdiArrowDown\n                            : mdiArrowUp}\n                        ></ha-svg-icon>\n                      `\n                    : \"\"}\n                  <span>${column.title}</span>\n                </div>\n              `;\n            })}\n          </div>\n          ${!this._filteredData.length\n            ? html`\n                <div class=\"mdc-data-table__content\">\n                  <div class=\"mdc-data-table__row\" role=\"row\">\n                    <div class=\"mdc-data-table__cell grows center\" role=\"cell\">\n                      ${this.noDataText || \"No data\"}\n                    </div>\n                  </div>\n                </div>\n              `\n            : html`\n                <lit-virtualizer\n                  scroller\n                  class=\"mdc-data-table__content scroller ha-scrollbar\"\n                  @scroll=${this._saveScrollPos}\n                  .items=${this._items}\n                  .renderItem=${this._renderRow}\n                ></lit-virtualizer>\n              `}\n        </div>\n      </div>\n    `;\n  }\n\n  private _renderRow = (\n    row: DataTableRowData,\n    index: number\n  ): TemplateResult => {\n    // not sure how this happens...\n    if (!row) {\n      return html``;\n    }\n    if (row.append) {\n      return html` <div class=\"mdc-data-table__row\">${row.content}</div> `;\n    }\n    if (row.empty) {\n      return html` <div class=\"mdc-data-table__row\"></div> `;\n    }\n    return html`\n      <div\n        aria-rowindex=${index + 2}\n        role=\"row\"\n        .rowId=${row[this.id]}\n        @click=${this._handleRowClick}\n        class=\"mdc-data-table__row ${classMap({\n          \"mdc-data-table__row--selected\": this._checkedRows.includes(\n            String(row[this.id])\n          ),\n          clickable: this.clickable,\n        })}\"\n        aria-selected=${ifDefined(\n          this._checkedRows.includes(String(row[this.id])) ? true : undefined\n        )}\n        .selectable=${row.selectable !== false}\n      >\n        ${this.selectable\n          ? html`\n              <div\n                class=\"mdc-data-table__cell mdc-data-table__cell--checkbox\"\n                role=\"cell\"\n              >\n                <ha-checkbox\n                  class=\"mdc-data-table__row-checkbox\"\n                  @change=${this._handleRowCheckboxClick}\n                  .rowId=${row[this.id]}\n                  .disabled=${row.selectable === false}\n                  .checked=${this._checkedRows.includes(String(row[this.id]))}\n                >\n                </ha-checkbox>\n              </div>\n            `\n          : \"\"}\n        ${Object.entries(this.columns).map(([key, column]) => {\n          if (column.hidden) {\n            return \"\";\n          }\n          return html`\n            <div\n              role=\"cell\"\n              class=\"mdc-data-table__cell ${classMap({\n                \"mdc-data-table__cell--numeric\": column.type === \"numeric\",\n                \"mdc-data-table__cell--icon\": column.type === \"icon\",\n                \"mdc-data-table__cell--icon-button\":\n                  column.type === \"icon-button\",\n                \"mdc-data-table__cell--overflow-menu\":\n                  column.type === \"overflow-menu\",\n                grows: Boolean(column.grows),\n                forceLTR: Boolean(column.forceLTR),\n              })}\"\n              style=${column.width\n                ? styleMap({\n                    [column.grows ? \"minWidth\" : \"width\"]: column.width,\n                    maxWidth: column.maxWidth ? column.maxWidth : \"\",\n                  })\n                : \"\"}\n            >\n              ${column.template ? column.template(row[key], row) : row[key]}\n            </div>\n          `;\n        })}\n      </div>\n    `;\n  };\n\n  private async _sortFilterData() {\n    const startTime = new Date().getTime();\n    this.curRequest++;\n    const curRequest = this.curRequest;\n\n    let filteredData = this.data;\n    if (this._filter) {\n      filteredData = await this._memFilterData(\n        this.data,\n        this._sortColumns,\n        this._filter\n      );\n    }\n\n    const prom = this._sortColumn\n      ? sortData(\n          filteredData,\n          this._sortColumns[this._sortColumn],\n          this._sortDirection,\n          this._sortColumn\n        )\n      : filteredData;\n\n    const [data] = await Promise.all([prom, nextRender]);\n\n    const curTime = new Date().getTime();\n    const elapsed = curTime - startTime;\n\n    if (elapsed < 100) {\n      await new Promise((resolve) => setTimeout(resolve, 100 - elapsed));\n    }\n    if (this.curRequest !== curRequest) {\n      return;\n    }\n\n    if (this.appendRow || this.hasFab) {\n      const items = [...data];\n\n      if (this.appendRow) {\n        items.push({ append: true, content: this.appendRow });\n      }\n\n      if (this.hasFab) {\n        items.push({ empty: true });\n      }\n      this._items = items;\n    } else {\n      this._items = data;\n    }\n    this._filteredData = data;\n  }\n\n  private _memFilterData = memoizeOne(\n    async (\n      data: DataTableRowData[],\n      columns: SortableColumnContainer,\n      filter: string\n    ): Promise<DataTableRowData[]> => filterData(data, columns, filter)\n  );\n\n  private _handleHeaderClick(ev: Event) {\n    const columnId = (ev.currentTarget as any).columnId;\n    if (!this.columns[columnId].sortable) {\n      return;\n    }\n    if (!this._sortDirection || this._sortColumn !== columnId) {\n      this._sortDirection = \"asc\";\n    } else if (this._sortDirection === \"asc\") {\n      this._sortDirection = \"desc\";\n    } else {\n      this._sortDirection = null;\n    }\n\n    this._sortColumn = this._sortDirection === null ? undefined : columnId;\n\n    fireEvent(this, \"sorting-changed\", {\n      column: columnId,\n      direction: this._sortDirection,\n    });\n  }\n\n  private _handleHeaderRowCheckboxClick(ev: Event) {\n    const checkbox = ev.target as HaCheckbox;\n    if (checkbox.checked) {\n      this._checkedRows = this._filteredData\n        .filter((data) => data.selectable !== false)\n        .map((data) => data[this.id]);\n      this._checkedRowsChanged();\n    } else {\n      this._checkedRows = [];\n      this._checkedRowsChanged();\n    }\n  }\n\n  private _handleRowCheckboxClick = (ev: Event) => {\n    const checkbox = ev.currentTarget as HaCheckbox;\n    const rowId = (checkbox as any).rowId;\n\n    if (checkbox.checked) {\n      if (this._checkedRows.includes(rowId)) {\n        return;\n      }\n      this._checkedRows = [...this._checkedRows, rowId];\n    } else {\n      this._checkedRows = this._checkedRows.filter((row) => row !== rowId);\n    }\n    this._checkedRowsChanged();\n  };\n\n  private _handleRowClick = (ev: Event) => {\n    const target = ev.target as HTMLElement;\n    if ([\"HA-CHECKBOX\", \"MWC-BUTTON\"].includes(target.tagName)) {\n      return;\n    }\n    const rowId = (ev.currentTarget as any).rowId;\n    fireEvent(this, \"row-click\", { id: rowId }, { bubbles: false });\n  };\n\n  private _checkedRowsChanged() {\n    // force scroller to update, change it's items\n    if (this._items.length) {\n      this._items = [...this._items];\n    }\n    fireEvent(this, \"selection-changed\", {\n      value: this._checkedRows,\n    });\n  }\n\n  private _handleSearchChange(ev: CustomEvent): void {\n    if (this.filter) {\n      return;\n    }\n    this._debounceSearch(ev.detail.value);\n  }\n\n  private async _calcTableHeight() {\n    if (this.autoHeight) {\n      return;\n    }\n    await this.updateComplete;\n    this._headerHeight = this._header.clientHeight;\n  }\n\n  @eventOptions({ passive: true })\n  private _saveScrollPos(e: Event) {\n    this._savedScrollPos = (e.target as HTMLDivElement).scrollTop;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleScrollbar,\n      css`\n        /* default mdc styles, colors changed, without checkbox styles */\n        :host {\n          height: 100%;\n        }\n        .mdc-data-table__content {\n          font-family: Roboto, sans-serif;\n          -moz-osx-font-smoothing: grayscale;\n          -webkit-font-smoothing: antialiased;\n          font-size: 0.875rem;\n          line-height: 1.25rem;\n          font-weight: 400;\n          letter-spacing: 0.0178571429em;\n          text-decoration: inherit;\n          text-transform: inherit;\n        }\n\n        .mdc-data-table {\n          background-color: var(--data-table-background-color);\n          border-radius: 4px;\n          border-width: 1px;\n          border-style: solid;\n          border-color: var(--divider-color);\n          display: inline-flex;\n          flex-direction: column;\n          box-sizing: border-box;\n          overflow: hidden;\n        }\n\n        .mdc-data-table__row--selected {\n          background-color: rgba(var(--rgb-primary-color), 0.04);\n        }\n\n        .mdc-data-table__row {\n          display: flex;\n          width: 100%;\n          height: 52px;\n        }\n\n        .mdc-data-table__row ~ .mdc-data-table__row {\n          border-top: 1px solid var(--divider-color);\n        }\n\n        .mdc-data-table__row:not(.mdc-data-table__row--selected):hover {\n          background-color: rgba(var(--rgb-primary-text-color), 0.04);\n        }\n\n        .mdc-data-table__header-cell {\n          color: var(--primary-text-color);\n        }\n\n        .mdc-data-table__cell {\n          color: var(--primary-text-color);\n        }\n\n        .mdc-data-table__header-row {\n          height: 56px;\n          display: flex;\n          width: 100%;\n          border-bottom: 1px solid var(--divider-color);\n          overflow-x: auto;\n        }\n\n        .mdc-data-table__header-row::-webkit-scrollbar {\n          display: none;\n        }\n\n        .mdc-data-table__cell,\n        .mdc-data-table__header-cell {\n          padding-right: 16px;\n          padding-left: 16px;\n          align-self: center;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          flex-shrink: 0;\n          box-sizing: border-box;\n        }\n\n        .mdc-data-table__cell.mdc-data-table__cell--icon {\n          overflow: initial;\n        }\n\n        .mdc-data-table__header-cell--checkbox,\n        .mdc-data-table__cell--checkbox {\n          /* @noflip */\n          padding-left: 16px;\n          /* @noflip */\n          padding-right: 0;\n          width: 60px;\n        }\n        :host([dir=\"rtl\"]) .mdc-data-table__header-cell--checkbox,\n        :host([dir=\"rtl\"]) .mdc-data-table__cell--checkbox {\n          /* @noflip */\n          padding-left: 0;\n          /* @noflip */\n          padding-right: 16px;\n        }\n\n        .mdc-data-table__table {\n          height: 100%;\n          width: 100%;\n          border: 0;\n          white-space: nowrap;\n        }\n\n        .mdc-data-table__cell {\n          font-family: Roboto, sans-serif;\n          -moz-osx-font-smoothing: grayscale;\n          -webkit-font-smoothing: antialiased;\n          font-size: 0.875rem;\n          line-height: 1.25rem;\n          font-weight: 400;\n          letter-spacing: 0.0178571429em;\n          text-decoration: inherit;\n          text-transform: inherit;\n        }\n\n        .mdc-data-table__cell a {\n          color: inherit;\n          text-decoration: none;\n        }\n\n        .mdc-data-table__cell--numeric {\n          text-align: right;\n        }\n        :host([dir=\"rtl\"]) .mdc-data-table__cell--numeric {\n          /* @noflip */\n          text-align: left;\n        }\n\n        .mdc-data-table__cell--icon {\n          color: var(--secondary-text-color);\n          text-align: center;\n        }\n\n        .mdc-data-table__header-cell--icon,\n        .mdc-data-table__cell--icon {\n          width: 54px;\n        }\n\n        .mdc-data-table__header-cell.mdc-data-table__header-cell--icon {\n          text-align: center;\n        }\n\n        .mdc-data-table__header-cell.sortable.mdc-data-table__header-cell--icon:hover,\n        .mdc-data-table__header-cell.sortable.mdc-data-table__header-cell--icon:not(.not-sorted) {\n          text-align: left;\n        }\n        :host([dir=\"rtl\"])\n          .mdc-data-table__header-cell.sortable.mdc-data-table__header-cell--icon:hover,\n        :host([dir=\"rtl\"])\n          .mdc-data-table__header-cell.sortable.mdc-data-table__header-cell--icon:not(.not-sorted) {\n          text-align: right;\n        }\n\n        .mdc-data-table__cell--icon:first-child ha-icon,\n        .mdc-data-table__cell--icon:first-child ha-state-icon,\n        .mdc-data-table__cell--icon:first-child ha-svg-icon {\n          margin-left: 8px;\n        }\n        :host([dir=\"rtl\"]) .mdc-data-table__cell--icon:first-child ha-icon,\n        :host([dir=\"rtl\"])\n          .mdc-data-table__cell--icon:first-child\n          ha-state-icon,\n        :host([dir=\"rtl\"]) .mdc-data-table__cell--icon:first-child ha-svg-icon {\n          margin-left: auto;\n          margin-right: 8px;\n        }\n\n        .mdc-data-table__cell--icon:first-child state-badge {\n          margin-right: -8px;\n        }\n        :host([dir=\"rtl\"]) .mdc-data-table__cell--icon:first-child state-badge {\n          margin-right: auto;\n          margin-left: -8px;\n        }\n\n        .mdc-data-table__cell--overflow-menu,\n        .mdc-data-table__header-cell--overflow-menu,\n        .mdc-data-table__header-cell--icon-button,\n        .mdc-data-table__cell--icon-button {\n          padding: 8px;\n        }\n\n        .mdc-data-table__header-cell--icon-button,\n        .mdc-data-table__cell--icon-button {\n          width: 56px;\n        }\n\n        .mdc-data-table__cell--overflow-menu,\n        .mdc-data-table__cell--icon-button {\n          color: var(--secondary-text-color);\n          text-overflow: clip;\n        }\n\n        .mdc-data-table__header-cell--icon-button:first-child,\n        .mdc-data-table__cell--icon-button:first-child,\n        .mdc-data-table__header-cell--icon-button:last-child,\n        .mdc-data-table__cell--icon-button:last-child {\n          width: 64px;\n        }\n\n        .mdc-data-table__cell--overflow-menu:first-child,\n        .mdc-data-table__header-cell--overflow-menu:first-child,\n        .mdc-data-table__header-cell--icon-button:first-child,\n        .mdc-data-table__cell--icon-button:first-child {\n          padding-left: 16px;\n        }\n        :host([dir=\"rtl\"])\n          .mdc-data-table__header-cell--overflow-menu:first-child,\n        :host([dir=\"rtl\"]) .mdc-data-table__cell--overflow-menu:first-child,\n        :host([dir=\"rtl\"])\n          .mdc-data-table__header-cell--overflow-menu:first-child,\n        :host([dir=\"rtl\"]) .mdc-data-table__cell--overflow-menu:first-child {\n          padding-left: 8px;\n          padding-right: 16px;\n        }\n\n        .mdc-data-table__cell--overflow-menu:last-child,\n        .mdc-data-table__header-cell--overflow-menu:last-child,\n        .mdc-data-table__header-cell--icon-button:last-child,\n        .mdc-data-table__cell--icon-button:last-child {\n          padding-right: 16px;\n        }\n        :host([dir=\"rtl\"])\n          .mdc-data-table__header-cell--overflow-menu:last-child,\n        :host([dir=\"rtl\"]) .mdc-data-table__cell--overflow-menu:last-child,\n        :host([dir=\"rtl\"]) .mdc-data-table__header-cell--icon-button:last-child,\n        :host([dir=\"rtl\"]) .mdc-data-table__cell--icon-button:last-child {\n          padding-right: 8px;\n          padding-left: 16px;\n        }\n        .mdc-data-table__cell--overflow-menu,\n        .mdc-data-table__header-cell--overflow-menu {\n          overflow: initial;\n        }\n        .mdc-data-table__cell--icon-button a {\n          color: var(--secondary-text-color);\n        }\n\n        .mdc-data-table__header-cell {\n          font-family: Roboto, sans-serif;\n          -moz-osx-font-smoothing: grayscale;\n          -webkit-font-smoothing: antialiased;\n          font-size: 0.875rem;\n          line-height: 1.375rem;\n          font-weight: 500;\n          letter-spacing: 0.0071428571em;\n          text-decoration: inherit;\n          text-transform: inherit;\n          text-align: left;\n        }\n        :host([dir=\"rtl\"]) .mdc-data-table__header-cell {\n          /* @noflip */\n          text-align: right;\n        }\n\n        .mdc-data-table__header-cell--numeric {\n          text-align: right;\n        }\n        .mdc-data-table__header-cell--numeric.sortable:hover,\n        .mdc-data-table__header-cell--numeric.sortable:not(.not-sorted) {\n          text-align: left;\n        }\n        :host([dir=\"rtl\"]) .mdc-data-table__header-cell--numeric {\n          /* @noflip */\n          text-align: left;\n        }\n        :host([dir=\"rtl\"]) .mdc-data-table__header-cell--numeric.sortable:hover,\n        :host([dir=\"rtl\"])\n          .mdc-data-table__header-cell--numeric.sortable:not(.not-sorted) {\n          text-align: right;\n        }\n\n        /* custom from here */\n\n        :host {\n          display: block;\n        }\n\n        .mdc-data-table {\n          display: block;\n          border-width: var(--data-table-border-width, 1px);\n          height: 100%;\n        }\n        .mdc-data-table__header-cell {\n          overflow: hidden;\n          position: relative;\n        }\n        .mdc-data-table__header-cell span {\n          position: relative;\n          left: 0px;\n        }\n        :host([dir=\"rtl\"]) .mdc-data-table__header-cell span {\n          left: auto;\n          right: 0px;\n        }\n\n        .mdc-data-table__header-cell.sortable {\n          cursor: pointer;\n        }\n        .mdc-data-table__header-cell > * {\n          transition: left 0.2s ease;\n        }\n        :host([dir=\"rtl\"]) .mdc-data-table__header-cell > * {\n          transition: right 0.2s ease;\n        }\n        .mdc-data-table__header-cell ha-svg-icon {\n          top: -3px;\n          position: absolute;\n        }\n        .mdc-data-table__header-cell.not-sorted ha-svg-icon {\n          left: -20px;\n        }\n        :host([dir=\"rtl\"]) .mdc-data-table__header-cell.not-sorted ha-svg-icon {\n          right: -20px;\n        }\n        .mdc-data-table__header-cell.sortable:not(.not-sorted) span,\n        .mdc-data-table__header-cell.sortable.not-sorted:hover span {\n          left: 24px;\n        }\n        :host([dir=\"rtl\"])\n          .mdc-data-table__header-cell.sortable:not(.not-sorted)\n          span,\n        :host([dir=\"rtl\"])\n          .mdc-data-table__header-cell.sortable.not-sorted:hover\n          span {\n          left: auto;\n          right: 24px;\n        }\n        .mdc-data-table__header-cell.sortable:not(.not-sorted) ha-svg-icon,\n        .mdc-data-table__header-cell.sortable:hover.not-sorted ha-svg-icon {\n          left: 12px;\n        }\n        :host([dir=\"rtl\"])\n          .mdc-data-table__header-cell.sortable:not(.not-sorted)\n          ha-svg-icon,\n        :host([dir=\"rtl\"])\n          .mdc-data-table__header-cell.sortable:hover.not-sorted\n          ha-svg-icon {\n          left: auto;\n          right: 12px;\n        }\n        .table-header {\n          border-bottom: 1px solid var(--divider-color);\n        }\n        search-input {\n          display: block;\n          flex: 1;\n        }\n        slot[name=\"header\"] {\n          display: block;\n        }\n        .center {\n          text-align: center;\n        }\n        .secondary {\n          color: var(--secondary-text-color);\n        }\n        .scroller {\n          height: calc(100% - 57px);\n          overflow: overlay !important;\n        }\n\n        .mdc-data-table__table.auto-height .scroller {\n          overflow-y: hidden !important;\n        }\n        .grows {\n          flex-grow: 1;\n          flex-shrink: 1;\n        }\n        .forceLTR {\n          direction: ltr;\n        }\n        .clickable {\n          cursor: pointer;\n        }\n        lit-virtualizer {\n          contain: size layout !important;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-data-table\": HaDataTable;\n  }\n}\n","import { CheckboxBase } from \"@material/mwc-checkbox/mwc-checkbox-base\";\nimport { styles } from \"@material/mwc-checkbox/mwc-checkbox.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-checkbox\")\nexport class HaCheckbox extends CheckboxBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-checkbox\": HaCheckbox;\n  }\n}\n"],"names":[],"sourceRoot":""}