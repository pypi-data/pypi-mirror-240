{"version":3,"file":"6e806643.js","mappings":";AAaA;;AAEA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;;;;ACvEA;AAUA;AACA;;;AAGA;;;;AAMA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;;;;;AASA;AACA;;;;AA9CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4IA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/header-footer-editor/hui-dialog-create-headerfooter.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { createCloseHeading } from \"../../../../components/ha-dialog\";\nimport type { HassDialog } from \"../../../../dialogs/make-dialog-manager\";\nimport { haStyleDialog } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { LovelaceHeaderFooterConfig } from \"../../header-footer/types\";\nimport { headerFooterElements } from \"../lovelace-headerfooters\";\nimport { getHeaderFooterStubConfig } from \"./get-headerfooter-stub-config\";\nimport type { CreateHeaderFooterDialogParams } from \"./show-create-headerfooter-dialog\";\n\n@customElement(\"hui-dialog-create-headerfooter\")\nexport class HuiCreateDialogHeaderFooter\n  extends LitElement\n  implements HassDialog<CreateHeaderFooterDialogParams>\n{\n  @property({ attribute: false }) protected hass!: HomeAssistant;\n\n  @state() private _params?: CreateHeaderFooterDialogParams;\n\n  public async showDialog(\n    params: CreateHeaderFooterDialogParams\n  ): Promise<void> {\n    this._params = params;\n  }\n\n  public closeDialog(): boolean {\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n    return true;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass!.localize(\n            `ui.panel.lovelace.editor.header-footer.choose_header_footer`,\n            \"type\",\n            this.hass!.localize(\n              `ui.panel.lovelace.editor.header-footer.${this._params.type}`\n            )\n          )\n        )}\n        @keydown=${this._ignoreKeydown}\n        @closed=${this._cancel}\n      >\n        <div class=\"elements\">\n          ${headerFooterElements.map(\n            (headerFooter, index) =>\n              html`\n                <ha-card\n                  role=\"button\"\n                  tabindex=\"0\"\n                  aria-labeledby=${\"card-name-\" + index}\n                  outlined\n                  .type=${headerFooter.type}\n                  @click=${this._handleHeaderFooterPicked}\n                  @keyDown=${this._handleHeaderFooterPicked}\n                  dialogInitialFocus\n                >\n                  <ha-svg-icon .path=${headerFooter.icon}></ha-svg-icon>\n                  <div .id=${\"card-name-\" + index} role=\"none presentation\">\n                    ${this.hass!.localize(\n                      `ui.panel.lovelace.editor.header-footer.types.${headerFooter.type}.name`\n                    )}\n                  </div>\n                </ha-card>\n              `\n          )}\n        </div>\n        <div slot=\"primaryAction\">\n          <mwc-button @click=${this._cancel}>\n            ${this.hass!.localize(\"ui.common.cancel\")}\n          </mwc-button>\n        </div>\n      </ha-dialog>\n    `;\n  }\n\n  private async _handleHeaderFooterPicked(ev: CustomEvent): Promise<void> {\n    if (\n      ev instanceof KeyboardEvent &&\n      ev.key !== \"Enter\" &&\n      ev.key !== \" \" &&\n      ev.key !== \"Spacebar\"\n    ) {\n      return;\n    }\n\n    const type = (ev.currentTarget as any).type;\n    let config: LovelaceHeaderFooterConfig = { type };\n\n    if (this.hass) {\n      config = await getHeaderFooterStubConfig(\n        this.hass,\n        type,\n        this._params?.entities || [],\n        []\n      );\n    }\n\n    this._params!.pickHeaderFooter(config);\n    this.closeDialog();\n  }\n\n  private _ignoreKeydown(ev: KeyboardEvent) {\n    ev.stopPropagation();\n  }\n\n  private _cancel(ev?: Event) {\n    if (ev) {\n      ev.stopPropagation();\n    }\n    this.closeDialog();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          /* overrule the ha-style-dialog max-height on small screens */\n          ha-dialog {\n            --mdc-dialog-max-height: 100%;\n            height: 100%;\n          }\n        }\n\n        @media all and (min-width: 850px) {\n          ha-dialog {\n            --mdc-dialog-min-width: 550px;\n          }\n        }\n\n        ha-dialog {\n          --mdc-dialog-max-width: 550px;\n          --dialog-content-padding: 2px 24px 20px 24px;\n          --dialog-z-index: 5;\n        }\n\n        .elements {\n          display: flex;\n          flex-wrap: wrap;\n        }\n\n        .spinner,\n        ha-card {\n          width: calc(50% - 8px);\n          text-align: center;\n          margin: 4px;\n        }\n\n        ha-card {\n          box-sizing: border-box;\n          padding: 8px;\n          color: var(--secondary-text-color);\n          font-size: 16px;\n          cursor: pointer;\n        }\n\n        ha-svg-icon {\n          padding-bottom: 4px;\n          --mdc-icon-size: 38px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-dialog-create-headerfooter\": HuiCreateDialogHeaderFooter;\n  }\n}\n"],"names":[],"sourceRoot":""}