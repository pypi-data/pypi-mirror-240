{"version":3,"file":"f7b2d924.js","mappings":";;AA2IA;AAIA;AACA;AACA;AASA;;;;;AAKA;AACA;;AAEA;;AAEA;;AAKA;;AAIA;AACA;;AAEA;;AAEA;;;;AAMA;;;;AAIA;;;;AAMA;;;;AAIA;;AAIA;;AAKA;;;AAtCA;;;;AA+CA;AAQA;AAGA;;;AAKA;AACA;;AAIA;AAGA;;AAIA;;;AAKA;;;AAKA;;AAIA;;AAQA;AACA;AAGA;;;AAKA;;AAIA;;AAQA;AACA;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwPA","sources":["webpack://home-assistant-frontend/./src/panels/config/cloud/alexa/cloud-alexa.ts"],"sourcesContent":["import { ActionDetail } from \"@material/mwc-list/mwc-list-foundation\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport {\n  mdiCheckboxMarked,\n  mdiCheckboxMultipleMarked,\n  mdiCloseBox,\n  mdiCloseBoxMultiple,\n} from \"@mdi/js\";\nimport type { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { computeDomain } from \"../../../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../../../common/entity/compute_state_name\";\nimport {\n  EntityFilter,\n  generateFilter,\n  isEmptyFilter,\n} from \"../../../../common/entity/entity_filter\";\nimport { stringCompare } from \"../../../../common/string/compare\";\nimport \"../../../../components/entity/state-info\";\nimport \"../../../../components/ha-button-menu\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-formfield\";\nimport \"../../../../components/ha-icon-button\";\nimport \"../../../../components/ha-switch\";\nimport { AlexaEntity, fetchCloudAlexaEntities } from \"../../../../data/alexa\";\nimport {\n  AlexaEntityConfig,\n  CloudPreferences,\n  CloudStatusLoggedIn,\n  updateCloudAlexaEntityConfig,\n  updateCloudPref,\n} from \"../../../../data/cloud\";\nimport {\n  EntityRegistryEntry,\n  subscribeEntityRegistry,\n} from \"../../../../data/entity_registry\";\nimport { showDomainTogglerDialog } from \"../../../../dialogs/domain-toggler/show-dialog-domain-toggler\";\nimport \"../../../../layouts/hass-loading-screen\";\nimport \"../../../../layouts/hass-subpage\";\nimport { SubscribeMixin } from \"../../../../mixins/subscribe-mixin\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\n\nconst DEFAULT_CONFIG_EXPOSE = true;\nconst IGNORE_INTERFACES = [\"Alexa.EndpointHealth\"];\n\n@customElement(\"cloud-alexa\")\nclass CloudAlexa extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property()\n  public cloudStatus!: CloudStatusLoggedIn;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @state() private _entities?: AlexaEntity[];\n\n  @state()\n  private _entityConfigs: CloudPreferences[\"alexa_entity_configs\"] = {};\n\n  @state()\n  private _entityCategories?: Record<\n    string,\n    EntityRegistryEntry[\"entity_category\"]\n  >;\n\n  private _popstateSyncAttached = false;\n\n  private _popstateReloadStatusAttached = false;\n\n  private _isInitialExposed?: Set<string>;\n\n  private _getEntityFilterFunc = memoizeOne((filter: EntityFilter) =>\n    generateFilter(\n      filter.include_domains,\n      filter.include_entities,\n      filter.exclude_domains,\n      filter.exclude_entities\n    )\n  );\n\n  protected render(): TemplateResult {\n    if (this._entities === undefined || this._entityCategories === undefined) {\n      return html` <hass-loading-screen></hass-loading-screen> `;\n    }\n    const emptyFilter = isEmptyFilter(this.cloudStatus.alexa_entities);\n    const filterFunc = this._getEntityFilterFunc(\n      this.cloudStatus.alexa_entities\n    );\n\n    // We will only generate `isInitialExposed` during first render.\n    // On each subsequent render we will use the same set so that cards\n    // will not jump around when we change the exposed setting.\n    const showInExposed = this._isInitialExposed || new Set();\n    const trackExposed = this._isInitialExposed === undefined;\n\n    let selected = 0;\n\n    // On first render we decide which cards show in which category.\n    // That way cards won't jump around when changing values.\n    const exposedCards: TemplateResult[] = [];\n    const notExposedCards: TemplateResult[] = [];\n\n    this._entities.forEach((entity) => {\n      const stateObj = this.hass.states[entity.entity_id];\n      const config = this._entityConfigs[entity.entity_id] || {\n        should_expose: null,\n      };\n      const isExposed = emptyFilter\n        ? this._configIsExposed(\n            entity.entity_id,\n            config,\n            this._entityCategories![entity.entity_id]\n          )\n        : filterFunc(entity.entity_id);\n      const isDomainExposed = emptyFilter\n        ? this._configIsDomainExposed(\n            entity.entity_id,\n            this._entityCategories![entity.entity_id]\n          )\n        : filterFunc(entity.entity_id);\n      if (isExposed) {\n        selected++;\n\n        if (trackExposed) {\n          showInExposed.add(entity.entity_id);\n        }\n      }\n\n      const target = showInExposed.has(entity.entity_id)\n        ? exposedCards\n        : notExposedCards;\n\n      const iconButton = html`<ha-icon-button\n        slot=\"trigger\"\n        class=${classMap({\n          exposed: isExposed!,\n          \"not-exposed\": !isExposed,\n        })}\n        .disabled=${!emptyFilter}\n        .label=${this.hass!.localize(\"ui.panel.config.cloud.alexa.expose\")}\n        .path=${config.should_expose !== null\n          ? isExposed\n            ? mdiCheckboxMarked\n            : mdiCloseBox\n          : isDomainExposed\n          ? mdiCheckboxMultipleMarked\n          : mdiCloseBoxMultiple}\n      ></ha-icon-button>`;\n\n      target.push(html`\n        <ha-card outlined>\n          <div class=\"card-content\">\n            <div class=\"top-line\">\n              <state-info\n                .hass=${this.hass}\n                .stateObj=${stateObj}\n                secondary-line\n                @click=${this._showMoreInfo}\n              >\n                ${entity.interfaces\n                  .filter((ifc) => !IGNORE_INTERFACES.includes(ifc))\n                  .map((ifc) => ifc.replace(/(Alexa.|Controller)/g, \"\"))\n                  .join(\", \")}\n              </state-info>\n              ${!emptyFilter\n                ? html`${iconButton}`\n                : html`<ha-button-menu\n                    corner=\"BOTTOM_START\"\n                    .entityId=${stateObj.entity_id}\n                    @action=${this._exposeChanged}\n                  >\n                    ${iconButton}\n                    <mwc-list-item hasMeta>\n                      ${this.hass!.localize(\n                        \"ui.panel.config.cloud.alexa.expose_entity\"\n                      )}\n                      <ha-svg-icon\n                        class=\"exposed\"\n                        slot=\"meta\"\n                        .path=${mdiCheckboxMarked}\n                      ></ha-svg-icon>\n                    </mwc-list-item>\n                    <mwc-list-item hasMeta>\n                      ${this.hass!.localize(\n                        \"ui.panel.config.cloud.alexa.dont_expose_entity\"\n                      )}\n                      <ha-svg-icon\n                        class=\"not-exposed\"\n                        slot=\"meta\"\n                        .path=${mdiCloseBox}\n                      ></ha-svg-icon>\n                    </mwc-list-item>\n                    <mwc-list-item hasMeta>\n                      ${this.hass!.localize(\n                        \"ui.panel.config.cloud.alexa.follow_domain\"\n                      )}\n                      <ha-svg-icon\n                        class=${classMap({\n                          exposed: isDomainExposed,\n                          \"not-exposed\": !isDomainExposed,\n                        })}\n                        slot=\"meta\"\n                        .path=${isDomainExposed\n                          ? mdiCheckboxMultipleMarked\n                          : mdiCloseBoxMultiple}\n                      ></ha-svg-icon>\n                    </mwc-list-item>\n                  </ha-button-menu>`}\n            </div>\n          </div>\n        </ha-card>\n      `);\n    });\n\n    if (trackExposed) {\n      this._isInitialExposed = showInExposed;\n    }\n\n    return html`\n      <hass-subpage .hass=${this.hass} .narrow=${\n      this.narrow\n    } .header=${this.hass!.localize(\"ui.panel.config.cloud.alexa.title\")}>\n        ${\n          emptyFilter\n            ? html`\n                <mwc-button\n                  slot=\"toolbar-icon\"\n                  @click=${this._openDomainToggler}\n                  >${this.hass!.localize(\n                    \"ui.panel.config.cloud.alexa.manage_defaults\"\n                  )}</mwc-button\n                >\n              `\n            : \"\"\n        }\n        ${\n          !emptyFilter\n            ? html`\n                <div class=\"banner\">\n                  ${this.hass!.localize(\"ui.panel.config.cloud.alexa.banner\")}\n                </div>\n              `\n            : \"\"\n        }\n          ${\n            exposedCards.length > 0\n              ? html`\n                  <div class=\"header\">\n                    <h3>\n                      ${this.hass!.localize(\n                        \"ui.panel.config.cloud.alexa.exposed_entities\"\n                      )}\n                    </h3>\n                    ${!this.narrow\n                      ? this.hass!.localize(\n                          \"ui.panel.config.cloud.alexa.exposed\",\n                          \"selected\",\n                          selected\n                        )\n                      : selected}\n                  </div>\n                  <div class=\"content\">${exposedCards}</div>\n                `\n              : \"\"\n          }\n          ${\n            notExposedCards.length > 0\n              ? html`\n                  <div class=\"header second\">\n                    <h3>\n                      ${this.hass!.localize(\n                        \"ui.panel.config.cloud.alexa.not_exposed_entities\"\n                      )}\n                    </h3>\n                    ${!this.narrow\n                      ? this.hass!.localize(\n                          \"ui.panel.config.cloud.alexa.not_exposed\",\n                          \"selected\",\n                          this._entities.length - selected\n                        )\n                      : this._entities.length - selected}\n                  </div>\n                  <div class=\"content\">${notExposedCards}</div>\n                `\n              : \"\"\n          }\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    this._fetchData();\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    if (changedProps.has(\"cloudStatus\")) {\n      this._entityConfigs = this.cloudStatus.prefs.alexa_entity_configs;\n    }\n  }\n\n  protected override hassSubscribe(): (\n    | UnsubscribeFunc\n    | Promise<UnsubscribeFunc>\n  )[] {\n    return [\n      subscribeEntityRegistry(this.hass.connection, (entries) => {\n        const categories = {};\n\n        for (const entry of entries) {\n          categories[entry.entity_id] = entry.entity_category;\n        }\n\n        this._entityCategories = categories;\n      }),\n    ];\n  }\n\n  private async _fetchData() {\n    const entities = await fetchCloudAlexaEntities(this.hass);\n    entities.sort((a, b) => {\n      const stateA = this.hass.states[a.entity_id];\n      const stateB = this.hass.states[b.entity_id];\n      return stringCompare(\n        stateA ? computeStateName(stateA) : a.entity_id,\n        stateB ? computeStateName(stateB) : b.entity_id\n      );\n    });\n    this._entities = entities;\n  }\n\n  private _showMoreInfo(ev) {\n    const entityId = ev.currentTarget.stateObj.entity_id;\n    fireEvent(this, \"hass-more-info\", { entityId });\n  }\n\n  private _configIsDomainExposed(\n    entityId: string,\n    entityCategory: EntityRegistryEntry[\"entity_category\"] | undefined\n  ) {\n    const domain = computeDomain(entityId);\n    return this.cloudStatus.prefs.alexa_default_expose\n      ? !entityCategory &&\n          this.cloudStatus.prefs.alexa_default_expose.includes(domain)\n      : DEFAULT_CONFIG_EXPOSE;\n  }\n\n  private _configIsExposed(\n    entityId: string,\n    config: AlexaEntityConfig,\n    entityCategory: EntityRegistryEntry[\"entity_category\"] | undefined\n  ) {\n    return (\n      config.should_expose ??\n      this._configIsDomainExposed(entityId, entityCategory)\n    );\n  }\n\n  private async _exposeChanged(ev: CustomEvent<ActionDetail>) {\n    const entityId = (ev.currentTarget as any).entityId;\n    let newVal: boolean | null = null;\n    switch (ev.detail.index) {\n      case 0:\n        newVal = true;\n        break;\n      case 1:\n        newVal = false;\n        break;\n      case 2:\n        newVal = null;\n        break;\n    }\n    await this._updateExposed(entityId, newVal);\n  }\n\n  private async _updateExposed(entityId: string, newExposed: boolean | null) {\n    await this._updateConfig(entityId, {\n      should_expose: newExposed,\n    });\n    this._ensureEntitySync();\n  }\n\n  private async _updateConfig(entityId: string, values: AlexaEntityConfig) {\n    const updatedConfig = await updateCloudAlexaEntityConfig(\n      this.hass,\n      entityId,\n      values\n    );\n    this._entityConfigs = {\n      ...this._entityConfigs,\n      [entityId]: updatedConfig,\n    };\n    this._ensureStatusReload();\n  }\n\n  private _openDomainToggler() {\n    showDomainTogglerDialog(this, {\n      title: this.hass!.localize(\"ui.panel.config.cloud.alexa.manage_defaults\"),\n      description: this.hass!.localize(\n        \"ui.panel.config.cloud.alexa.manage_defaults_dialog_description\"\n      ),\n      domains: this._entities!.map((entity) =>\n        computeDomain(entity.entity_id)\n      ).filter((value, idx, self) => self.indexOf(value) === idx),\n      exposedDomains: this.cloudStatus.prefs.alexa_default_expose,\n      toggleDomain: (domain, expose) => {\n        this._updateDomainExposed(domain, expose);\n      },\n      resetDomain: (domain) => {\n        this._entities!.forEach((entity) => {\n          if (computeDomain(entity.entity_id) === domain) {\n            this._updateExposed(entity.entity_id, null);\n          }\n        });\n      },\n    });\n  }\n\n  private async _updateDomainExposed(domain: string, expose: boolean) {\n    const defaultExpose =\n      this.cloudStatus.prefs.alexa_default_expose ||\n      this._entities!.map((entity) => computeDomain(entity.entity_id)).filter(\n        (value, idx, self) => self.indexOf(value) === idx\n      );\n\n    if (\n      (expose && defaultExpose.includes(domain)) ||\n      (!expose && !defaultExpose.includes(domain))\n    ) {\n      return;\n    }\n\n    if (expose) {\n      defaultExpose.push(domain);\n    } else {\n      defaultExpose.splice(defaultExpose.indexOf(domain), 1);\n    }\n\n    await updateCloudPref(this.hass!, {\n      alexa_default_expose: defaultExpose,\n    });\n    fireEvent(this, \"ha-refresh-cloud-status\");\n  }\n\n  private _ensureStatusReload() {\n    if (this._popstateReloadStatusAttached) {\n      return;\n    }\n    this._popstateReloadStatusAttached = true;\n    // Cache parent because by the time popstate happens,\n    // this element is detached\n    const parent = this.parentElement!;\n    window.addEventListener(\n      \"popstate\",\n      () => fireEvent(parent, \"ha-refresh-cloud-status\"),\n      { once: true }\n    );\n  }\n\n  private _ensureEntitySync() {\n    if (this._popstateSyncAttached) {\n      return;\n    }\n    this._popstateSyncAttached = true;\n    // Cache parent because by the time popstate happens,\n    // this element is detached\n    window.addEventListener(\n      \"popstate\",\n      () => {\n        // We don't have anything yet.\n      },\n      { once: true }\n    );\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        mwc-list-item > [slot=\"meta\"] {\n          margin-left: 4px;\n        }\n        .banner {\n          color: var(--primary-text-color);\n          background-color: var(\n            --ha-card-background,\n            var(--card-background-color, white)\n          );\n          padding: 16px 8px;\n          text-align: center;\n        }\n        .content {\n          display: grid;\n          grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n          grid-gap: 8px 8px;\n          padding: 8px;\n        }\n        .card-content {\n          padding-bottom: 12px;\n        }\n        state-info {\n          cursor: pointer;\n        }\n        ha-switch {\n          padding: 8px 0;\n        }\n        .top-line {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n        }\n        .header {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          padding: 0 16px;\n          border-bottom: 1px solid var(--divider-color);\n          background: var(--app-header-background-color);\n        }\n        .header.second {\n          border-top: 1px solid var(--divider-color);\n        }\n        .exposed {\n          color: var(--success-color);\n        }\n        .not-exposed {\n          color: var(--error-color);\n        }\n        @media all and (max-width: 450px) {\n          ha-card {\n            max-width: 100%;\n          }\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"cloud-alexa\": CloudAlexa;\n  }\n}\n"],"names":[],"sourceRoot":""}