{"version":3,"file":"d6c5a81e.js","mappings":";;AAsEA;;AAWA;AACA;;;AAGA;;;AAKA;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/cards/hui-iframe-card.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport parseAspectRatio from \"../../../common/util/parse-aspect-ratio\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-alert\";\nimport { LovelaceCard, LovelaceCardEditor } from \"../types\";\nimport { IframeCardConfig } from \"./types\";\nimport type { HomeAssistant } from \"../../../types\";\n\n@customElement(\"hui-iframe-card\")\nexport class HuiIframeCard extends LitElement implements LovelaceCard {\n  public static async getConfigElement(): Promise<LovelaceCardEditor> {\n    await import(\"../editor/config-elements/hui-iframe-card-editor\");\n    return document.createElement(\"hui-iframe-card-editor\");\n  }\n\n  public static getStubConfig(): IframeCardConfig {\n    return {\n      type: \"iframe\",\n      url: \"https://www.home-assistant.io\",\n      aspect_ratio: \"50%\",\n    };\n  }\n\n  @property({ type: Boolean, reflect: true })\n  public isPanel = false;\n\n  @property() public hass?: HomeAssistant;\n\n  @state() protected _config?: IframeCardConfig;\n\n  public getCardSize(): number {\n    if (!this._config) {\n      return 5;\n    }\n    const aspectRatio = this._config.aspect_ratio\n      ? Number(this._config.aspect_ratio.replace(\"%\", \"\"))\n      : 50;\n    return 1 + aspectRatio / 25;\n  }\n\n  public setConfig(config: IframeCardConfig): void {\n    if (!config.url) {\n      throw new Error(\"URL required\");\n    }\n\n    this._config = config;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    let padding = \"\";\n    if (!this.isPanel && this._config.aspect_ratio) {\n      const ratio = parseAspectRatio(this._config.aspect_ratio);\n      if (ratio && ratio.w > 0 && ratio.h > 0) {\n        padding = `${((100 * ratio.h) / ratio.w).toFixed(2)}%`;\n      }\n    } else if (!this.isPanel) {\n      padding = \"50%\";\n    }\n\n    const target_protocol = new URL(this._config.url, location.toString())\n      .protocol;\n    if (location.protocol === \"https:\" && target_protocol !== \"https:\") {\n      return html`\n        <ha-alert alert-type=\"error\">\n          ${this.hass!.localize(\n            \"ui.panel.lovelace.cards.iframe.error_secure_context\",\n            {\n              target_protocol,\n              context_protocol: location.protocol,\n            }\n          )}\n        </ha-alert>\n      `;\n    }\n\n    return html`\n      <ha-card .header=${this._config.title}>\n        <div\n          id=\"root\"\n          style=${styleMap({\n            \"padding-top\": padding,\n          })}\n        >\n          <iframe\n            src=${this._config.url}\n            sandbox=\"allow-forms allow-modals allow-popups allow-pointer-lock allow-same-origin allow-scripts\"\n            allowfullscreen=\"true\"\n          ></iframe>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host([ispanel]) ha-card {\n        width: 100%;\n        height: 100%;\n      }\n\n      ha-card {\n        overflow: hidden;\n      }\n\n      #root {\n        width: 100%;\n        position: relative;\n      }\n\n      :host([ispanel]) #root {\n        height: 100%;\n      }\n\n      iframe {\n        position: absolute;\n        border: none;\n        width: 100%;\n        height: 100%;\n        top: 0;\n        left: 0;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-iframe-card\": HuiIframeCard;\n  }\n}\n"],"names":[],"sourceRoot":""}