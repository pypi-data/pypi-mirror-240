{"version":3,"file":"4479775d.js","mappings":";;AA0EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AAEA;AAkCA;AACA;;;;;;AC3GA;;;;AAKA;ACmCA;AAMA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;AAMA;;AAIA;;;;;AAxBA","sources":["webpack://home-assistant-frontend/mwc-fab-base.ts","webpack://home-assistant-frontend/./src/components/ha-fab.ts","webpack://home-assistant-frontend/./src/panels/config/lovelace/resources/ha-config-lovelace-resources.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\nimport '@material/mwc-ripple/mwc-ripple';\n\nimport {Ripple} from '@material/mwc-ripple/mwc-ripple';\nimport {RippleHandlers} from '@material/mwc-ripple/ripple-handlers';\nimport {html, LitElement, TemplateResult} from 'lit';\nimport {eventOptions, property, queryAsync, state} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\n/**\n * Fab Base class logic and template definition\n * @soyCompatible\n */\nexport class FabBase extends LitElement {\n  static override shadowRootOptions:\n      ShadowRootInit = {mode: 'open', delegatesFocus: true};\n\n  @queryAsync('mwc-ripple') ripple!: Promise<Ripple|null>;\n\n  @property({type: Boolean}) mini = false;\n\n  @property({type: Boolean}) exited = false;\n\n  @property({type: Boolean}) disabled = false;\n\n  @property({type: Boolean}) extended = false;\n\n  @property({type: Boolean}) showIconAtEnd = false;\n\n  @property({type: Boolean}) reducedTouchTarget = false;\n\n  @property() icon = '';\n\n  @property() label = '';\n\n  @state() protected shouldRenderRipple = false;\n\n  @state() protected useStateLayerCustomProperties = false;\n\n  protected rippleHandlers = new RippleHandlers(() => {\n    this.shouldRenderRipple = true;\n    return this.ripple;\n  });\n\n  /**\n   * @soyTemplate\n   * @soyClasses fabClasses: .mdc-fab\n   */\n  protected override render(): TemplateResult {\n    const hasTouchTarget = this.mini && !this.reducedTouchTarget;\n    /** @classMap */\n    const classes = {\n      'mdc-fab--mini': this.mini,\n      'mdc-fab--touch': hasTouchTarget,\n      'mdc-fab--exited': this.exited,\n      'mdc-fab--extended': this.extended,\n      'icon-end': this.showIconAtEnd,\n    };\n\n    const ariaLabel = this.label ? this.label : this.icon;\n\n    /*\n     * Some internal styling is sensitive to whitespace in this template, take\n     * care when modifying it.\n     */\n    return html`<button\n          class=\"mdc-fab ${classMap(classes)}\"\n          ?disabled=\"${this.disabled}\"\n          aria-label=\"${ariaLabel}\"\n          @mouseenter=${this.handleRippleMouseEnter}\n          @mouseleave=${this.handleRippleMouseLeave}\n          @focus=${this.handleRippleFocus}\n          @blur=${this.handleRippleBlur}\n          @mousedown=${this.handleRippleActivate}\n          @touchstart=${this.handleRippleStartPress}\n          @touchend=${this.handleRippleDeactivate}\n          @touchcancel=${this.handleRippleDeactivate}><!--\n        -->${this.renderBeforeRipple()}<!--\n        -->${this.renderRipple()}<!--\n        -->${this.showIconAtEnd ? this.renderLabel() : ''}<!--\n        --><span class=\"material-icons mdc-fab__icon\"><!--\n          --><slot name=\"icon\">${this.icon}</slot><!--\n       --></span><!--\n        -->${!this.showIconAtEnd ? this.renderLabel() : ''}<!--\n        -->${this.renderTouchTarget()}<!--\n      --></button>`;\n  }\n\n  /** @soyTemplate */\n  protected renderIcon(): TemplateResult {\n    // TODO(b/191914389): reimplement once Wit issue is resolved\n    return html``;\n  }\n\n  /** @soyTemplate */\n  protected renderTouchTarget(): TemplateResult {\n    const hasTouchTarget = this.mini && !this.reducedTouchTarget;\n\n    return html`${\n        hasTouchTarget ? html`<div class=\"mdc-fab__touch\"></div>` : ''}`;\n  }\n\n  /** @soyTemplate */\n  protected renderLabel(): TemplateResult {\n    const showLabel = this.label !== '' && this.extended;\n\n    return html`${\n        showLabel ? html`<span class=\"mdc-fab__label\">${this.label}</span>` :\n                    ''}`;\n  }\n\n  /** @soyTemplate */\n  protected renderBeforeRipple(): TemplateResult {\n    return html``;\n  }\n\n  /** @soyTemplate */\n  protected renderRipple(): TemplateResult|string {\n    return this.shouldRenderRipple ? html`<mwc-ripple class=\"ripple\"\n        .internalUseStateLayerCustomProperties=\"${\n                                         this.useStateLayerCustomProperties}\"\n         ></mwc-ripple>` :\n                                     '';\n  }\n\n  protected handleRippleActivate(event?: Event) {\n    const onUp = () => {\n      window.removeEventListener('mouseup', onUp);\n\n      this.handleRippleDeactivate();\n    };\n\n    window.addEventListener('mouseup', onUp);\n    this.handleRippleStartPress(event);\n  }\n\n  @eventOptions({passive: true})\n  protected handleRippleStartPress(event?: Event) {\n    this.rippleHandlers.startPress(event);\n  }\n\n  protected handleRippleDeactivate() {\n    this.rippleHandlers.endPress();\n  }\n\n  protected handleRippleMouseEnter() {\n    this.rippleHandlers.startHover();\n  }\n\n  protected handleRippleMouseLeave() {\n    this.rippleHandlers.endHover();\n  }\n\n  protected handleRippleFocus() {\n    this.rippleHandlers.startFocus();\n  }\n\n  protected handleRippleBlur() {\n    this.rippleHandlers.endFocus();\n  }\n}\n","import { FabBase } from \"@material/mwc-fab/mwc-fab-base\";\nimport { styles } from \"@material/mwc-fab/mwc-fab.css\";\nimport { customElement } from \"lit/decorators\";\nimport { css } from \"lit\";\n\n@customElement(\"ha-fab\")\nexport class HaFab extends FabBase {\n  protected firstUpdated(changedProperties) {\n    super.firstUpdated(changedProperties);\n    this.style.setProperty(\"--mdc-theme-secondary\", \"var(--primary-color)\");\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host .mdc-fab--extended .mdc-fab__icon {\n        margin-inline-start: -8px;\n        margin-inline-end: 12px;\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          :host .mdc-fab--extended .mdc-fab__icon {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-fab\": HaFab;\n  }\n}\n","import { mdiPlus } from \"@mdi/js\";\nimport { html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoize from \"memoize-one\";\nimport { stringCompare } from \"../../../../common/string/compare\";\nimport {\n  DataTableColumnContainer,\n  RowClickedEvent,\n} from \"../../../../components/data-table/ha-data-table\";\nimport \"../../../../components/ha-fab\";\nimport \"../../../../components/ha-svg-icon\";\nimport {\n  createResource,\n  deleteResource,\n  fetchResources,\n  LovelaceResource,\n  updateResource,\n} from \"../../../../data/lovelace\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../../dialogs/generic/show-dialog-box\";\nimport \"../../../../layouts/hass-loading-screen\";\nimport \"../../../../layouts/hass-tabs-subpage-data-table\";\nimport { HomeAssistant, Route } from \"../../../../types\";\nimport { loadLovelaceResources } from \"../../../lovelace/common/load-resources\";\nimport { lovelaceTabs } from \"../ha-config-lovelace\";\nimport { showResourceDetailDialog } from \"./show-dialog-lovelace-resource-detail\";\n\n@customElement(\"ha-config-lovelace-resources\")\nexport class HaConfigLovelaceRescources extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public isWide!: boolean;\n\n  @property() public narrow!: boolean;\n\n  @property() public route!: Route;\n\n  @state() private _resources: LovelaceResource[] = [];\n\n  private _columns = memoize(\n    (_language): DataTableColumnContainer => ({\n      url: {\n        title: this.hass.localize(\n          \"ui.panel.config.lovelace.resources.picker.headers.url\"\n        ),\n        sortable: true,\n        filterable: true,\n        direction: \"asc\",\n        grows: true,\n        forceLTR: true,\n      },\n      type: {\n        title: this.hass.localize(\n          \"ui.panel.config.lovelace.resources.picker.headers.type\"\n        ),\n        sortable: true,\n        filterable: true,\n        width: \"30%\",\n        template: (type) =>\n          html`\n            ${this.hass.localize(\n              `ui.panel.config.lovelace.resources.types.${type}`\n            ) || type}\n          `,\n      },\n    })\n  );\n\n  protected render(): TemplateResult {\n    if (!this.hass || this._resources === undefined) {\n      return html` <hass-loading-screen></hass-loading-screen> `;\n    }\n\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        .tabs=${lovelaceTabs}\n        .columns=${this._columns(this.hass.language)}\n        .data=${this._resources}\n        .noDataText=${this.hass.localize(\n          \"ui.panel.config.lovelace.resources.picker.no_resources\"\n        )}\n        @row-click=${this._editResource}\n        hasFab\n        clickable\n      >\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.lovelace.resources.picker.add_resource\"\n          )}\n          extended\n          @click=${this._addResource}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    this._getResources();\n  }\n\n  private async _getResources() {\n    this._resources = await fetchResources(this.hass.connection);\n  }\n\n  private _editResource(ev: CustomEvent) {\n    if ((this.hass.panels.lovelace?.config as any)?.mode !== \"storage\") {\n      showAlertDialog(this, {\n        text: this.hass!.localize(\n          \"ui.panel.config.lovelace.resources.cant_edit_yaml\"\n        ),\n      });\n      return;\n    }\n    const id = (ev.detail as RowClickedEvent).id;\n    const resource = this._resources.find((res) => res.id === id);\n    this._openDialog(resource);\n  }\n\n  private _addResource() {\n    if ((this.hass.panels.lovelace?.config as any)?.mode !== \"storage\") {\n      showAlertDialog(this, {\n        text: this.hass!.localize(\n          \"ui.panel.config.lovelace.resources.cant_edit_yaml\"\n        ),\n      });\n      return;\n    }\n    this._openDialog();\n  }\n\n  private async _openDialog(resource?: LovelaceResource): Promise<void> {\n    showResourceDetailDialog(this, {\n      resource,\n      createResource: async (values) => {\n        const created = await createResource(this.hass!, values);\n        this._resources = this._resources!.concat(created).sort((res1, res2) =>\n          stringCompare(res1.url, res2.url)\n        );\n        loadLovelaceResources([created], this.hass!.auth.data.hassUrl);\n      },\n      updateResource: async (values) => {\n        const updated = await updateResource(this.hass!, resource!.id, values);\n        this._resources = this._resources!.map((res) =>\n          res === resource ? updated : res\n        );\n        loadLovelaceResources([updated], this.hass!.auth.data.hassUrl);\n      },\n      removeResource: async () => {\n        if (\n          !(await showConfirmationDialog(this, {\n            text: this.hass!.localize(\n              \"ui.panel.config.lovelace.resources.confirm_delete\"\n            ),\n          }))\n        ) {\n          return false;\n        }\n\n        try {\n          await deleteResource(this.hass!, resource!.id);\n          this._resources = this._resources!.filter((res) => res !== resource);\n          showConfirmationDialog(this, {\n            title: this.hass!.localize(\n              \"ui.panel.config.lovelace.resources.refresh_header\"\n            ),\n            text: this.hass!.localize(\n              \"ui.panel.config.lovelace.resources.refresh_body\"\n            ),\n            confirmText: this.hass.localize(\"ui.common.refresh\"),\n            dismissText: this.hass.localize(\"ui.common.not_now\"),\n            confirm: () => location.reload(),\n          });\n          return true;\n        } catch (err: any) {\n          return false;\n        }\n      },\n    });\n  }\n}\n"],"names":[],"sourceRoot":""}