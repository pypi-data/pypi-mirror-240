"""
Code Generator for Smart Home - The Next Generation.

Generates helper code from component manifests.

Smart Home - TNG is a Home Automation framework for observing the state
of entities and react to changes. It is based on Home Assistant from
home-assistant.io and the Home Assistant Community.

Copyright (c) 2022, Andreas Nixdorf

This program is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation, either version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program.  If not, see
http://www.gnu.org/licenses/.
"""

import json
import typing

from .code_generator import CodeGenerator
from .config import Config
from .integration import Integration

_NAME: typing.Final = "config_flow"

_BASE: typing.Final = """
\"\"\"Automatically generated by shc_from_manifests.

To update, run python3 -m script.shc_from_manifests.
\"\"\"

import typing

# fmt: off

# pylint: disable=unused-variable
FLOWS: typing.Final = {}
""".strip()

_UNIQUE_ID_IGNORE: typing.Final = {"huawei_lte", "mqtt", "adguard"}


# pylint: disable=unused-variable
class ConfigFlowGenerator(CodeGenerator):
    """Generate config flow file."""

    def __init__(self):
        super().__init__(_NAME)

    @staticmethod
    def validate_integration(config: Config, integration: Integration):
        """Validate config flow of an integration."""
        config_flow_file = integration.path / "config_flow.py"

        if not config_flow_file.is_file() or integration.core:
            if integration.config_flow and not integration.core:
                integration.add_error(
                    "config_flow",
                    "Config flows need to be defined in the file config_flow.py",
                )
            return

        config_flow = config_flow_file.read_text()

        needs_unique_id = integration.domain not in _UNIQUE_ID_IGNORE and (
            "async_step_discovery" in config_flow
            or "async_step_hassio" in config_flow
            or "async_step_homekit" in config_flow
            or "async_step_mqtt" in config_flow
            or "async_step_ssdp" in config_flow
            or "async_step_zeroconf" in config_flow
            or "async_step_dhcp" in config_flow
            or "async_step_usb" in config_flow
        )

        if not needs_unique_id:
            return

        has_unique_id = (
            "self.async_set_unique_id" in config_flow
            or "self._async_handle_discovery_without_unique_id" in config_flow
            or "register_discovery_flow" in config_flow
            or "AbstractOAuth2FlowHandler" in config_flow
        )

        if has_unique_id:
            return

        if config.specific_integrations:
            notice_method = integration.add_warning
        else:
            notice_method = integration.add_error

        notice_method(
            "config_flow", "Config flows that are discoverable need to set a unique ID"
        )

    def generate_and_validate(
        self, integrations: dict[str, Integration], config: Config
    ):
        """Validate and generate config flow data."""
        domains = {
            "integration": [],
            "helper": [],
        }

        for domain in sorted(integrations):
            integration = integrations[domain]

            if not integration.manifest or not integration.config_flow:
                continue

            self.validate_integration(config, integration)

            domains[integration.integration_type].append(domain)

        return _BASE.format(json.dumps(domains, indent=4))

    def validate(self, integrations: dict[str, Integration], config: Config):
        """Validate config flow file."""
        config_flow_path = config.root / "smart_home_tng/core/generated/config_flows.py"
        config.cache["config_flow"] = content = self.generate_and_validate(
            integrations, config
        )

        if config.specific_integrations:
            return

        if not config_flow_path.is_file():
            config.add_error(
                "config_flow",
                "File config_flows.py is not up to date. "
                + "Run python3 -m script.shc_from_manifests",
            )
            return

        with open(str(config_flow_path), encoding="utf-8") as fp:
            if fp.read().strip() != content:
                config.add_error(
                    "config_flow",
                    "File config_flows.py is not up to date. "
                    + "Run python3 -m script.shc_from_manifests",
                    fixable=True,
                )
            return

    def generate(self, integrations: dict[str, Integration], config: Config):
        """Generate config flow file."""
        config_flow_path = config.root / "smart_home_tng/core/generated/config_flows.py"
        with open(str(config_flow_path), "w", encoding="utf-8") as fp:
            fp.write(f"{config.cache['config_flow']}\n")
