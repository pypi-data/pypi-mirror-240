{"version":3,"file":"75de704c.js","mappings":";AAaA;;AAEA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;;;AC1EA;;;AAGA;;AAEA;;;AAIA;AAGA;AACA;AACA;AAEA;AACA;;AAGA;AAEA;;;AAIA;AAGA;AACA;AACA;AAEA;AACA;;AAGA;;AAIA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/panels/config/network/dialog-ip-detail.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { createCloseHeading } from \"../../../components/ha-dialog\";\nimport type { NetworkInterface } from \"../../../data/hassio/network\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport type { IPDetailDialogParams } from \"./show-ip-detail-dialog\";\n\n@customElement(\"dialog-ip-detail\")\nclass DialogIPDetail extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _params?: IPDetailDialogParams;\n\n  @state() private _interface?: NetworkInterface;\n\n  public showDialog(params: IPDetailDialogParams): void {\n    this._params = params;\n    this._interface = this._params.interface;\n  }\n\n  public closeDialog() {\n    this._params = undefined;\n    this._interface = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._interface) {\n      return html``;\n    }\n\n    const ipv4 = this._interface.ipv4;\n    const ipv6 = this._interface.ipv6;\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        scrimClickAction\n        escapeKeyAction\n        .heading=${createCloseHeading(this.hass, \"IP Information\")}\n      >\n        ${ipv4\n          ? html`\n              <div>\n                <h3>IPv4</h3>\n                ${ipv4.address\n                  ? html`<div>IP Address: ${ipv4.address?.join(\", \")}</div>`\n                  : \"\"}\n                ${ipv4.gateway ? html`<div>Gateway: ${ipv4.gateway}</div>` : \"\"}\n                ${ipv4.method ? html`<div>Method: ${ipv4.method}</div>` : \"\"}\n                ${ipv4.nameservers?.length\n                  ? html`\n                      <div>Name Servers: ${ipv4.nameservers?.join(\", \")}</div>\n                    `\n                  : \"\"}\n              </div>\n            `\n          : \"\"}\n        ${ipv6\n          ? html`\n              <div>\n                <h3>IPv6</h3>\n                ${ipv6.address\n                  ? html`<div>IP Address: ${ipv6.address?.join(\", \")}</div>`\n                  : \"\"}\n                ${ipv6.gateway ? html`<div>Gateway: ${ipv6.gateway}</div>` : \"\"}\n                ${ipv6.method ? html`<div>Method: ${ipv6.method}</div>` : \"\"}\n                ${ipv6.nameservers?.length\n                  ? html`\n                      <div>Name Servers: ${ipv6.nameservers?.join(\", \")}</div>\n                    `\n                  : \"\"}\n              </div>\n            `\n          : \"\"}\n      </ha-dialog>\n    `;\n  }\n\n  static styles: CSSResultGroup = haStyleDialog;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-ip-detail\": DialogIPDetail;\n  }\n}\n"],"names":[],"sourceRoot":""}