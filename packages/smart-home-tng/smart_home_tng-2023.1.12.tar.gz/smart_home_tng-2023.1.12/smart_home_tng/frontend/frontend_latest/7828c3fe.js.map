{"version":3,"file":"7828c3fe.js","mappings":";AAaA;;AAEA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;ACnDA;;AAIA;AACA;AACA;;;;AAIA;AACA;;;AAIA;;;;;ACrBA;AACA;;AAIA;AACA;;;AAGA;;;AAlEA;AAsEA;;;;;;AAMA;;;AAGA;;AAGA;;;AAKA;AAGA;;;AAGA;AACA;;;;AAIA;;AAGA;;;AAKA;;;AAKA;;;AAKA;AACA;;;;;AAKA;;;AAIA;AACA;;;;AAIA;AACA;AAGA;;AAEA;;;;AAKA;AAEA;;AAIA;;;AAIA;AAGA;;;;AAzGA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-yaml-editor.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/hui-dialog-save-config.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { DEFAULT_SCHEMA, dump, load, Schema } from \"js-yaml\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-code-editor\";\n\nconst isEmpty = (obj: Record<string, unknown>): boolean => {\n  if (typeof obj !== \"object\") {\n    return false;\n  }\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n@customElement(\"ha-yaml-editor\")\nexport class HaYamlEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public value?: any;\n\n  @property({ attribute: false }) public yamlSchema: Schema = DEFAULT_SCHEMA;\n\n  @property() public defaultValue?: any;\n\n  @property() public isValid = true;\n\n  @property() public label?: string;\n\n  @property({ type: Boolean }) public readOnly = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @state() private _yaml = \"\";\n\n  public setValue(value): void {\n    try {\n      this._yaml =\n        value && !isEmpty(value)\n          ? dump(value, { schema: this.yamlSchema, quotingType: '\"' })\n          : \"\";\n    } catch (err: any) {\n      // eslint-disable-next-line no-console\n      console.error(err, value);\n      alert(`There was an error converting to YAML: ${err}`);\n    }\n  }\n\n  protected firstUpdated(): void {\n    if (this.defaultValue) {\n      this.setValue(this.defaultValue);\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (this._yaml === undefined) {\n      return html``;\n    }\n    return html`\n      ${this.label\n        ? html`<p>${this.label}${this.required ? \" *\" : \"\"}</p>`\n        : \"\"}\n      <ha-code-editor\n        .hass=${this.hass}\n        .value=${this._yaml}\n        .readOnly=${this.readOnly}\n        mode=\"yaml\"\n        autocomplete-entities\n        autocomplete-icons\n        .error=${this.isValid === false}\n        @value-changed=${this._onChange}\n        dir=\"ltr\"\n      ></ha-code-editor>\n    `;\n  }\n\n  private _onChange(ev: CustomEvent): void {\n    ev.stopPropagation();\n    this._yaml = ev.detail.value;\n    let parsed;\n    let isValid = true;\n\n    if (this._yaml) {\n      try {\n        parsed = load(this._yaml, { schema: this.yamlSchema });\n      } catch (err: any) {\n        // Invalid YAML\n        isValid = false;\n      }\n    } else {\n      parsed = {};\n    }\n\n    this.value = parsed;\n    this.isValid = isValid;\n\n    fireEvent(this, \"value-changed\", { value: parsed, isValid } as any);\n  }\n\n  get yaml() {\n    return this._yaml;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-yaml-editor\": HaYamlEditor;\n  }\n}\n","import \"@material/mwc-button\";\nimport { mdiHelpCircle } from \"@mdi/js\";\nimport { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeRTLDirection } from \"../../../common/util/compute_rtl\";\nimport \"../../../components/ha-circular-progress\";\nimport \"../../../components/ha-dialog\";\nimport \"../../../components/ha-formfield\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-switch\";\nimport \"../../../components/ha-yaml-editor\";\nimport type { LovelaceConfig } from \"../../../data/lovelace\";\nimport type { HassDialog } from \"../../../dialogs/make-dialog-manager\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport { expandLovelaceConfigStrategies } from \"../strategies/get-strategy\";\nimport type { SaveDialogParams } from \"./show-save-config-dialog\";\n\nconst EMPTY_CONFIG: LovelaceConfig = { views: [{ title: \"Home\" }] };\n\n@customElement(\"hui-dialog-save-config\")\nexport class HuiSaveConfig extends LitElement implements HassDialog {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _params?: SaveDialogParams;\n\n  @state() private _emptyConfig = false;\n\n  @state() private _saving: boolean;\n\n  public constructor() {\n    super();\n    this._saving = false;\n  }\n\n  public showDialog(params: SaveDialogParams): void {\n    this._params = params;\n    this._emptyConfig = false;\n  }\n\n  public closeDialog(): boolean {\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n    return true;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        escapeKeyAction\n        @closed=${this._close}\n        .heading=${html`${this.hass!.localize(\n            \"ui.panel.lovelace.editor.save_config.header\"\n          )}<a\n            class=\"header_button\"\n            href=${documentationUrl(this.hass!, \"/lovelace/\")}\n            title=${this.hass!.localize(\"ui.panel.lovelace.menu.help\")}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            dir=${computeRTLDirection(this.hass!)}\n          >\n            <ha-icon-button\n              .path=${mdiHelpCircle}\n              .label=${this.hass!.localize(\"ui.common.help\")}\n            ></ha-icon-button>\n          </a>`}\n      >\n        <div>\n          <p>\n            ${this.hass!.localize(\"ui.panel.lovelace.editor.save_config.para\")}\n          </p>\n\n          ${this._params.mode === \"storage\"\n            ? html`\n                <p>\n                  ${this.hass!.localize(\n                    \"ui.panel.lovelace.editor.save_config.para_sure\"\n                  )}\n                </p>\n                <ha-formfield\n                  .label=${this.hass!.localize(\n                    \"ui.panel.lovelace.editor.save_config.empty_config\"\n                  )}\n                  .dir=${computeRTLDirection(this.hass!)}\n                >\n                  <ha-switch\n                    .checked=${this._emptyConfig}\n                    @change=${this._emptyConfigChanged}\n                    dialogInitialFocus\n                  ></ha-switch\n                ></ha-formfield>\n              `\n            : html`\n                <p>\n                  ${this.hass!.localize(\n                    \"ui.panel.lovelace.editor.save_config.yaml_mode\"\n                  )}\n                </p>\n                <p>\n                  ${this.hass!.localize(\n                    \"ui.panel.lovelace.editor.save_config.yaml_control\"\n                  )}\n                </p>\n                <p>\n                  ${this.hass!.localize(\n                    \"ui.panel.lovelace.editor.save_config.yaml_config\"\n                  )}\n                </p>\n                <ha-yaml-editor\n                  .hass=${this.hass}\n                  .defaultValue=${this._params!.lovelace.config}\n                  dialogInitialFocus\n                ></ha-yaml-editor>\n              `}\n        </div>\n        ${this._params.mode === \"storage\"\n          ? html`\n              <mwc-button\n                slot=\"primaryAction\"\n                .label=${this.hass!.localize(\"ui.common.cancel\")}\n                @click=${this.closeDialog}\n              ></mwc-button>\n              <mwc-button\n                slot=\"primaryAction\"\n                ?disabled=${this._saving}\n                aria-label=${this.hass!.localize(\n                  \"ui.panel.lovelace.editor.save_config.save\"\n                )}\n                @click=${this._saveConfig}\n              >\n                ${this._saving\n                  ? html`<ha-circular-progress\n                      active\n                      size=\"small\"\n                      title=\"Saving\"\n                    ></ha-circular-progress>`\n                  : \"\"}\n                ${this.hass!.localize(\n                  \"ui.panel.lovelace.editor.save_config.save\"\n                )}\n              </mwc-button>\n            `\n          : html`\n              <mwc-button\n                slot=\"primaryAction\"\n                .label=${this.hass!.localize(\n                  \"ui.panel.lovelace.editor.save_config.close\"\n                )}\n                @click=${this.closeDialog}\n              ></mwc-button>\n            `}\n      </ha-dialog>\n    `;\n  }\n\n  private _close(ev?: Event) {\n    if (ev) {\n      ev.stopPropagation();\n    }\n    this.closeDialog();\n  }\n\n  private _emptyConfigChanged(ev) {\n    this._emptyConfig = ev.target.checked;\n  }\n\n  private async _saveConfig(): Promise<void> {\n    if (!this.hass || !this._params) {\n      return;\n    }\n    this._saving = true;\n    try {\n      const lovelace = this._params!.lovelace;\n      await lovelace.saveConfig(\n        this._emptyConfig\n          ? EMPTY_CONFIG\n          : await expandLovelaceConfigStrategies({\n              config: lovelace.config,\n              hass: this.hass!,\n              narrow: this._params!.narrow,\n            })\n      );\n      lovelace.setEditMode(true);\n      this._saving = false;\n      this.closeDialog();\n    } catch (err: any) {\n      alert(`Saving failed: ${err.message}`);\n      this._saving = false;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [haStyleDialog];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-dialog-save-config\": HuiSaveConfig;\n  }\n}\n"],"names":[],"sourceRoot":""}