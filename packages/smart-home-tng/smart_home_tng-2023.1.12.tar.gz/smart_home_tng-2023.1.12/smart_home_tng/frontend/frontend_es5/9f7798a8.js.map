{"version":3,"file":"9f7798a8.js","mappings":";AAaA;;AAEA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;;;ACxEA;;;AAGA;;;AAWA;;AAGA;;AAKA;;;;AAKA;;AAOA;;AAGA;;AAKA;;AAGA;AACA;;;AAKA;;;AAOA;;AAGA;;;;;;AAMA;;;AAKA;;;AAIA;AAGA;;;AArFA;;;;;;;;;;;;;;;;;;;;;;;AA0HA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/panels/config/repairs/dialog-repairs-issue.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { createCloseHeading } from \"../../../components/ha-dialog\";\nimport \"../../../components/ha-markdown\";\nimport { ignoreRepairsIssue, RepairsIssue } from \"../../../data/repairs\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport type { RepairsIssueDialogParams } from \"./show-repair-issue-dialog\";\n\n@customElement(\"dialog-repairs-issue\")\nclass DialogRepairsIssue extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _issue?: RepairsIssue;\n\n  @state() private _params?: RepairsIssueDialogParams;\n\n  public showDialog(params: RepairsIssueDialogParams): void {\n    this._params = params;\n    this._issue = this._params.issue;\n  }\n\n  public closeDialog() {\n    if (this._params?.dialogClosedCallback) {\n      this._params.dialogClosedCallback();\n    }\n\n    this._params = undefined;\n    this._issue = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._issue) {\n      return html``;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        scrimClickAction\n        escapeKeyAction\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\n            `component.${this._issue.domain}.issues.${\n              this._issue.translation_key || this._issue.issue_id\n            }.title`,\n            this._issue.translation_placeholders || {}\n          ) || this.hass!.localize(\"ui.panel.config.repairs.dialog.title\")\n        )}\n      >\n        <div>\n          ${this._issue.breaks_in_ha_version\n            ? html`\n                <ha-alert alert-type=\"error\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.repairs.dialog.breaks_in_version\",\n                    { version: this._issue.breaks_in_ha_version }\n                  )}\n                </ha-alert>\n              `\n            : \"\"}\n          <ha-markdown\n            allowsvg\n            breaks\n            .content=${this.hass.localize(\n              `component.${this._issue.domain}.issues.${\n                this._issue.translation_key || this._issue.issue_id\n              }.description`,\n              this._issue.translation_placeholders\n            )}\n          ></ha-markdown>\n          ${this._issue.dismissed_version\n            ? html`\n                <br /><span class=\"dismissed\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.repairs.dialog.ignored_in_version\",\n                    { version: this._issue.dismissed_version }\n                  )}</span\n                >\n              `\n            : \"\"}\n          <div class=\"secondary\">\n            <span class=${this._issue.severity}\n              >${this.hass.localize(\n                `ui.panel.config.repairs.${this._issue.severity}`\n              )}\n            </span>\n            -\n            ${this._issue.created\n              ? new Date(this._issue.created).toLocaleDateString(\n                  this.hass.language\n                )\n              : \"\"}\n          </div>\n        </div>\n        ${this._issue.learn_more_url\n          ? html`\n              <a\n                href=${this._issue.learn_more_url}\n                target=\"_blank\"\n                slot=\"primaryAction\"\n                rel=\"noopener noreferrer\"\n              >\n                <mwc-button\n                  .label=${this.hass!.localize(\n                    \"ui.panel.config.repairs.dialog.learn\"\n                  )}\n                ></mwc-button>\n              </a>\n            `\n          : \"\"}\n        <mwc-button\n          slot=\"secondaryAction\"\n          .label=${this._issue!.ignored\n            ? this.hass!.localize(\"ui.panel.config.repairs.dialog.unignore\")\n            : this.hass!.localize(\"ui.panel.config.repairs.dialog.ignore\")}\n          @click=${this._ignoreIssue}\n        ></mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _ignoreIssue() {\n    ignoreRepairsIssue(this.hass, this._issue!, !this._issue!.ignored);\n    this.closeDialog();\n  }\n\n  static styles: CSSResultGroup = [\n    haStyleDialog,\n    css`\n      ha-alert {\n        margin-bottom: 16px;\n        display: block;\n      }\n      a {\n        text-decoration: none;\n      }\n      .dismissed {\n        font-style: italic;\n      }\n      .secondary {\n        margin-top: 8px;\n        text-align: right;\n        color: var(--secondary-text-color);\n      }\n      .error,\n      .critical {\n        color: var(--error-color);\n      }\n      .warning {\n        color: var(--warning-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-repairs-issue\": DialogRepairsIssue;\n  }\n}\n"],"names":[],"sourceRoot":""}