{"version":3,"file":"6a41071a.js","mappings":";AAoFA;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA;;;;AA8DA;;;;;;;;;;;;;AClJA;ACzBA;AAGA;;;ACyFA;;;AAGA;;;AAQA;;;;AAIA;AACA;AACA;AACA;;;;;AAOA;AACA;;AAEA;AACA;;;;AAIA;;;AAKA;AACA;AAIA;;;;AAIA;AAEA;;;AAKA;AACA;;;;;AAKA;;;AAKA;AAEA;AACA;;;AAGA;AAEA;;AAGA;;;AAKA;AACA;AACA;AACA;AAGA;AAGA;;;AAGA;;AAGA;;;;;AAOA;;;AAMA;;;;;AAOA;;;AAGA;;;;;;;AASA;;;;AAKA;AACA;;AAGA;;AAEA;;AAGA;;AAEA;AAGA;AAEA;;;AAIA;AACA;;AAEA;;;AAMA;;;;;;;;;;;;;;;;;;AA6MA","sources":["webpack://home-assistant-frontend/./src/components/entity/ha-entities-picker.ts","webpack://home-assistant-frontend/./src/components/ha-formfield.ts","webpack://home-assistant-frontend/./src/components/ha-state-icon.ts","webpack://home-assistant-frontend/./src/panels/config/person/dialog-person-detail.ts"],"sourcesContent":["import type { HassEntity } from \"home-assistant-js-websocket\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { isValidEntityId } from \"../../common/entity/valid_entity_id\";\nimport type { PolymerChangedEvent } from \"../../polymer-types\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"./ha-entity-picker\";\nimport type { HaEntityPickerEntityFilterFunc } from \"./ha-entity-picker\";\n\n@customElement(\"ha-entities-picker\")\nclass HaEntitiesPickerLight extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ type: Array }) public value?: string[];\n\n  @property({ type: Boolean }) public disabled?: boolean;\n\n  @property({ type: Boolean }) public required?: boolean;\n\n  @property() public helper?: string;\n\n  /**\n   * Show entities from specific domains.\n   * @type {string}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  /**\n   * Show only entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  /**\n   * Show only entities with these unit of measuments.\n   * @type {Array}\n   * @attr include-unit-of-measurement\n   */\n  @property({ type: Array, attribute: \"include-unit-of-measurement\" })\n  public includeUnitOfMeasurement?: string[];\n\n  /**\n   * List of allowed entities to show. Will ignore all other filters.\n   * @type {Array}\n   * @attr include-entities\n   */\n  @property({ type: Array, attribute: \"include-entities\" })\n  public includeEntities?: string[];\n\n  /**\n   * List of entities to be excluded.\n   * @type {Array}\n   * @attr exclude-entities\n   */\n  @property({ type: Array, attribute: \"exclude-entities\" })\n  public excludeEntities?: string[];\n\n  @property({ attribute: \"picked-entity-label\" })\n  public pickedEntityLabel?: string;\n\n  @property({ attribute: \"pick-entity-label\" }) public pickEntityLabel?: string;\n\n  @property() public entityFilter?: HaEntityPickerEntityFilterFunc;\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n\n    const currentEntities = this._currentEntities;\n    return html`\n      ${currentEntities.map(\n        (entityId) => html`\n          <div>\n            <ha-entity-picker\n              allow-custom-entity\n              .curValue=${entityId}\n              .hass=${this.hass}\n              .includeDomains=${this.includeDomains}\n              .excludeDomains=${this.excludeDomains}\n              .includeEntities=${this.includeEntities}\n              .excludeEntities=${this.excludeEntities}\n              .includeDeviceClasses=${this.includeDeviceClasses}\n              .includeUnitOfMeasurement=${this.includeUnitOfMeasurement}\n              .entityFilter=${this._entityFilter}\n              .value=${entityId}\n              .label=${this.pickedEntityLabel}\n              .disabled=${this.disabled}\n              @value-changed=${this._entityChanged}\n            ></ha-entity-picker>\n          </div>\n        `\n      )}\n      <div>\n        <ha-entity-picker\n          allow-custom-entity\n          .hass=${this.hass}\n          .includeDomains=${this.includeDomains}\n          .excludeDomains=${this.excludeDomains}\n          .includeEntities=${this.includeEntities}\n          .excludeEntities=${this.excludeEntities}\n          .includeDeviceClasses=${this.includeDeviceClasses}\n          .includeUnitOfMeasurement=${this.includeUnitOfMeasurement}\n          .entityFilter=${this._entityFilter}\n          .label=${this.pickEntityLabel}\n          .helper=${this.helper}\n          .disabled=${this.disabled}\n          .required=${this.required && !currentEntities.length}\n          @value-changed=${this._addEntity}\n        ></ha-entity-picker>\n      </div>\n    `;\n  }\n\n  private _entityFilter: HaEntityPickerEntityFilterFunc = (\n    stateObj: HassEntity\n  ) =>\n    (!this.value || !this.value.includes(stateObj.entity_id)) &&\n    (!this.entityFilter || this.entityFilter(stateObj));\n\n  private get _currentEntities() {\n    return this.value || [];\n  }\n\n  private async _updateEntities(entities) {\n    this.value = entities;\n\n    fireEvent(this, \"value-changed\", {\n      value: entities,\n    });\n  }\n\n  private _entityChanged(event: PolymerChangedEvent<string>) {\n    event.stopPropagation();\n    const curValue = (event.currentTarget as any).curValue;\n    const newValue = event.detail.value;\n    if (\n      newValue === curValue ||\n      (newValue !== undefined && !isValidEntityId(newValue))\n    ) {\n      return;\n    }\n    const currentEntities = this._currentEntities;\n    if (!newValue || currentEntities.includes(newValue)) {\n      this._updateEntities(currentEntities.filter((ent) => ent !== curValue));\n      return;\n    }\n    this._updateEntities(\n      currentEntities.map((ent) => (ent === curValue ? newValue : ent))\n    );\n  }\n\n  private async _addEntity(event: PolymerChangedEvent<string>) {\n    event.stopPropagation();\n    const toAdd = event.detail.value;\n    if (!toAdd) {\n      return;\n    }\n    (event.currentTarget as any).value = \"\";\n    if (!toAdd) {\n      return;\n    }\n    const currentEntities = this._currentEntities;\n    if (currentEntities.includes(toAdd)) {\n      return;\n    }\n\n    this._updateEntities([...currentEntities, toAdd]);\n  }\n\n  static override styles = css`\n    div {\n      margin-top: 8px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-entities-picker\": HaEntitiesPickerLight;\n  }\n}\n","import { FormfieldBase } from \"@material/mwc-formfield/mwc-formfield-base\";\nimport { styles } from \"@material/mwc-formfield/mwc-formfield.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n@customElement(\"ha-formfield\")\nexport class HaFormfield extends FormfieldBase {\n  protected _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      switch (input.tagName) {\n        case \"HA-CHECKBOX\":\n        case \"HA-RADIO\":\n          (input as any).checked = !(input as any).checked;\n          fireEvent(input, \"change\");\n          break;\n        default:\n          input.click();\n          break;\n      }\n    }\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host(:not([alignEnd])) ::slotted(ha-switch) {\n        margin-right: 10px;\n        margin-inline-end: 10px;\n        margin-inline-start: inline;\n      }\n      .mdc-form-field > label {\n        direction: var(--direction);\n        margin-inline-start: 0;\n        margin-inline-end: auto;\n        padding-inline-start: 4px;\n        padding-inline-end: 0;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-formfield\": HaFormfield;\n  }\n}\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { stateIconPath } from \"../common/entity/state_icon_path\";\nimport \"./ha-icon\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-state-icon\")\nexport class HaStateIcon extends LitElement {\n  @property({ attribute: false }) public state?: HassEntity;\n\n  @property() public icon?: string;\n\n  protected render(): TemplateResult {\n    if (this.icon || this.state?.attributes.icon) {\n      return html`<ha-icon\n        .icon=${this.icon || this.state?.attributes.icon}\n      ></ha-icon>`;\n    }\n    return html`<ha-svg-icon .path=${stateIconPath(this.state)}></ha-svg-icon>`;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-state-icon\": HaStateIcon;\n  }\n}\n","import \"@material/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport \"../../../components/entity/ha-entities-picker\";\nimport { createCloseHeading } from \"../../../components/ha-dialog\";\nimport \"../../../components/ha-formfield\";\nimport \"../../../components/ha-textfield\";\nimport \"../../../components/ha-picture-upload\";\nimport type { HaPictureUpload } from \"../../../components/ha-picture-upload\";\nimport { adminChangePassword } from \"../../../data/auth\";\nimport { PersonMutableParams } from \"../../../data/person\";\nimport {\n  deleteUser,\n  SYSTEM_GROUP_ID_ADMIN,\n  SYSTEM_GROUP_ID_USER,\n  updateUser,\n  User,\n} from \"../../../data/user\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n  showPromptDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport { CropOptions } from \"../../../dialogs/image-cropper-dialog/show-image-cropper-dialog\";\nimport { PolymerChangedEvent } from \"../../../polymer-types\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport { showAddUserDialog } from \"../users/show-dialog-add-user\";\nimport { PersonDetailDialogParams } from \"./show-dialog-person-detail\";\n\nconst includeDomains = [\"device_tracker\"];\n\nconst cropOptions: CropOptions = {\n  round: true,\n  type: \"image/jpeg\",\n  quality: 0.75,\n  aspectRatio: 1,\n};\n\nclass DialogPersonDetail extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _name!: string;\n\n  @state() private _userId?: string;\n\n  @state() private _user?: User;\n\n  @state() private _isAdmin?: boolean;\n\n  @state() private _localOnly?: boolean;\n\n  @state() private _deviceTrackers!: string[];\n\n  @state() private _picture!: string | null;\n\n  @state() private _error?: string;\n\n  @state() private _params?: PersonDetailDialogParams;\n\n  @state() private _submitting = false;\n\n  @state() private _personExists = false;\n\n  private _deviceTrackersAvailable = memoizeOne((hass) =>\n    Object.keys(hass.states).some(\n      (entityId) =>\n        entityId.substr(0, entityId.indexOf(\".\")) === \"device_tracker\"\n    )\n  );\n\n  public async showDialog(params: PersonDetailDialogParams): Promise<void> {\n    this._params = params;\n    this._error = undefined;\n    if (this._params.entry) {\n      this._personExists = true;\n      this._name = this._params.entry.name || \"\";\n      this._userId = this._params.entry.user_id || undefined;\n      this._deviceTrackers = this._params.entry.device_trackers || [];\n      this._picture = this._params.entry.picture || null;\n      this._user = this._userId\n        ? this._params.users.find((user) => user.id === this._userId)\n        : undefined;\n      this._isAdmin = this._user?.group_ids.includes(SYSTEM_GROUP_ID_ADMIN);\n      this._localOnly = this._user?.local_only;\n    } else {\n      this._personExists = false;\n      this._name = \"\";\n      this._userId = undefined;\n      this._user = undefined;\n      this._isAdmin = undefined;\n      this._localOnly = undefined;\n      this._deviceTrackers = [];\n      this._picture = null;\n    }\n    await this.updateComplete;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n    const nameInvalid = this._name.trim() === \"\";\n    return html`\n      <ha-dialog\n        open\n        @closed=${this._close}\n        scrimClickAction\n        escapeKeyAction\n        .heading=${createCloseHeading(\n          this.hass,\n          this._params.entry\n            ? this._params.entry.name\n            : this.hass!.localize(\"ui.panel.config.person.detail.new_person\")\n        )}\n      >\n        <div>\n          ${this._error ? html` <div class=\"error\">${this._error}</div> ` : \"\"}\n          <div class=\"form\">\n            <ha-textfield\n              dialogInitialFocus\n              .value=${this._name}\n              @input=${this._nameChanged}\n              label=${this.hass!.localize(\"ui.panel.config.person.detail.name\")}\n              error-message=${this.hass!.localize(\n                \"ui.panel.config.person.detail.name_error_msg\"\n              )}\n              required\n              auto-validate\n            ></ha-textfield>\n            <ha-picture-upload\n              .hass=${this.hass}\n              .value=${this._picture}\n              crop\n              .cropOptions=${cropOptions}\n              @change=${this._pictureChanged}\n            ></ha-picture-upload>\n\n            <ha-formfield\n              .label=${this.hass!.localize(\n                \"ui.panel.config.person.detail.allow_login\"\n              )}\n            >\n              <ha-switch\n                @change=${this._allowLoginChanged}\n                .disabled=${this._user &&\n                (this._user.id === this.hass.user?.id ||\n                  this._user.system_generated ||\n                  this._user.is_owner)}\n                .checked=${this._userId}\n              ></ha-switch>\n            </ha-formfield>\n\n            ${this._user\n              ? html`<ha-formfield\n                    .label=${this.hass.localize(\n                      \"ui.panel.config.person.detail.local_only\"\n                    )}\n                  >\n                    <ha-switch\n                      .checked=${this._localOnly}\n                      @change=${this._localOnlyChanged}\n                    >\n                    </ha-switch>\n                  </ha-formfield>\n                  <ha-formfield\n                    .label=${this.hass.localize(\n                      \"ui.panel.config.person.detail.admin\"\n                    )}\n                  >\n                    <ha-switch\n                      .disabled=${this._user.system_generated ||\n                      this._user.is_owner}\n                      .checked=${this._isAdmin}\n                      @change=${this._adminChanged}\n                    >\n                    </ha-switch>\n                  </ha-formfield>`\n              : \"\"}\n            ${this._deviceTrackersAvailable(this.hass)\n              ? html`\n                  <p>\n                    ${this.hass.localize(\n                      \"ui.panel.config.person.detail.device_tracker_intro\"\n                    )}\n                  </p>\n                  <ha-entities-picker\n                    .hass=${this.hass}\n                    .value=${this._deviceTrackers}\n                    .includeDomains=${includeDomains}\n                    .pickedEntityLabel=${this.hass.localize(\n                      \"ui.panel.config.person.detail.device_tracker_picked\"\n                    )}\n                    .pickEntityLabel=${this.hass.localize(\n                      \"ui.panel.config.person.detail.device_tracker_pick\"\n                    )}\n                    @value-changed=${this._deviceTrackersChanged}\n                  >\n                  </ha-entities-picker>\n                `\n              : html`\n                  <p>\n                    ${this.hass!.localize(\n                      \"ui.panel.config.person.detail.no_device_tracker_available_intro\"\n                    )}\n                  </p>\n                  <ul>\n                    <li>\n                      <a\n                        href=${documentationUrl(\n                          this.hass,\n                          \"/integrations/#presence-detection\"\n                        )}\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                        >${this.hass!.localize(\n                          \"ui.panel.config.person.detail.link_presence_detection_integrations\"\n                        )}</a\n                      >\n                    </li>\n                    <li>\n                      <a\n                        @click=${this._closeDialog}\n                        href=\"/config/integrations\"\n                      >\n                        ${this.hass!.localize(\n                          \"ui.panel.config.person.detail.link_integrations_page\"\n                        )}</a\n                      >\n                    </li>\n                  </ul>\n                `}\n          </div>\n        </div>\n        ${this._params.entry\n          ? html`\n              <mwc-button\n                slot=\"secondaryAction\"\n                class=\"warning\"\n                @click=${this._deleteEntry}\n                .disabled=${(this._user && this._user.is_owner) ||\n                this._submitting}\n              >\n                ${this.hass!.localize(\"ui.panel.config.person.detail.delete\")}\n              </mwc-button>\n              ${this._user && this.hass.user?.is_owner\n                ? html`<mwc-button\n                    slot=\"secondaryAction\"\n                    @click=${this._changePassword}\n                  >\n                    ${this.hass.localize(\n                      \"ui.panel.config.users.editor.change_password\"\n                    )}\n                  </mwc-button>`\n                : \"\"}\n            `\n          : html``}\n        <mwc-button\n          slot=\"primaryAction\"\n          @click=${this._updateEntry}\n          .disabled=${nameInvalid || this._submitting}\n        >\n          ${this._params.entry\n            ? this.hass!.localize(\"ui.panel.config.person.detail.update\")\n            : this.hass!.localize(\"ui.panel.config.person.detail.create\")}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _closeDialog() {\n    this._params = undefined;\n  }\n\n  private _nameChanged(ev) {\n    this._error = undefined;\n    this._name = ev.target.value;\n  }\n\n  private _adminChanged(ev): void {\n    this._isAdmin = ev.target.checked;\n  }\n\n  private _localOnlyChanged(ev): void {\n    this._localOnly = ev.target.checked;\n  }\n\n  private async _allowLoginChanged(ev): Promise<void> {\n    const target = ev.target;\n    if (target.checked) {\n      target.checked = false;\n      showAddUserDialog(this, {\n        userAddedCallback: async (user?: User) => {\n          if (user) {\n            target.checked = true;\n            this._user = user;\n            this._userId = user.id;\n            this._isAdmin = user.group_ids.includes(SYSTEM_GROUP_ID_ADMIN);\n            this._localOnly = user.local_only;\n            this._params?.refreshUsers();\n          }\n        },\n        name: this._name,\n      });\n    } else if (this._userId) {\n      if (\n        !(await showConfirmationDialog(this, {\n          text: this.hass!.localize(\n            \"ui.panel.config.person.detail.confirm_delete_user\",\n            \"name\",\n            this._name\n          ),\n          confirmText: this.hass!.localize(\n            \"ui.panel.config.person.detail.delete\"\n          ),\n          dismissText: this.hass!.localize(\"ui.common.cancel\"),\n        }))\n      ) {\n        target.checked = true;\n        return;\n      }\n      await deleteUser(this.hass, this._userId);\n      this._params?.refreshUsers();\n      this._userId = undefined;\n    }\n  }\n\n  private _deviceTrackersChanged(ev: PolymerChangedEvent<string[]>) {\n    this._error = undefined;\n    this._deviceTrackers = ev.detail.value;\n  }\n\n  private _pictureChanged(ev: PolymerChangedEvent<string | null>) {\n    this._error = undefined;\n    this._picture = (ev.target as HaPictureUpload).value;\n  }\n\n  private async _changePassword() {\n    if (!this._user) {\n      return;\n    }\n    const credential = this._user.credentials.find(\n      (cred) => cred.type === \"internal\"\n    );\n    if (!credential) {\n      showAlertDialog(this, {\n        title: \"No internal credentials found.\",\n      });\n      return;\n    }\n    const newPassword = await showPromptDialog(this, {\n      title: this.hass.localize(\"ui.panel.config.users.editor.change_password\"),\n      inputType: \"password\",\n      inputLabel: this.hass.localize(\n        \"ui.panel.config.users.editor.new_password\"\n      ),\n    });\n    if (!newPassword) {\n      return;\n    }\n    const confirmPassword = await showPromptDialog(this, {\n      title: this.hass.localize(\"ui.panel.config.users.editor.change_password\"),\n      inputType: \"password\",\n      inputLabel: this.hass.localize(\n        \"ui.panel.config.users.add_user.password_confirm\"\n      ),\n    });\n    if (!confirmPassword) {\n      return;\n    }\n    if (newPassword !== confirmPassword) {\n      showAlertDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.config.users.add_user.password_not_match\"\n        ),\n      });\n      return;\n    }\n    await adminChangePassword(this.hass, this._user.id, newPassword);\n    showAlertDialog(this, {\n      title: this.hass.localize(\n        \"ui.panel.config.users.editor.password_changed\"\n      ),\n    });\n  }\n\n  private async _updateEntry() {\n    this._submitting = true;\n    try {\n      if (\n        (this._userId && this._name !== this._params!.entry?.name) ||\n        this._isAdmin !==\n          this._user?.group_ids.includes(SYSTEM_GROUP_ID_ADMIN) ||\n        this._localOnly !== this._user?.local_only\n      ) {\n        await updateUser(this.hass!, this._userId!, {\n          name: this._name.trim(),\n          group_ids: [\n            this._isAdmin ? SYSTEM_GROUP_ID_ADMIN : SYSTEM_GROUP_ID_USER,\n          ],\n          local_only: this._localOnly,\n        });\n        this._params?.refreshUsers();\n      }\n      const values: PersonMutableParams = {\n        name: this._name.trim(),\n        device_trackers: this._deviceTrackers,\n        user_id: this._userId || null,\n        picture: this._picture,\n      };\n      if (this._params!.entry) {\n        await this._params!.updateEntry(values);\n      } else {\n        await this._params!.createEntry(values);\n        this._personExists = true;\n      }\n      this._params = undefined;\n    } catch (err: any) {\n      this._error = err ? err.message : \"Unknown error\";\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private async _deleteEntry() {\n    this._submitting = true;\n    try {\n      if (await this._params!.removeEntry()) {\n        if (this._params!.entry!.user_id) {\n          deleteUser(this.hass, this._params!.entry!.user_id);\n        }\n        this._params = undefined;\n      }\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private _close(): void {\n    // If we do not have a person ID yet (= person creation dialog was just cancelled), but\n    // we already created a user ID for it, delete it now to not have it \"free floating\".\n    if (!this._personExists && this._userId) {\n      deleteUser(this.hass, this._userId);\n      this._params?.refreshUsers();\n      this._userId = undefined;\n    }\n\n    this._params = undefined;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-picture-upload,\n        ha-textfield {\n          display: block;\n        }\n        ha-picture-upload {\n          margin-top: 16px;\n        }\n        ha-formfield {\n          display: block;\n          padding: 16px 0;\n        }\n        a {\n          color: var(--primary-color);\n        }\n        p {\n          color: var(--primary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-person-detail\": DialogPersonDetail;\n  }\n}\n\ncustomElements.define(\"dialog-person-detail\", DialogPersonDetail);\n"],"names":[],"sourceRoot":""}