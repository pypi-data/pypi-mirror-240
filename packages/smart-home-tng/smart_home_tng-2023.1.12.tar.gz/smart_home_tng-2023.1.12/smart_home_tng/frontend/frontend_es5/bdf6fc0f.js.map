{"version":3,"file":"bdf6fc0f.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEA;AAIA;;AAKA;;;;ACnBA;;AAEA;;;;AAsBA;;AAEA;AAqCA;AAEA;;;;AAoBA;;AAEA;;;;AAsBA;;AAEA;;ACxHA;;AAGA;AACA;AACA;;AAEA;AAGA;;AAEA;;;AAGA;;AAGA;AACA;;;;AAIA;;;AAGA;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FA;;ACtIA;;;;AAIA;AAGA;AACA;AACA;;;AAGA;AACA;;;AAGA;;;;AAMA;;AAGA;AASA;;AAEA;AACA;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqEA;AClHA;;;;AAIA;;;;;;AAMA;;;;AAMA;AACA;AACA;;;AAGA;;;;;AAKA;AACA;AACA;;;;;AAKA;AACA;;;;;AAOA;;;AAIA;;;;;;;;;;;;;;;;;;;;AAkEA","sources":["webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/dialogs/config-flow/show-dialog-options-flow.ts","webpack://home-assistant-frontend/./src/layouts/hass-subpage.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/mqtt/mqtt-subscribe-card.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/mqtt/mqtt-config-panel.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public outlined = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        border-radius: var(--ha-card-border-radius, 4px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { html } from \"lit\";\nimport { ConfigEntry } from \"../../data/config_entries\";\nimport { domainToName, IntegrationManifest } from \"../../data/integration\";\nimport {\n  createOptionsFlow,\n  deleteOptionsFlow,\n  fetchOptionsFlow,\n  handleOptionsFlowStep,\n} from \"../../data/options_flow\";\nimport {\n  loadDataEntryFlowDialog,\n  showFlowDialog,\n} from \"./show-dialog-data-entry-flow\";\n\nexport const loadOptionsFlowDialog = loadDataEntryFlowDialog;\n\nexport const showOptionsFlowDialog = (\n  element: HTMLElement,\n  configEntry: ConfigEntry,\n  manifest?: IntegrationManifest | null\n): void =>\n  showFlowDialog(\n    element,\n    {\n      startFlowHandler: configEntry.entry_id,\n      domain: configEntry.domain,\n      manifest,\n    },\n    {\n      loadDevicesAndAreas: false,\n      createFlow: async (hass, handler) => {\n        const [step] = await Promise.all([\n          createOptionsFlow(hass, handler),\n          hass.loadBackendTranslation(\"options\", configEntry.domain),\n        ]);\n        return step;\n      },\n      fetchFlow: async (hass, flowId) => {\n        const [step] = await Promise.all([\n          fetchOptionsFlow(hass, flowId),\n          hass.loadBackendTranslation(\"options\", configEntry.domain),\n        ]);\n        return step;\n      },\n      handleFlowStep: handleOptionsFlowStep,\n      deleteFlow: deleteOptionsFlow,\n\n      renderAbortDescription(hass, step) {\n        const description = hass.localize(\n          `component.${configEntry.domain}.options.abort.${step.reason}`,\n          step.description_placeholders\n        );\n\n        return description\n          ? html`\n              <ha-markdown\n                breaks\n                allowsvg\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderShowFormStepHeader(hass, step) {\n        return (\n          hass.localize(\n            `component.${configEntry.domain}.options.step.${step.step_id}.title`\n          ) || hass.localize(`ui.dialogs.options_flow.form.header`)\n        );\n      },\n\n      renderShowFormStepDescription(hass, step) {\n        const description = hass.localize(\n          `component.${configEntry.domain}.options.step.${step.step_id}.description`,\n          step.description_placeholders\n        );\n        return description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderShowFormStepFieldLabel(hass, step, field) {\n        return hass.localize(\n          `component.${configEntry.domain}.options.step.${step.step_id}.data.${field.name}`\n        );\n      },\n\n      renderShowFormStepFieldHelper(hass, step, field) {\n        const description = hass.localize(\n          `component.${configEntry.domain}.options.step.${step.step_id}.data_description.${field.name}`,\n          step.description_placeholders\n        );\n        return description\n          ? html`<ha-markdown breaks .content=${description}></ha-markdown>`\n          : \"\";\n      },\n\n      renderShowFormStepFieldError(hass, step, error) {\n        return hass.localize(\n          `component.${configEntry.domain}.options.error.${error}`,\n          step.description_placeholders\n        );\n      },\n\n      renderExternalStepHeader(_hass, _step) {\n        return \"\";\n      },\n\n      renderExternalStepDescription(_hass, _step) {\n        return \"\";\n      },\n\n      renderCreateEntryDescription(hass, _step) {\n        return html`\n          <p>${hass.localize(`ui.dialogs.options_flow.success.description`)}</p>\n        `;\n      },\n\n      renderShowFormProgressHeader(hass, step) {\n        return (\n          hass.localize(\n            `component.${configEntry.domain}.options.step.${step.step_id}.title`\n          ) || hass.localize(`component.${configEntry.domain}.title`)\n        );\n      },\n\n      renderShowFormProgressDescription(hass, step) {\n        const description = hass.localize(\n          `component.${configEntry.domain}.options.progress.${step.progress_action}`,\n          step.description_placeholders\n        );\n        return description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderMenuHeader(hass, step) {\n        return (\n          hass.localize(\n            `component.${configEntry.domain}.options.step.${step.step_id}.title`\n          ) || hass.localize(`component.${configEntry.domain}.title`)\n        );\n      },\n\n      renderMenuDescription(hass, step) {\n        const description = hass.localize(\n          `component.${configEntry.domain}.options.step.${step.step_id}.description`,\n          step.description_placeholders\n        );\n        return description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderMenuOption(hass, step, option) {\n        return hass.localize(\n          `component.${configEntry.domain}.options.step.${step.step_id}.menu_options.${option}`,\n          step.description_placeholders\n        );\n      },\n\n      renderLoadingDescription(hass, reason) {\n        return (\n          hass.localize(`component.${configEntry.domain}.options.loading`) ||\n          hass.localize(`ui.dialogs.options_flow.loading.${reason}`, {\n            integration: domainToName(hass.localize, configEntry.domain),\n          })\n        );\n      },\n    }\n  );\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, eventOptions, property } from \"lit/decorators\";\nimport { restoreScroll } from \"../common/decorators/restore-scroll\";\nimport { toggleAttribute } from \"../common/dom/toggle_attribute\";\nimport { computeRTL } from \"../common/util/compute_rtl\";\nimport \"../components/ha-icon-button-arrow-prev\";\nimport \"../components/ha-menu-button\";\nimport { HomeAssistant } from \"../types\";\n\n@customElement(\"hass-subpage\")\nclass HassSubpage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public header?: string;\n\n  @property({ type: Boolean, attribute: \"main-page\" }) public mainPage = false;\n\n  @property({ type: String, attribute: \"back-path\" }) public backPath?: string;\n\n  @property() public backCallback?: () => void;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean }) public supervisor = false;\n\n  // @ts-ignore\n  @restoreScroll(\".content\") private _savedScrollPos?: number;\n\n  protected willUpdate(changedProps: PropertyValues): void {\n    super.willUpdate(changedProps);\n    if (!changedProps.has(\"hass\")) {\n      return;\n    }\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (!oldHass || oldHass.locale !== this.hass.locale) {\n      toggleAttribute(this, \"rtl\", computeRTL(this.hass));\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"toolbar\">\n        ${this.mainPage || history.state?.root\n          ? html`\n              <ha-menu-button\n                .hassio=${this.supervisor}\n                .hass=${this.hass}\n                .narrow=${this.narrow}\n              ></ha-menu-button>\n            `\n          : this.backPath\n          ? html`\n              <a href=${this.backPath}>\n                <ha-icon-button-arrow-prev\n                  .hass=${this.hass}\n                ></ha-icon-button-arrow-prev>\n              </a>\n            `\n          : html`\n              <ha-icon-button-arrow-prev\n                .hass=${this.hass}\n                @click=${this._backTapped}\n              ></ha-icon-button-arrow-prev>\n            `}\n\n        <div class=\"main-title\">${this.header}</div>\n        <slot name=\"toolbar-icon\"></slot>\n      </div>\n      <div class=\"content\" @scroll=${this._saveScrollPos}><slot></slot></div>\n      <div id=\"fab\">\n        <slot name=\"fab\"></slot>\n      </div>\n    `;\n  }\n\n  @eventOptions({ passive: true })\n  private _saveScrollPos(e: Event) {\n    this._savedScrollPos = (e.target as HTMLDivElement).scrollTop;\n  }\n\n  private _backTapped(): void {\n    if (this.backCallback) {\n      this.backCallback();\n      return;\n    }\n    history.back();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        height: 100%;\n        background-color: var(--primary-background-color);\n      }\n\n      :host([narrow]) {\n        width: 100%;\n        position: fixed;\n      }\n\n      .toolbar {\n        display: flex;\n        align-items: center;\n        font-size: 20px;\n        height: var(--header-height);\n        padding: 0 16px;\n        pointer-events: none;\n        background-color: var(--app-header-background-color);\n        font-weight: 400;\n        color: var(--app-header-text-color, white);\n        border-bottom: var(--app-header-border-bottom, none);\n        box-sizing: border-box;\n      }\n      .toolbar a {\n        color: var(--sidebar-text-color);\n        text-decoration: none;\n      }\n\n      ha-menu-button,\n      ha-icon-button-arrow-prev,\n      ::slotted([slot=\"toolbar-icon\"]) {\n        pointer-events: auto;\n        color: var(--sidebar-icon-color);\n      }\n\n      .main-title {\n        margin: 0 0 0 24px;\n        line-height: 20px;\n        flex-grow: 1;\n      }\n\n      .content {\n        position: relative;\n        width: 100%;\n        height: calc(100% - 1px - var(--header-height));\n        overflow-y: auto;\n        overflow: auto;\n        -webkit-overflow-scrolling: touch;\n      }\n\n      #fab {\n        position: fixed;\n        right: calc(16px + env(safe-area-inset-right));\n        bottom: calc(16px + env(safe-area-inset-bottom));\n        z-index: 1;\n      }\n      :host([narrow]) #fab.tabs {\n        bottom: calc(84px + env(safe-area-inset-bottom));\n      }\n      #fab[is-wide] {\n        bottom: 24px;\n        right: 24px;\n      }\n      :host([rtl]) #fab {\n        right: auto;\n        left: calc(16px + env(safe-area-inset-left));\n      }\n      :host([rtl][is-wide]) #fab {\n        bottom: 24px;\n        left: 24px;\n        right: auto;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-subpage\": HassSubpage;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { formatTime } from \"../../../../../common/datetime/format_time\";\nimport \"../../../../../components/ha-card\";\nimport { MQTTMessage, subscribeMQTTTopic } from \"../../../../../data/mqtt\";\nimport { HomeAssistant } from \"../../../../../types\";\n\n@customElement(\"mqtt-subscribe-card\")\nclass MqttSubscribeCard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _topic = \"\";\n\n  @state() private _subscribed?: () => void;\n\n  @state() private _messages: Array<{\n    id: number;\n    message: MQTTMessage;\n    payload: string;\n    time: Date;\n  }> = [];\n\n  private _messageCount = 0;\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this._subscribed) {\n      this._subscribed();\n      this._subscribed = undefined;\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-card\n        header=${this.hass.localize(\"ui.panel.config.mqtt.description_listen\")}\n      >\n        <form>\n          <paper-input\n            .label=${this._subscribed\n              ? this.hass.localize(\"ui.panel.config.mqtt.listening_to\")\n              : this.hass.localize(\"ui.panel.config.mqtt.subscribe_to\")}\n            .disabled=${this._subscribed !== undefined}\n            .value=${this._topic}\n            @value-changed=${this._valueChanged}\n          ></paper-input>\n          <mwc-button\n            .disabled=${this._topic === \"\"}\n            @click=${this._handleSubmit}\n            type=\"submit\"\n          >\n            ${this._subscribed\n              ? this.hass.localize(\"ui.panel.config.mqtt.stop_listening\")\n              : this.hass.localize(\"ui.panel.config.mqtt.start_listening\")}\n          </mwc-button>\n        </form>\n        <div class=\"events\">\n          ${this._messages.map(\n            (msg) => html`\n              <div class=\"event\">\n                ${this.hass.localize(\n                  \"ui.panel.config.mqtt.message_received\",\n                  \"id\",\n                  msg.id,\n                  \"topic\",\n                  msg.message.topic,\n                  \"time\",\n                  formatTime(msg.time, this.hass!.locale)\n                )}\n                <pre>${msg.payload}</pre>\n                <div class=\"bottom\">\n                  QoS: ${msg.message.qos} - Retain:\n                  ${Boolean(msg.message.retain)}\n                </div>\n              </div>\n            `\n          )}\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    this._topic = ev.detail.value;\n  }\n\n  private async _handleSubmit(): Promise<void> {\n    if (this._subscribed) {\n      this._subscribed();\n      this._subscribed = undefined;\n    } else {\n      this._subscribed = await subscribeMQTTTopic(\n        this.hass!,\n        this._topic,\n        (message) => this._handleMessage(message)\n      );\n    }\n  }\n\n  private _handleMessage(message: MQTTMessage) {\n    const tail =\n      this._messages.length > 30 ? this._messages.slice(0, 29) : this._messages;\n    let payload: string;\n    try {\n      payload = JSON.stringify(JSON.parse(message.payload), null, 4);\n    } catch (err: any) {\n      payload = message.payload;\n    }\n    this._messages = [\n      {\n        payload,\n        message,\n        time: new Date(),\n        id: this._messageCount++,\n      },\n      ...tail,\n    ];\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      form {\n        display: block;\n        padding: 16px;\n      }\n      paper-input {\n        display: inline-block;\n        width: 200px;\n      }\n      .events {\n        margin: -16px 0;\n        padding: 0 16px;\n      }\n      .event {\n        border-bottom: 1px solid var(--divider-color);\n        padding-bottom: 16px;\n        margin: 16px 0;\n      }\n      .event:last-child {\n        border-bottom: 0;\n      }\n      .bottom {\n        font-size: 80%;\n        color: var(--secondary-text-color);\n      }\n      pre {\n        font-family: var(--code-font-family, monospace);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"mqtt-subscribe-card\": MqttSubscribeCard;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../../../../components/ha-card\";\nimport \"../../../../../components/ha-code-editor\";\nimport { getConfigEntries } from \"../../../../../data/config_entries\";\nimport { showOptionsFlowDialog } from \"../../../../../dialogs/config-flow/show-dialog-options-flow\";\nimport \"../../../../../layouts/hass-subpage\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport \"./mqtt-subscribe-card\";\n\n@customElement(\"mqtt-config-panel\")\nclass HaPanelDevMqtt extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @state() private topic = \"\";\n\n  @state() private payload = \"\";\n\n  private inited = false;\n\n  protected firstUpdated() {\n    if (localStorage && localStorage[\"panel-dev-mqtt-topic\"]) {\n      this.topic = localStorage[\"panel-dev-mqtt-topic\"];\n    }\n    if (localStorage && localStorage[\"panel-dev-mqtt-payload\"]) {\n      this.payload = localStorage[\"panel-dev-mqtt-payload\"];\n    }\n    this.inited = true;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-subpage .narrow=${this.narrow} .hass=${this.hass}>\n        <div class=\"content\">\n          <ha-card header=\"MQTT settings\">\n            <div class=\"card-actions\">\n              <mwc-button @click=${this._openOptionFlow}\n                >Re-configure MQTT</mwc-button\n              >\n            </div>\n          </ha-card>\n          <ha-card\n            header=${this.hass.localize(\n              \"ui.panel.config.mqtt.description_publish\"\n            )}\n          >\n            <div class=\"card-content\">\n              <paper-input\n                label=${this.hass.localize(\"ui.panel.config.mqtt.topic\")}\n                .value=${this.topic}\n                @value-changed=${this._handleTopic}\n              ></paper-input>\n\n              <p>${this.hass.localize(\"ui.panel.config.mqtt.payload\")}</p>\n              <ha-code-editor\n                mode=\"jinja2\"\n                autocomplete-entities\n                autocomplete-icons\n                .hass=${this.hass}\n                .value=${this.payload}\n                @value-changed=${this._handlePayload}\n                dir=\"ltr\"\n              ></ha-code-editor>\n            </div>\n            <div class=\"card-actions\">\n              <mwc-button @click=${this._publish}\n                >${this.hass.localize(\n                  \"ui.panel.config.mqtt.publish\"\n                )}</mwc-button\n              >\n            </div>\n          </ha-card>\n\n          <mqtt-subscribe-card .hass=${this.hass}></mqtt-subscribe-card>\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  private _handleTopic(ev: CustomEvent) {\n    this.topic = ev.detail.value;\n    if (localStorage && this.inited) {\n      localStorage[\"panel-dev-mqtt-topic\"] = this.topic;\n    }\n  }\n\n  private _handlePayload(ev: CustomEvent) {\n    this.payload = ev.detail.value;\n    if (localStorage && this.inited) {\n      localStorage[\"panel-dev-mqtt-payload\"] = this.payload;\n    }\n  }\n\n  private _publish(): void {\n    if (!this.hass) {\n      return;\n    }\n    this.hass.callService(\"mqtt\", \"publish\", {\n      topic: this.topic,\n      payload_template: this.payload,\n    });\n  }\n\n  private async _openOptionFlow() {\n    const searchParams = new URLSearchParams(window.location.search);\n    if (!searchParams.has(\"config_entry\")) {\n      return;\n    }\n    const configEntryId = searchParams.get(\"config_entry\") as string;\n    const configEntries = await getConfigEntries(this.hass, {\n      domain: \"mqtt\",\n    });\n    const configEntry = configEntries.find(\n      (entry) => entry.entry_id === configEntryId\n    );\n    showOptionsFlowDialog(this, configEntry!);\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          -ms-user-select: initial;\n          -webkit-user-select: initial;\n          -moz-user-select: initial;\n        }\n\n        .content {\n          padding: 24px 0 32px;\n          max-width: 600px;\n          margin: 0 auto;\n          direction: ltr;\n        }\n        ha-card:first-child {\n          margin-bottom: 16px;\n        }\n        mqtt-subscribe-card {\n          display: block;\n          margin: 16px auto;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"developer-tools-mqtt\": HaPanelDevMqtt;\n  }\n}\n"],"names":[],"sourceRoot":""}