{"version":3,"file":"7f4b48ff.js","mappings":";;AA2FA;;AAIA;;AAGA;AACA;;AAEA;;AAGA;AACA;;AAEA;;AAGA;AAGA;;;AAOA;AAGA;;;AAKA;AAGA;;;AAeA;AAGA;;;;AA9DA;;;;;;;;;;;;;AA8FA","sources":["webpack://home-assistant-frontend/./src/panels/config/devices/device-detail/integration-elements/zwave_js/ha-device-info-zwave_js.ts"],"sourcesContent":["import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../../../../../components/ha-expansion-panel\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport {\n  ConfigEntry,\n  getConfigEntries,\n} from \"../../../../../../data/config_entries\";\nimport { DeviceRegistryEntry } from \"../../../../../../data/device_registry\";\nimport {\n  fetchZwaveNodeStatus,\n  nodeStatus,\n  SecurityClass,\n  subscribeZwaveNodeStatus,\n  ZWaveJSNodeStatus,\n} from \"../../../../../../data/zwave_js\";\nimport { haStyle } from \"../../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../../types\";\nimport { SubscribeMixin } from \"../../../../../../mixins/subscribe-mixin\";\n\n@customElement(\"ha-device-info-zwave_js\")\nexport class HaDeviceInfoZWaveJS extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public device!: DeviceRegistryEntry;\n\n  @state() private _configEntry?: ConfigEntry;\n\n  @state() private _multipleConfigEntries = false;\n\n  @state() private _node?: ZWaveJSNodeStatus;\n\n  public willUpdate(changedProperties: PropertyValues) {\n    super.willUpdate(changedProperties);\n    if (changedProperties.has(\"device\")) {\n      this._fetchNodeDetails();\n    }\n  }\n\n  public hassSubscribe(): Array<UnsubscribeFunc | Promise<UnsubscribeFunc>> {\n    return [\n      subscribeZwaveNodeStatus(this.hass, this.device!.id, (message) => {\n        if (!this._node) {\n          return;\n        }\n        this._node = {\n          ...this._node,\n          status: message.status,\n          ready: message.ready,\n        };\n      }),\n    ];\n  }\n\n  protected async _fetchNodeDetails() {\n    if (!this.device) {\n      return;\n    }\n\n    const configEntries = await getConfigEntries(this.hass, {\n      domain: \"zwave_js\",\n    });\n\n    this._multipleConfigEntries = configEntries.length > 1;\n\n    const configEntry = configEntries.find((entry) =>\n      this.device.config_entries.includes(entry.entry_id)\n    );\n\n    if (!configEntry) {\n      return;\n    }\n\n    this._configEntry = configEntry;\n\n    this._node = await fetchZwaveNodeStatus(this.hass, this.device.id);\n  }\n\n  protected render(): TemplateResult {\n    if (!this._node) {\n      return html``;\n    }\n    return html`\n      <ha-expansion-panel\n        .header=${this.hass.localize(\n          \"ui.panel.config.zwave_js.device_info.zwave_info\"\n        )}\n      >\n        ${this._multipleConfigEntries\n          ? html`\n              <div>\n                ${this.hass.localize(\"ui.panel.config.zwave_js.common.source\")}:\n                ${this._configEntry!.title}\n              </div>\n            `\n          : \"\"}\n        <div>\n          ${this.hass.localize(\"ui.panel.config.zwave_js.device_info.node_id\")}:\n          ${this._node.node_id}\n        </div>\n        ${!this._node.is_controller_node\n          ? html`\n              <div>\n                ${this.hass.localize(\n                  \"ui.panel.config.zwave_js.device_info.node_status\"\n                )}:\n                ${this.hass.localize(\n                  `ui.panel.config.zwave_js.node_status.${\n                    nodeStatus[this._node.status]\n                  }`\n                )}\n              </div>\n              <div>\n                ${this.hass.localize(\n                  \"ui.panel.config.zwave_js.device_info.node_ready\"\n                )}:\n                ${this._node.ready\n                  ? this.hass.localize(\"ui.common.yes\")\n                  : this.hass.localize(\"ui.common.no\")}\n              </div>\n              <div>\n                ${this.hass.localize(\n                  \"ui.panel.config.zwave_js.device_info.highest_security\"\n                )}:\n                ${this._node.highest_security_class !== null\n                  ? this.hass.localize(\n                      `ui.panel.config.zwave_js.security_classes.${\n                        SecurityClass[this._node.highest_security_class]\n                      }.title`\n                    )\n                  : this._node.is_secure === false\n                  ? this.hass.localize(\n                      \"ui.panel.config.zwave_js.security_classes.none.title\"\n                    )\n                  : this.hass.localize(\n                      \"ui.panel.config.zwave_js.device_info.unknown\"\n                    )}\n              </div>\n              <div>\n                ${this.hass.localize(\n                  \"ui.panel.config.zwave_js.device_info.zwave_plus\"\n                )}:\n                ${this._node.zwave_plus_version\n                  ? this.hass.localize(\n                      \"ui.panel.config.zwave_js.device_info.zwave_plus_version\",\n                      \"version\",\n                      this._node.zwave_plus_version\n                    )\n                  : this.hass.localize(\"ui.common.no\")}\n              </div>\n            `\n          : \"\"}\n      </ha-expansion-panel>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        h4 {\n          margin-bottom: 4px;\n        }\n        div {\n          word-break: break-all;\n          margin-top: 2px;\n        }\n        ha-expansion-panel {\n          --expansion-panel-summary-padding: 0;\n          --expansion-panel-content-padding: 0;\n          padding-top: 4px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-device-info-zwave_js\": HaDeviceInfoZWaveJS;\n  }\n}\n"],"names":[],"sourceRoot":""}