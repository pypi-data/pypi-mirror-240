{"version":3,"file":"2ff081b7.js","mappings":";AAaA;;AAEA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;;;;ACjGA;AACA;AACA;;AAGA;;;;;AASA;;;ACgDA;AACA;;;;;AAQA;;;AAKA;;AAIA;;;;AAIA;;;AAKA;;AAIA;;;;AAIA;;;AAKA;;;AAKA;;;;;AAKA;;;AAKA;;;AAKA;;;;;AAKA;;;AAKA;;AAIA;;AAEA;;AAGA;;;AAKA;;AAIA;AACA;AAEA;;AAGA;;;AAKA;;AAIA;AACA;;AAGA;;AAIA;;;;AAMA;AAGA;;;;;AAOA;;;;;AASA;AAGA;;;;;AAOA;;;AAOA;;AAGA;AAGA;;;;AAMA;AACA;;;AAIA;AAGA;;;;;AAOA;AA9PA;;AAmQA;;;;;AAQA;AAGA;;;;AAMA;;;AAIA;;;;;AAOA;;;;AAMA;;;;AAOA;;AAxOA;AAqPA;AAKA;;AAkEA;;;AAKA;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-help-tooltip.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zwave_js/dialog-zwave_js-node-statistics.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { mdiHelpCircle } from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-help-tooltip\")\nexport class HaHelpTooltip extends LitElement {\n  @property() public label!: string;\n\n  @property() public position = \"top\";\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-svg-icon .path=${mdiHelpCircle}></ha-svg-icon>\n      <paper-tooltip\n        offset=\"4\"\n        .position=${this.position}\n        .fitToVisibleBounds=${true}\n        >${this.label}</paper-tooltip\n      >\n    `;\n  }\n\n  static get styles() {\n    return css`\n      ha-svg-icon {\n        --mdc-icon-size: var(--ha-help-tooltip-size, 14px);\n        color: var(--ha-help-tooltip-color, var(--disabled-text-color));\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-help-tooltip\": HaHelpTooltip;\n  }\n}\n","import { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport \"@material/mwc-list/mwc-list\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport \"../../../../../components/ha-expansion-panel\";\nimport \"../../../../../components/ha-help-tooltip\";\nimport \"../../../../../components/ha-svg-icon\";\nimport { mdiSwapHorizontal } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport {\n  DeviceRegistryEntry,\n  computeDeviceName,\n  subscribeDeviceRegistry,\n} from \"../../../../../data/device_registry\";\nimport {\n  subscribeZwaveNodeStatistics,\n  ProtocolDataRate,\n  ZWaveJSNodeStatisticsUpdatedMessage,\n  ZWaveJSRouteStatistics,\n  RssiError,\n} from \"../../../../../data/zwave_js\";\nimport { haStyleDialog } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { ZWaveJSNodeStatisticsDialogParams } from \"./show-dialog-zwave_js-node-statistics\";\nimport { createCloseHeading } from \"../../../../../components/ha-dialog\";\n\ntype WorkingRouteStatistics =\n  | (ZWaveJSRouteStatistics & {\n      repeater_rssi_table?: TemplateResult;\n      rssi_translated?: TemplateResult | string;\n      route_failed_between_translated?: [string, string];\n    })\n  | undefined;\n\n@customElement(\"dialog-zwave_js-node-statistics\")\nclass DialogZWaveJSNodeStatistics extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private device?: DeviceRegistryEntry;\n\n  @state() private _nodeStatistics?: ZWaveJSNodeStatisticsUpdatedMessage & {\n    rssi_translated?: TemplateResult | string;\n  };\n\n  @state() private _deviceIDsToName: { [key: string]: string } = {};\n\n  @state() private _workingRoutes: {\n    lwr?: WorkingRouteStatistics;\n    nlwr?: WorkingRouteStatistics;\n  } = {};\n\n  private _subscribedNodeStatistics?: Promise<UnsubscribeFunc>;\n\n  private _subscribedDeviceRegistry?: UnsubscribeFunc;\n\n  public showDialog(params: ZWaveJSNodeStatisticsDialogParams): void {\n    this.device = params.device;\n    this._subscribeDeviceRegistry();\n    this._subscribeNodeStatistics();\n  }\n\n  public closeDialog(): void {\n    this._nodeStatistics = undefined;\n    this.device = undefined;\n\n    this._unsubscribe();\n\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this.device) {\n      return html``;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\"ui.panel.config.zwave_js.node_statistics.title\")\n        )}\n      >\n        <mwc-list noninteractive>\n          <mwc-list-item twoline hasmeta>\n            <span>\n              ${this.hass.localize(\n                \"ui.panel.config.zwave_js.node_statistics.commands_tx.label\"\n              )}</span\n            >\n            <span slot=\"secondary\">\n              ${this.hass.localize(\n                \"ui.panel.config.zwave_js.node_statistics.commands_tx.tooltip\"\n              )}\n            </span>\n            <span slot=\"meta\">${this._nodeStatistics?.commands_tx}</span>\n          </mwc-list-item>\n          <mwc-list-item twoline hasmeta>\n            <span>\n              ${this.hass.localize(\n                \"ui.panel.config.zwave_js.node_statistics.commands_rx.label\"\n              )}</span\n            >\n            <span slot=\"secondary\">\n              ${this.hass.localize(\n                \"ui.panel.config.zwave_js.node_statistics.commands_rx.tooltip\"\n              )}\n            </span>\n            <span slot=\"meta\">${this._nodeStatistics?.commands_rx}</span>\n          </mwc-list-item>\n          <mwc-list-item twoline hasmeta>\n            <span>\n              ${this.hass.localize(\n                \"ui.panel.config.zwave_js.node_statistics.commands_dropped_tx.label\"\n              )}</span\n            >\n            <span slot=\"secondary\">\n              ${this.hass.localize(\n                \"ui.panel.config.zwave_js.node_statistics.commands_dropped_tx.tooltip\"\n              )}\n            </span>\n            <span slot=\"meta\"\n              >${this._nodeStatistics?.commands_dropped_tx}</span\n            >\n          </mwc-list-item>\n          <mwc-list-item twoline hasmeta>\n            <span>\n              ${this.hass.localize(\n                \"ui.panel.config.zwave_js.node_statistics.commands_dropped_rx.label\"\n              )}</span\n            >\n            <span slot=\"secondary\">\n              ${this.hass.localize(\n                \"ui.panel.config.zwave_js.node_statistics.commands_dropped_rx.tooltip\"\n              )}\n            </span>\n            <span slot=\"meta\"\n              >${this._nodeStatistics?.commands_dropped_rx}</span\n            >\n          </mwc-list-item>\n          <mwc-list-item twoline hasmeta>\n            <span>\n              ${this.hass.localize(\n                \"ui.panel.config.zwave_js.node_statistics.timeout_response.label\"\n              )}</span\n            >\n            <span slot=\"secondary\">\n              ${this.hass.localize(\n                \"ui.panel.config.zwave_js.node_statistics.timeout_response.tooltip\"\n              )}\n            </span>\n            <span slot=\"meta\">${this._nodeStatistics?.timeout_response}</span>\n          </mwc-list-item>\n          ${this._nodeStatistics?.rtt\n            ? html`<mwc-list-item twoline hasmeta>\n                <span>\n                  ${this.hass.localize(\n                    \"ui.panel.config.zwave_js.node_statistics.rtt.label\"\n                  )}</span\n                >\n                <span slot=\"secondary\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.zwave_js.node_statistics.rtt.tooltip\"\n                  )}\n                </span>\n                <span slot=\"meta\">${this._nodeStatistics.rtt}</span>\n              </mwc-list-item>`\n            : ``}\n          ${this._nodeStatistics?.rssi_translated\n            ? html`<mwc-list-item twoline hasmeta>\n                <span>\n                  ${this.hass.localize(\n                    \"ui.panel.config.zwave_js.node_statistics.rssi.label\"\n                  )}</span\n                >\n                <span slot=\"secondary\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.zwave_js.node_statistics.rssi.tooltip\"\n                  )}\n                </span>\n                <span slot=\"meta\">${this._nodeStatistics.rssi_translated}</span>\n              </mwc-list-item>`\n            : ``}\n        </mwc-list>\n        ${Object.entries(this._workingRoutes).map(([wrKey, wrValue]) =>\n          wrValue\n            ? html`\n                <ha-expansion-panel\n                  .header=${this.hass.localize(\n                    `ui.panel.config.zwave_js.node_statistics.${wrKey}`\n                  )}\n                >\n                  <div class=\"row\">\n                    <span>\n                      ${this.hass.localize(\n                        \"ui.panel.config.zwave_js.route_statistics.protocol.label\"\n                      )}<ha-help-tooltip\n                        .label=${this.hass.localize(\n                          \"ui.panel.config.zwave_js.route_statistics.protocol.tooltip\"\n                        )}\n                      >\n                      </ha-help-tooltip\n                    ></span>\n                    <span\n                      >${this.hass.localize(\n                        `ui.panel.config.zwave_js.route_statistics.protocol.protocol_data_rate.${\n                          ProtocolDataRate[wrValue.protocol_data_rate]\n                        }`\n                      )}</span\n                    >\n                  </div>\n                  <div class=\"row\">\n                    <span>\n                      ${this.hass.localize(\n                        \"ui.panel.config.zwave_js.route_statistics.data_rate.label\"\n                      )}<ha-help-tooltip\n                        .label=${this.hass.localize(\n                          \"ui.panel.config.zwave_js.route_statistics.data_rate.tooltip\"\n                        )}\n                      >\n                      </ha-help-tooltip\n                    ></span>\n                    <span\n                      >${this.hass.localize(\n                        `ui.panel.config.zwave_js.route_statistics.data_rate.protocol_data_rate.${\n                          ProtocolDataRate[wrValue.protocol_data_rate]\n                        }`\n                      )}</span\n                    >\n                  </div>\n                  ${wrValue.rssi_translated\n                    ? html`<div class=\"row\">\n                        <span>\n                          ${this.hass.localize(\n                            \"ui.panel.config.zwave_js.route_statistics.rssi.label\"\n                          )}<ha-help-tooltip\n                            .label=${this.hass.localize(\n                              \"ui.panel.config.zwave_js.route_statistics.rssi.tooltip\"\n                            )}\n                          >\n                          </ha-help-tooltip\n                        ></span>\n                        <span>${wrValue.rssi_translated}</span>\n                      </div>`\n                    : ``}\n                  <div class=\"row\">\n                    <span>\n                      ${this.hass.localize(\n                        \"ui.panel.config.zwave_js.route_statistics.route_failed_between.label\"\n                      )}<ha-help-tooltip\n                        .label=${this.hass.localize(\n                          \"ui.panel.config.zwave_js.route_statistics.route_failed_between.tooltip\"\n                        )}\n                      >\n                      </ha-help-tooltip\n                    ></span>\n                    <span>\n                      ${wrValue.route_failed_between_translated\n                        ? html`${wrValue\n                              .route_failed_between_translated[0]}<ha-svg-icon\n                              .path=${mdiSwapHorizontal}\n                            ></ha-svg-icon\n                            >${wrValue.route_failed_between_translated[1]}`\n                        : this.hass.localize(\n                            \"ui.panel.config.zwave_js.route_statistics.route_failed_between.not_applicable\"\n                          )}\n                    </span>\n                  </div>\n                  <div class=\"row\">\n                    <span>\n                      ${this.hass.localize(\n                        \"ui.panel.config.zwave_js.route_statistics.repeaters.label\"\n                      )}<ha-help-tooltip\n                        .label=${this.hass.localize(\n                          \"ui.panel.config.zwave_js.route_statistics.repeaters.tooltip\"\n                        )}\n                      >\n                      </ha-help-tooltip></span\n                    ><span>\n                      ${wrValue.repeater_rssi_table\n                        ? html`<div class=\"row\">\n                              <span class=\"key-cell\"\n                                ><b\n                                  >${this.hass.localize(\n                                    \"ui.panel.config.zwave_js.route_statistics.repeaters.repeaters\"\n                                  )}:</b\n                                ></span\n                              >\n                              <span class=\"value-cell\"\n                                ><b\n                                  >${this.hass.localize(\n                                    \"ui.panel.config.zwave_js.route_statistics.repeaters.rssi\"\n                                  )}:</b\n                                ></span\n                              >\n                            </div>\n                            ${wrValue.repeater_rssi_table}`\n                        : html`${this.hass.localize(\n                            \"ui.panel.config.zwave_js.route_statistics.repeaters.direct\"\n                          )}`}</span\n                    >\n                  </div>\n                </ha-expansion-panel>\n              `\n            : ``\n        )}\n      </ha-dialog>\n    `;\n  }\n\n  private _computeRSSI(\n    rssi: number,\n    includeUnit: boolean\n  ): TemplateResult | string {\n    if (Object.values(RssiError).includes(rssi)) {\n      return html`<ha-help-tooltip\n        .label=${this.hass.localize(\n          `ui.panel.config.zwave_js.rssi.rssi_error.${RssiError[rssi]}`\n        )}\n      ></ha-help-tooltip>`;\n    }\n    if (includeUnit) {\n      return `${rssi}\n      ${this.hass.localize(\"ui.panel.config.zwave_js.rssi.unit\")}`;\n    }\n    return rssi.toString();\n  }\n\n  private _computeDeviceNameById(device_id: string): \"unknown device\" | string {\n    if (!this._deviceIDsToName) {\n      return \"unknown device\";\n    }\n    const device = this._deviceIDsToName[device_id];\n    if (!device) {\n      return \"unknown device\";\n    }\n\n    return this._deviceIDsToName[device_id] || \"unknown device\";\n  }\n\n  private _subscribeNodeStatistics(): void {\n    if (!this.hass) {\n      return;\n    }\n    this._subscribedNodeStatistics = subscribeZwaveNodeStatistics(\n      this.hass,\n      this.device!.id,\n      (message: ZWaveJSNodeStatisticsUpdatedMessage) => {\n        this._nodeStatistics = {\n          ...message,\n          rssi_translated: message.rssi\n            ? this._computeRSSI(message.rssi, false)\n            : undefined,\n        };\n\n        const workingRoutesValueMap: [\n          string,\n          WorkingRouteStatistics | null | undefined\n        ][] = [\n          [\"lwr\", this._nodeStatistics?.lwr],\n          [\"nlwr\", this._nodeStatistics?.nlwr],\n        ];\n\n        const workingRoutes: {\n          lwr?: WorkingRouteStatistics;\n          nlwr?: WorkingRouteStatistics;\n        } = {};\n        workingRoutesValueMap.forEach(([wrKey, wrValue]) => {\n          workingRoutes[wrKey] = wrValue;\n\n          if (wrValue) {\n            if (wrValue.rssi) {\n              wrValue.rssi_translated = this._computeRSSI(wrValue.rssi, true);\n            }\n\n            if (wrValue.route_failed_between) {\n              wrValue.route_failed_between_translated = [\n                this._computeDeviceNameById(wrValue.route_failed_between[0]),\n                this._computeDeviceNameById(wrValue.route_failed_between[1]),\n              ];\n            }\n\n            if (wrValue.repeaters && wrValue.repeaters.length) {\n              wrValue.repeater_rssi_table = html`${wrValue.repeaters.map(\n                (_, idx) =>\n                  html`<div class=\"row\">\n                    <span class=\"key-cell\"\n                      >${this._computeDeviceNameById(\n                        wrValue.repeaters[idx]\n                      )}:</span\n                    >\n                    <span class=\"value-cell\"\n                      >${this._computeRSSI(\n                        wrValue.repeater_rssi[idx],\n                        true\n                      )}</span\n                    >\n                  </div>`\n              )}`;\n            }\n          }\n        });\n        this._workingRoutes = workingRoutes;\n      }\n    );\n  }\n\n  private _subscribeDeviceRegistry(): void {\n    if (!this.hass) {\n      return;\n    }\n    this._subscribedDeviceRegistry = subscribeDeviceRegistry(\n      this.hass.connection,\n      (devices: DeviceRegistryEntry[]) => {\n        const devicesIdToName = {};\n        devices.forEach((device) => {\n          devicesIdToName[device.id] = computeDeviceName(device, this.hass);\n        });\n        this._deviceIDsToName = devicesIdToName;\n      }\n    );\n  }\n\n  private _unsubscribe(): void {\n    if (this._subscribedNodeStatistics) {\n      this._subscribedNodeStatistics.then((unsub) => unsub());\n      this._subscribedNodeStatistics = undefined;\n    }\n    if (this._subscribedDeviceRegistry) {\n      this._subscribedDeviceRegistry();\n      this._subscribedDeviceRegistry = undefined;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        mwc-list-item {\n          height: 60px;\n        }\n\n        .row {\n          display: flex;\n          justify-content: space-between;\n        }\n\n        .table {\n          display: table;\n        }\n\n        .key-cell {\n          display: table-cell;\n          padding-right: 5px;\n        }\n\n        .value-cell {\n          display: table-cell;\n          padding-left: 5px;\n        }\n\n        span[slot=\"meta\"] {\n          font-size: 0.95em;\n          color: var(--primary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-zwave_js-node-statistics\": DialogZWaveJSNodeStatistics;\n  }\n}\n"],"names":[],"sourceRoot":""}