{"version":3,"file":"51995554.js","mappings":";;;;;;;;;;;;;;;;;;;AA4BA;;;;;AAYA;;;;AC1BA;ACgEA;AAGA;AACA;;AAUA;;;AAKA;AACA;;AAEA;AACA;;AAbA;AAkBA;;AAUA;;;AAGA;AACA;;AAEA;;AAVA;AAeA;;AAUA;;;AAGA;AACA;;AAEA;;AAVA;AAeA;;AAGA;;;AAGA;;;AASA;AACA;;;AAGA;;;AATA;;AAeA;AAEA;AAEA;;AAEA;;;;AASA;AACA;;AAEA;;;AATA;;AAeA;AAEA;AAEA;;AAEA;;;;AAUA;AACA;;AAEA;;;AATA;;AAeA;AAEA;;AAGA;;;AAGA;;;;AAUA;AACA;;AAEA;;;AATA;;AAgBA;AAEA;;AAGA;;;AAGA;;;;AAUA;AACA;;AAEA;;;AATA;;AAeA;AA3MA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkQA;;;;AC5TA;AACA;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA","sources":["webpack://home-assistant-frontend/./src/components/ha-header-bar.ts","webpack://home-assistant-frontend/./src/components/ha-radio.ts","webpack://home-assistant-frontend/./src/components/ha-related-items.ts","webpack://home-assistant-frontend/./src/components/ha-settings-row.ts"],"sourcesContent":["// @ts-ignore\nimport topAppBarStyles from \"@material/top-app-bar/dist/mdc.top-app-bar.min.css\";\nimport { css, html, LitElement, unsafeCSS } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-header-bar\")\nexport class HaHeaderBar extends LitElement {\n  protected render() {\n    return html`<header class=\"mdc-top-app-bar\">\n      <div class=\"mdc-top-app-bar__row\">\n        <section\n          class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-start\"\n          id=\"navigation\"\n        >\n          <slot name=\"navigationIcon\"></slot>\n          <span class=\"mdc-top-app-bar__title\">\n            <slot name=\"title\"></slot>\n          </span>\n        </section>\n        <section\n          class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-end\"\n          id=\"actions\"\n          role=\"toolbar\"\n        >\n          <slot name=\"actionItems\"></slot>\n        </section>\n      </div>\n    </header>`;\n  }\n\n  static get styles() {\n    return [\n      unsafeCSS(topAppBarStyles),\n      css`\n        .mdc-top-app-bar {\n          position: static;\n          color: var(--mdc-theme-on-primary, #fff);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-header-bar\": HaHeaderBar;\n  }\n}\n","import { RadioBase } from \"@material/mwc-radio/mwc-radio-base\";\nimport { styles } from \"@material/mwc-radio/mwc-radio.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-radio\")\nexport class HaRadio extends RadioBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-radio\": HaRadio;\n  }\n}\n","import { HassEntity, UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport {\n  AreaRegistryEntry,\n  subscribeAreaRegistry,\n} from \"../data/area_registry\";\nimport { ConfigEntry, getConfigEntries } from \"../data/config_entries\";\nimport {\n  DeviceRegistryEntry,\n  subscribeDeviceRegistry,\n} from \"../data/device_registry\";\nimport { SceneEntity } from \"../data/scene\";\nimport { findRelated, ItemType, RelatedResult } from \"../data/search\";\nimport { SubscribeMixin } from \"../mixins/subscribe-mixin\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-switch\";\n\n@customElement(\"ha-related-items\")\nexport class HaRelatedItems extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public itemType!: ItemType;\n\n  @property() public itemId!: string;\n\n  @state() private _entries?: ConfigEntry[];\n\n  @state() private _devices?: DeviceRegistryEntry[];\n\n  @state() private _areas?: AreaRegistryEntry[];\n\n  @state() private _related?: RelatedResult;\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeDeviceRegistry(this.hass.connection!, (devices) => {\n        this._devices = devices;\n      }),\n      subscribeAreaRegistry(this.hass.connection!, (areas) => {\n        this._areas = areas;\n      }),\n    ];\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    getConfigEntries(this.hass).then((configEntries) => {\n      this._entries = configEntries;\n    });\n    this.hass.loadBackendTranslation(\"title\");\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    if (\n      (changedProps.has(\"itemId\") || changedProps.has(\"itemType\")) &&\n      this.itemId &&\n      this.itemType\n    ) {\n      this._findRelated();\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._related) {\n      return html``;\n    }\n    if (Object.keys(this._related).length === 0) {\n      return html`\n        ${this.hass.localize(\"ui.components.related-items.no_related_found\")}\n      `;\n    }\n    return html`\n      ${this._related.config_entry && this._entries\n        ? this._related.config_entry.map((relatedConfigEntryId) => {\n            const entry: ConfigEntry | undefined = this._entries!.find(\n              (configEntry) => configEntry.entry_id === relatedConfigEntryId\n            );\n            if (!entry) {\n              return \"\";\n            }\n            return html`\n              <h3>\n                ${this.hass.localize(\n                  \"ui.components.related-items.integration\"\n                )}:\n              </h3>\n              <a\n                href=${`/config/integrations#config_entry=${relatedConfigEntryId}`}\n                @click=${this._navigateAwayClose}\n              >\n                ${this.hass.localize(`component.${entry.domain}.title`)}:\n                ${entry.title}\n              </a>\n            `;\n          })\n        : \"\"}\n      ${this._related.device && this._devices\n        ? this._related.device.map((relatedDeviceId) => {\n            const device: DeviceRegistryEntry | undefined = this._devices!.find(\n              (dev) => dev.id === relatedDeviceId\n            );\n            if (!device) {\n              return \"\";\n            }\n            return html`\n              <h3>\n                ${this.hass.localize(\"ui.components.related-items.device\")}:\n              </h3>\n              <a\n                href=\"/config/devices/device/${relatedDeviceId}\"\n                @click=${this._navigateAwayClose}\n              >\n                ${device.name_by_user || device.name}\n              </a>\n            `;\n          })\n        : \"\"}\n      ${this._related.area && this._areas\n        ? this._related.area.map((relatedAreaId) => {\n            const area: AreaRegistryEntry | undefined = this._areas!.find(\n              (ar) => ar.area_id === relatedAreaId\n            );\n            if (!area) {\n              return \"\";\n            }\n            return html`\n              <h3>\n                ${this.hass.localize(\"ui.components.related-items.area\")}:\n              </h3>\n              <a\n                href=\"/config/areas/area/${relatedAreaId}\"\n                @click=${this._navigateAwayClose}\n              >\n                ${area.name}\n              </a>\n            `;\n          })\n        : \"\"}\n      ${this._related.entity\n        ? html`\n            <h3>\n              ${this.hass.localize(\"ui.components.related-items.entity\")}:\n            </h3>\n            <ul>\n              ${this._related.entity.map((entityId) => {\n                const entity: HassEntity | undefined =\n                  this.hass.states[entityId];\n                if (!entity) {\n                  return \"\";\n                }\n                return html`\n                  <li>\n                    <button\n                      @click=${this._openMoreInfo}\n                      .entityId=${entityId}\n                      class=\"link\"\n                    >\n                      ${entity.attributes.friendly_name || entityId}\n                    </button>\n                  </li>\n                `;\n              })}\n            </ul>\n          `\n        : \"\"}\n      ${this._related.group\n        ? html`\n            <h3>${this.hass.localize(\"ui.components.related-items.group\")}:</h3>\n            <ul>\n              ${this._related.group.map((groupId) => {\n                const group: HassEntity | undefined = this.hass.states[groupId];\n                if (!group) {\n                  return \"\";\n                }\n                return html`\n                  <li>\n                    <button\n                      class=\"link\"\n                      @click=${this._openMoreInfo}\n                      .entityId=${groupId}\n                    >\n                      ${group.attributes.friendly_name || group.entity_id}\n                    </button>\n                  </li>\n                `;\n              })}\n            </ul>\n          `\n        : \"\"}\n      ${this._related.scene\n        ? html`\n            <h3>${this.hass.localize(\"ui.components.related-items.scene\")}:</h3>\n            <ul>\n              ${this._related.scene.map((sceneId) => {\n                const scene: SceneEntity | undefined =\n                  this.hass.states[sceneId];\n                if (!scene) {\n                  return \"\";\n                }\n                return html`\n                  <li>\n                    <button\n                      class=\"link\"\n                      @click=${this._openMoreInfo}\n                      .entityId=${sceneId}\n                    >\n                      ${scene.attributes.friendly_name || scene.entity_id}\n                    </button>\n                  </li>\n                `;\n              })}\n            </ul>\n          `\n        : \"\"}\n      ${this._related.automation\n        ? html`\n            <h3>\n              ${this.hass.localize(\"ui.components.related-items.automation\")}:\n            </h3>\n            <ul>\n              ${this._related.automation.map((automationId) => {\n                const automation: HassEntity | undefined =\n                  this.hass.states[automationId];\n                if (!automation) {\n                  return \"\";\n                }\n                return html`\n                  <li>\n                    <button\n                      class=\"link\"\n                      @click=${this._openMoreInfo}\n                      .entityId=${automationId}\n                    >\n                      ${automation.attributes.friendly_name ||\n                      automation.entity_id}\n                    </button>\n                  </li>\n                `;\n              })}\n            </ul>\n          `\n        : \"\"}\n      ${this._related.script\n        ? html`\n            <h3>\n              ${this.hass.localize(\"ui.components.related-items.script\")}:\n            </h3>\n            <ul>\n              ${this._related.script.map((scriptId) => {\n                const script: HassEntity | undefined =\n                  this.hass.states[scriptId];\n                if (!script) {\n                  return \"\";\n                }\n                return html`\n                  <li>\n                    <button\n                      class=\"link\"\n                      @click=${this._openMoreInfo}\n                      .entityId=${scriptId}\n                    >\n                      ${script.attributes.friendly_name || script.entity_id}\n                    </button>\n                  </li>\n                `;\n              })}\n            </ul>\n          `\n        : \"\"}\n    `;\n  }\n\n  private async _navigateAwayClose() {\n    // allow new page to open before closing dialog\n    await new Promise((resolve) => setTimeout(resolve, 0));\n    fireEvent(this, \"close-dialog\");\n  }\n\n  private async _findRelated() {\n    this._related = await findRelated(this.hass, this.itemType, this.itemId);\n    await this.updateComplete;\n    fireEvent(this, \"iron-resize\");\n  }\n\n  private _openMoreInfo(ev: CustomEvent) {\n    const entityId = (ev.target as any).entityId;\n    fireEvent(this, \"hass-more-info\", { entityId });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      a {\n        color: var(--primary-color);\n      }\n      button.link {\n        color: var(--primary-color);\n        text-align: left;\n        cursor: pointer;\n        background: none;\n        border-width: initial;\n        border-style: none;\n        border-color: initial;\n        border-image: initial;\n        padding: 0px;\n        font: inherit;\n        text-decoration: underline;\n      }\n      h3 {\n        font-family: var(--paper-font-title_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-title_-_-webkit-font-smoothing\n        );\n        font-size: var(--paper-font-title_-_font-size);\n        font-weight: var(--paper-font-headline-_font-weight);\n        letter-spacing: var(--paper-font-title_-_letter-spacing);\n        line-height: var(--paper-font-title_-_line-height);\n        opacity: var(--dark-primary-opacity);\n      }\n      h3:first-child {\n        margin-top: 0;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-related-items\": HaRelatedItems;\n  }\n}\n","import \"@polymer/paper-item/paper-item-body\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-settings-row\")\nexport class HaSettingsRow extends LitElement {\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @property({ type: Boolean, attribute: \"three-line\" })\n  public threeLine = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"prefix-wrap\">\n        <slot name=\"prefix\"></slot>\n        <paper-item-body\n          ?two-line=${!this.threeLine}\n          ?three-line=${this.threeLine}\n        >\n          <slot name=\"heading\"></slot>\n          <div secondary><slot name=\"description\"></slot></div>\n        </paper-item-body>\n      </div>\n      <div class=\"content\"><slot></slot></div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n        padding: 0 16px;\n        align-content: normal;\n        align-self: auto;\n        align-items: center;\n      }\n      paper-item-body {\n        padding: 8px 16px 8px 0;\n      }\n      paper-item-body[two-line] {\n        min-height: calc(\n          var(--paper-item-body-two-line-min-height, 72px) - 16px\n        );\n        flex: 1;\n      }\n      .content {\n        display: contents;\n      }\n      :host(:not([narrow])) .content {\n        display: var(--settings-row-content-display, flex);\n        justify-content: flex-end;\n        flex: 1;\n        padding: 16px 0;\n      }\n      .content ::slotted(*) {\n        width: var(--settings-row-content-width);\n      }\n      :host([narrow]) {\n        align-items: normal;\n        flex-direction: column;\n        border-top: 1px solid var(--divider-color);\n        padding-bottom: 8px;\n      }\n      ::slotted(ha-switch) {\n        padding: 16px 0;\n      }\n      div[secondary] {\n        white-space: normal;\n      }\n      .prefix-wrap {\n        display: var(--settings-row-prefix-display);\n      }\n      :host([narrow]) .prefix-wrap {\n        display: flex;\n        align-items: center;\n      }\n    `;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-settings-row\": HaSettingsRow;\n  }\n}\n"],"names":[],"sourceRoot":""}