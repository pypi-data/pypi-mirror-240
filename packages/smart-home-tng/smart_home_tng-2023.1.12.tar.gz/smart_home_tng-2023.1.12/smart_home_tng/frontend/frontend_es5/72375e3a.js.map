{"version":3,"file":"72375e3a.js","mappings":";;;;AAoBA;AAIA;;;;;AAMA;ACRA;AACA;;AAGA;;;;;;;AAQA;;AAGA;;AAIA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;ACnEA;;AAEA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;;;;;;;;;;;;;ACzEA;;;;;;;;;;;;;;;;;;;;ACIA;;;ACoBA;;;AAGA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;;AAIA;;AAGA;AACA;;;;;;;;AASA;AACA;AACA;AACA;;;;AAIA;AAGA;;;AAGA;AACA;AACA;;;;;;;AAOA;AAGA;;;AAGA;AACA;AACA;;;;;AAKA;;AAGA;;;;AAOA;AAGA;;;AAGA;AACA;AACA;;;;;AAKA;;;;;;;;;;AAYA;AACA;;AAIA;;AAEA;;AAGA;;AAIA;AAEA;AAEA;AAGA;;;;;AAMA;AACA;;AAIA;;AAEA;;AAGA;;AAIA;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwIA","sources":["webpack://home-assistant-frontend/./src/components/ha-chip-set.ts","webpack://home-assistant-frontend/./src/components/ha-chip.ts","webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-formfield.ts","webpack://home-assistant-frontend/./src/components/ha-switch.ts","webpack://home-assistant-frontend/./src/panels/config/users/dialog-user-detail.ts"],"sourcesContent":["// @ts-ignore\nimport chipStyles from \"@material/chips/dist/mdc.chips.min.css\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  TemplateResult,\n  unsafeCSS,\n} from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-chip-set\")\nexport class HaChipSet extends LitElement {\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"mdc-chip-set\">\n        <slot></slot>\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ${unsafeCSS(chipStyles)}\n\n      slot::slotted(ha-chip) {\n        margin: 4px 4px 4px 0;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-chip-set\": HaChipSet;\n  }\n}\n","// @ts-ignore\nimport chipStyles from \"@material/chips/dist/mdc.chips.min.css\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  TemplateResult,\n  unsafeCSS,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-chip\")\nexport class HaChip extends LitElement {\n  @property({ type: Boolean }) public hasIcon = false;\n\n  @property({ type: Boolean }) public hasTrailingIcon = false;\n\n  @property({ type: Boolean }) public noText = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"mdc-chip ${this.noText ? \"no-text\" : \"\"}\">\n        ${this.hasIcon\n          ? html`<div class=\"mdc-chip__icon mdc-chip__icon--leading\">\n              <slot name=\"icon\"></slot>\n            </div>`\n          : null}\n        <div class=\"mdc-chip__ripple\"></div>\n        <span role=\"gridcell\">\n          <span role=\"button\" tabindex=\"0\" class=\"mdc-chip__primary-action\">\n            <span class=\"mdc-chip__text\"><slot></slot></span>\n          </span>\n        </span>\n        ${this.hasTrailingIcon\n          ? html`<div class=\"mdc-chip__icon mdc-chip__icon--trailing\">\n              <slot name=\"trailing-icon\"></slot>\n            </div>`\n          : null}\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ${unsafeCSS(chipStyles)}\n      .mdc-chip {\n        background-color: var(\n          --ha-chip-background-color,\n          rgba(var(--rgb-primary-text-color), 0.15)\n        );\n        color: var(--ha-chip-text-color, var(--primary-text-color));\n      }\n\n      .mdc-chip.no-text {\n        padding: 0 10px;\n      }\n\n      .mdc-chip:hover {\n        color: var(--ha-chip-text-color, var(--primary-text-color));\n      }\n\n      .mdc-chip__icon--leading,\n      .mdc-chip__icon--trailing {\n        --mdc-icon-size: 18px;\n        line-height: 14px;\n        color: var(--ha-chip-icon-color, var(--ha-chip-text-color));\n      }\n      .mdc-chip.mdc-chip--selected .mdc-chip__checkmark,\n      .mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden) {\n        margin-right: -4px;\n        margin-inline-start: -4px;\n        margin-inline-end: 4px;\n        direction: var(--direction);\n      }\n\n      span[role=\"gridcell\"] {\n        line-height: 14px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-chip\": HaChip;\n  }\n}\n","import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { FormfieldBase } from \"@material/mwc-formfield/mwc-formfield-base\";\nimport { styles } from \"@material/mwc-formfield/mwc-formfield.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n@customElement(\"ha-formfield\")\nexport class HaFormfield extends FormfieldBase {\n  protected _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      switch (input.tagName) {\n        case \"HA-CHECKBOX\":\n        case \"HA-RADIO\":\n          (input as any).checked = !(input as any).checked;\n          fireEvent(input, \"change\");\n          break;\n        default:\n          input.click();\n          break;\n      }\n    }\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host(:not([alignEnd])) ::slotted(ha-switch) {\n        margin-right: 10px;\n        margin-inline-end: 10px;\n        margin-inline-start: inline;\n      }\n      .mdc-form-field > label {\n        direction: var(--direction);\n        margin-inline-start: 0;\n        margin-inline-end: auto;\n        padding-inline-start: 4px;\n        padding-inline-end: 0;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-formfield\": HaFormfield;\n  }\n}\n","import { SwitchBase } from \"@material/mwc-switch/deprecated/mwc-switch-base\";\nimport { styles } from \"@material/mwc-switch/deprecated/mwc-switch.css\";\nimport { css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { forwardHaptic } from \"../data/haptics\";\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends SwitchBase {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--switch-checked-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n        background-color: var(--switch-checked-button-color);\n        border-color: var(--switch-checked-button-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__track {\n        background-color: var(--switch-checked-track-color);\n        border-color: var(--switch-checked-track-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n        background-color: var(--switch-unchecked-button-color);\n        border-color: var(--switch-unchecked-button-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n        background-color: var(--switch-unchecked-track-color);\n        border-color: var(--switch-unchecked-track-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\n\nimport { computeRTLDirection } from \"../../../common/util/compute_rtl\";\nimport { createCloseHeading } from \"../../../components/ha-dialog\";\nimport \"../../../components/ha-formfield\";\nimport \"../../../components/ha-help-tooltip\";\nimport \"../../../components/ha-chip-set\";\nimport \"../../../components/ha-chip\";\nimport \"../../../components/ha-svg-icon\";\nimport \"../../../components/ha-textfield\";\nimport \"../../../components/ha-switch\";\nimport { adminChangePassword } from \"../../../data/auth\";\nimport {\n  computeUserBadges,\n  SYSTEM_GROUP_ID_ADMIN,\n  SYSTEM_GROUP_ID_USER,\n} from \"../../../data/user\";\nimport {\n  showAlertDialog,\n  showPromptDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport { UserDetailDialogParams } from \"./show-dialog-user-detail\";\n\n@customElement(\"dialog-user-detail\")\nclass DialogUserDetail extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _name!: string;\n\n  @state() private _isAdmin?: boolean;\n\n  @state() private _localOnly?: boolean;\n\n  @state() private _isActive?: boolean;\n\n  @state() private _error?: string;\n\n  @state() private _params?: UserDetailDialogParams;\n\n  @state() private _submitting = false;\n\n  public async showDialog(params: UserDetailDialogParams): Promise<void> {\n    this._params = params;\n    this._error = undefined;\n    this._name = params.entry.name || \"\";\n    this._isAdmin = params.entry.group_ids.includes(SYSTEM_GROUP_ID_ADMIN);\n    this._localOnly = params.entry.local_only;\n    this._isActive = params.entry.is_active;\n    await this.updateComplete;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n    const user = this._params.entry;\n    const badges = computeUserBadges(this.hass, user, true);\n    return html`\n      <ha-dialog\n        open\n        @closed=${this._close}\n        scrimClickAction\n        escapeKeyAction\n        .heading=${createCloseHeading(this.hass, user.name)}\n      >\n        <div>\n          ${this._error ? html` <div class=\"error\">${this._error}</div> ` : \"\"}\n          <div class=\"secondary\">\n            ${this.hass.localize(\"ui.panel.config.users.editor.id\")}:\n            ${user.id}<br />\n            ${this.hass.localize(\"ui.panel.config.users.editor.username\")}:\n            ${user.username}\n          </div>\n          ${badges.length === 0\n            ? \"\"\n            : html`\n                <ha-chip-set>\n                  ${badges.map(\n                    ([icon, label]) => html`\n                      <ha-chip hasIcon>\n                        <ha-svg-icon slot=\"icon\" .path=${icon}></ha-svg-icon>\n                        ${label}\n                      </ha-chip>\n                    `\n                  )}\n                </ha-chip-set>\n              `}\n          <div class=\"form\">\n            <ha-textfield\n              dialogInitialFocus\n              .value=${this._name}\n              .disabled=${user.system_generated}\n              @input=${this._nameChanged}\n              .label=${this.hass!.localize(\"ui.panel.config.users.editor.name\")}\n            ></ha-textfield>\n            <div class=\"row\">\n              <ha-formfield\n                .label=${this.hass.localize(\n                  \"ui.panel.config.users.editor.local_only\"\n                )}\n                .dir=${computeRTLDirection(this.hass)}\n              >\n                <ha-switch\n                  .disabled=${user.system_generated}\n                  .checked=${this._localOnly}\n                  @change=${this._localOnlyChanged}\n                >\n                </ha-switch>\n              </ha-formfield>\n            </div>\n            <div class=\"row\">\n              <ha-formfield\n                .label=${this.hass.localize(\n                  \"ui.panel.config.users.editor.admin\"\n                )}\n                .dir=${computeRTLDirection(this.hass)}\n              >\n                <ha-switch\n                  .disabled=${user.system_generated || user.is_owner}\n                  .checked=${this._isAdmin}\n                  @change=${this._adminChanged}\n                >\n                </ha-switch>\n              </ha-formfield>\n            </div>\n            ${!this._isAdmin\n              ? html`\n                  <br />\n                  ${this.hass.localize(\n                    \"ui.panel.config.users.users_privileges_note\"\n                  )}\n                `\n              : \"\"}\n            <div class=\"row\">\n              <ha-formfield\n                .label=${this.hass.localize(\n                  \"ui.panel.config.users.editor.active\"\n                )}\n                .dir=${computeRTLDirection(this.hass)}\n              >\n                <ha-switch\n                  .disabled=${user.system_generated || user.is_owner}\n                  .checked=${this._isActive}\n                  @change=${this._activeChanged}\n                >\n                </ha-switch>\n              </ha-formfield>\n              <ha-help-tooltip\n                .label=${this.hass.localize(\n                  \"ui.panel.config.users.editor.active_tooltip\"\n                )}\n              >\n              </ha-help-tooltip>\n            </div>\n          </div>\n        </div>\n\n        <div slot=\"secondaryAction\">\n          <mwc-button\n            class=\"warning\"\n            @click=${this._deleteEntry}\n            .disabled=${this._submitting ||\n            user.system_generated ||\n            user.is_owner}\n          >\n            ${this.hass!.localize(\"ui.panel.config.users.editor.delete_user\")}\n          </mwc-button>\n          ${user.system_generated\n            ? html`\n                <paper-tooltip animation-delay=\"0\" position=\"right\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.users.editor.system_generated_users_not_removable\"\n                  )}\n                </paper-tooltip>\n              `\n            : \"\"}\n          ${!user.system_generated && this.hass.user?.is_owner\n            ? html`<mwc-button @click=${this._changePassword}>\n                ${this.hass.localize(\n                  \"ui.panel.config.users.editor.change_password\"\n                )}\n              </mwc-button>`\n            : \"\"}\n        </div>\n\n        <div slot=\"primaryAction\">\n          <mwc-button\n            @click=${this._updateEntry}\n            .disabled=${!this._name ||\n            this._submitting ||\n            user.system_generated}\n          >\n            ${this.hass!.localize(\"ui.panel.config.users.editor.update_user\")}\n          </mwc-button>\n          ${user.system_generated\n            ? html`\n                <paper-tooltip animation-delay=\"0\" position=\"left\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.users.editor.system_generated_users_not_editable\"\n                  )}\n                </paper-tooltip>\n              `\n            : \"\"}\n        </div>\n      </ha-dialog>\n    `;\n  }\n\n  private _nameChanged(ev) {\n    this._error = undefined;\n    this._name = ev.target.value;\n  }\n\n  private _adminChanged(ev): void {\n    this._isAdmin = ev.target.checked;\n  }\n\n  private _localOnlyChanged(ev): void {\n    this._localOnly = ev.target.checked;\n  }\n\n  private _activeChanged(ev): void {\n    this._isActive = ev.target.checked;\n  }\n\n  private async _updateEntry() {\n    this._submitting = true;\n    try {\n      await this._params!.updateEntry({\n        name: this._name.trim(),\n        is_active: this._isActive,\n        group_ids: [\n          this._isAdmin ? SYSTEM_GROUP_ID_ADMIN : SYSTEM_GROUP_ID_USER,\n        ],\n        local_only: this._localOnly,\n      });\n      this._close();\n    } catch (err: any) {\n      this._error = err?.message || \"Unknown error\";\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private async _deleteEntry() {\n    this._submitting = true;\n    try {\n      if (await this._params!.removeEntry()) {\n        this._params = undefined;\n      }\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private async _changePassword() {\n    const credential = this._params?.entry.credentials.find(\n      (cred) => cred.type === \"internal\"\n    );\n    if (!credential) {\n      showAlertDialog(this, {\n        title: \"No internal credentials found.\",\n      });\n      return;\n    }\n    const newPassword = await showPromptDialog(this, {\n      title: this.hass.localize(\"ui.panel.config.users.editor.change_password\"),\n      inputType: \"password\",\n      inputLabel: this.hass.localize(\n        \"ui.panel.config.users.editor.new_password\"\n      ),\n    });\n    if (!newPassword) {\n      return;\n    }\n    const confirmPassword = await showPromptDialog(this, {\n      title: this.hass.localize(\"ui.panel.config.users.editor.change_password\"),\n      inputType: \"password\",\n      inputLabel: this.hass.localize(\n        \"ui.panel.config.users.add_user.password_confirm\"\n      ),\n    });\n    if (!confirmPassword) {\n      return;\n    }\n    if (newPassword !== confirmPassword) {\n      showAlertDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.config.users.add_user.password_not_match\"\n        ),\n      });\n      return;\n    }\n    await adminChangePassword(this.hass, this._params!.entry.id, newPassword);\n    showAlertDialog(this, {\n      title: this.hass.localize(\n        \"ui.panel.config.users.editor.password_changed\"\n      ),\n    });\n  }\n\n  private _close(): void {\n    this._params = undefined;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --mdc-dialog-max-width: 500px;\n        }\n        .form {\n          padding-top: 16px;\n        }\n        .secondary {\n          color: var(--secondary-text-color);\n        }\n        ha-chip-set,\n        ha-textfield {\n          display: block;\n        }\n        .state {\n          background-color: rgba(var(--rgb-primary-text-color), 0.15);\n          border-radius: 16px;\n          padding: 4px 8px;\n          margin-top: 8px;\n          display: inline-block;\n        }\n        .state:not(:first-child) {\n          margin-left: 8px;\n        }\n        .row {\n          display: flex;\n          padding: 8px 0;\n        }\n        ha-help-tooltip {\n          margin-left: 4px;\n          position: relative;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-user-detail\": DialogUserDetail;\n  }\n}\n"],"names":[],"sourceRoot":""}