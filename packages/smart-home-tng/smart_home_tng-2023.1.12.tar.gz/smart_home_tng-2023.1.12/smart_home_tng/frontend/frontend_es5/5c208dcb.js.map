{"version":3,"file":"5c208dcb.js","mappings":";AAyEA;AAEA;AAGA;AAEA;AACA;;AAGA;;AAIA;AACA;;;;AAMA;AAGA;;;;;;;;;;;;;;;;;;;AAmDA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/views/hui-panel-view.ts"],"sourcesContent":["import { mdiPlus } from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeRTL } from \"../../../common/util/compute_rtl\";\nimport type {\n  LovelaceViewConfig,\n  LovelaceViewElement,\n} from \"../../../data/lovelace\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { HuiErrorCard } from \"../cards/hui-error-card\";\nimport { HuiCardOptions } from \"../components/hui-card-options\";\nimport { HuiWarning } from \"../components/hui-warning\";\nimport type { Lovelace, LovelaceCard } from \"../types\";\n\nlet editCodeLoaded = false;\n\nexport class PanelView extends LitElement implements LovelaceViewElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public lovelace?: Lovelace;\n\n  @property({ type: Number }) public index?: number;\n\n  @property({ type: Boolean }) public isStrategy = false;\n\n  @property({ attribute: false }) public cards: Array<\n    LovelaceCard | HuiErrorCard\n  > = [];\n\n  @state() private _card?: LovelaceCard | HuiWarning | HuiCardOptions;\n\n  public setConfig(_config: LovelaceViewConfig): void {}\n\n  public willUpdate(changedProperties: PropertyValues): void {\n    super.willUpdate(changedProperties);\n\n    if (this.lovelace?.editMode && !editCodeLoaded) {\n      editCodeLoaded = true;\n      import(\"./default-view-editable\");\n    }\n\n    if (changedProperties.has(\"cards\")) {\n      this._createCard();\n    }\n\n    if (!changedProperties.has(\"lovelace\")) {\n      return;\n    }\n\n    const oldLovelace = changedProperties.get(\"lovelace\") as\n      | Lovelace\n      | undefined;\n\n    if (\n      (!changedProperties.has(\"cards\") &&\n        oldLovelace?.config !== this.lovelace?.config) ||\n      (oldLovelace && oldLovelace?.editMode !== this.lovelace?.editMode)\n    ) {\n      this._createCard();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.cards!.length > 1\n        ? html`<hui-warning>\n            ${this.hass!.localize(\n              \"ui.panel.lovelace.editor.view.panel_mode.warning_multiple_cards\"\n            )}\n          </hui-warning>`\n        : \"\"}\n      ${this._card}\n      ${this.lovelace?.editMode && this.cards.length === 0\n        ? html`\n            <ha-fab\n              .label=${this.hass!.localize(\n                \"ui.panel.lovelace.editor.edit_card.add\"\n              )}\n              extended\n              @click=${this._addCard}\n              class=${classMap({\n                rtl: computeRTL(this.hass!),\n              })}\n            >\n              <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n            </ha-fab>\n          `\n        : \"\"}\n    `;\n  }\n\n  private _addCard(): void {\n    fireEvent(this, \"ll-create-card\");\n  }\n\n  private _createCard(): void {\n    if (this.cards.length === 0) {\n      this._card = undefined;\n      return;\n    }\n\n    const card: LovelaceCard = this.cards[0];\n    card.isPanel = true;\n\n    if (this.isStrategy || !this.lovelace?.editMode) {\n      card.editMode = false;\n      this._card = card;\n      return;\n    }\n\n    const wrapper = document.createElement(\"hui-card-options\");\n    wrapper.hass = this.hass;\n    wrapper.lovelace = this.lovelace;\n    wrapper.path = [this.index!, 0];\n    card.editMode = true;\n    wrapper.appendChild(card);\n    this._card = wrapper;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        height: 100%;\n      }\n\n      ha-fab {\n        position: sticky;\n        float: right;\n        right: calc(16px + env(safe-area-inset-right));\n        bottom: calc(16px + env(safe-area-inset-bottom));\n        z-index: 1;\n      }\n\n      ha-fab.rtl {\n        float: left;\n        right: auto;\n        left: calc(16px + env(safe-area-inset-left));\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-panel-view\": PanelView;\n  }\n}\n\ncustomElements.define(\"hui-panel-view\", PanelView);\n"],"names":[],"sourceRoot":""}