{"version":3,"file":"202a90c0.js","mappings":";AA4DA;;;;AAKA;;;AAGA;AAIA;;;AAGA;AAEA;;;;AAKA;;;AAGA;AAIA;;;AAGA;AAEA;;;;AAKA;;;AAGA;;;;AAOA;AAEA;;;;AAKA;;;AAGA;;;AAQA;AAEA;;;;AAKA;;;AAGA;AAIA;;;AAGA;AAEA;;AAGA;;AAEA;AAGA;;AAGA;;AAEA;AAEA;;AAGA;;AAKA;;AAGA;;;;AAOA;;;AAYA;;AASA;AAGA;AAEA;;AAGA;;AAEA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA","sources":["webpack://home-assistant-frontend/./src/dialogs/more-info/controls/more-info-weather.ts"],"sourcesContent":["import {\n  mdiEye,\n  mdiGauge,\n  mdiThermometer,\n  mdiWaterPercent,\n  mdiWeatherWindy,\n} from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { formatDateWeekday } from \"../../../common/datetime/format_date\";\nimport { formatTimeWeekday } from \"../../../common/datetime/format_time\";\nimport { formatNumber } from \"../../../common/number/format_number\";\nimport \"../../../components/ha-svg-icon\";\nimport {\n  getWeatherUnit,\n  getWind,\n  isForecastHourly,\n  WeatherEntity,\n  weatherIcons,\n} from \"../../../data/weather\";\nimport { HomeAssistant } from \"../../../types\";\n\n@customElement(\"more-info-weather\")\nclass MoreInfoWeather extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public stateObj?: WeatherEntity;\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    if (changedProps.has(\"stateObj\")) {\n      return true;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (\n      !oldHass ||\n      oldHass.locale !== this.hass.locale ||\n      oldHass.config.unit_system !== this.hass.config.unit_system\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this.stateObj) {\n      return html``;\n    }\n\n    const hourly = isForecastHourly(this.stateObj.attributes.forecast);\n\n    return html`\n      ${this._showValue(this.stateObj.attributes.temperature)\n        ? html`\n            <div class=\"flex\">\n              <ha-svg-icon .path=${mdiThermometer}></ha-svg-icon>\n              <div class=\"main\">\n                ${this.hass.localize(\"ui.card.weather.attributes.temperature\")}\n              </div>\n              <div>\n                ${formatNumber(\n                  this.stateObj.attributes.temperature!,\n                  this.hass.locale\n                )}\n                ${getWeatherUnit(this.hass, this.stateObj, \"temperature\")}\n              </div>\n            </div>\n          `\n        : \"\"}\n      ${this._showValue(this.stateObj.attributes.pressure)\n        ? html`\n            <div class=\"flex\">\n              <ha-svg-icon .path=${mdiGauge}></ha-svg-icon>\n              <div class=\"main\">\n                ${this.hass.localize(\"ui.card.weather.attributes.air_pressure\")}\n              </div>\n              <div>\n                ${formatNumber(\n                  this.stateObj.attributes.pressure!,\n                  this.hass.locale\n                )}\n                ${getWeatherUnit(this.hass, this.stateObj, \"pressure\")}\n              </div>\n            </div>\n          `\n        : \"\"}\n      ${this._showValue(this.stateObj.attributes.humidity)\n        ? html`\n            <div class=\"flex\">\n              <ha-svg-icon .path=${mdiWaterPercent}></ha-svg-icon>\n              <div class=\"main\">\n                ${this.hass.localize(\"ui.card.weather.attributes.humidity\")}\n              </div>\n              <div>\n                ${formatNumber(\n                  this.stateObj.attributes.humidity!,\n                  this.hass.locale\n                )}\n                %\n              </div>\n            </div>\n          `\n        : \"\"}\n      ${this._showValue(this.stateObj.attributes.wind_speed)\n        ? html`\n            <div class=\"flex\">\n              <ha-svg-icon .path=${mdiWeatherWindy}></ha-svg-icon>\n              <div class=\"main\">\n                ${this.hass.localize(\"ui.card.weather.attributes.wind_speed\")}\n              </div>\n              <div>\n                ${getWind(\n                  this.hass,\n                  this.stateObj,\n                  this.stateObj.attributes.wind_speed!,\n                  this.stateObj.attributes.wind_bearing\n                )}\n              </div>\n            </div>\n          `\n        : \"\"}\n      ${this._showValue(this.stateObj.attributes.visibility)\n        ? html`\n            <div class=\"flex\">\n              <ha-svg-icon .path=${mdiEye}></ha-svg-icon>\n              <div class=\"main\">\n                ${this.hass.localize(\"ui.card.weather.attributes.visibility\")}\n              </div>\n              <div>\n                ${formatNumber(\n                  this.stateObj.attributes.visibility!,\n                  this.hass.locale\n                )}\n                ${getWeatherUnit(this.hass, this.stateObj, \"visibility\")}\n              </div>\n            </div>\n          `\n        : \"\"}\n      ${this.stateObj.attributes.forecast\n        ? html`\n            <div class=\"section\">\n              ${this.hass.localize(\"ui.card.weather.forecast\")}:\n            </div>\n            ${this.stateObj.attributes.forecast.map((item) =>\n              this._showValue(item.templow) || this._showValue(item.temperature)\n                ? html`<div class=\"flex\">\n                    ${item.condition\n                      ? html`\n                          <ha-svg-icon\n                            .path=${weatherIcons[item.condition]}\n                          ></ha-svg-icon>\n                        `\n                      : \"\"}\n                    ${hourly\n                      ? html`\n                          <div class=\"main\">\n                            ${formatTimeWeekday(\n                              new Date(item.datetime),\n                              this.hass.locale\n                            )}\n                          </div>\n                        `\n                      : html`\n                          <div class=\"main\">\n                            ${formatDateWeekday(\n                              new Date(item.datetime),\n                              this.hass.locale\n                            )}\n                          </div>\n                        `}\n                    <div class=\"templow\">\n                      ${this._showValue(item.templow)\n                        ? `${formatNumber(item.templow!, this.hass.locale)}\n                          ${getWeatherUnit(\n                            this.hass,\n                            this.stateObj!,\n                            \"temperature\"\n                          )}`\n                        : hourly\n                        ? \"\"\n                        : \"—\"}\n                    </div>\n                    <div class=\"temp\">\n                      ${this._showValue(item.temperature)\n                        ? `${formatNumber(item.temperature!, this.hass.locale)}\n                        ${getWeatherUnit(\n                          this.hass,\n                          this.stateObj!,\n                          \"temperature\"\n                        )}`\n                        : \"—\"}\n                    </div>\n                  </div>`\n                : \"\"\n            )}\n          `\n        : \"\"}\n      ${this.stateObj.attributes.attribution\n        ? html`\n            <div class=\"attribution\">\n              ${this.stateObj.attributes.attribution}\n            </div>\n          `\n        : \"\"}\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-svg-icon {\n        color: var(--paper-item-icon-color);\n        margin-left: 8px;\n      }\n      .section {\n        margin: 16px 0 8px 0;\n        font-size: 1.2em;\n      }\n\n      .flex {\n        display: flex;\n        height: 32px;\n        align-items: center;\n      }\n\n      .main {\n        flex: 1;\n        margin-left: 24px;\n      }\n\n      .temp,\n      .templow {\n        min-width: 48px;\n        text-align: right;\n      }\n\n      .templow {\n        margin: 0 16px;\n        color: var(--secondary-text-color);\n      }\n\n      .attribution {\n        color: var(--secondary-text-color);\n        text-align: center;\n      }\n    `;\n  }\n\n  private _showValue(item: number | string | undefined): boolean {\n    return typeof item !== \"undefined\" && item !== null;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"more-info-weather\": MoreInfoWeather;\n  }\n}\n"],"names":[],"sourceRoot":""}