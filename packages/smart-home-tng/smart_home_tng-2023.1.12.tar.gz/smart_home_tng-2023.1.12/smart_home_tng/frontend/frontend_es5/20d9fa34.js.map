{"version":3,"file":"20d9fa34.js","mappings":";AAaA;;AAEA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;;;;;;;;;;;;;;;;;;;ACtFA;;;;;AAYA;;ACDA;AACA;;AAEA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoFA;;;;;;;;;;AAWA;;;;ACkCA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;;;AAKA;AACA;;;AAGA;;;;AAIA;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;;AAEA;;;;;AAMA;;;AAIA;;;AAIA;AACA;;;AAGA;;AAMA;AAEA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;;;;;;AAOA;;AAGA;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsOA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-header-bar.ts","webpack://home-assistant-frontend/./src/components/ha-textfield.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/card-editor/hui-dialog-edit-card.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","// @ts-ignore\nimport topAppBarStyles from \"@material/top-app-bar/dist/mdc.top-app-bar.min.css\";\nimport { css, html, LitElement, unsafeCSS } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-header-bar\")\nexport class HaHeaderBar extends LitElement {\n  protected render() {\n    return html`<header class=\"mdc-top-app-bar\">\n      <div class=\"mdc-top-app-bar__row\">\n        <section\n          class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-start\"\n          id=\"navigation\"\n        >\n          <slot name=\"navigationIcon\"></slot>\n          <span class=\"mdc-top-app-bar__title\">\n            <slot name=\"title\"></slot>\n          </span>\n        </section>\n        <section\n          class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-end\"\n          id=\"actions\"\n          role=\"toolbar\"\n        >\n          <slot name=\"actionItems\"></slot>\n        </section>\n      </div>\n    </header>`;\n  }\n\n  static get styles() {\n    return [\n      unsafeCSS(topAppBarStyles),\n      css`\n        .mdc-top-app-bar {\n          position: static;\n          color: var(--mdc-theme-on-primary, #fff);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-header-bar\": HaHeaderBar;\n  }\n}\n","import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { TemplateResult, html, PropertyValues, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public iconTrailing?: boolean;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      (changedProperties.has(\"invalid\") &&\n        (this.invalid || changedProperties.get(\"invalid\") !== undefined)) ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid ? this.errorMessage || \"Invalid\" : \"\"\n      );\n      this.reportValidity();\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n        padding-inline-start: var(--text-field-suffix-padding-left, 12px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 0px);\n        direction: var(--direction);\n      }\n      .mdc-text-field--with-leading-icon {\n        padding-inline-start: var(--text-field-suffix-padding-left, 0px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 16px);\n        direction: var(--direction);\n      }\n\n      .mdc-text-field:not(.mdc-text-field--disabled)\n        .mdc-text-field__affix--suffix {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon--leading {\n        margin-inline-start: 16px;\n        margin-inline-end: 8px;\n        direction: var(--direction);\n      }\n\n      input {\n        text-align: var(--text-field-text-align, start);\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n\n      .mdc-floating-label {\n        inset-inline-start: 16px !important;\n        inset-inline-end: initial !important;\n        transform-origin: var(--float-start);\n        direction: var(--direction);\n        transform-origin: var(--float-start);\n      }\n\n      .mdc-text-field--with-leading-icon.mdc-text-field--filled\n        .mdc-floating-label {\n        max-width: calc(100% - 48px);\n        inset-inline-start: 48px !important;\n        inset-inline-end: initial !important;\n        direction: var(--direction);\n      }\n\n      .mdc-text-field__input[type=\"number\"] {\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          .mdc-text-field__affix--suffix,\n          .mdc-text-field--with-leading-icon,\n          .mdc-text-field__icon--leading,\n          .mdc-floating-label,\n          .mdc-text-field--with-leading-icon.mdc-text-field--filled\n            .mdc-floating-label,\n          .mdc-text-field__input[type=\"number\"] {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n","import { mdiHelpCircle } from \"@mdi/js\";\nimport deepFreeze from \"deep-freeze\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport type { HASSDomEvent } from \"../../../../common/dom/fire_event\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { computeRTLDirection } from \"../../../../common/util/compute_rtl\";\nimport \"../../../../components/ha-circular-progress\";\nimport \"../../../../components/ha-dialog\";\nimport \"../../../../components/ha-header-bar\";\nimport \"../../../../components/ha-icon-button\";\nimport type {\n  LovelaceCardConfig,\n  LovelaceViewConfig,\n} from \"../../../../data/lovelace\";\nimport { showConfirmationDialog } from \"../../../../dialogs/generic/show-dialog-box\";\nimport type { HassDialog } from \"../../../../dialogs/make-dialog-manager\";\nimport { haStyleDialog } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport { showSaveSuccessToast } from \"../../../../util/toast-saved-success\";\nimport { addCard, replaceCard } from \"../config-util\";\nimport { getCardDocumentationURL } from \"../get-card-documentation-url\";\nimport type { ConfigChangedEvent } from \"../hui-element-editor\";\nimport type { GUIModeChangedEvent } from \"../types\";\nimport \"./hui-card-element-editor\";\nimport type { HuiCardElementEditor } from \"./hui-card-element-editor\";\nimport \"./hui-card-preview\";\nimport type { EditCardDialogParams } from \"./show-edit-card-dialog\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"reload-lovelace\": undefined;\n  }\n  // for add event listener\n  interface HTMLElementEventMap {\n    \"reload-lovelace\": HASSDomEvent<undefined>;\n  }\n}\n\n@customElement(\"hui-dialog-edit-card\")\nexport class HuiDialogEditCard\n  extends LitElement\n  implements HassDialog<EditCardDialogParams>\n{\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true }) public large = false;\n\n  @state() private _params?: EditCardDialogParams;\n\n  @state() private _cardConfig?: LovelaceCardConfig;\n\n  @state() private _viewConfig!: LovelaceViewConfig;\n\n  @state() private _saving = false;\n\n  @state() private _error?: string;\n\n  @state() private _guiModeAvailable? = true;\n\n  @query(\"hui-card-element-editor\")\n  private _cardEditorEl?: HuiCardElementEditor;\n\n  @state() private _GUImode = true;\n\n  @state() private _documentationURL?: string;\n\n  @state() private _dirty = false;\n\n  @state() private _isEscapeEnabled = true;\n\n  public async showDialog(params: EditCardDialogParams): Promise<void> {\n    this._params = params;\n    this._GUImode = true;\n    this._guiModeAvailable = true;\n    const [view, card] = params.path;\n    this._viewConfig = params.lovelaceConfig.views[view];\n    this._cardConfig =\n      card !== undefined ? this._viewConfig.cards![card] : params.cardConfig;\n    this.large = false;\n    if (this._cardConfig && !Object.isFrozen(this._cardConfig)) {\n      this._cardConfig = deepFreeze(this._cardConfig);\n    }\n    if (params.cardConfig) {\n      this._dirty = true;\n    }\n  }\n\n  public closeDialog(): boolean {\n    this._isEscapeEnabled = true;\n    window.removeEventListener(\"dialog-closed\", this._enableEscapeKeyClose);\n    window.removeEventListener(\"hass-more-info\", this._disableEscapeKeyClose);\n    if (this._dirty) {\n      this._confirmCancel();\n      return false;\n    }\n    this._params = undefined;\n    this._cardConfig = undefined;\n    this._error = undefined;\n    this._documentationURL = undefined;\n    this._dirty = false;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n    return true;\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    if (\n      !this._cardConfig ||\n      this._documentationURL !== undefined ||\n      !changedProps.has(\"_cardConfig\")\n    ) {\n      return;\n    }\n\n    const oldConfig = changedProps.get(\"_cardConfig\") as LovelaceCardConfig;\n\n    if (oldConfig?.type !== this._cardConfig!.type) {\n      this._documentationURL = getCardDocumentationURL(\n        this.hass,\n        this._cardConfig!.type\n      );\n    }\n  }\n\n  private _enableEscapeKeyClose = (ev: any) => {\n    if (ev.detail.dialog === \"ha-more-info-dialog\") {\n      this._isEscapeEnabled = true;\n    }\n  };\n\n  private _disableEscapeKeyClose = () => {\n    this._isEscapeEnabled = false;\n  };\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n\n    let heading: string;\n    if (this._cardConfig && this._cardConfig.type) {\n      heading = this.hass!.localize(\n        \"ui.panel.lovelace.editor.edit_card.typed_header\",\n        \"type\",\n        this.hass!.localize(\n          `ui.panel.lovelace.editor.card.${this._cardConfig.type}.name`\n        )\n      );\n    } else if (!this._cardConfig) {\n      heading = this._viewConfig.title\n        ? this.hass!.localize(\n            \"ui.panel.lovelace.editor.edit_card.pick_card_view_title\",\n            \"name\",\n            `\"${this._viewConfig.title}\"`\n          )\n        : this.hass!.localize(\"ui.panel.lovelace.editor.edit_card.pick_card\");\n    } else {\n      heading = this.hass!.localize(\n        \"ui.panel.lovelace.editor.edit_card.header\"\n      );\n    }\n\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        .escapeKeyAction=${this._isEscapeEnabled ? undefined : \"\"}\n        @keydown=${this._ignoreKeydown}\n        @closed=${this._cancel}\n        @opened=${this._opened}\n        .heading=${heading}\n      >\n        <div slot=\"heading\">\n          <ha-header-bar>\n            <div slot=\"title\" @click=${this._enlarge}>${heading}</div>\n            ${this._documentationURL !== undefined\n              ? html`\n                  <a\n                    slot=\"actionItems\"\n                    class=\"header_button\"\n                    href=${this._documentationURL}\n                    title=${this.hass!.localize(\"ui.panel.lovelace.menu.help\")}\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                    dir=${computeRTLDirection(this.hass)}\n                  >\n                    <ha-icon-button .path=${mdiHelpCircle}></ha-icon-button>\n                  </a>\n                `\n              : \"\"}\n          </ha-header-bar>\n        </div>\n        <div class=\"content\">\n          <div class=\"element-editor\">\n            <hui-card-element-editor\n              .hass=${this.hass}\n              .lovelace=${this._params.lovelaceConfig}\n              .value=${this._cardConfig}\n              @config-changed=${this._handleConfigChanged}\n              @GUImode-changed=${this._handleGUIModeChanged}\n              @editor-save=${this._save}\n              dialogInitialFocus\n            ></hui-card-element-editor>\n          </div>\n          <div class=\"element-preview\">\n            <hui-card-preview\n              .hass=${this.hass}\n              .config=${this._cardConfig}\n              class=${this._error ? \"blur\" : \"\"}\n            ></hui-card-preview>\n            ${this._error\n              ? html`\n                  <ha-circular-progress\n                    active\n                    alt=\"Can't update card\"\n                  ></ha-circular-progress>\n                `\n              : ``}\n          </div>\n        </div>\n        ${this._cardConfig !== undefined\n          ? html`\n              <mwc-button\n                slot=\"secondaryAction\"\n                @click=${this._toggleMode}\n                .disabled=${!this._guiModeAvailable}\n                class=\"gui-mode-button\"\n              >\n                ${this.hass!.localize(\n                  !this._cardEditorEl || this._GUImode\n                    ? \"ui.panel.lovelace.editor.edit_card.show_code_editor\"\n                    : \"ui.panel.lovelace.editor.edit_card.show_visual_editor\"\n                )}\n              </mwc-button>\n            `\n          : \"\"}\n        <div slot=\"primaryAction\" @click=${this._save}>\n          <mwc-button @click=${this._cancel} dialogInitialFocus>\n            ${this.hass!.localize(\"ui.common.cancel\")}\n          </mwc-button>\n          ${this._cardConfig !== undefined && this._dirty\n            ? html`\n                <mwc-button\n                  ?disabled=${!this._canSave || this._saving}\n                  @click=${this._save}\n                >\n                  ${this._saving\n                    ? html`\n                        <ha-circular-progress\n                          active\n                          title=\"Saving\"\n                          size=\"small\"\n                        ></ha-circular-progress>\n                      `\n                    : this.hass!.localize(\"ui.common.save\")}\n                </mwc-button>\n              `\n            : ``}\n        </div>\n      </ha-dialog>\n    `;\n  }\n\n  private _enlarge() {\n    this.large = !this.large;\n  }\n\n  private _ignoreKeydown(ev: KeyboardEvent) {\n    ev.stopPropagation();\n  }\n\n  private _handleConfigChanged(ev: HASSDomEvent<ConfigChangedEvent>) {\n    this._cardConfig = deepFreeze(ev.detail.config);\n    this._error = ev.detail.error;\n    this._guiModeAvailable = ev.detail.guiModeAvailable;\n    this._dirty = true;\n  }\n\n  private _handleGUIModeChanged(ev: HASSDomEvent<GUIModeChangedEvent>): void {\n    ev.stopPropagation();\n    this._GUImode = ev.detail.guiMode;\n    this._guiModeAvailable = ev.detail.guiModeAvailable;\n  }\n\n  private _toggleMode(): void {\n    this._cardEditorEl?.toggleMode();\n  }\n\n  private _opened() {\n    window.addEventListener(\"dialog-closed\", this._enableEscapeKeyClose);\n    window.addEventListener(\"hass-more-info\", this._disableEscapeKeyClose);\n    this._cardEditorEl?.focusYamlEditor();\n  }\n\n  private get _canSave(): boolean {\n    if (this._saving) {\n      return false;\n    }\n    if (this._cardConfig === undefined) {\n      return false;\n    }\n    if (this._cardEditorEl && this._cardEditorEl.hasError) {\n      return false;\n    }\n    return true;\n  }\n\n  private async _confirmCancel() {\n    // Make sure the open state of this dialog is handled before the open state of confirm dialog\n    await new Promise((resolve) => setTimeout(resolve, 0));\n    const confirm = await showConfirmationDialog(this, {\n      title: this.hass!.localize(\n        \"ui.panel.lovelace.editor.edit_card.unsaved_changes\"\n      ),\n      text: this.hass!.localize(\n        \"ui.panel.lovelace.editor.edit_card.confirm_cancel\"\n      ),\n      dismissText: this.hass!.localize(\"ui.common.stay\"),\n      confirmText: this.hass!.localize(\"ui.common.leave\"),\n    });\n    if (confirm) {\n      this._cancel();\n    }\n  }\n\n  private _cancel(ev?: Event) {\n    if (ev) {\n      ev.stopPropagation();\n    }\n    this._dirty = false;\n    this.closeDialog();\n  }\n\n  private async _save(): Promise<void> {\n    if (!this._canSave) {\n      return;\n    }\n    if (!this._dirty) {\n      this.closeDialog();\n      return;\n    }\n    this._saving = true;\n    await this._params!.saveConfig(\n      this._params!.path.length === 1\n        ? addCard(\n            this._params!.lovelaceConfig,\n            this._params!.path as [number],\n            this._cardConfig!\n          )\n        : replaceCard(\n            this._params!.lovelaceConfig,\n            this._params!.path as [number, number],\n            this._cardConfig!\n          )\n    );\n    this._saving = false;\n    this._dirty = false;\n    showSaveSuccessToast(this, this.hass);\n    this.closeDialog();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        :host {\n          --code-mirror-max-height: calc(100vh - 176px);\n        }\n\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          /* overrule the ha-style-dialog max-height on small screens */\n          ha-dialog {\n            --mdc-dialog-max-height: 100%;\n            height: 100%;\n          }\n        }\n\n        @media all and (min-width: 850px) {\n          ha-dialog {\n            --mdc-dialog-min-width: 845px;\n            --mdc-dialog-max-height: calc(100% - 72px);\n          }\n        }\n\n        ha-dialog {\n          --mdc-dialog-max-width: 845px;\n          --dialog-z-index: 5;\n        }\n\n        @media all and (min-width: 451px) and (min-height: 501px) {\n          ha-dialog {\n            --mdc-dialog-max-width: 90vw;\n          }\n          :host([large]) .content {\n            width: calc(90vw - 48px);\n          }\n        }\n\n        ha-header-bar {\n          --mdc-theme-on-primary: var(--primary-text-color);\n          --mdc-theme-primary: var(--mdc-theme-surface);\n          flex-shrink: 0;\n          border-bottom: 1px solid\n            var(--mdc-dialog-scroll-divider-color, rgba(0, 0, 0, 0.12));\n        }\n\n        .center {\n          margin-left: auto;\n          margin-right: auto;\n        }\n\n        .content {\n          display: flex;\n          flex-direction: column;\n          margin: 0 -10px;\n        }\n        .content hui-card-preview {\n          margin: 4px auto;\n          max-width: 390px;\n        }\n        .content .element-editor {\n          margin: 0 10px;\n        }\n\n        @media (min-width: 1200px) {\n          ha-dialog {\n            --mdc-dialog-max-width: calc(100% - 32px);\n            --mdc-dialog-min-width: 1000px;\n            --dialog-surface-position: fixed;\n            --dialog-surface-top: 40px;\n            --mdc-dialog-max-height: calc(100% - 72px);\n          }\n\n          .content {\n            flex-direction: row;\n          }\n          .content > * {\n            flex-basis: 0;\n            flex-grow: 1;\n            flex-shrink: 1;\n            min-width: 0;\n          }\n          .content hui-card-preview {\n            padding: 8px 10px;\n            margin: auto 0px;\n            max-width: 500px;\n          }\n        }\n        .hidden {\n          display: none;\n        }\n        .element-editor {\n          margin-bottom: 8px;\n        }\n        .blur {\n          filter: blur(2px) grayscale(100%);\n        }\n        .element-preview {\n          position: relative;\n          height: max-content;\n          background: var(--primary-background-color);\n          padding: 4px;\n          border-radius: 4px;\n        }\n        .element-preview ha-circular-progress {\n          top: 50%;\n          left: 50%;\n          position: absolute;\n          z-index: 10;\n        }\n        hui-card-preview {\n          padding-top: 8px;\n          margin-bottom: 4px;\n          display: block;\n          width: 100%;\n          box-sizing: border-box;\n        }\n        .gui-mode-button {\n          margin-right: auto;\n        }\n        .header {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n        }\n        .header_button {\n          color: inherit;\n          text-decoration: none;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-dialog-edit-card\": HuiDialogEditCard;\n  }\n}\n"],"names":[],"sourceRoot":""}