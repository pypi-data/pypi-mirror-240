{"version":3,"file":"7bb7d5ae.js","mappings":";;AAuJA;;AAKA;;;AAoCA;;;;AAQA;;;;AAMA;;AAIA;AACA;;;AAKA;;;;;AAKA;AAOA;;;;AAIA;;AAEA;;;;;AA1OA;AAiPA;;AAIA;;;;AAIA;;;AAKA;;;AAKA;AACA;AACA;AACA;;AAEA;;AAVA;AAaA;;AAIA;;AAGA;AAGA;AACA;AACA;;;;AAKA;;;AAIA;AAhSA;AAoSA;;AAEA;;AA3BA;;AAgCA;;;AAKA;AAOA;;;AAZA;;AAiBA;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAidA;AC5tBA;AACA;AACA;;AANA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/cards/hui-media-control-card.ts","webpack://home-assistant-frontend/./src/panels/lovelace/components/hui-marquee.ts"],"sourcesContent":["import \"@material/mwc-linear-progress/mwc-linear-progress\";\nimport type { LinearProgress } from \"@material/mwc-linear-progress/mwc-linear-progress\";\nimport { mdiDotsVertical, mdiPlayBoxMultiple } from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { applyThemesOnElement } from \"../../../common/dom/apply_themes_on_element\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { supportsFeature } from \"../../../common/entity/supports-feature\";\nimport { extractColors } from \"../../../common/image/extract_color\";\nimport { debounce } from \"../../../common/util/debounce\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-state-icon\";\nimport { showMediaBrowserDialog } from \"../../../components/media-player/show-media-browser-dialog\";\nimport { UNAVAILABLE_STATES } from \"../../../data/entity\";\nimport {\n  cleanupMediaTitle,\n  computeMediaControls,\n  computeMediaDescription,\n  getCurrentProgress,\n  handleMediaControlClick,\n  MediaPickedEvent,\n  MediaPlayerEntity,\n  mediaPlayerPlayMedia,\n  SUPPORT_BROWSE_MEDIA,\n  SUPPORT_SEEK,\n  SUPPORT_TURN_ON,\n} from \"../../../data/media-player\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { findEntities } from \"../common/find-entities\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport { installResizeObserver } from \"../common/install-resize-observer\";\nimport \"../components/hui-marquee\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport type { LovelaceCard, LovelaceCardEditor } from \"../types\";\nimport { MediaControlCardConfig } from \"./types\";\n\n@customElement(\"hui-media-control-card\")\nexport class HuiMediaControlCard extends LitElement implements LovelaceCard {\n  public static async getConfigElement(): Promise<LovelaceCardEditor> {\n    await import(\"../editor/config-elements/hui-media-control-card-editor\");\n    return document.createElement(\"hui-media-control-card-editor\");\n  }\n\n  public static getStubConfig(\n    hass: HomeAssistant,\n    entities: string[],\n    entitiesFallback: string[]\n  ): MediaControlCardConfig {\n    const includeDomains = [\"media_player\"];\n    const maxEntities = 1;\n    const foundEntities = findEntities(\n      hass,\n      maxEntities,\n      entities,\n      entitiesFallback,\n      includeDomains\n    );\n\n    return { type: \"media-control\", entity: foundEntities[0] || \"\" };\n  }\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _config?: MediaControlCardConfig;\n\n  @state() private _foregroundColor?: string;\n\n  @state() private _backgroundColor?: string;\n\n  @state() private _narrow = false;\n\n  @state() private _veryNarrow = false;\n\n  @state() private _cardHeight = 0;\n\n  @query(\"mwc-linear-progress\") private _progressBar?: LinearProgress;\n\n  @state() private _marqueeActive = false;\n\n  private _progressInterval?: number;\n\n  private _resizeObserver?: ResizeObserver;\n\n  public getCardSize(): number {\n    return 3;\n  }\n\n  public setConfig(config: MediaControlCardConfig): void {\n    if (!config.entity || config.entity.split(\".\")[0] !== \"media_player\") {\n      throw new Error(\"Specify an entity from within the media_player domain\");\n    }\n\n    this._config = config;\n  }\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    this.updateComplete.then(() => this._attachObserver());\n\n    if (!this.hass || !this._config) {\n      return;\n    }\n\n    const stateObj = this._stateObj;\n\n    if (!stateObj) {\n      return;\n    }\n\n    if (\n      !this._progressInterval &&\n      this._showProgressBar &&\n      stateObj.state === \"playing\"\n    ) {\n      this._progressInterval = window.setInterval(\n        () => this._updateProgressBar(),\n        1000\n      );\n    }\n  }\n\n  public disconnectedCallback(): void {\n    if (this._progressInterval) {\n      clearInterval(this._progressInterval);\n      this._progressInterval = undefined;\n    }\n    if (this._resizeObserver) {\n      this._resizeObserver.disconnect();\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n    const stateObj = this._stateObj;\n\n    if (!stateObj) {\n      return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        </hui-warning>\n      `;\n    }\n\n    const imageStyle = {\n      \"background-image\": this._image\n        ? `url(${this.hass.hassUrl(this._image)})`\n        : \"none\",\n      width: `${this._cardHeight}px`,\n      \"background-color\": this._backgroundColor || \"\",\n    };\n\n    const gradientStyle = {\n      \"background-image\": `linear-gradient(to right, ${\n        this._backgroundColor\n      }, ${this._backgroundColor + \"00\"})`,\n      width: `${this._cardHeight}px`,\n    };\n\n    const entityState = stateObj.state;\n\n    const isOffState = entityState === \"off\";\n    const isUnavailable =\n      UNAVAILABLE_STATES.includes(entityState) ||\n      (entityState === \"off\" && !supportsFeature(stateObj, SUPPORT_TURN_ON));\n    const hasNoImage = !this._image;\n    const controls = computeMediaControls(stateObj, false);\n    const showControls =\n      controls &&\n      (!this._veryNarrow ||\n        isOffState ||\n        entityState === \"idle\" ||\n        entityState === \"on\");\n\n    const mediaDescription = computeMediaDescription(stateObj);\n    const mediaTitleClean = cleanupMediaTitle(stateObj.attributes.media_title);\n\n    return html`\n      <ha-card>\n        <div\n          class=\"background ${classMap({\n            \"no-image\": hasNoImage,\n            off: isOffState || isUnavailable,\n            unavailable: isUnavailable,\n          })}\"\n        >\n          <div\n            class=\"color-block\"\n            style=${styleMap({\n              \"background-color\": this._backgroundColor || \"\",\n            })}\n          ></div>\n          <div\n            class=\"no-img\"\n            style=${styleMap({\n              \"background-color\": this._backgroundColor || \"\",\n            })}\n          ></div>\n          <div class=\"image\" style=${styleMap(imageStyle)}></div>\n          ${hasNoImage\n            ? \"\"\n            : html`\n                <div\n                  class=\"color-gradient\"\n                  style=${styleMap(gradientStyle)}\n                ></div>\n              `}\n        </div>\n        <div\n          class=\"player ${classMap({\n            \"no-image\": hasNoImage,\n            narrow: this._narrow && !this._veryNarrow,\n            off: isOffState || isUnavailable,\n            \"no-progress\": this._veryNarrow || !this._showProgressBar,\n            \"no-controls\": !showControls,\n          })}\"\n          style=${styleMap({ color: this._foregroundColor || \"\" })}\n        >\n          <div class=\"top-info\">\n            <div class=\"icon-name\">\n              <ha-state-icon class=\"icon\" .state=${stateObj}></ha-state-icon>\n              <div>\n                ${this._config!.name ||\n                computeStateName(this.hass!.states[this._config!.entity])}\n              </div>\n            </div>\n            <div>\n              <ha-icon-button\n                .path=${mdiDotsVertical}\n                .label=${this.hass.localize(\n                  \"ui.panel.lovelace.cards.show_more_info\"\n                )}\n                class=\"more-info\"\n                @click=${this._handleMoreInfo}\n              ></ha-icon-button>\n            </div>\n          </div>\n          ${!isUnavailable &&\n          (mediaDescription || mediaTitleClean || showControls)\n            ? html`\n                <div>\n                  <div class=\"title-controls\">\n                    ${!mediaDescription && !mediaTitleClean\n                      ? \"\"\n                      : html`\n                          <div class=\"media-info\">\n                            <hui-marquee\n                              .text=${mediaTitleClean || mediaDescription}\n                              .active=${this._marqueeActive}\n                              @mouseover=${this._marqueeMouseOver}\n                              @mouseleave=${this._marqueeMouseLeave}\n                            ></hui-marquee>\n                            ${!mediaTitleClean ? \"\" : mediaDescription}\n                          </div>\n                        `}\n                    ${!showControls\n                      ? \"\"\n                      : html`\n                          <div class=\"controls\">\n                            ${controls!.map(\n                              (control) => html`\n                                <ha-icon-button\n                                  .label=${this.hass.localize(\n                                    `ui.card.media_player.${control.action}`\n                                  )}\n                                  .path=${control.icon}\n                                  action=${control.action}\n                                  @click=${this._handleClick}\n                                >\n                                </ha-icon-button>\n                              `\n                            )}\n                            ${supportsFeature(stateObj, SUPPORT_BROWSE_MEDIA)\n                              ? html`\n                                  <ha-icon-button\n                                    class=\"browse-media\"\n                                    .label=${this.hass.localize(\n                                      \"ui.card.media_player.browse_media\"\n                                    )}\n                                    .path=${mdiPlayBoxMultiple}\n                                    @click=${this._handleBrowseMedia}\n                                  ></ha-icon-button>\n                                `\n                              : \"\"}\n                          </div>\n                        `}\n                  </div>\n                  ${!this._showProgressBar\n                    ? \"\"\n                    : html`\n                        <mwc-linear-progress\n                          determinate\n                          style=${styleMap({\n                            \"--mdc-theme-primary\":\n                              this._foregroundColor || \"var(--accent-color)\",\n                            cursor: supportsFeature(stateObj, SUPPORT_SEEK)\n                              ? \"pointer\"\n                              : \"initial\",\n                          })}\n                          @click=${this._handleSeek}\n                        >\n                        </mwc-linear-progress>\n                      `}\n                </div>\n              `\n            : \"\"}\n        </div>\n      </ha-card>\n    `;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected firstUpdated(): void {\n    this._attachObserver();\n  }\n\n  public willUpdate(changedProps: PropertyValues): void {\n    super.willUpdate(changedProps);\n\n    if (!this.hasUpdated) {\n      this._measureCard();\n    }\n\n    if (\n      !this._config ||\n      !this.hass ||\n      (!changedProps.has(\"_config\") && !changedProps.has(\"hass\"))\n    ) {\n      return;\n    }\n\n    const stateObj = this._stateObj;\n\n    if (!stateObj) {\n      if (this._progressInterval) {\n        clearInterval(this._progressInterval);\n        this._progressInterval = undefined;\n      }\n      this._foregroundColor = undefined;\n      this._backgroundColor = undefined;\n      return;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n\n    const oldImage =\n      oldHass?.states[this._config.entity]?.attributes.entity_picture_local ||\n      oldHass?.states[this._config.entity]?.attributes.entity_picture;\n\n    if (!this._image) {\n      this._foregroundColor = undefined;\n      this._backgroundColor = undefined;\n      return;\n    }\n\n    if (this._image !== oldImage) {\n      this._setColors();\n    }\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (\n      !this._config ||\n      !this.hass ||\n      !this._stateObj ||\n      (!changedProps.has(\"_config\") && !changedProps.has(\"hass\"))\n    ) {\n      return;\n    }\n\n    const stateObj = this._stateObj;\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    const oldConfig = changedProps.get(\"_config\") as\n      | MediaControlCardConfig\n      | undefined;\n\n    if (\n      !oldHass ||\n      !oldConfig ||\n      oldHass.themes !== this.hass.themes ||\n      oldConfig.theme !== this._config.theme\n    ) {\n      applyThemesOnElement(this, this.hass.themes, this._config.theme);\n    }\n\n    this._updateProgressBar();\n\n    if (\n      !this._progressInterval &&\n      this._showProgressBar &&\n      stateObj.state === \"playing\"\n    ) {\n      this._progressInterval = window.setInterval(\n        () => this._updateProgressBar(),\n        1000\n      );\n    } else if (\n      this._progressInterval &&\n      (!this._showProgressBar || stateObj.state !== \"playing\")\n    ) {\n      clearInterval(this._progressInterval);\n      this._progressInterval = undefined;\n    }\n  }\n\n  private get _image() {\n    if (!this.hass || !this._config) {\n      return undefined;\n    }\n\n    const stateObj = this._stateObj;\n\n    if (!stateObj) {\n      return undefined;\n    }\n\n    return (\n      stateObj.attributes.entity_picture_local ||\n      stateObj.attributes.entity_picture\n    );\n  }\n\n  private get _showProgressBar() {\n    if (!this.hass || !this._config || this._narrow) {\n      return false;\n    }\n\n    const stateObj = this._stateObj;\n\n    if (!stateObj) {\n      return false;\n    }\n\n    return (\n      (stateObj.state === \"playing\" || stateObj.state === \"paused\") &&\n      \"media_duration\" in stateObj.attributes &&\n      \"media_position\" in stateObj.attributes\n    );\n  }\n\n  private _measureCard() {\n    const card = this.shadowRoot!.querySelector(\"ha-card\");\n    if (!card) {\n      return;\n    }\n    this._narrow = card.offsetWidth < 350;\n    this._veryNarrow = card.offsetWidth < 300;\n    this._cardHeight = card.offsetHeight;\n  }\n\n  private async _attachObserver(): Promise<void> {\n    if (!this._resizeObserver) {\n      await installResizeObserver();\n      this._resizeObserver = new ResizeObserver(\n        debounce(() => this._measureCard(), 250, false)\n      );\n    }\n    const card = this.shadowRoot!.querySelector(\"ha-card\");\n    // If we show an error or warning there is no ha-card\n    if (!card) {\n      return;\n    }\n    this._resizeObserver.observe(card);\n  }\n\n  private _handleMoreInfo(): void {\n    fireEvent(this, \"hass-more-info\", {\n      entityId: this._config!.entity,\n    });\n  }\n\n  private _handleBrowseMedia(): void {\n    showMediaBrowserDialog(this, {\n      action: \"play\",\n      entityId: this._config!.entity,\n      mediaPickedCallback: (pickedMedia: MediaPickedEvent) =>\n        mediaPlayerPlayMedia(\n          this.hass,\n          this._config!.entity,\n          pickedMedia.item.media_content_id,\n          pickedMedia.item.media_content_type\n        ),\n    });\n  }\n\n  private _handleClick(e: MouseEvent): void {\n    handleMediaControlClick(\n      this.hass!,\n      this._stateObj!,\n      (e.currentTarget as HTMLElement).getAttribute(\"action\")!\n    );\n  }\n\n  private _updateProgressBar(): void {\n    if (this._progressBar && this._stateObj?.attributes.media_duration) {\n      this._progressBar.progress =\n        getCurrentProgress(this._stateObj) /\n        this._stateObj!.attributes.media_duration;\n    }\n  }\n\n  private get _stateObj(): MediaPlayerEntity | undefined {\n    return this.hass!.states[this._config!.entity] as MediaPlayerEntity;\n  }\n\n  private _handleSeek(e: MouseEvent): void {\n    const stateObj = this._stateObj!;\n\n    if (!supportsFeature(stateObj, SUPPORT_SEEK)) {\n      return;\n    }\n\n    const progressWidth = (this._progressBar as HTMLElement).offsetWidth;\n\n    const percent = e.offsetX / progressWidth;\n    const position = this._stateObj!.attributes.media_duration! * percent;\n\n    this.hass!.callService(\"media_player\", \"media_seek\", {\n      entity_id: this._config!.entity,\n      seek_position: position,\n    });\n  }\n\n  private async _setColors(): Promise<void> {\n    if (!this._image) {\n      return;\n    }\n\n    try {\n      const { foreground, background } = await extractColors(\n        this.hass.hassUrl(this._image)\n      );\n      this._backgroundColor = background.hex;\n      this._foregroundColor = foreground.hex;\n    } catch (err: any) {\n      // eslint-disable-next-line no-console\n      console.error(\"Error getting Image Colors\", err);\n      this._foregroundColor = undefined;\n      this._backgroundColor = undefined;\n    }\n  }\n\n  private _marqueeMouseOver(): void {\n    if (!this._marqueeActive) {\n      this._marqueeActive = true;\n    }\n  }\n\n  private _marqueeMouseLeave(): void {\n    if (this._marqueeActive) {\n      this._marqueeActive = false;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-card {\n        overflow: hidden;\n        height: 100%;\n      }\n\n      .background {\n        display: flex;\n        position: absolute;\n        top: 0;\n        left: 0;\n        height: 100%;\n        width: 100%;\n        transition: filter 0.8s;\n      }\n\n      .color-block {\n        background-color: var(--primary-color);\n        transition: background-color 0.8s;\n        width: 100%;\n      }\n\n      .color-gradient {\n        position: absolute;\n        background-image: linear-gradient(\n          to right,\n          var(--primary-color),\n          transparent\n        );\n        height: 100%;\n        right: 0;\n\n        opacity: 1;\n        transition: width 0.8s, opacity 0.8s linear 0.8s;\n      }\n\n      .image {\n        background-color: var(--primary-color);\n        background-position: center;\n        background-size: cover;\n        background-repeat: no-repeat;\n        position: absolute;\n        right: 0;\n        height: 100%;\n        opacity: 1;\n        transition: width 0.8s, background-image 0.8s, background-color 0.8s,\n          background-size 0.8s, opacity 0.8s linear 0.8s;\n      }\n\n      .no-image .image {\n        opacity: 0;\n      }\n\n      .no-img {\n        background-color: var(--primary-color);\n        background-size: initial;\n        background-repeat: no-repeat;\n        background-position: center center;\n        padding-bottom: 0;\n        position: absolute;\n        right: 0;\n        height: 100%;\n        background-image: url(\"/static/images/card_media_player_bg.png\");\n        width: 50%;\n        transition: opacity 0.8s, background-color 0.8s;\n      }\n\n      .off .image,\n      .off .color-gradient {\n        opacity: 0;\n        transition: opacity 0s, width 0.8s;\n        width: 0;\n      }\n\n      .unavailable .no-img,\n      .background:not(.off):not(.no-image) .no-img {\n        opacity: 0;\n      }\n\n      .player {\n        position: relative;\n        padding: 16px;\n        height: 100%;\n        box-sizing: border-box;\n        display: flex;\n        flex-direction: column;\n        justify-content: space-between;\n        color: var(--text-primary-color);\n        transition-property: color, padding;\n        transition-duration: 0.4s;\n      }\n\n      .controls {\n        padding: 8px 8px 8px 0;\n        display: flex;\n        justify-content: flex-start;\n        align-items: center;\n        transition: padding, color;\n        transition-duration: 0.4s;\n        margin-left: -12px;\n        margin-inline-start: -12px;\n        margin-inline-end: initial;\n        padding-inline-start: 0;\n        padding-inline-end: 8px;\n        direction: ltr;\n      }\n\n      .controls > div {\n        display: flex;\n        align-items: center;\n      }\n\n      .controls ha-icon-button {\n        --mdc-icon-button-size: 44px;\n        --mdc-icon-size: 30px;\n      }\n\n      ha-icon-button[action=\"media_play\"],\n      ha-icon-button[action=\"media_play_pause\"],\n      ha-icon-button[action=\"media_pause\"],\n      ha-icon-button[action=\"media_stop\"],\n      ha-icon-button[action=\"turn_on\"],\n      ha-icon-button[action=\"turn_off\"] {\n        --mdc-icon-button-size: 56px;\n        --mdc-icon-size: 40px;\n      }\n\n      ha-icon-button.browse-media {\n        position: absolute;\n        right: 4px;\n        --mdc-icon-size: 24px;\n      }\n\n      .top-info {\n        display: flex;\n        justify-content: space-between;\n      }\n\n      .icon-name {\n        display: flex;\n        height: fit-content;\n        align-items: center;\n      }\n\n      .icon-name ha-state-icon {\n        padding-right: 8px;\n        padding-inline-start: initial;\n        padding-inline-end: 8px;\n        direction: var(--direction);\n      }\n\n      .more-info {\n        position: absolute;\n        top: 4px;\n        right: 4px;\n        inset-inline-start: initial;\n        inset-inline-end: 4px;\n        direction: var(--direction);\n      }\n\n      .media-info {\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        overflow: hidden;\n      }\n\n      hui-marquee {\n        font-size: 1.2em;\n        margin: 0px 0 4px;\n      }\n\n      .title-controls {\n        padding-top: 16px;\n      }\n\n      mwc-linear-progress {\n        width: 100%;\n        margin-top: 4px;\n        --mdc-linear-progress-buffer-color: rgba(200, 200, 200, 0.5);\n      }\n\n      .no-image .controls {\n        padding: 0;\n      }\n\n      .off.background {\n        filter: grayscale(1);\n      }\n\n      .narrow .controls,\n      .no-progress .controls {\n        padding-bottom: 0;\n      }\n\n      .narrow ha-icon-button {\n        --mdc-icon-button-size: 40px;\n        --mdc-icon-size: 28px;\n      }\n\n      .narrow ha-icon-button[action=\"media_play\"],\n      .narrow ha-icon-button[action=\"media_play_pause\"],\n      .narrow ha-icon-button[action=\"media_pause\"],\n      .narrow ha-icon-button[action=\"turn_on\"] {\n        --mdc-icon-button-size: 50px;\n        --mdc-icon-size: 36px;\n      }\n\n      .narrow ha-icon-button.browse-media {\n        --mdc-icon-size: 24px;\n      }\n\n      .no-progress.player:not(.no-controls) {\n        padding-bottom: 0px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-media-control-card\": HuiMediaControlCard;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"hui-marquee\")\nclass HuiMarquee extends LitElement {\n  @property() public text?: string;\n\n  @property({ type: Boolean }) public active?: boolean;\n\n  @property({ reflect: true, type: Boolean, attribute: \"animating\" })\n  private _animating = false;\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n\n    // eslint-disable-next-line wc/no-self-class\n    this.addEventListener(\"mouseover\", () => this.classList.add(\"hovering\"), {\n      // Capture because we need to run before a parent sets active on us.\n      // Hovering will disable the overflow, allowing us to calc if we overflow.\n      capture: true,\n    });\n    // eslint-disable-next-line wc/no-self-class\n    this.addEventListener(\"mouseout\", () => this.classList.remove(\"hovering\"));\n  }\n\n  protected updated(changedProperties: PropertyValues): void {\n    super.updated(changedProperties);\n\n    if (changedProperties.has(\"text\") && this._animating) {\n      this._animating = false;\n    }\n\n    if (\n      changedProperties.has(\"active\") &&\n      this.active &&\n      this.offsetWidth < this.scrollWidth\n    ) {\n      this._animating = true;\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this.text) {\n      return html``;\n    }\n\n    return html`\n      <div class=\"marquee-inner\" @animationiteration=${this._onIteration}>\n        <span>${this.text}</span>\n        ${this._animating ? html` <span>${this.text}</span> ` : \"\"}\n      </div>\n    `;\n  }\n\n  private _onIteration() {\n    if (!this.active) {\n      this._animating = false;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n        position: relative;\n        align-items: center;\n        height: 1.2em;\n        contain: strict;\n      }\n\n      .marquee-inner {\n        position: absolute;\n        left: 0;\n        right: 0;\n        text-overflow: ellipsis;\n        overflow: hidden;\n      }\n\n      :host(.hovering) .marquee-inner {\n        text-overflow: initial;\n        overflow: initial;\n      }\n\n      :host([animating]) .marquee-inner {\n        left: initial;\n        right: initial;\n        animation: marquee 10s linear infinite;\n      }\n\n      :host([animating]) .marquee-inner span {\n        padding-right: 16px;\n      }\n\n      @keyframes marquee {\n        0% {\n          transform: translateX(0%);\n        }\n        100% {\n          transform: translateX(-50%);\n        }\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-marquee\": HuiMarquee;\n  }\n}\n"],"names":[],"sourceRoot":""}