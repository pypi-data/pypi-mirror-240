{"version":3,"file":"12c2542b.js","mappings":";;AA2FA;AACA;AACA;AACA;AACA;;;;AAIA;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAIA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-picture-glance-card-editor.ts"],"sourcesContent":["import { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { array, assert, assign, object, optional, string } from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-form/ha-form\";\nimport type { SchemaUnion } from \"../../../../components/ha-form/types\";\nimport type { ActionConfig } from \"../../../../data/lovelace\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { PictureGlanceCardConfig } from \"../../cards/types\";\nimport \"../../components/hui-action-editor\";\nimport \"../../components/hui-entity-editor\";\nimport type { EntityConfig } from \"../../entity-rows/types\";\nimport type { LovelaceCardEditor } from \"../../types\";\nimport { processEditorEntities } from \"../process-editor-entities\";\nimport { actionConfigStruct } from \"../structs/action-struct\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { entitiesConfigStruct } from \"../structs/entities-struct\";\nimport type { EditorTarget } from \"../types\";\nimport { configElementStyle } from \"./config-elements-style\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    title: optional(string()),\n    entity: optional(string()),\n    image: optional(string()),\n    camera_image: optional(string()),\n    camera_view: optional(string()),\n    aspect_ratio: optional(string()),\n    tap_action: optional(actionConfigStruct),\n    hold_action: optional(actionConfigStruct),\n    entities: array(entitiesConfigStruct),\n    theme: optional(string()),\n  })\n);\n\nconst actions = [\"more-info\", \"toggle\", \"navigate\", \"call-service\", \"none\"];\n\nconst SCHEMA = [\n  { name: \"title\", selector: { text: {} } },\n  { name: \"image\", selector: { text: {} } },\n  { name: \"camera_image\", selector: { entity: { domain: \"camera\" } } },\n  {\n    name: \"\",\n    type: \"grid\",\n    schema: [\n      {\n        name: \"camera_view\",\n        selector: { select: { options: [\"auto\", \"live\"] } },\n      },\n      { name: \"aspect_ratio\", selector: { text: {} } },\n    ],\n  },\n  { name: \"entity\", selector: { entity: {} } },\n  { name: \"theme\", selector: { theme: {} } },\n] as const;\n\n@customElement(\"hui-picture-glance-card-editor\")\nexport class HuiPictureGlanceCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: PictureGlanceCardConfig;\n\n  @state() private _configEntities?: EntityConfig[];\n\n  public setConfig(config: PictureGlanceCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n    this._configEntities = processEditorEntities(config.entities);\n  }\n\n  get _tap_action(): ActionConfig {\n    return this._config!.tap_action || { action: \"toggle\" };\n  }\n\n  get _hold_action(): ActionConfig {\n    return this._config!.hold_action || { action: \"more-info\" };\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const data = { camera_view: \"auto\", ...this._config };\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${data}\n        .schema=${SCHEMA}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n      <div class=\"card-config\">\n        <hui-action-editor\n          .label=${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.tap_action\"\n          )}\n          .hass=${this.hass}\n          .config=${this._tap_action}\n          .actions=${actions}\n          .configValue=${\"tap_action\"}\n          @value-changed=${this._valueChanged}\n        ></hui-action-editor>\n        <hui-action-editor\n          .label=${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.hold_action\"\n          )}\n          .hass=${this.hass}\n          .config=${this._hold_action}\n          .actions=${actions}\n          .configValue=${\"hold_action\"}\n          @value-changed=${this._valueChanged}\n        ></hui-action-editor>\n        <hui-entity-editor\n          .hass=${this.hass}\n          .entities=${this._configEntities}\n          @entities-changed=${this._changed}\n        ></hui-entity-editor>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    fireEvent(this, \"config-changed\", { config: ev.detail.value });\n  }\n\n  private _changed(ev: CustomEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n    const value = ev.detail.value;\n\n    if (ev.detail && ev.detail.entities) {\n      this._config = { ...this._config, entities: ev.detail.entities };\n\n      this._configEntities = processEditorEntities(this._config.entities);\n    } else if (target.configValue) {\n      if (this[`_${target.configValue}`] === value) {\n        return;\n      }\n\n      if (value !== false && !value) {\n        this._config = { ...this._config };\n        delete this._config[target.configValue!];\n      } else {\n        this._config = {\n          ...this._config,\n          [target.configValue!]: value,\n        };\n      }\n    }\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _computeLabelCallback = (schema: SchemaUnion<typeof SCHEMA>) => {\n    switch (schema.name) {\n      case \"theme\":\n        return `${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.theme\"\n        )} (${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.config.optional\"\n        )})`;\n      case \"entity\":\n        return this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.picture-glance.state_entity\"\n        );\n      default:\n        return this.hass!.localize(\n          `ui.panel.lovelace.editor.card.generic.${schema.name}`\n        );\n    }\n  };\n\n  static styles: CSSResultGroup = configElementStyle;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-picture-glance-card-editor\": HuiPictureGlanceCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}