{"version":3,"file":"2d111dc6.js","mappings":";AAiPA;AACA;AACA;AACA;AACA;;;AATA;;AA8GA;AACA;;AAKA;;AAGA;AACA;AAGA;;;AAIA;AAEA;AACA;AAGA;;;;AAoBA;AACA;AACA;AACA;AACA;;AAEA;AAGA;AACA;AACA;;AAGA;;;AA8BA;AACA;;AAEA;AACA;;;AAGA;;AAGA;AACA;AAEA;;AAEA;AAEA;AAlcA;;AAqcA;AACA;AACA;;AAIA;AAKA;;AAIA;AACA;AAWA;;AAEA;;AAEA;;AAQA;AACA;;AANA;;;AASA;;;AAMA;AAtfA;;;AA6dA;AA+BA;;;;;;AAmBA;AACA;;;AAhhBA;AAohBA;;AAIA;;AAEA;AAEA;AACA;;AAGA;;AAEA;;AAIA;;AASA;AACA;;;;;AAKA;;AArjBA;AAwjBA;;AAGA;;AAEA;;AAGA;;AAEA;;AAKA;AAIA;;;;;AASA;AACA;AACA;;;;;AAKA;AACA;;;;AAIA;;;AAIA;;;AAQA;;;AAKA;AACA;AACA;;;;;AAnnBA;;;AA2nBA;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAseA;AC9iCA;;AAIA;AAEA;;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA","sources":["webpack://home-assistant-frontend/./src/components/ha-sidebar.ts","webpack://home-assistant-frontend/./src/components/user/ha-user-badge.ts"],"sourcesContent":["import \"@material/mwc-button/mwc-button\";\nimport {\n  mdiBell,\n  mdiCalendar,\n  mdiCart,\n  mdiCellphoneCog,\n  mdiChartBox,\n  mdiClose,\n  mdiCog,\n  mdiFormatListBulletedType,\n  mdiHammer,\n  mdiLightningBolt,\n  mdiMenu,\n  mdiMenuOpen,\n  mdiPlayBoxMultiple,\n  mdiPlus,\n  mdiTooltipAccount,\n  mdiViewDashboard,\n} from \"@mdi/js\";\nimport \"@polymer/paper-item/paper-icon-item\";\nimport type { PaperIconItemElement } from \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResult,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n} from \"lit\";\nimport { customElement, eventOptions, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { guard } from \"lit/directives/guard\";\nimport memoizeOne from \"memoize-one\";\nimport { LocalStorage } from \"../common/decorators/local-storage\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { toggleAttribute } from \"../common/dom/toggle_attribute\";\nimport { stringCompare } from \"../common/string/compare\";\nimport { computeRTL } from \"../common/util/compute_rtl\";\nimport { throttle } from \"../common/util/throttle\";\nimport { ActionHandlerDetail } from \"../data/lovelace\";\nimport {\n  PersistentNotification,\n  subscribeNotifications,\n} from \"../data/persistent_notification\";\nimport { subscribeRepairsIssueRegistry } from \"../data/repairs\";\nimport { updateCanInstall, UpdateEntity } from \"../data/update\";\nimport { SubscribeMixin } from \"../mixins/subscribe-mixin\";\nimport { actionHandler } from \"../panels/lovelace/common/directives/action-handler-directive\";\nimport { loadSortable, SortableInstance } from \"../resources/sortable.ondemand\";\nimport { haStyleScrollbar } from \"../resources/styles\";\nimport type { HomeAssistant, PanelInfo, Route } from \"../types\";\nimport \"./ha-icon\";\nimport \"./ha-icon-button\";\nimport \"./ha-menu-button\";\nimport \"./ha-svg-icon\";\nimport \"./user/ha-user-badge\";\n\nconst SHOW_AFTER_SPACER = [\"config\", \"developer-tools\"];\n\nconst SUPPORT_SCROLL_IF_NEEDED = \"scrollIntoViewIfNeeded\" in document.body;\n\nconst SORT_VALUE_URL_PATHS = {\n  energy: 1,\n  map: 2,\n  logbook: 3,\n  history: 4,\n  \"developer-tools\": 9,\n  config: 11,\n};\n\nconst PANEL_ICONS = {\n  calendar: mdiCalendar,\n  \"developer-tools\": mdiHammer,\n  energy: mdiLightningBolt,\n  history: mdiChartBox,\n  logbook: mdiFormatListBulletedType,\n  lovelace: mdiViewDashboard,\n  map: mdiTooltipAccount,\n  \"media-browser\": mdiPlayBoxMultiple,\n  \"shopping-list\": mdiCart,\n};\n\nconst panelSorter = (\n  reverseSort: string[],\n  defaultPanel: string,\n  a: PanelInfo,\n  b: PanelInfo\n) => {\n  const indexA = reverseSort.indexOf(a.url_path);\n  const indexB = reverseSort.indexOf(b.url_path);\n  if (indexA !== indexB) {\n    if (indexA < indexB) {\n      return 1;\n    }\n    return -1;\n  }\n  return defaultPanelSorter(defaultPanel, a, b);\n};\n\nconst defaultPanelSorter = (\n  defaultPanel: string,\n  a: PanelInfo,\n  b: PanelInfo\n) => {\n  // Put all the Lovelace at the top.\n  const aLovelace = a.component_name === \"lovelace\";\n  const bLovelace = b.component_name === \"lovelace\";\n\n  if (a.url_path === defaultPanel) {\n    return -1;\n  }\n  if (b.url_path === defaultPanel) {\n    return 1;\n  }\n\n  if (aLovelace && bLovelace) {\n    return stringCompare(a.title!, b.title!);\n  }\n  if (aLovelace && !bLovelace) {\n    return -1;\n  }\n  if (bLovelace) {\n    return 1;\n  }\n\n  const aBuiltIn = a.url_path in SORT_VALUE_URL_PATHS;\n  const bBuiltIn = b.url_path in SORT_VALUE_URL_PATHS;\n\n  if (aBuiltIn && bBuiltIn) {\n    return SORT_VALUE_URL_PATHS[a.url_path] - SORT_VALUE_URL_PATHS[b.url_path];\n  }\n  if (aBuiltIn) {\n    return -1;\n  }\n  if (bBuiltIn) {\n    return 1;\n  }\n  // both not built in, sort by title\n  return stringCompare(a.title!, b.title!);\n};\n\nconst computePanels = memoizeOne(\n  (\n    panels: HomeAssistant[\"panels\"],\n    defaultPanel: HomeAssistant[\"defaultPanel\"],\n    panelsOrder: string[],\n    hiddenPanels: string[]\n  ): [PanelInfo[], PanelInfo[]] => {\n    if (!panels) {\n      return [[], []];\n    }\n\n    const beforeSpacer: PanelInfo[] = [];\n    const afterSpacer: PanelInfo[] = [];\n\n    Object.values(panels).forEach((panel) => {\n      if (\n        hiddenPanels.includes(panel.url_path) ||\n        (!panel.title && panel.url_path !== defaultPanel)\n      ) {\n        return;\n      }\n      (SHOW_AFTER_SPACER.includes(panel.url_path)\n        ? afterSpacer\n        : beforeSpacer\n      ).push(panel);\n    });\n\n    const reverseSort = [...panelsOrder].reverse();\n\n    beforeSpacer.sort((a, b) => panelSorter(reverseSort, defaultPanel, a, b));\n    afterSpacer.sort((a, b) => panelSorter(reverseSort, defaultPanel, a, b));\n\n    return [beforeSpacer, afterSpacer];\n  }\n);\n\n@customElement(\"ha-sidebar\")\nclass HaSidebar extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @property() public route!: Route;\n\n  @property({ type: Boolean }) public alwaysExpand = false;\n\n  @property({ type: Boolean }) public editMode = false;\n\n  @state() private _notifications?: PersistentNotification[];\n\n  @state() private _updatesCount = 0;\n\n  @state() private _issuesCount = 0;\n\n  @state() private _renderEmptySortable = false;\n\n  private _mouseLeaveTimeout?: number;\n\n  private _tooltipHideTimeout?: number;\n\n  private _recentKeydownActiveUntil = 0;\n\n  private sortableStyleLoaded = false;\n\n  // @ts-ignore\n  @LocalStorage(\"sidebarPanelOrder\", true, {\n    attribute: false,\n  })\n  private _panelOrder: string[] = [];\n\n  // @ts-ignore\n  @LocalStorage(\"sidebarHiddenPanels\", true, {\n    attribute: false,\n  })\n  private _hiddenPanels: string[] = [];\n\n  private _sortable?: SortableInstance;\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return this.hass.user?.is_admin\n      ? [\n          subscribeRepairsIssueRegistry(this.hass.connection!, (repairs) => {\n            this._issuesCount = repairs.issues.filter(\n              (issue) => !issue.ignored\n            ).length;\n          }),\n        ]\n      : [];\n  }\n\n  protected render() {\n    if (!this.hass) {\n      return html``;\n    }\n\n    // prettier-ignore\n    return html`\n      ${this._renderHeader()}\n      ${this._renderAllPanels()}\n      ${this._renderDivider()}\n      ${this._renderNotifications()}\n      ${this._renderUserItem()}\n      <div disabled class=\"bottom-spacer\"></div>\n      <div class=\"tooltip\"></div>\n    `;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    if (\n      changedProps.has(\"expanded\") ||\n      changedProps.has(\"narrow\") ||\n      changedProps.has(\"alwaysExpand\") ||\n      changedProps.has(\"_externalConfig\") ||\n      changedProps.has(\"_updatesCount\") ||\n      changedProps.has(\"_issuesCount\") ||\n      changedProps.has(\"_notifications\") ||\n      changedProps.has(\"editMode\") ||\n      changedProps.has(\"_renderEmptySortable\") ||\n      changedProps.has(\"_hiddenPanels\") ||\n      (changedProps.has(\"_panelOrder\") && !this.editMode)\n    ) {\n      return true;\n    }\n    if (!this.hass || !changedProps.has(\"hass\")) {\n      return false;\n    }\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant;\n    if (!oldHass) {\n      return true;\n    }\n    const hass = this.hass;\n    return (\n      hass.panels !== oldHass.panels ||\n      hass.panelUrl !== oldHass.panelUrl ||\n      hass.user !== oldHass.user ||\n      hass.localize !== oldHass.localize ||\n      hass.locale !== oldHass.locale ||\n      hass.states !== oldHass.states ||\n      hass.defaultPanel !== oldHass.defaultPanel\n    );\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    subscribeNotifications(this.hass.connection, (notifications) => {\n      this._notifications = notifications;\n    });\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    if (changedProps.has(\"alwaysExpand\")) {\n      toggleAttribute(this, \"expanded\", this.alwaysExpand);\n    }\n    if (changedProps.has(\"editMode\")) {\n      if (this.editMode) {\n        this._activateEditMode();\n      } else {\n        this._deactivateEditMode();\n      }\n    }\n    if (!changedProps.has(\"hass\")) {\n      return;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (!oldHass || oldHass.locale !== this.hass.locale) {\n      toggleAttribute(this, \"rtl\", computeRTL(this.hass));\n    }\n\n    this._calculateCounts();\n\n    if (!SUPPORT_SCROLL_IF_NEEDED) {\n      return;\n    }\n    if (!oldHass || oldHass.panelUrl !== this.hass.panelUrl) {\n      const selectedEl = this.shadowRoot!.querySelector(\".iron-selected\");\n      if (selectedEl) {\n        // @ts-ignore\n        selectedEl.scrollIntoViewIfNeeded();\n      }\n    }\n  }\n\n  private _calculateCounts = throttle(() => {\n    let updateCount = 0;\n\n    for (const entityId of Object.keys(this.hass.states)) {\n      if (\n        entityId.startsWith(\"update.\") &&\n        updateCanInstall(this.hass.states[entityId] as UpdateEntity)\n      ) {\n        updateCount++;\n      }\n    }\n\n    this._updatesCount = updateCount;\n  }, 5000);\n\n  private _renderHeader() {\n    return html`<div\n      class=\"menu\"\n      @action=${this._handleAction}\n      .actionHandler=${actionHandler({\n        hasHold: !this.editMode,\n        disabled: this.editMode,\n      })}\n    >\n      ${!this.narrow\n        ? html`\n            <ha-icon-button\n              .label=${this.hass.localize(\"ui.sidebar.sidebar_toggle\")}\n              .path=${this.hass.dockedSidebar === \"docked\"\n                ? mdiMenuOpen\n                : mdiMenu}\n              @action=${this._toggleSidebar}\n            ></ha-icon-button>\n          `\n        : \"\"}\n      ${this.editMode\n        ? html`<mwc-button outlined @click=${this._closeEditMode}>\n            ${this.hass.localize(\"ui.sidebar.done\")}\n          </mwc-button>`\n        : html`<div class=\"title\"\" style=\"padding-top: 5px\"><img src=\"/static/images/logo-black.svg\" height=\"50px\" /></div>`}\n    </div>`;\n  }\n\n  private _renderAllPanels() {\n    const [beforeSpacer, afterSpacer] = computePanels(\n      this.hass.panels,\n      this.hass.defaultPanel,\n      this._panelOrder,\n      this._hiddenPanels\n    );\n\n    // Show the supervisor as beeing part of configuration\n    const selectedPanel = this.route.path?.startsWith(\"/hassio/\")\n      ? \"config\"\n      : this.hass.panelUrl;\n\n    // prettier-ignore\n    return html`\n      <paper-listbox\n        attr-for-selected=\"data-panel\"\n        class=\"ha-scrollbar\"\n        .selected=${selectedPanel}\n        @focusin=${this._listboxFocusIn}\n        @focusout=${this._listboxFocusOut}\n        @scroll=${this._listboxScroll}\n        @keydown=${this._listboxKeydown}\n      >\n        ${this.editMode\n          ? this._renderPanelsEdit(beforeSpacer)\n          : this._renderPanels(beforeSpacer)}\n        ${this._renderSpacer()}\n        ${this._renderPanels(afterSpacer)}\n        ${this._renderExternalConfiguration()}\n      </paper-listbox>\n    `;\n  }\n\n  private _renderPanels(panels: PanelInfo[]) {\n    return panels.map((panel) =>\n      this._renderPanel(\n        panel.url_path,\n        panel.url_path === this.hass.defaultPanel\n          ? panel.title || this.hass.localize(\"panel.states\")\n          : this.hass.localize(`panel.${panel.title}`) || panel.title,\n        panel.icon,\n        panel.url_path === this.hass.defaultPanel && !panel.icon\n          ? PANEL_ICONS.lovelace\n          : panel.url_path in PANEL_ICONS\n          ? PANEL_ICONS[panel.url_path]\n          : undefined\n      )\n    );\n  }\n\n  private _renderPanel(\n    urlPath: string,\n    title: string | null,\n    icon?: string | null,\n    iconPath?: string | null\n  ) {\n    return urlPath === \"config\"\n      ? this._renderConfiguration(title)\n      : html`\n          <a\n            role=\"option\"\n            href=${`/${urlPath}`}\n            data-panel=${urlPath}\n            tabindex=\"-1\"\n            @mouseenter=${this._itemMouseEnter}\n            @mouseleave=${this._itemMouseLeave}\n          >\n            <paper-icon-item>\n              ${iconPath\n                ? html`<ha-svg-icon\n                    slot=\"item-icon\"\n                    .path=${iconPath}\n                  ></ha-svg-icon>`\n                : html`<ha-icon slot=\"item-icon\" .icon=${icon}></ha-icon>`}\n              <span class=\"item-text\">${title}</span>\n            </paper-icon-item>\n            ${this.editMode\n              ? html`<ha-icon-button\n                  .label=${this.hass.localize(\"ui.sidebar.hide_panel\")}\n                  .path=${mdiClose}\n                  class=\"hide-panel\"\n                  .panel=${urlPath}\n                  @click=${this._hidePanel}\n                ></ha-icon-button>`\n              : \"\"}\n          </a>\n        `;\n  }\n\n  private _renderPanelsEdit(beforeSpacer: PanelInfo[]) {\n    // prettier-ignore\n    return html`<div id=\"sortable\">\n        ${guard([this._hiddenPanels, this._renderEmptySortable], () =>\n          this._renderEmptySortable ? \"\" : this._renderPanels(beforeSpacer)\n        )}\n      </div>\n      ${this._renderSpacer()}\n      ${this._renderHiddenPanels()} `;\n  }\n\n  private _renderHiddenPanels() {\n    return html`${this._hiddenPanels.length\n      ? html`${this._hiddenPanels.map((url) => {\n          const panel = this.hass.panels[url];\n          if (!panel) {\n            return \"\";\n          }\n          return html`<paper-icon-item\n            @click=${this._unhidePanel}\n            class=\"hidden-panel\"\n            .panel=${url}\n          >\n            ${panel.url_path === this.hass.defaultPanel && !panel.icon\n              ? html`<ha-svg-icon\n                  slot=\"item-icon\"\n                  .path=${PANEL_ICONS.lovelace}\n                ></ha-svg-icon>`\n              : panel.url_path in PANEL_ICONS\n              ? html`<ha-svg-icon\n                  slot=\"item-icon\"\n                  .path=${PANEL_ICONS[panel.url_path]}\n                ></ha-svg-icon>`\n              : html`<ha-icon slot=\"item-icon\" .icon=${panel.icon}></ha-icon>`}\n            <span class=\"item-text\"\n              >${panel.url_path === this.hass.defaultPanel\n                ? this.hass.localize(\"panel.states\")\n                : this.hass.localize(`panel.${panel.title}`) ||\n                  panel.title}</span\n            >\n            <ha-icon-button\n              .label=${this.hass.localize(\"ui.sidebar.show_panel\")}\n              .path=${mdiPlus}\n              class=\"show-panel\"\n            ></ha-icon-button>\n          </paper-icon-item>`;\n        })}\n        ${this._renderSpacer()}`\n      : \"\"}`;\n  }\n\n  private _renderDivider() {\n    return html`<div class=\"divider\"></div>`;\n  }\n\n  private _renderSpacer() {\n    return html`<div class=\"spacer\" disabled></div>`;\n  }\n\n  private _renderConfiguration(title: string | null) {\n    return html`<a\n      class=\"configuration-container\"\n      role=\"option\"\n      href=\"/config\"\n      data-panel=\"config\"\n      tabindex=\"-1\"\n      @mouseenter=${this._itemMouseEnter}\n      @mouseleave=${this._itemMouseLeave}\n    >\n      <paper-icon-item class=\"configuration\" role=\"option\">\n        <ha-svg-icon slot=\"item-icon\" .path=${mdiCog}></ha-svg-icon>\n        ${!this.alwaysExpand &&\n        (this._updatesCount > 0 || this._issuesCount > 0)\n          ? html`\n              <span class=\"configuration-badge\" slot=\"item-icon\">\n                ${this._updatesCount + this._issuesCount}\n              </span>\n            `\n          : \"\"}\n        <span class=\"item-text\">${title}</span>\n        ${this.alwaysExpand && (this._updatesCount > 0 || this._issuesCount > 0)\n          ? html`\n              <span class=\"configuration-badge\"\n                >${this._updatesCount + this._issuesCount}</span\n              >\n            `\n          : \"\"}\n      </paper-icon-item>\n    </a>`;\n  }\n\n  private _renderNotifications() {\n    const notificationCount = this._notifications\n      ? this._notifications.length\n      : 0;\n\n    return html`<div\n      class=\"notifications-container\"\n      @mouseenter=${this._itemMouseEnter}\n      @mouseleave=${this._itemMouseLeave}\n    >\n      <paper-icon-item\n        class=\"notifications\"\n        role=\"option\"\n        @click=${this._handleShowNotificationDrawer}\n      >\n        <ha-svg-icon slot=\"item-icon\" .path=${mdiBell}></ha-svg-icon>\n        ${!this.alwaysExpand && notificationCount > 0\n          ? html`\n              <span class=\"notification-badge\" slot=\"item-icon\">\n                ${notificationCount}\n              </span>\n            `\n          : \"\"}\n        <span class=\"item-text\">\n          ${this.hass.localize(\"ui.notification_drawer.title\")}\n        </span>\n        ${this.alwaysExpand && notificationCount > 0\n          ? html` <span class=\"notification-badge\">${notificationCount}</span> `\n          : \"\"}\n      </paper-icon-item>\n    </div>`;\n  }\n\n  private _renderUserItem() {\n    return html`<a\n      class=${classMap({\n        profile: true,\n        // Mimick behavior that paper-listbox provides\n        \"iron-selected\": this.hass.panelUrl === \"profile\",\n      })}\n      href=\"/profile\"\n      data-panel=\"panel\"\n      tabindex=\"-1\"\n      role=\"option\"\n      aria-label=${this.hass.localize(\"panel.profile\")}\n      @mouseenter=${this._itemMouseEnter}\n      @mouseleave=${this._itemMouseLeave}\n    >\n      <paper-icon-item>\n        <ha-user-badge\n          slot=\"item-icon\"\n          .user=${this.hass.user}\n          .hass=${this.hass}\n        ></ha-user-badge>\n\n        <span class=\"item-text\">\n          ${this.hass.user ? this.hass.user.name : \"\"}\n        </span>\n      </paper-icon-item>\n    </a>`;\n  }\n\n  private _renderExternalConfiguration() {\n    return html`${!this.hass.user?.is_admin &&\n    this.hass.auth.external?.config.hasSettingsScreen\n      ? html`\n          <a\n            role=\"option\"\n            aria-label=${this.hass.localize(\n              \"ui.sidebar.external_app_configuration\"\n            )}\n            href=\"#external-app-configuration\"\n            tabindex=\"-1\"\n            @click=${this._handleExternalAppConfiguration}\n            @mouseenter=${this._itemMouseEnter}\n            @mouseleave=${this._itemMouseLeave}\n          >\n            <paper-icon-item>\n              <ha-svg-icon\n                slot=\"item-icon\"\n                .path=${mdiCellphoneCog}\n              ></ha-svg-icon>\n              <span class=\"item-text\">\n                ${this.hass.localize(\"ui.sidebar.external_app_configuration\")}\n              </span>\n            </paper-icon-item>\n          </a>\n        `\n      : \"\"}`;\n  }\n\n  private _handleExternalAppConfiguration(ev: Event) {\n    ev.preventDefault();\n    this.hass.auth.external!.fireMessage({\n      type: \"config_screen/show\",\n    });\n  }\n\n  private get _tooltip() {\n    return this.shadowRoot!.querySelector(\".tooltip\")! as HTMLDivElement;\n  }\n\n  private _handleAction(ev: CustomEvent<ActionHandlerDetail>) {\n    if (ev.detail.action !== \"hold\") {\n      return;\n    }\n\n    fireEvent(this, \"hass-edit-sidebar\", { editMode: true });\n  }\n\n  private async _activateEditMode() {\n    await Promise.all([this._loadSortableStyle(), this._createSortable()]);\n  }\n\n  private async _loadSortableStyle() {\n    if (this.sortableStyleLoaded) return;\n\n    const sortStylesImport = await import(\"../resources/ha-sortable-style\");\n\n    const style = document.createElement(\"style\");\n    style.innerHTML = (sortStylesImport.sortableStyles as CSSResult).cssText;\n    this.shadowRoot!.appendChild(style);\n\n    this.sortableStyleLoaded = true;\n    await this.updateComplete;\n  }\n\n  private async _createSortable() {\n    const Sortable = await loadSortable();\n    this._sortable = new Sortable(\n      this.shadowRoot!.getElementById(\"sortable\")!,\n      {\n        animation: 150,\n        fallbackClass: \"sortable-fallback\",\n        dataIdAttr: \"data-panel\",\n        handle: \"paper-icon-item\",\n        onSort: async () => {\n          this._panelOrder = this._sortable!.toArray();\n        },\n      }\n    );\n  }\n\n  private _deactivateEditMode() {\n    this._sortable?.destroy();\n    this._sortable = undefined;\n  }\n\n  private _closeEditMode() {\n    fireEvent(this, \"hass-edit-sidebar\", { editMode: false });\n  }\n\n  private async _hidePanel(ev: Event) {\n    ev.preventDefault();\n    const panel = (ev.currentTarget as any).panel;\n    if (this._hiddenPanels.includes(panel)) {\n      return;\n    }\n    // Make a copy for Memoize\n    this._hiddenPanels = [...this._hiddenPanels, panel];\n    this._renderEmptySortable = true;\n    await this.updateComplete;\n    const container = this.shadowRoot!.getElementById(\"sortable\")!;\n    while (container.lastElementChild) {\n      container.removeChild(container.lastElementChild);\n    }\n    this._renderEmptySortable = false;\n  }\n\n  private async _unhidePanel(ev: Event) {\n    ev.preventDefault();\n    const panel = (ev.currentTarget as any).panel;\n    this._hiddenPanels = this._hiddenPanels.filter(\n      (hidden) => hidden !== panel\n    );\n    this._renderEmptySortable = true;\n    await this.updateComplete;\n    const container = this.shadowRoot!.getElementById(\"sortable\")!;\n    while (container.lastElementChild) {\n      container.removeChild(container.lastElementChild);\n    }\n    this._renderEmptySortable = false;\n  }\n\n  private _itemMouseEnter(ev: MouseEvent) {\n    // On keypresses on the listbox, we're going to ignore mouse enter events\n    // for 100ms so that we ignore it when pressing down arrow scrolls the\n    // sidebar causing the mouse to hover a new icon\n    if (\n      this.alwaysExpand ||\n      new Date().getTime() < this._recentKeydownActiveUntil\n    ) {\n      return;\n    }\n    if (this._mouseLeaveTimeout) {\n      clearTimeout(this._mouseLeaveTimeout);\n      this._mouseLeaveTimeout = undefined;\n    }\n    this._showTooltip(ev.currentTarget as PaperIconItemElement);\n  }\n\n  private _itemMouseLeave() {\n    if (this._mouseLeaveTimeout) {\n      clearTimeout(this._mouseLeaveTimeout);\n    }\n    this._mouseLeaveTimeout = window.setTimeout(() => {\n      this._hideTooltip();\n    }, 500);\n  }\n\n  private _listboxFocusIn(ev) {\n    if (this.alwaysExpand || ev.target.nodeName !== \"A\") {\n      return;\n    }\n    this._showTooltip(ev.target.querySelector(\"paper-icon-item\"));\n  }\n\n  private _listboxFocusOut() {\n    this._hideTooltip();\n  }\n\n  @eventOptions({\n    passive: true,\n  })\n  private _listboxScroll() {\n    // On keypresses on the listbox, we're going to ignore scroll events\n    // for 100ms so that if pressing down arrow scrolls the sidebar, the tooltip\n    // will not be hidden.\n    if (new Date().getTime() < this._recentKeydownActiveUntil) {\n      return;\n    }\n    this._hideTooltip();\n  }\n\n  private _listboxKeydown() {\n    this._recentKeydownActiveUntil = new Date().getTime() + 100;\n  }\n\n  private _showTooltip(item: PaperIconItemElement) {\n    if (this._tooltipHideTimeout) {\n      clearTimeout(this._tooltipHideTimeout);\n      this._tooltipHideTimeout = undefined;\n    }\n    const tooltip = this._tooltip;\n    const listbox = this.shadowRoot!.querySelector(\"paper-listbox\")!;\n    let top = item.offsetTop + 11;\n    if (listbox.contains(item)) {\n      top -= listbox.scrollTop;\n    }\n    tooltip.innerHTML = item.querySelector(\".item-text\")!.innerHTML;\n    tooltip.style.display = \"block\";\n    tooltip.style.top = `${top}px`;\n    tooltip.style.left = `${item.offsetLeft + item.clientWidth + 4}px`;\n  }\n\n  private _hideTooltip() {\n    // Delay it a little in case other events are pending processing.\n    if (!this._tooltipHideTimeout) {\n      this._tooltipHideTimeout = window.setTimeout(() => {\n        this._tooltipHideTimeout = undefined;\n        this._tooltip.style.display = \"none\";\n      }, 10);\n    }\n  }\n\n  private _handleShowNotificationDrawer() {\n    fireEvent(this, \"hass-show-notifications\");\n  }\n\n  private _toggleSidebar(ev: CustomEvent) {\n    if (ev.detail.action !== \"tap\") {\n      return;\n    }\n    fireEvent(this, \"hass-toggle-menu\");\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleScrollbar,\n      css`\n        :host {\n          height: 100%;\n          display: block;\n          overflow: hidden;\n          -ms-user-select: none;\n          -webkit-user-select: none;\n          -moz-user-select: none;\n          border-right: 1px solid var(--divider-color);\n          background-color: var(--sidebar-background-color);\n          width: 56px;\n        }\n        :host([expanded]) {\n          width: 256px;\n          width: calc(256px + env(safe-area-inset-left));\n        }\n        :host([rtl]) {\n          border-right: 0;\n          border-left: 1px solid var(--divider-color);\n        }\n        .menu {\n          height: var(--header-height);\n          box-sizing: border-box;\n          display: flex;\n          padding: 0 4px;\n          border-bottom: 1px solid transparent;\n          white-space: nowrap;\n          font-weight: 400;\n          color: var(--sidebar-menu-button-text-color, --primary-text-color);\n          border-bottom: 1px solid var(--divider-color);\n          background-color: var(\n            --sidebar-menu-button-background-color,\n            --primary-background-color\n          );\n          font-size: 20px;\n          align-items: center;\n          padding-left: calc(4px + env(safe-area-inset-left));\n        }\n        :host([rtl]) .menu {\n          padding-left: 4px;\n          padding-right: calc(4px + env(safe-area-inset-right));\n        }\n        :host([expanded]) .menu {\n          width: calc(256px + env(safe-area-inset-left));\n        }\n        :host([rtl][expanded]) .menu {\n          width: calc(256px + env(safe-area-inset-right));\n        }\n        .menu ha-icon-button {\n          color: var(--sidebar-icon-color);\n        }\n        .title {\n          margin-left: 19px;\n          width: 100%;\n          display: none;\n        }\n        :host([rtl]) .title {\n          margin-left: 0;\n          margin-right: 19px;\n        }\n        :host([narrow]) .title {\n          margin: 0;\n          padding: 0 16px;\n        }\n        :host([expanded]) .title {\n          display: initial;\n        }\n        :host([expanded]) .menu mwc-button {\n          margin: 0 8px;\n        }\n        .menu mwc-button {\n          width: 100%;\n        }\n        #sortable,\n        .hidden-panel {\n          display: none;\n        }\n\n        paper-listbox {\n          padding: 4px 0;\n          display: flex;\n          flex-direction: column;\n          box-sizing: border-box;\n          height: calc(100% - var(--header-height) - 132px);\n          height: calc(\n            100% - var(--header-height) - 132px - env(safe-area-inset-bottom)\n          );\n          overflow-x: hidden;\n          background: none;\n          margin-left: env(safe-area-inset-left);\n        }\n\n        :host([rtl]) paper-listbox {\n          margin-left: initial;\n          margin-right: env(safe-area-inset-right);\n        }\n\n        a {\n          text-decoration: none;\n          color: var(--sidebar-text-color);\n          font-weight: 500;\n          font-size: 14px;\n          position: relative;\n          display: block;\n          outline: 0;\n        }\n\n        paper-icon-item {\n          box-sizing: border-box;\n          margin: 4px;\n          padding-left: 12px;\n          border-radius: 4px;\n          --paper-item-min-height: 40px;\n          width: 48px;\n        }\n        :host([expanded]) paper-icon-item {\n          width: 248px;\n        }\n        :host([rtl]) paper-icon-item {\n          padding-left: auto;\n          padding-right: 12px;\n        }\n\n        ha-icon[slot=\"item-icon\"],\n        ha-svg-icon[slot=\"item-icon\"] {\n          color: var(--sidebar-icon-color);\n        }\n\n        .iron-selected paper-icon-item::before,\n        a:not(.iron-selected):focus::before {\n          border-radius: 4px;\n          position: absolute;\n          top: 0;\n          right: 2px;\n          bottom: 0;\n          left: 2px;\n          pointer-events: none;\n          content: \"\";\n          transition: opacity 15ms linear;\n          will-change: opacity;\n        }\n        .iron-selected paper-icon-item::before {\n          background-color: var(--sidebar-selected-icon-color);\n          opacity: 0.12;\n        }\n        a:not(.iron-selected):focus::before {\n          background-color: currentColor;\n          opacity: var(--dark-divider-opacity);\n          margin: 4px 8px;\n        }\n        .iron-selected paper-icon-item:focus::before,\n        .iron-selected:focus paper-icon-item::before {\n          opacity: 0.2;\n        }\n\n        .iron-selected paper-icon-item[pressed]:before {\n          opacity: 0.37;\n        }\n\n        paper-icon-item span {\n          color: var(--sidebar-text-color);\n          font-weight: 500;\n          font-size: 14px;\n        }\n\n        a.iron-selected paper-icon-item ha-icon,\n        a.iron-selected paper-icon-item ha-svg-icon {\n          color: var(--sidebar-selected-icon-color);\n        }\n\n        a.iron-selected .item-text {\n          color: var(--sidebar-selected-text-color);\n        }\n\n        paper-icon-item .item-text {\n          display: none;\n          max-width: calc(100% - 56px);\n        }\n        :host([expanded]) paper-icon-item .item-text {\n          display: block;\n        }\n\n        .divider {\n          bottom: 112px;\n          padding: 10px 0;\n        }\n        .divider::before {\n          content: \" \";\n          display: block;\n          height: 1px;\n          background-color: var(--divider-color);\n        }\n        .notifications-container,\n        .configuration-container {\n          display: flex;\n          margin-left: env(safe-area-inset-left);\n        }\n        :host([rtl]) .notifications-container,\n        :host([rtl]) .configuration-container {\n          margin-left: initial;\n          margin-right: env(safe-area-inset-right);\n        }\n        .notifications {\n          cursor: pointer;\n        }\n        .notifications .item-text,\n        .configuration .item-text {\n          flex: 1;\n        }\n        .profile {\n          margin-left: env(safe-area-inset-left);\n        }\n        :host([rtl]) .profile {\n          margin-left: initial;\n          margin-right: env(safe-area-inset-right);\n        }\n        .profile paper-icon-item {\n          padding-left: 4px;\n        }\n        :host([rtl]) .profile paper-icon-item {\n          padding-left: auto;\n          padding-right: 4px;\n        }\n        .profile .item-text {\n          margin-left: 8px;\n        }\n        :host([rtl]) .profile .item-text {\n          margin-right: 8px;\n        }\n\n        .notification-badge,\n        .configuration-badge {\n          left: calc(var(--app-drawer-width) - 42px);\n          position: absolute;\n          min-width: 20px;\n          box-sizing: border-box;\n          border-radius: 50%;\n          font-weight: 400;\n          background-color: var(--accent-color);\n          line-height: 20px;\n          text-align: center;\n          padding: 0px 6px;\n          color: var(--text-accent-color, var(--text-primary-color));\n        }\n        ha-svg-icon + .notification-badge,\n        ha-svg-icon + .configuration-badge {\n          position: absolute;\n          bottom: 14px;\n          left: 26px;\n          font-size: 0.65em;\n        }\n\n        .spacer {\n          flex: 1;\n          pointer-events: none;\n        }\n\n        .subheader {\n          color: var(--sidebar-text-color);\n          font-weight: 500;\n          font-size: 14px;\n          padding: 16px;\n          white-space: nowrap;\n        }\n\n        .dev-tools {\n          display: flex;\n          flex-direction: row;\n          justify-content: space-between;\n          padding: 0 8px;\n          width: 256px;\n          box-sizing: border-box;\n        }\n\n        .dev-tools a {\n          color: var(--sidebar-icon-color);\n        }\n\n        .tooltip {\n          display: none;\n          position: absolute;\n          opacity: 0.9;\n          border-radius: 2px;\n          white-space: nowrap;\n          color: var(--sidebar-background-color);\n          background-color: var(--sidebar-text-color);\n          padding: 4px;\n          font-weight: 500;\n        }\n\n        :host([rtl]) .menu ha-icon-button {\n          -webkit-transform: scaleX(-1);\n          transform: scaleX(-1);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-sidebar\": HaSidebar;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { computeStateDomain } from \"../../common/entity/compute_state_domain\";\nimport { computeUserInitials, User } from \"../../data/user\";\nimport { CurrentUser, HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-user-badge\")\nclass UserBadge extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public user?: User | CurrentUser;\n\n  @state() private _personPicture?: string;\n\n  private _personEntityId?: string;\n\n  public willUpdate(changedProps: PropertyValues<this>) {\n    super.willUpdate(changedProps);\n    if (changedProps.has(\"user\")) {\n      this._getPersonPicture();\n      return;\n    }\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (\n      this._personEntityId &&\n      oldHass &&\n      this.hass.states[this._personEntityId] !==\n        oldHass.states[this._personEntityId]\n    ) {\n      const entityState = this.hass.states[this._personEntityId];\n      if (entityState) {\n        this._personPicture = entityState.attributes.entity_picture;\n      } else {\n        this._getPersonPicture();\n      }\n    } else if (!this._personEntityId && oldHass) {\n      this._getPersonPicture();\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this.user) {\n      return html``;\n    }\n    const picture = this._personPicture;\n\n    if (picture) {\n      return html`<div\n        style=${styleMap({ backgroundImage: `url(${picture})` })}\n        class=\"picture\"\n      ></div>`;\n    }\n    const initials = computeUserInitials(this.user.name);\n    return html`<div\n      class=\"initials ${classMap({ long: initials!.length > 2 })}\"\n    >\n      ${initials}\n    </div>`;\n  }\n\n  private _getPersonPicture() {\n    this._personEntityId = undefined;\n    this._personPicture = undefined;\n    if (!this.hass || !this.user) {\n      return;\n    }\n    for (const entity of Object.values(this.hass.states)) {\n      if (\n        entity.attributes.user_id === this.user.id &&\n        computeStateDomain(entity) === \"person\"\n      ) {\n        this._personEntityId = entity.entity_id;\n        this._personPicture = entity.attributes.entity_picture;\n        break;\n      }\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: contents;\n      }\n      .picture {\n        width: 40px;\n        height: 40px;\n        background-size: cover;\n        border-radius: 50%;\n      }\n      .initials {\n        display: inline-block;\n        box-sizing: border-box;\n        width: 40px;\n        line-height: 40px;\n        border-radius: 50%;\n        text-align: center;\n        background-color: var(--light-primary-color);\n        text-decoration: none;\n        color: var(--text-light-primary-color, var(--primary-text-color));\n        overflow: hidden;\n      }\n      .initials.long {\n        font-size: 80%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-user-badge\": UserBadge;\n  }\n}\n"],"names":[],"sourceRoot":""}