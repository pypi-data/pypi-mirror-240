{"version":3,"file":"02556b0b.js","mappings":";;;;;AAcA;;ACyBA;AACA;;AAEA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoFA;;;;;;;;;;AAWA;;AC3BA;AACA;;;;;;AAQA;AAGA;;;;;AAKA;AAGA;;;;;AAKA;AAGA;;;;AAIA;;AAGA;;AAMA;AAEA;;;;AAKA;;;;;;AAQA;AAGA;;;;AAIA;;;;AAQA;AACA;AACA;;;;AAIA;AACA;AACA;;;;AAKA;;AAzFA;AAiGA;AAKA;;;AAGA;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;;AAGA;;;;;AAOA;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiLA","sources":["webpack://home-assistant-frontend/./src/components/ha-checkbox.ts","webpack://home-assistant-frontend/./src/components/ha-textfield.ts","webpack://home-assistant-frontend/./src/panels/lovelace/cards/hui-shopping-list-card.ts"],"sourcesContent":["import { CheckboxBase } from \"@material/mwc-checkbox/mwc-checkbox-base\";\nimport { styles } from \"@material/mwc-checkbox/mwc-checkbox.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-checkbox\")\nexport class HaCheckbox extends CheckboxBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-checkbox\": HaCheckbox;\n  }\n}\n","import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { TemplateResult, html, PropertyValues, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public iconTrailing?: boolean;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      (changedProperties.has(\"invalid\") &&\n        (this.invalid || changedProperties.get(\"invalid\") !== undefined)) ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid ? this.errorMessage || \"Invalid\" : \"\"\n      );\n      this.reportValidity();\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n        padding-inline-start: var(--text-field-suffix-padding-left, 12px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 0px);\n        direction: var(--direction);\n      }\n      .mdc-text-field--with-leading-icon {\n        padding-inline-start: var(--text-field-suffix-padding-left, 0px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 16px);\n        direction: var(--direction);\n      }\n\n      .mdc-text-field:not(.mdc-text-field--disabled)\n        .mdc-text-field__affix--suffix {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon--leading {\n        margin-inline-start: 16px;\n        margin-inline-end: 8px;\n        direction: var(--direction);\n      }\n\n      input {\n        text-align: var(--text-field-text-align, start);\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n\n      .mdc-floating-label {\n        inset-inline-start: 16px !important;\n        inset-inline-end: initial !important;\n        transform-origin: var(--float-start);\n        direction: var(--direction);\n        transform-origin: var(--float-start);\n      }\n\n      .mdc-text-field--with-leading-icon.mdc-text-field--filled\n        .mdc-floating-label {\n        max-width: calc(100% - 48px);\n        inset-inline-start: 48px !important;\n        inset-inline-end: initial !important;\n        direction: var(--direction);\n      }\n\n      .mdc-text-field__input[type=\"number\"] {\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          .mdc-text-field__affix--suffix,\n          .mdc-text-field--with-leading-icon,\n          .mdc-text-field__icon--leading,\n          .mdc-floating-label,\n          .mdc-text-field--with-leading-icon.mdc-text-field--filled\n            .mdc-floating-label,\n          .mdc-text-field__input[type=\"number\"] {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n","import { mdiDrag, mdiNotificationClearAll, mdiPlus, mdiSort } from \"@mdi/js\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state, query } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { guard } from \"lit/directives/guard\";\nimport { repeat } from \"lit/directives/repeat\";\nimport { applyThemesOnElement } from \"../../../common/dom/apply_themes_on_element\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-svg-icon\";\nimport \"../../../components/ha-checkbox\";\nimport \"../../../components/ha-textfield\";\nimport {\n  addItem,\n  clearItems,\n  fetchItems,\n  reorderItems,\n  ShoppingListItem,\n  updateItem,\n} from \"../../../data/shopping-list\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport { HomeAssistant } from \"../../../types\";\nimport { LovelaceCard, LovelaceCardEditor } from \"../types\";\nimport { SensorCardConfig, ShoppingListCardConfig } from \"./types\";\nimport type { HaTextField } from \"../../../components/ha-textfield\";\nimport {\n  loadSortable,\n  SortableInstance,\n} from \"../../../resources/sortable.ondemand\";\n\n@customElement(\"hui-shopping-list-card\")\nclass HuiShoppingListCard\n  extends SubscribeMixin(LitElement)\n  implements LovelaceCard\n{\n  public static async getConfigElement(): Promise<LovelaceCardEditor> {\n    await import(\"../editor/config-elements/hui-shopping-list-editor\");\n    return document.createElement(\"hui-shopping-list-card-editor\");\n  }\n\n  public static getStubConfig(): ShoppingListCardConfig {\n    return { type: \"shopping-list\" };\n  }\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: ShoppingListCardConfig;\n\n  @state() private _uncheckedItems?: ShoppingListItem[];\n\n  @state() private _checkedItems?: ShoppingListItem[];\n\n  @state() private _reordering = false;\n\n  @state() private _renderEmptySortable = false;\n\n  private _sortable?: SortableInstance;\n\n  @query(\"#sortable\") private _sortableEl?: HTMLElement;\n\n  public getCardSize(): number {\n    return (this._config ? (this._config.title ? 2 : 0) : 0) + 3;\n  }\n\n  public setConfig(config: ShoppingListCardConfig): void {\n    this._config = config;\n    this._uncheckedItems = [];\n    this._checkedItems = [];\n  }\n\n  public hassSubscribe(): Promise<UnsubscribeFunc>[] {\n    this._fetchData();\n    return [\n      this.hass!.connection.subscribeEvents(\n        () => this._fetchData(),\n        \"shopping_list_updated\"\n      ),\n    ];\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n    if (!this._config || !this.hass) {\n      return;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    const oldConfig = changedProps.get(\"_config\") as\n      | SensorCardConfig\n      | undefined;\n\n    if (\n      (changedProps.has(\"hass\") && oldHass?.themes !== this.hass.themes) ||\n      (changedProps.has(\"_config\") && oldConfig?.theme !== this._config.theme)\n    ) {\n      applyThemesOnElement(this, this.hass.themes, this._config.theme);\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    return html`\n      <ha-card\n        .header=${this._config.title}\n        class=${classMap({\n          \"has-header\": \"title\" in this._config,\n        })}\n      >\n        <div class=\"addRow\">\n          <ha-svg-icon\n            class=\"addButton\"\n            .path=${mdiPlus}\n            .title=${this.hass!.localize(\n              \"ui.panel.lovelace.cards.shopping-list.add_item\"\n            )}\n            @click=${this._addItem}\n          >\n          </ha-svg-icon>\n          <ha-textfield\n            class=\"addBox\"\n            .placeholder=${this.hass!.localize(\n              \"ui.panel.lovelace.cards.shopping-list.add_item\"\n            )}\n            @keydown=${this._addKeyPress}\n          ></ha-textfield>\n          <ha-svg-icon\n            class=\"reorderButton\"\n            .path=${mdiSort}\n            .title=${this.hass!.localize(\n              \"ui.panel.lovelace.cards.shopping-list.reorder_items\"\n            )}\n            @click=${this._toggleReorder}\n          >\n          </ha-svg-icon>\n        </div>\n        ${this._reordering\n          ? html`\n              <div id=\"sortable\">\n                ${guard([this._uncheckedItems, this._renderEmptySortable], () =>\n                  this._renderEmptySortable\n                    ? \"\"\n                    : this._renderItems(this._uncheckedItems!)\n                )}\n              </div>\n            `\n          : this._renderItems(this._uncheckedItems!)}\n        ${this._checkedItems!.length > 0\n          ? html`\n              <div class=\"divider\"></div>\n              <div class=\"checked\">\n                <span>\n                  ${this.hass!.localize(\n                    \"ui.panel.lovelace.cards.shopping-list.checked_items\"\n                  )}\n                </span>\n                <ha-svg-icon\n                  class=\"clearall\"\n                  tabindex=\"0\"\n                  .path=${mdiNotificationClearAll}\n                  .title=${this.hass!.localize(\n                    \"ui.panel.lovelace.cards.shopping-list.clear_items\"\n                  )}\n                  @click=${this._clearItems}\n                >\n                </ha-svg-icon>\n              </div>\n              ${repeat(\n                this._checkedItems!,\n                (item) => item.id,\n                (item) =>\n                  html`\n                    <div class=\"editRow\">\n                      <ha-checkbox\n                        tabindex=\"0\"\n                        .checked=${item.complete}\n                        .itemId=${item.id}\n                        @change=${this._completeItem}\n                      ></ha-checkbox>\n                      <ha-textfield\n                        class=\"item\"\n                        .value=${item.name}\n                        .itemId=${item.id}\n                        @change=${this._saveEdit}\n                      ></ha-textfield>\n                    </div>\n                  `\n              )}\n            `\n          : \"\"}\n      </ha-card>\n    `;\n  }\n\n  private _renderItems(items: ShoppingListItem[]) {\n    return html`\n      ${repeat(\n        items,\n        (item) => item.id,\n        (item) =>\n          html`\n            <div class=\"editRow\" item-id=${item.id}>\n              <ha-checkbox\n                tabindex=\"0\"\n                .checked=${item.complete}\n                .itemId=${item.id}\n                @change=${this._completeItem}\n              ></ha-checkbox>\n              <ha-textfield\n                class=\"item\"\n                .value=${item.name}\n                .itemId=${item.id}\n                @change=${this._saveEdit}\n              ></ha-textfield>\n              ${this._reordering\n                ? html`\n                    <ha-svg-icon\n                      .title=${this.hass!.localize(\n                        \"ui.panel.lovelace.cards.shopping-list.drag_and_drop\"\n                      )}\n                      class=\"reorderButton\"\n                      .path=${mdiDrag}\n                    >\n                    </ha-svg-icon>\n                  `\n                : \"\"}\n            </div>\n          `\n      )}\n    `;\n  }\n\n  private async _fetchData(): Promise<void> {\n    if (!this.hass) {\n      return;\n    }\n    const checkedItems: ShoppingListItem[] = [];\n    const uncheckedItems: ShoppingListItem[] = [];\n    const items = await fetchItems(this.hass);\n    for (const key in items) {\n      if (items[key].complete) {\n        checkedItems.push(items[key]);\n      } else {\n        uncheckedItems.push(items[key]);\n      }\n    }\n    this._checkedItems = checkedItems;\n    this._uncheckedItems = uncheckedItems;\n  }\n\n  private _completeItem(ev): void {\n    updateItem(this.hass!, ev.target.itemId, {\n      complete: ev.target.checked,\n    }).catch(() => this._fetchData());\n  }\n\n  private _saveEdit(ev): void {\n    updateItem(this.hass!, ev.target.itemId, {\n      name: ev.target.value,\n    }).catch(() => this._fetchData());\n\n    ev.target.blur();\n  }\n\n  private _clearItems(): void {\n    if (this.hass) {\n      clearItems(this.hass).catch(() => this._fetchData());\n    }\n  }\n\n  private get _newItem(): HaTextField {\n    return this.shadowRoot!.querySelector(\".addBox\") as HaTextField;\n  }\n\n  private _addItem(ev): void {\n    const newItem = this._newItem;\n\n    if (newItem.value!.length > 0) {\n      addItem(this.hass!, newItem.value!).catch(() => this._fetchData());\n    }\n\n    newItem.value = \"\";\n    if (ev) {\n      newItem.focus();\n    }\n  }\n\n  private _addKeyPress(ev): void {\n    if (ev.keyCode === 13) {\n      this._addItem(null);\n    }\n  }\n\n  private async _toggleReorder() {\n    this._reordering = !this._reordering;\n    await this.updateComplete;\n    if (this._reordering) {\n      this._createSortable();\n    } else {\n      this._sortable?.destroy();\n      this._sortable = undefined;\n    }\n  }\n\n  private async _createSortable() {\n    const Sortable = await loadSortable();\n    const sortableEl = this._sortableEl;\n    this._sortable = new Sortable(sortableEl!, {\n      animation: 150,\n      fallbackClass: \"sortable-fallback\",\n      dataIdAttr: \"item-id\",\n      handle: \"ha-svg-icon\",\n      onEnd: async (evt) => {\n        if (evt.newIndex === undefined || evt.oldIndex === undefined) {\n          return;\n        }\n        // Since this is `onEnd` event, it's possible that\n        // an item wa dragged away and was put back to its original position.\n        if (evt.oldIndex !== evt.newIndex) {\n          reorderItems(this.hass!, this._sortable!.toArray()).catch(() =>\n            this._fetchData()\n          );\n          // Move the shopping list item in memory.\n          this._uncheckedItems!.splice(\n            evt.newIndex,\n            0,\n            this._uncheckedItems!.splice(evt.oldIndex, 1)[0]\n          );\n        }\n        this._renderEmptySortable = true;\n        await this.updateComplete;\n        while (sortableEl?.lastElementChild) {\n          sortableEl.removeChild(sortableEl.lastElementChild);\n        }\n        this._renderEmptySortable = false;\n      },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-card {\n        padding: 16px;\n        height: 100%;\n        box-sizing: border-box;\n      }\n\n      .has-header {\n        padding-top: 0;\n      }\n\n      .editRow,\n      .addRow,\n      .checked {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n      }\n\n      .item {\n        margin-top: 8px;\n      }\n\n      .addButton {\n        padding-right: 16px;\n        padding-inline-end: 16px;\n        cursor: pointer;\n        direction: var(--direction);\n      }\n\n      .reorderButton {\n        padding-left: 16px;\n        padding-inline-start: 16px;\n        cursor: pointer;\n        direction: var(--direction);\n      }\n\n      ha-checkbox {\n        margin-left: -12px;\n        margin-inline-start: -12px;\n        direction: var(--direction);\n      }\n\n      ha-textfield {\n        flex-grow: 1;\n      }\n\n      .checked {\n        margin: 12px 0;\n        justify-content: space-between;\n      }\n\n      .checked span {\n        color: var(--primary-text-color);\n        font-weight: 500;\n      }\n\n      .divider {\n        height: 1px;\n        background-color: var(--divider-color);\n        margin: 10px 0;\n      }\n\n      .clearall {\n        cursor: pointer;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-shopping-list-card\": HuiShoppingListCard;\n  }\n}\n"],"names":[],"sourceRoot":""}