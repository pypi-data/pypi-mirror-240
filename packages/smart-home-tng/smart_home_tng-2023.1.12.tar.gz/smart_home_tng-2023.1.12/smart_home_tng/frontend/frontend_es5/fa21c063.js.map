{"version":3,"file":"fa21c063.js","mappings":";;AAuBA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAMA;AACA;AACA;AACA;AACA;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqFA;;ACtGA;AACA;AACA;;AAGA;;ACLA;AACA;AACA;;AAGA;ACuEA;;AAGA;;AAkCA;;;AAGA;;AAEA;;;;AAIA;;AAEA;;;;;;;;;AASA;AACA;;;AAKA;AACA;AACA;AACA;;;AA/DA;;;;;AAMA;AACA;;;AAKA;;AAEA;;;;AAIA;;AAEA;;;;AAIA;;AAEA;AACA;AACA;AACA;;;;AAuCA;;AAIA;AAgHA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkQA","sources":["webpack://home-assistant-frontend/./src/components/ha-button-toggle-group.ts","webpack://home-assistant-frontend/./src/components/ha-icon-button-next.ts","webpack://home-assistant-frontend/./src/components/ha-icon-button-prev.ts","webpack://home-assistant-frontend/./src/panels/calendar/ha-full-calendar.ts"],"sourcesContent":["import { Button } from \"@material/mwc-button/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, queryAll } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport type { ToggleButton } from \"../types\";\nimport \"./ha-icon-button\";\n\n@customElement(\"ha-button-toggle-group\")\nexport class HaButtonToggleGroup extends LitElement {\n  @property({ attribute: false }) public buttons!: ToggleButton[];\n\n  @property() public active?: string;\n\n  @property({ type: Boolean }) public fullWidth = false;\n\n  @property({ type: Boolean }) public dense = false;\n\n  @queryAll(\"mwc-button\") private _buttons?: Button[];\n\n  protected render(): TemplateResult {\n    return html`\n      <div>\n        ${this.buttons.map((button) =>\n          button.iconPath\n            ? html`<ha-icon-button\n                .label=${button.label}\n                .path=${button.iconPath}\n                .value=${button.value}\n                ?active=${this.active === button.value}\n                @click=${this._handleClick}\n              ></ha-icon-button>`\n            : html`<mwc-button\n                style=${styleMap({\n                  width: this.fullWidth\n                    ? `${100 / this.buttons.length}%`\n                    : \"initial\",\n                })}\n                outlined\n                .dense=${this.dense}\n                .value=${button.value}\n                ?active=${this.active === button.value}\n                @click=${this._handleClick}\n                >${button.label}</mwc-button\n              >`\n        )}\n      </div>\n    `;\n  }\n\n  protected updated() {\n    // Work around Safari default margin that is not reset in mwc-button as of aug 2021\n    this._buttons?.forEach(async (button) => {\n      await button.updateComplete;\n      (\n        button.shadowRoot!.querySelector(\"button\") as HTMLButtonElement\n      ).style.margin = \"0\";\n    });\n  }\n\n  private _handleClick(ev): void {\n    this.active = ev.currentTarget.value;\n    fireEvent(this, \"value-changed\", { value: this.active });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      div {\n        display: flex;\n        --mdc-icon-button-size: var(--button-toggle-size, 36px);\n        --mdc-icon-size: var(--button-toggle-icon-size, 20px);\n      }\n      mwc-button {\n        --mdc-shape-small: 0;\n        --mdc-button-outline-width: 1px 0 1px 1px;\n      }\n      ha-icon-button {\n        border: 1px solid var(--primary-color);\n        border-right-width: 0px;\n      }\n      ha-icon-button,\n      mwc-button {\n        position: relative;\n        cursor: pointer;\n      }\n      ha-icon-button::before,\n      mwc-button::before {\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        position: absolute;\n        background-color: currentColor;\n        opacity: 0;\n        pointer-events: none;\n        content: \"\";\n        transition: opacity 15ms linear, background-color 15ms linear;\n      }\n      ha-icon-button[active]::before,\n      mwc-button[active]::before {\n        opacity: var(--mdc-icon-button-ripple-opacity, 0.12);\n      }\n      ha-icon-button:first-child,\n      mwc-button:first-child {\n        --mdc-shape-small: 4px 0 0 4px;\n        border-radius: 4px 0 0 4px;\n      }\n      ha-icon-button:last-child,\n      mwc-button:last-child {\n        border-radius: 0 4px 4px 0;\n        border-right-width: 1px;\n        --mdc-shape-small: 0 4px 4px 0;\n        --mdc-button-outline-width: 1px;\n      }\n      ha-icon-button:only-child,\n      mwc-button:only-child {\n        --mdc-shape-small: 4px;\n        border-right-width: 1px;\n      }\n\n      :host([dir=\"rtl\"]) ha-icon-button:first-child,\n      :host([dir=\"rtl\"]) mwc-button:first-child {\n        border-radius: 0 4px 4px 0;\n        border-right-width: 1px;\n        --mdc-shape-small: 0 4px 4px 0;\n        --mdc-button-outline-width: 1px;\n      }\n      :host([dir=\"rtl\"]) ha-icon-button:last-child,\n      :host([dir=\"rtl\"]) mwc-button:last-child {\n        --mdc-shape-small: 4px 0 0 4px;\n        border-radius: 4px 0 0 4px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-toggle-group\": HaButtonToggleGroup;\n  }\n}\n","import { mdiChevronLeft, mdiChevronRight } from \"@mdi/js\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\n@customElement(\"ha-icon-button-next\")\nexport class HaIconButtonNext extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property() public label?: string;\n\n  @state() private _icon = mdiChevronRight;\n\n  public connectedCallback() {\n    super.connectedCallback();\n\n    // wait to check for direction since otherwise direction is wrong even though top level is RTL\n    setTimeout(() => {\n      this._icon =\n        window.getComputedStyle(this).direction === \"ltr\"\n          ? mdiChevronRight\n          : mdiChevronLeft;\n    }, 100);\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-icon-button\n        .disabled=${this.disabled}\n        .label=${this.label || this.hass?.localize(\"ui.common.next\") || \"Next\"}\n        .path=${this._icon}\n      ></ha-icon-button>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-button-next\": HaIconButtonNext;\n  }\n}\n","import { mdiChevronLeft, mdiChevronRight } from \"@mdi/js\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\n@customElement(\"ha-icon-button-prev\")\nexport class HaIconButtonPrev extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property() public label?: string;\n\n  @state() private _icon = mdiChevronLeft;\n\n  public connectedCallback() {\n    super.connectedCallback();\n\n    // wait to check for direction since otherwise direction is wrong even though top level is RTL\n    setTimeout(() => {\n      this._icon =\n        window.getComputedStyle(this).direction === \"ltr\"\n          ? mdiChevronLeft\n          : mdiChevronRight;\n    }, 100);\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-icon-button\n        .disabled=${this.disabled}\n        .label=${this.label || this.hass?.localize(\"ui.common.back\") || \"Back\"}\n        .path=${this._icon}\n      ></ha-icon-button>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-button-prev\": HaIconButtonPrev;\n  }\n}\n","// @ts-ignore\nimport fullcalendarStyle from \"@fullcalendar/common/main.css\";\nimport type { CalendarOptions } from \"@fullcalendar/core\";\nimport { Calendar } from \"@fullcalendar/core\";\nimport allLocales from \"@fullcalendar/core/locales-all\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\n// @ts-ignore\nimport daygridStyle from \"@fullcalendar/daygrid/main.css\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport listPlugin from \"@fullcalendar/list\";\n// @ts-ignore\nimport listStyle from \"@fullcalendar/list/main.css\";\nimport \"@material/mwc-button\";\nimport { mdiViewAgenda, mdiViewDay, mdiViewModule, mdiViewWeek } from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n  unsafeCSS,\n} from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport memoize from \"memoize-one\";\nimport { useAmPm } from \"../../common/datetime/use_am_pm\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-button-toggle-group\";\nimport \"../../components/ha-icon-button-prev\";\nimport \"../../components/ha-icon-button-next\";\nimport { haStyle } from \"../../resources/styles\";\nimport { computeRTLDirection } from \"../../common/util/compute_rtl\";\nimport type {\n  CalendarEvent,\n  CalendarViewChanged,\n  FullCalendarView,\n  HomeAssistant,\n  ToggleButton,\n} from \"../../types\";\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-full-calendar\": HAFullCalendar;\n  }\n  interface HASSDomEvents {\n    \"view-changed\": CalendarViewChanged;\n  }\n}\n\nconst getListWeekRange = (currentDate: Date): { start: Date; end: Date } => {\n  const startDate = new Date(currentDate.valueOf());\n  const endDate = new Date(currentDate.valueOf());\n\n  endDate.setDate(endDate.getDate() + 7);\n\n  return { start: startDate, end: endDate };\n};\n\nconst defaultFullCalendarConfig: CalendarOptions = {\n  headerToolbar: false,\n  plugins: [dayGridPlugin, listPlugin, interactionPlugin],\n  initialView: \"dayGridMonth\",\n  dayMaxEventRows: true,\n  height: \"parent\",\n  eventDisplay: \"list-item\",\n  locales: allLocales,\n  views: {\n    list: {\n      visibleRange: getListWeekRange,\n    },\n  },\n};\n\nconst viewButtons: ToggleButton[] = [\n  { label: \"Month View\", value: \"dayGridMonth\", iconPath: mdiViewModule },\n  { label: \"Week View\", value: \"dayGridWeek\", iconPath: mdiViewWeek },\n  { label: \"Day View\", value: \"dayGridDay\", iconPath: mdiViewDay },\n  { label: \"List View\", value: \"list\", iconPath: mdiViewAgenda },\n];\n\nexport class HAFullCalendar extends LitElement {\n  public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ attribute: false }) public events: CalendarEvent[] = [];\n\n  @property({ attribute: false }) public views: FullCalendarView[] = [\n    \"dayGridMonth\",\n    \"dayGridWeek\",\n    \"dayGridDay\",\n  ];\n\n  @property() public initialView: FullCalendarView = \"dayGridMonth\";\n\n  private calendar?: Calendar;\n\n  @state() private _activeView = this.initialView;\n\n  public updateSize(): void {\n    this.calendar?.updateSize();\n  }\n\n  protected render(): TemplateResult {\n    const viewToggleButtons = this._viewToggleButtons(this.views);\n\n    return html`\n      ${this.calendar\n        ? html`\n            <div class=\"header\">\n              ${!this.narrow\n                ? html`\n                    <div class=\"navigation\">\n                      <mwc-button\n                        outlined\n                        class=\"today\"\n                        @click=${this._handleToday}\n                        >${this.hass.localize(\n                          \"ui.components.calendar.today\"\n                        )}</mwc-button\n                      >\n                      <ha-icon-button-prev\n                        .label=${this.hass.localize(\"ui.common.previous\")}\n                        class=\"prev\"\n                        @click=${this._handlePrev}\n                      >\n                      </ha-icon-button-prev>\n                      <ha-icon-button-next\n                        .label=${this.hass.localize(\"ui.common.next\")}\n                        class=\"next\"\n                        @click=${this._handleNext}\n                      >\n                      </ha-icon-button-next>\n                    </div>\n                    <h1>${this.calendar.view.title}</h1>\n                    <ha-button-toggle-group\n                      .buttons=${viewToggleButtons}\n                      .active=${this._activeView}\n                      @value-changed=${this._handleView}\n                      .dir=${computeRTLDirection(this.hass)}\n                    ></ha-button-toggle-group>\n                  `\n                : html`\n                    <div class=\"controls\">\n                      <h1>${this.calendar.view.title}</h1>\n                      <div>\n                        <ha-icon-button-prev\n                          .label=${this.hass.localize(\"ui.common.previous\")}\n                          class=\"prev\"\n                          @click=${this._handlePrev}\n                        >\n                        </ha-icon-button-prev>\n                        <ha-icon-button-next\n                          .label=${this.hass.localize(\"ui.common.next\")}\n                          class=\"next\"\n                          @click=${this._handleNext}\n                        >\n                        </ha-icon-button-next>\n                      </div>\n                    </div>\n                    <div class=\"controls\">\n                      <mwc-button\n                        outlined\n                        class=\"today\"\n                        @click=${this._handleToday}\n                        >${this.hass.localize(\n                          \"ui.components.calendar.today\"\n                        )}</mwc-button\n                      >\n                      <ha-button-toggle-group\n                        .buttons=${viewToggleButtons}\n                        .active=${this._activeView}\n                        @value-changed=${this._handleView}\n                        .dir=${computeRTLDirection(this.hass)}\n                      ></ha-button-toggle-group>\n                    </div>\n                  `}\n            </div>\n          `\n        : \"\"}\n      <div id=\"calendar\"></div>\n    `;\n  }\n\n  public willUpdate(changedProps: PropertyValues): void {\n    super.willUpdate(changedProps);\n\n    if (!this.calendar) {\n      return;\n    }\n\n    if (changedProps.has(\"events\")) {\n      this.calendar.removeAllEventSources();\n      this.calendar.addEventSource(this.events);\n    }\n\n    if (changedProps.has(\"views\") && !this.views.includes(this._activeView!)) {\n      this._activeView =\n        this.initialView && this.views.includes(this.initialView)\n          ? this.initialView\n          : this.views[0];\n      this.calendar!.changeView(this._activeView);\n      this._fireViewChanged();\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant;\n\n    if (oldHass && oldHass.language !== this.hass.language) {\n      this.calendar.setOption(\"locale\", this.hass.language);\n    }\n  }\n\n  protected firstUpdated(): void {\n    const config: CalendarOptions = {\n      ...defaultFullCalendarConfig,\n      locale: this.hass.language,\n      initialView: this.initialView,\n      eventTimeFormat: {\n        hour: useAmPm(this.hass.locale) ? \"numeric\" : \"2-digit\",\n        minute: useAmPm(this.hass.locale) ? \"numeric\" : \"2-digit\",\n        hour12: useAmPm(this.hass.locale),\n      },\n    };\n\n    config.dateClick = (info) => this._handleDateClick(info);\n    config.eventClick = (info) => this._handleEventClick(info);\n\n    this.calendar = new Calendar(\n      this.shadowRoot!.getElementById(\"calendar\")!,\n      config\n    );\n\n    this.calendar!.render();\n    this._fireViewChanged();\n  }\n\n  private _handleEventClick(info): void {\n    if (info.view.type !== \"dayGridMonth\") {\n      return;\n    }\n\n    this._activeView = \"dayGridDay\";\n    this.calendar!.changeView(\"dayGridDay\");\n    this.calendar!.gotoDate(info.event.startStr);\n  }\n\n  private _handleDateClick(info): void {\n    if (info.view.type !== \"dayGridMonth\") {\n      return;\n    }\n    this._activeView = \"dayGridDay\";\n    this.calendar!.changeView(\"dayGridDay\");\n    this.calendar!.gotoDate(info.dateStr);\n  }\n\n  private _handleNext(): void {\n    this.calendar!.next();\n    this._fireViewChanged();\n  }\n\n  private _handlePrev(): void {\n    this.calendar!.prev();\n    this._fireViewChanged();\n  }\n\n  private _handleToday(): void {\n    this.calendar!.today();\n    this._fireViewChanged();\n  }\n\n  private _handleView(ev: CustomEvent): void {\n    this._activeView = ev.detail.value;\n    this.calendar!.changeView(this._activeView!);\n    this._fireViewChanged();\n  }\n\n  private _fireViewChanged(): void {\n    fireEvent(this, \"view-changed\", {\n      start: this.calendar!.view.activeStart,\n      end: this.calendar!.view.activeEnd,\n      view: this.calendar!.view.type,\n    });\n  }\n\n  private _viewToggleButtons = memoize((views) =>\n    viewButtons.filter((button) =>\n      views.includes(button.value as FullCalendarView)\n    )\n  );\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ${unsafeCSS(fullcalendarStyle)}\n        ${unsafeCSS(daygridStyle)}\n        ${unsafeCSS(listStyle)}\n\n        :host {\n          display: flex;\n          flex-direction: column;\n          --fc-theme-standard-border-color: var(--divider-color);\n        }\n\n        .header {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          padding-bottom: 8px;\n        }\n\n        :host([narrow]) .header {\n          padding-right: 8px;\n          padding-left: 8px;\n          flex-direction: column;\n          align-items: flex-start;\n          justify-content: initial;\n        }\n\n        .navigation {\n          display: flex;\n          align-items: center;\n          flex-grow: 0;\n        }\n\n        a {\n          color: var(--primary-text-color);\n        }\n\n        .controls {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          width: 100%;\n        }\n\n        .today {\n          margin-right: 20px;\n          margin-inline-end: 20px;\n          margin-inline-start: initial;\n          direction: var(--direction);\n        }\n\n        .prev,\n        .next {\n          --mdc-icon-button-size: 32px;\n        }\n\n        ha-button-toggle-group {\n          color: var(--primary-color);\n        }\n\n        #calendar {\n          flex-grow: 1;\n          background-color: var(\n            --ha-card-background,\n            var(--card-background-color, white)\n          );\n          min-height: 400px;\n          --fc-neutral-bg-color: var(\n            --ha-card-background,\n            var(--card-background-color, white)\n          );\n          --fc-list-event-hover-bg-color: var(\n            --ha-card-background,\n            var(--card-background-color, white)\n          );\n          --fc-theme-standard-border-color: var(--divider-color);\n          --fc-border-color: var(--divider-color);\n          --fc-page-bg-color: var(\n            --ha-card-background,\n            var(--card-background-color, white)\n          );\n        }\n\n        a {\n          color: inherit !important;\n        }\n\n        .fc-theme-standard .fc-scrollgrid {\n          border: 1px solid var(--divider-color);\n        }\n\n        .fc-scrollgrid-section-header td {\n          border: none;\n        }\n\n        th.fc-col-header-cell.fc-day {\n          color: var(--secondary-text-color);\n          font-size: 11px;\n          font-weight: 400;\n          text-transform: uppercase;\n        }\n\n        .fc-daygrid-dot-event:hover {\n          background-color: inherit;\n        }\n\n        .fc-daygrid-day-top {\n          text-align: center;\n          padding-top: 5px;\n          justify-content: center;\n        }\n\n        table.fc-scrollgrid-sync-table\n          tbody\n          tr:first-child\n          .fc-daygrid-day-top {\n          padding-top: 0;\n        }\n\n        a.fc-daygrid-day-number {\n          float: none !important;\n          font-size: 12px;\n        }\n\n        .fc .fc-daygrid-day-number {\n          padding: 3px !important;\n        }\n\n        .fc .fc-daygrid-day.fc-day-today {\n          background: inherit;\n        }\n\n        td.fc-day-today .fc-daygrid-day-top {\n          padding-top: 4px;\n        }\n\n        td.fc-day-today .fc-daygrid-day-number {\n          height: 24px;\n          color: var(--text-primary-color) !important;\n          background-color: var(--primary-color);\n          border-radius: 50%;\n          display: inline-block;\n          text-align: center;\n          white-space: nowrap;\n          width: max-content;\n          min-width: 24px;\n          line-height: 140%;\n        }\n\n        .fc-daygrid-day-events {\n          margin-top: 4px;\n        }\n\n        .fc-event {\n          border-radius: 4px;\n          line-height: 1.7;\n        }\n\n        .fc-daygrid-block-event .fc-event-main {\n          padding: 0 1px;\n        }\n\n        .fc-day-past .fc-daygrid-day-events {\n          opacity: 0.5;\n        }\n\n        .fc-icon-x:before {\n          font-family: var(--paper-font-common-base_-_font-family);\n          content: \"X\";\n        }\n\n        .fc-popover {\n          background-color: var(--primary-background-color) !important;\n        }\n\n        .fc-popover-header {\n          background-color: var(--secondary-background-color) !important;\n        }\n\n        .fc-theme-standard .fc-list-day-frame {\n          background-color: transparent;\n        }\n\n        .fc-list.fc-view,\n        .fc-list-event.fc-event td {\n          border: none;\n        }\n\n        .fc-list-day.fc-day th {\n          border-bottom: none;\n          border-top: 1px solid var(--fc-theme-standard-border-color, #ddd) !important;\n        }\n\n        .fc-list-day-text {\n          font-size: 16px;\n          font-weight: 400;\n        }\n\n        .fc-list-day-side-text {\n          font-weight: 400;\n          font-size: 16px;\n          color: var(--primary-color);\n        }\n\n        .fc-list-table td,\n        .fc-list-day-frame {\n          padding-top: 12px;\n          padding-bottom: 12px;\n        }\n\n        :host([narrow])\n          .fc-dayGridMonth-view\n          .fc-daygrid-dot-event\n          .fc-event-time,\n        :host([narrow])\n          .fc-dayGridMonth-view\n          .fc-daygrid-dot-event\n          .fc-event-title,\n        :host([narrow]) .fc-dayGridMonth-view .fc-daygrid-day-bottom {\n          display: none;\n        }\n\n        :host([narrow])\n          .fc\n          .fc-dayGridMonth-view\n          .fc-daygrid-event-harness-abs {\n          visibility: visible !important;\n          position: static;\n        }\n\n        :host([narrow]) .fc-dayGridMonth-view .fc-daygrid-day-events {\n          display: flex;\n          min-height: 2em !important;\n          justify-content: center;\n          flex-wrap: wrap;\n          max-height: 2em;\n          height: 2em;\n          overflow: hidden;\n        }\n\n        :host([narrow]) .fc-dayGridMonth-view .fc-scrollgrid-sync-table {\n          overflow: hidden;\n        }\n\n        .fc-scroller::-webkit-scrollbar {\n          width: 0.4rem;\n          height: 0.4rem;\n        }\n\n        .fc-scroller::-webkit-scrollbar-thumb {\n          -webkit-border-radius: 4px;\n          border-radius: 4px;\n          background: var(--scrollbar-thumb-color);\n        }\n\n        .fc-scroller {\n          overflow-y: auto;\n          scrollbar-color: var(--scrollbar-thumb-color) transparent;\n          scrollbar-width: thin;\n        }\n      `,\n    ];\n  }\n}\n\nwindow.customElements.define(\"ha-full-calendar\", HAFullCalendar);\n"],"names":[],"sourceRoot":""}