{"version":3,"file":"8d7805b0.js","mappings":";;AAuHA;AAGA;;AAYA;AAtIA;AA0IA;AACA;;AAEA;;AASA;AACA;;;;AAIA;;AAGA;;;AAyFA;AAEA;;;;;;;;;;;AAuBA;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;;;;AAoBA;AA4BA;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgEA","sources":["webpack://home-assistant-frontend/./src/panels/developer-tools/statistics/developer-tools-statistics.ts"],"sourcesContent":["import \"@material/mwc-button/mwc-button\";\nimport { mdiSlopeUphill } from \"@mdi/js\";\nimport { HassEntity, UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport \"../../../components/data-table/ha-data-table\";\nimport type { DataTableColumnContainer } from \"../../../components/data-table/ha-data-table\";\nimport { subscribeEntityRegistry } from \"../../../data/entity_registry\";\nimport {\n  clearStatistics,\n  getStatisticIds,\n  StatisticsMetaData,\n  StatisticsValidationResult,\n  validateStatistics,\n} from \"../../../data/recorder\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport { showStatisticsAdjustSumDialog } from \"./show-dialog-statistics-adjust-sum\";\nimport { showFixStatisticsUnitsChangedDialog } from \"./show-dialog-statistics-fix-units-changed\";\nimport { showFixStatisticsUnsupportedUnitMetadataDialog } from \"./show-dialog-statistics-fix-unsupported-unit-meta\";\n\nconst FIX_ISSUES_ORDER = {\n  no_state: 0,\n  entity_no_longer_recorded: 1,\n  entity_not_recorded: 1,\n  unsupported_unit_state: 2,\n  unsupported_state_class: 3,\n  units_changed_can_convert: 4,\n  units_changed: 5,\n  unsupported_unit_metadata_can_convert: 6,\n  unsupported_unit_metadata: 7,\n};\n@customElement(\"developer-tools-statistics\")\nclass HaPanelDevStatistics extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @state() private _data: (StatisticsMetaData & {\n    issues?: StatisticsValidationResult[];\n    state?: HassEntity;\n  })[] = [] as StatisticsMetaData[];\n\n  private _disabledEntities = new Set<string>();\n\n  protected firstUpdated() {\n    this._validateStatistics();\n  }\n\n  private _columns = memoizeOne(\n    (localize): DataTableColumnContainer => ({\n      state: {\n        title: \"Name\",\n        sortable: true,\n        filterable: true,\n        grows: true,\n        template: (entityState, data: any) =>\n          html`${entityState\n            ? computeStateName(entityState)\n            : data.name || data.statistic_id}`,\n      },\n      statistic_id: {\n        title: \"Statistic id\",\n        sortable: true,\n        filterable: true,\n        hidden: this.narrow,\n        width: \"20%\",\n      },\n      display_unit_of_measurement: {\n        title: \"Display unit\",\n        sortable: true,\n        filterable: true,\n        width: \"10%\",\n      },\n      statistics_unit_of_measurement: {\n        title: \"Statistics unit\",\n        sortable: true,\n        filterable: true,\n        width: \"10%\",\n      },\n      source: {\n        title: \"Source\",\n        sortable: true,\n        filterable: true,\n        width: \"10%\",\n      },\n      issues: {\n        title: \"Issue\",\n        sortable: true,\n        filterable: true,\n        direction: \"asc\",\n        width: \"30%\",\n        template: (issues) =>\n          html`${issues\n            ? issues.map(\n                (issue) =>\n                  localize(\n                    `ui.panel.developer-tools.tabs.statistics.issues.${issue.type}`,\n                    issue.data\n                  ) || issue.type\n              )\n            : localize(\"ui.panel.developer-tools.tabs.statistics.no_issue\")}`,\n      },\n      fix: {\n        title: \"\",\n        label: this.hass.localize(\n          \"ui.panel.developer-tools.tabs.statistics.fix_issue.fix\"\n        ),\n        template: (_, data: any) =>\n          html`${data.issues\n            ? html`<mwc-button @click=${this._fixIssue} .data=${data.issues}>\n                ${localize(\n                  \"ui.panel.developer-tools.tabs.statistics.fix_issue.fix\"\n                )}\n              </mwc-button>`\n            : \"â€”\"}`,\n        width: \"113px\",\n      },\n      actions: {\n        title: \"\",\n        label: localize(\"ui.panel.developer-tools.tabs.statistics.adjust_sum\"),\n        type: \"icon-button\",\n        template: (_info, statistic: StatisticsMetaData) =>\n          statistic.has_sum\n            ? html`\n                <ha-icon-button\n                  .label=${localize(\n                    \"ui.panel.developer-tools.tabs.statistics.adjust_sum\"\n                  )}\n                  .path=${mdiSlopeUphill}\n                  .statistic=${statistic}\n                  @click=${this._showStatisticsAdjustSumDialog}\n                ></ha-icon-button>\n              `\n            : \"\",\n      },\n    })\n  );\n\n  protected render() {\n    return html`\n      <ha-data-table\n        .columns=${this._columns(this.hass.localize)}\n        .data=${this._data}\n        noDataText=\"No statistics\"\n        id=\"statistic_id\"\n        clickable\n        @row-click=${this._rowClicked}\n      ></ha-data-table>\n    `;\n  }\n\n  private _showStatisticsAdjustSumDialog(ev) {\n    ev.stopPropagation();\n    showStatisticsAdjustSumDialog(this, {\n      statistic: ev.currentTarget.statistic,\n    });\n  }\n\n  private _rowClicked(ev) {\n    const id = ev.detail.id;\n    if (id in this.hass.states) {\n      fireEvent(this, \"hass-more-info\", { entityId: id });\n    }\n  }\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeEntityRegistry(this.hass.connection!, (entities) => {\n        const disabledEntities = new Set<string>();\n        for (const confEnt of entities) {\n          if (!confEnt.disabled_by) {\n            continue;\n          }\n          disabledEntities.add(confEnt.entity_id);\n        }\n        // If the disabled entities changed, re-validate the statistics\n        if (disabledEntities !== this._disabledEntities) {\n          this._disabledEntities = disabledEntities;\n          this._validateStatistics();\n        }\n      }),\n    ];\n  }\n\n  private async _validateStatistics() {\n    const [statisticIds, issues] = await Promise.all([\n      getStatisticIds(this.hass),\n      validateStatistics(this.hass),\n    ]);\n\n    const statsIds = new Set();\n\n    this._data = statisticIds\n      .filter(\n        (statistic) => !this._disabledEntities.has(statistic.statistic_id)\n      )\n      .map((statistic) => {\n        statsIds.add(statistic.statistic_id);\n        return {\n          ...statistic,\n          state: this.hass.states[statistic.statistic_id],\n          issues: issues[statistic.statistic_id],\n        };\n      });\n\n    Object.keys(issues).forEach((statisticId) => {\n      if (\n        !statsIds.has(statisticId) &&\n        !this._disabledEntities.has(statisticId)\n      ) {\n        this._data.push({\n          statistic_id: statisticId,\n          statistics_unit_of_measurement: \"\",\n          display_unit_of_measurement: \"\",\n          source: \"\",\n          state: this.hass.states[statisticId],\n          issues: issues[statisticId],\n          has_mean: false,\n          has_sum: false,\n        });\n      }\n    });\n  }\n\n  private _fixIssue = (ev) => {\n    const issues = (ev.currentTarget.data as StatisticsValidationResult[]).sort(\n      (itemA, itemB) =>\n        (FIX_ISSUES_ORDER[itemA.type] ?? 99) -\n        (FIX_ISSUES_ORDER[itemB.type] ?? 99)\n    );\n    const issue = issues[0];\n    switch (issue.type) {\n      case \"no_state\":\n        showConfirmationDialog(this, {\n          title: \"Entity has no state\",\n          text: html`This entity has no state at the moment, if this is an\n            orphaned entity, you may want to remove the long term statistics of\n            it from your database.<br /><br />Do you want to permanently remove\n            the long term statistics of ${issue.data.statistic_id} from your\n            database?`,\n          confirmText: this.hass.localize(\"ui.common.remove\"),\n          confirm: async () => {\n            await clearStatistics(this.hass, [issue.data.statistic_id]);\n            this._validateStatistics();\n          },\n        });\n        break;\n      case \"entity_not_recorded\":\n        showAlertDialog(this, {\n          title: \"Entity not recorded\",\n          text: html`State changes of this entity are not recorded, therefore,\n            we can not track long term statistics for it. <br /><br />You\n            probably excluded this entity, or have just included some\n            entities.<br /><br />See the\n            <a\n              href=\"https://www.home-assistant.io/integrations/recorder/#configure-filter\"\n              target=\"_blank\"\n              rel=\"noreferrer noopener\"\n            >\n              recorder documentation</a\n            >\n            for more information.`,\n        });\n        break;\n      case \"entity_no_longer_recorded\":\n        showAlertDialog(this, {\n          title: \"Entity no longer recorded\",\n          text: html`We have generated statistics for this entity in the past,\n            but state changes of this entity are no longer recorded, therefore,\n            we can not track long term statistics for it anymore.\n            <br /><br />You probably excluded this entity, or have just included\n            some entities.<br /><br />See the\n            <a\n              href=\"https://www.home-assistant.io/integrations/recorder/#configure-filter\"\n              target=\"_blank\"\n              rel=\"noreferrer noopener\"\n            >\n              recorder documentation</a\n            >\n            for more information.`,\n        });\n        break;\n      case \"unsupported_state_class\":\n        showConfirmationDialog(this, {\n          title: \"Unsupported state class\",\n          text: html`The state class of this entity, ${issue.data.state_class}\n            is not supported. <br />Statistics can not be generated until this\n            entity has a supported state class.<br /><br />If this state class\n            was provided by an integration, this is a bug. Please report an\n            issue.<br /><br />If you have set this state class yourself, please\n            correct it. The different state classes and when to use which can be\n            found in the\n            <a\n              href=\"https://developers.home-assistant.io/docs/core/entity/sensor/#long-term-statistics\"\n              target=\"_blank\"\n              rel=\"noreferrer noopener\"\n            >\n              developer documentation</a\n            >. If the state class has permanently changed, you may want to\n            remove the long term statistics of it from your database.<br /><br />Do\n            you want to permanently remove the long term statistics of\n            ${issue.data.statistic_id} from your database?`,\n          confirmText: this.hass.localize(\"ui.common.remove\"),\n          confirm: async () => {\n            await clearStatistics(this.hass, [issue.data.statistic_id]);\n            this._validateStatistics();\n          },\n        });\n        break;\n      case \"unsupported_unit_metadata\":\n        showFixStatisticsUnsupportedUnitMetadataDialog(this, {\n          issue,\n          fixedCallback: () => {\n            this._validateStatistics();\n          },\n        });\n        break;\n      case \"unsupported_unit_metadata_can_convert\":\n        showFixStatisticsUnsupportedUnitMetadataDialog(this, {\n          issue,\n          fixedCallback: () => {\n            this._validateStatistics();\n          },\n        });\n        break;\n      case \"unsupported_unit_state\":\n        showAlertDialog(this, {\n          title: \"Unsupported unit\",\n          text: html`The unit of your entity is not a supported unit for the\n            device class of the entity, ${issue.data.device_class}.\n            <br />Statistics can not be generated until this entity has a\n            supported unit.<br /><br />If this unit was provided by an\n            integration, this is a bug. Please report an issue.<br /><br />If\n            you have set this unit yourself, and want to have statistics\n            generated, make sure the unit matches the device class. The\n            supported units are documented in the\n            <a\n              href=\"https://developers.home-assistant.io/docs/core/entity/sensor/#available-device-classes\"\n              target=\"_blank\"\n              rel=\"noreferrer noopener\"\n            >\n              developer documentation</a\n            >.`,\n        });\n        break;\n      case \"units_changed\":\n        showFixStatisticsUnitsChangedDialog(this, {\n          issue,\n          fixedCallback: () => {\n            this._validateStatistics();\n          },\n        });\n        break;\n      case \"units_changed_can_convert\":\n        showFixStatisticsUnitsChangedDialog(this, {\n          issue,\n          fixedCallback: () => {\n            this._validateStatistics();\n          },\n        });\n        break;\n      default:\n        showAlertDialog(this, {\n          title: \"Fix issue\",\n          text: \"Fixing this issue is not supported yet.\",\n        });\n    }\n  };\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .content {\n          padding: 16px;\n        }\n\n        th {\n          padding: 0 8px;\n          text-align: left;\n          font-size: var(\n            --paper-input-container-shared-input-style_-_font-size\n          );\n        }\n\n        :host([rtl]) th {\n          text-align: right;\n        }\n\n        tr {\n          vertical-align: top;\n          direction: ltr;\n        }\n\n        tr:nth-child(odd) {\n          background-color: var(--table-row-background-color, #fff);\n        }\n\n        tr:nth-child(even) {\n          background-color: var(--table-row-alternative-background-color, #eee);\n        }\n        td {\n          padding: 4px;\n          min-width: 200px;\n          word-break: break-word;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"developer-tools-statistics\": HaPanelDevStatistics;\n  }\n}\n"],"names":[],"sourceRoot":""}