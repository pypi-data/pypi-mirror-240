{"version":3,"file":"3e2a3411.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEA;AAIA;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACoCA","sources":["webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/layouts/ha-app-layout.js","webpack://home-assistant-frontend/./src/panels/mailbox/ha-panel-mailbox.js"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public outlined = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        border-radius: var(--ha-card-border-radius, 4px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","/* eslint-plugin-disable lit */\n/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\nThis code is copied from app-header-layout.\n'fullbleed' support is removed as Home Assisstant doesn't use it.\ntransform: translate(0) is added.\n*/\n/*\n  FIXME(polymer-modulizer): the above comments were extracted\n  from HTML and may be out of place here. Review them and\n  then delete this comment!\n*/\nimport \"@polymer/app-layout/app-header-layout/app-header-layout\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport \"@polymer/polymer/polymer-element\";\n\nclass HaAppLayout extends customElements.get(\"app-header-layout\") {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n          /**\n         * Force app-header-layout to have its own stacking context so that its parent can\n         * control the stacking of it relative to other elements (e.g. app-drawer-layout).\n         * This could be done using \\`isolation: isolate\\`, but that's not well supported\n         * across browsers.\n         */\n          position: relative;\n          z-index: 0;\n        }\n\n        #wrapper ::slotted([slot=\"header\"]) {\n          @apply --layout-fixed-top;\n          z-index: 1;\n        }\n\n        #wrapper.initializing ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) {\n          height: 100%;\n        }\n\n        :host([has-scrolling-region]) #wrapper ::slotted([slot=\"header\"]) {\n          position: absolute;\n        }\n\n        :host([has-scrolling-region])\n          #wrapper.initializing\n          ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) #wrapper #contentContainer {\n          @apply --layout-fit;\n          overflow-y: auto;\n          -webkit-overflow-scrolling: touch;\n        }\n\n        :host([has-scrolling-region]) #wrapper.initializing #contentContainer {\n          position: relative;\n        }\n\n        #contentContainer {\n          /* Create a stacking context here so that all children appear below the header. */\n          position: relative;\n          z-index: 0;\n          /* Using 'transform' will cause 'position: fixed' elements to behave like\n           'position: absolute' relative to this element. */\n          transform: translate(0);\n          margin-left: env(safe-area-inset-left);\n          margin-right: env(safe-area-inset-right);\n        }\n\n        @media print {\n          :host([has-scrolling-region]) #wrapper #contentContainer {\n            overflow-y: visible;\n          }\n        }\n      </style>\n\n      <div id=\"wrapper\" class=\"initializing\">\n        <slot id=\"headerSlot\" name=\"header\"></slot>\n\n        <div id=\"contentContainer\"><slot></slot></div>\n        <slot id=\"fab\" name=\"fab\"></slot>\n      </div>\n    `;\n  }\n}\ncustomElements.define(\"ha-app-layout\", HaAppLayout);\n","import \"@material/mwc-button\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport \"@polymer/paper-tabs/paper-tab\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport { formatDateTime } from \"../../common/datetime/format_date_time\";\nimport \"../../components/ha-card\";\nimport \"../../components/ha-menu-button\";\nimport \"../../components/ha-tabs\";\nimport \"../../layouts/ha-app-layout\";\nimport { EventsMixin } from \"../../mixins/events-mixin\";\nimport LocalizeMixin from \"../../mixins/localize-mixin\";\nimport \"../../styles/polymer-ha-style\";\n\nlet registeredDialog = false;\n\n/*\n * @appliesMixin LocalizeMixin\n */\nclass HaPanelMailbox extends EventsMixin(LocalizeMixin(PolymerElement)) {\n  static get template() {\n    return html`\n      <style include=\"ha-style\">\n        :host {\n          -ms-user-select: initial;\n          -webkit-user-select: initial;\n          -moz-user-select: initial;\n        }\n\n        .content {\n          padding: 16px;\n          max-width: 600px;\n          margin: 0 auto;\n        }\n\n        ha-card {\n          overflow: hidden;\n        }\n\n        paper-item {\n          cursor: pointer;\n        }\n\n        ha-tabs {\n          margin-left: max(env(safe-area-inset-left), 24px);\n          margin-right: max(env(safe-area-inset-right), 24px);\n          --paper-tabs-selection-bar-color: #fff;\n          text-transform: uppercase;\n        }\n\n        .empty {\n          text-align: center;\n          color: var(--secondary-text-color);\n        }\n\n        .header {\n          @apply --paper-font-title;\n        }\n\n        .row {\n          display: flex;\n          justify-content: space-between;\n        }\n\n        @media all and (max-width: 450px) {\n          .content {\n            width: auto;\n            padding: 0;\n          }\n        }\n\n        .tip {\n          color: var(--secondary-text-color);\n          font-size: 14px;\n        }\n        .date {\n          color: var(--primary-text-color);\n        }\n      </style>\n\n      <ha-app-layout>\n        <app-header slot=\"header\" fixed>\n          <app-toolbar>\n            <ha-menu-button\n              hass=\"[[hass]]\"\n              narrow=\"[[narrow]]\"\n            ></ha-menu-button>\n            <div main-title>[[localize('panel.mailbox')]]</div>\n          </app-toolbar>\n          <div sticky hidden$=\"[[areTabsHidden(platforms)]]\">\n            <ha-tabs\n              scrollable\n              selected=\"[[_currentPlatform]]\"\n              on-iron-activate=\"handlePlatformSelected\"\n            >\n              <template is=\"dom-repeat\" items=\"[[platforms]]\">\n                <paper-tab data-entity=\"[[item]]\">\n                  [[getPlatformName(item)]]\n                </paper-tab>\n              </template>\n            </ha-tabs>\n          </div>\n        </app-header>\n        <div class=\"content\">\n          <ha-card>\n            <template is=\"dom-if\" if=\"[[!_messages.length]]\">\n              <div class=\"card-content empty\">\n                [[localize('ui.panel.mailbox.empty')]]\n              </div>\n            </template>\n            <template is=\"dom-repeat\" items=\"[[_messages]]\">\n              <paper-item on-click=\"openMP3Dialog\">\n                <paper-item-body style=\"width:100%\" two-line>\n                  <div class=\"row\">\n                    <div>[[item.caller]]</div>\n                    <div class=\"tip\">\n                      [[localize('ui.duration.second', 'count', item.duration)]]\n                    </div>\n                  </div>\n                  <div secondary>\n                    <span class=\"date\">[[item.timestamp]]</span> -\n                    [[item.message]]\n                  </div>\n                </paper-item-body>\n              </paper-item>\n            </template>\n          </ha-card>\n        </div>\n      </ha-app-layout>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      narrow: Boolean,\n\n      platforms: {\n        type: Array,\n      },\n\n      _messages: {\n        type: Array,\n      },\n\n      _currentPlatform: {\n        type: Number,\n        value: 0,\n      },\n    };\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    if (!registeredDialog) {\n      registeredDialog = true;\n      this.fire(\"register-dialog\", {\n        dialogShowEvent: \"show-audio-message-dialog\",\n        dialogTag: \"ha-dialog-show-audio-message\",\n        dialogImport: () => import(\"./ha-dialog-show-audio-message\"),\n      });\n    }\n    this.hassChanged = this.hassChanged.bind(this);\n    this.hass.connection\n      .subscribeEvents(this.hassChanged, \"mailbox_updated\")\n      .then((unsub) => {\n        this._unsubEvents = unsub;\n      });\n    this.computePlatforms().then((platforms) => {\n      this.platforms = platforms;\n      this.hassChanged();\n    });\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this._unsubEvents) this._unsubEvents();\n  }\n\n  hassChanged() {\n    if (!this._messages) {\n      this._messages = [];\n    }\n    this.getMessages().then((items) => {\n      this._messages = items;\n    });\n  }\n\n  openMP3Dialog(event) {\n    this.fire(\"show-audio-message-dialog\", {\n      hass: this.hass,\n      message: event.model.item,\n    });\n  }\n\n  getMessages() {\n    const platform = this.platforms[this._currentPlatform];\n    return this.hass\n      .callApi(\"GET\", `mailbox/messages/${platform.name}`)\n      .then((values) => {\n        const platformItems = [];\n        const arrayLength = values.length;\n        for (let i = 0; i < arrayLength; i++) {\n          const datetime = formatDateTime(\n            new Date(values[i].info.origtime * 1000),\n            this.hass.locale\n          );\n          platformItems.push({\n            timestamp: datetime,\n            caller: values[i].info.callerid,\n            message: values[i].text,\n            sha: values[i].sha,\n            duration: values[i].info.duration,\n            platform: platform,\n          });\n        }\n        return platformItems.sort(\n          (a, b) => new Date(b.timestamp) - new Date(a.timestamp)\n        );\n      });\n  }\n\n  computePlatforms() {\n    return this.hass.callApi(\"GET\", \"mailbox/platforms\");\n  }\n\n  handlePlatformSelected(ev) {\n    const newPlatform = ev.detail.selected;\n    if (newPlatform !== this._currentPlatform) {\n      this._currentPlatform = newPlatform;\n      this.hassChanged();\n    }\n  }\n\n  areTabsHidden(platforms) {\n    return !platforms || platforms.length < 2;\n  }\n\n  getPlatformName(item) {\n    const entity = `mailbox.${item.name}`;\n    const stateObj = this.hass.states[entity.toLowerCase()];\n    return stateObj.attributes.friendly_name;\n  }\n}\n\ncustomElements.define(\"ha-panel-mailbox\", HaPanelMailbox);\n"],"names":[],"sourceRoot":""}