{"version":3,"file":"84cde632.js","mappings":";;AAaA;;AAEA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;;ACpGA;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;ACxBA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;ACMA;AACA;;AAMA;AAEA;AAGA;AACA;AACA;AACA;;;;;;;AAOA;;;;AAKA;;AAMA;AACA;AACA;;;AAIA;AAEA;;AAIA;;AAGA;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;;AAGA;;;AAKA;;;AAGA;;AAEA;AACA;;;AA7EA;;;;AAoIA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-select.ts","webpack://home-assistant-frontend/mwc-radio-list-item-base.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/select-view/hui-dialog-select-view.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { SelectBase } from \"@material/mwc-select/mwc-select-base\";\nimport { styles } from \"@material/mwc-select/mwc-select.css\";\nimport { css, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { debounce } from \"../common/util/debounce\";\nimport { nextRender } from \"../common/util/render-status\";\n\n@customElement(\"ha-select\")\nexport class HaSelect extends SelectBase {\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  protected override renderLeadingIcon() {\n    if (!this.icon) {\n      return nothing;\n    }\n\n    return html`<span class=\"mdc-select__icon\"\n      ><slot name=\"icon\"></slot\n    ></span>`;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"translations-updated\", this._translationsUpdated);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\n      \"translations-updated\",\n      this._translationsUpdated\n    );\n  }\n\n  private _translationsUpdated = debounce(async () => {\n    await nextRender();\n    this.layoutOptions();\n  }, 500);\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-select:not(.mdc-select--disabled) .mdc-select__icon {\n        color: var(--secondary-text-color);\n      }\n      .mdc-select__anchor {\n        width: var(--ha-select-min-width, 200px);\n      }\n      .mdc-select--filled .mdc-floating-label {\n        inset-inline-start: 12px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select--filled.mdc-select--with-leading-icon .mdc-floating-label {\n        inset-inline-start: 48px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select .mdc-select__anchor {\n        padding-inline-start: 12px;\n        padding-inline-end: 0px;\n        direction: var(--direction);\n      }\n      .mdc-select__anchor .mdc-floating-label--float-above {\n        transform-origin: var(--float-start);\n      }\n    `,\n  ];\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-select\": HaSelect;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n\nimport '@material/mwc-radio/mwc-radio.js';\n\nimport {Radio} from '@material/mwc-radio/mwc-radio.js';\nimport {html} from 'lit';\nimport {property, query} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\nimport {ifDefined} from 'lit/directives/if-defined.js';\n\nimport {GraphicType, ListItemBase} from './mwc-list-item-base.js';\n\nexport class RadioListItemBase extends ListItemBase {\n  @query('slot') protected override slotElement!: HTMLSlotElement|null;\n  @query('mwc-radio') protected radioElement!: Radio;\n\n  @property({type: Boolean}) left = false;\n  @property({type: String, reflect: true})\n  override graphic: GraphicType = 'control';\n\n  protected _changeFromClick = false;\n\n  override render() {\n    const radioClasses = {\n      'mdc-deprecated-list-item__graphic': this.left,\n      'mdc-deprecated-list-item__meta': !this.left,\n    };\n\n    const text = this.renderText();\n    const graphic = this.graphic && this.graphic !== 'control' && !this.left ?\n        this.renderGraphic() :\n        html``;\n    const meta = this.hasMeta && this.left ? this.renderMeta() : html``;\n    const ripple = this.renderRipple();\n\n    return html`\n      ${ripple}\n      ${graphic}\n      ${this.left ? '' : text}\n      <mwc-radio\n          global\n          class=${classMap(radioClasses)}\n          tabindex=${this.tabindex}\n          name=${ifDefined(this.group === null ? undefined : this.group)}\n          .checked=${this.selected}\n          ?disabled=${this.disabled}\n          @checked=${this.onChange}>\n      </mwc-radio>\n      ${this.left ? text : ''}\n      ${meta}`;\n  }\n\n  protected override onClick() {\n    this._changeFromClick = true;\n    super.onClick();\n  }\n\n  protected async onChange(evt: Event) {\n    const checkbox = evt.target as Radio;\n    const changeFromProp = this.selected === checkbox.checked;\n\n    if (!changeFromProp) {\n      this._skipPropRequest = true;\n      this.selected = checkbox.checked;\n      await this.updateComplete;\n      this._skipPropRequest = false;\n\n      if (!this._changeFromClick) {\n        this.fireRequestSelected(this.selected, 'interaction');\n      }\n    }\n\n    this._changeFromClick = false;\n  }\n}\n","import \"@material/mwc-list/mwc-list\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport \"@material/mwc-list/mwc-radio-list-item\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { stopPropagation } from \"../../../../common/dom/stop_propagation\";\nimport { createCloseHeading } from \"../../../../components/ha-dialog\";\nimport \"../../../../components/ha-icon\";\nimport \"../../../../components/ha-select\";\nimport {\n  fetchConfig,\n  fetchDashboards,\n  LovelaceConfig,\n  LovelaceDashboard,\n} from \"../../../../data/lovelace\";\nimport { haStyleDialog } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport type { SelectViewDialogParams } from \"./show-select-view-dialog\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"view-selected\": {\n      view: number;\n    };\n  }\n}\n\n@customElement(\"hui-dialog-select-view\")\nexport class HuiDialogSelectView extends LitElement {\n  public hass!: HomeAssistant;\n\n  @state() private _params?: SelectViewDialogParams;\n\n  @state() private _dashboards: LovelaceDashboard[] = [];\n\n  @state() private _urlPath?: string | null;\n\n  @state() private _config?: LovelaceConfig;\n\n  @state() private _selectedViewIdx = 0;\n\n  public showDialog(params: SelectViewDialogParams): void {\n    this._config = params.lovelaceConfig;\n    this._urlPath = params.urlPath;\n    this._params = params;\n    if (this._params.allowDashboardChange) {\n      this._getDashboards();\n    }\n  }\n\n  public closeDialog(): void {\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass,\n          this._params.header ||\n            this.hass.localize(\"ui.panel.lovelace.editor.select_view.header\")\n        )}\n      >\n        ${this._params.allowDashboardChange\n          ? html`<ha-select\n              .label=${this.hass.localize(\n                \"ui.panel.lovelace.editor.select_view.dashboard_label\"\n              )}\n              .disabled=${!this._dashboards.length}\n              .value=${this._urlPath || this.hass.defaultPanel}\n              @selected=${this._dashboardChanged}\n              @closed=${stopPropagation}\n              fixedMenuPosition\n              naturalMenuWidth\n              dialogInitialFocus\n            >\n              <mwc-list-item\n                value=\"lovelace\"\n                .disabled=${(this.hass.panels.lovelace?.config as any)?.mode ===\n                \"yaml\"}\n              >\n                Default\n              </mwc-list-item>\n              ${this._dashboards.map((dashboard) => {\n                if (!this.hass.user!.is_admin && dashboard.require_admin) {\n                  return \"\";\n                }\n                return html`\n                  <mwc-list-item\n                    .disabled=${dashboard.mode !== \"storage\"}\n                    .value=${dashboard.url_path}\n                    >${dashboard.title}</mwc-list-item\n                  >\n                `;\n              })}\n            </ha-select>`\n          : \"\"}\n        ${this._config\n          ? this._config.views.length > 1\n            ? html`\n                <mwc-list dialogInitialFocus>\n                  ${this._config.views.map(\n                    (view, idx) => html`\n                      <mwc-radio-list-item\n                        .graphic=${this._config?.views.some(({ icon }) => icon)\n                          ? \"icon\"\n                          : null}\n                        @click=${this._viewChanged}\n                        .value=${idx.toString()}\n                        .selected=${this._selectedViewIdx === idx}\n                      >\n                        <span>${view.title}</span>\n                        <ha-icon .icon=${view.icon} slot=\"graphic\"></ha-icon>\n                      </mwc-radio-list-item>\n                    `\n                  )}\n                </mwc-list>\n              `\n            : \"\"\n          : html`<div>No config found.</div>`}\n        <mwc-button\n          slot=\"secondaryAction\"\n          @click=${this.closeDialog}\n          dialogInitialFocus\n        >\n          ${this.hass!.localize(\"ui.common.cancel\")}\n        </mwc-button>\n        <mwc-button slot=\"primaryAction\" @click=${this._selectView}>\n          ${this._params.actionLabel || this.hass!.localize(\"ui.common.move\")}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private async _getDashboards() {\n    this._dashboards =\n      this._params!.dashboards || (await fetchDashboards(this.hass));\n  }\n\n  private async _dashboardChanged(ev) {\n    let urlPath: string | null = ev.target.value;\n    if (urlPath === this._urlPath) {\n      return;\n    }\n    if (urlPath === \"lovelace\") {\n      urlPath = null;\n    }\n    this._urlPath = urlPath;\n    this._selectedViewIdx = 0;\n    try {\n      this._config = await fetchConfig(this.hass.connection, urlPath, false);\n    } catch (err: any) {\n      this._config = undefined;\n    }\n  }\n\n  private _viewChanged(e) {\n    const view = Number(e.target.value);\n\n    if (!isNaN(view)) {\n      this._selectedViewIdx = view;\n    }\n  }\n\n  private _selectView(): void {\n    fireEvent(this, \"view-selected\", { view: this._selectedViewIdx });\n    this._params!.viewSelectedCallback(\n      this._urlPath!,\n      this._config!,\n      this._selectedViewIdx\n    );\n    this.closeDialog();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-select {\n          width: 100%;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-dialog-select-view\": HuiDialogSelectView;\n  }\n}\n"],"names":[],"sourceRoot":""}