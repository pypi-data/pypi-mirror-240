{"version":3,"file":"b206a57b.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwFA;;AC1EA;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;;ACzBA;AAGA;;;;AAKA;;;AAlDA;AAsDA;AACA;;;AAGA;;AAEA;AAEA;AAEA;AACA;;;;AAMA;AAkEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiGA","sources":["webpack://home-assistant-frontend/./src/components/ha-ansi-to-html.ts","webpack://home-assistant-frontend/./src/components/ha-select.ts","webpack://home-assistant-frontend/./src/panels/config/logs/error-log-card.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\ninterface State {\n  bold: boolean;\n  italic: boolean;\n  underline: boolean;\n  strikethrough: boolean;\n  foregroundColor: null | string;\n  backgroundColor: null | string;\n}\n\n@customElement(\"ha-ansi-to-html\")\nclass HaAnsiToHtml extends LitElement {\n  @property() public content!: string;\n\n  protected render(): TemplateResult | void {\n    return html`${this._parseTextToColoredPre(this.content)}`;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      pre {\n        overflow-x: auto;\n        white-space: pre-wrap;\n        overflow-wrap: break-word;\n      }\n      .bold {\n        font-weight: bold;\n      }\n      .italic {\n        font-style: italic;\n      }\n      .underline {\n        text-decoration: underline;\n      }\n      .strikethrough {\n        text-decoration: line-through;\n      }\n      .underline.strikethrough {\n        text-decoration: underline line-through;\n      }\n      .fg-red {\n        color: var(--error-color);\n      }\n      .fg-green {\n        color: var(--success-color);\n      }\n      .fg-yellow {\n        color: var(--warning-color);\n      }\n      .fg-blue {\n        color: var(--info-color);\n      }\n      .fg-magenta {\n        color: rgb(118, 38, 113);\n      }\n      .fg-cyan {\n        color: rgb(44, 181, 233);\n      }\n      .fg-white {\n        color: rgb(204, 204, 204);\n      }\n      .bg-black {\n        background-color: rgb(0, 0, 0);\n      }\n      .bg-red {\n        background-color: var(--error-color);\n      }\n      .bg-green {\n        background-color: var(--success-color);\n      }\n      .bg-yellow {\n        background-color: var(--warning-color);\n      }\n      .bg-blue {\n        background-color: var(--info-color);\n      }\n      .bg-magenta {\n        background-color: rgb(118, 38, 113);\n      }\n      .bg-cyan {\n        background-color: rgb(44, 181, 233);\n      }\n      .bg-white {\n        background-color: rgb(204, 204, 204);\n      }\n    `;\n  }\n\n  private _parseTextToColoredPre(text) {\n    const pre = document.createElement(\"pre\");\n    const re = /\\033(?:\\[(.*?)[@-~]|\\].*?(?:\\007|\\033\\\\))/g;\n    let i = 0;\n\n    const state: State = {\n      bold: false,\n      italic: false,\n      underline: false,\n      strikethrough: false,\n      foregroundColor: null,\n      backgroundColor: null,\n    };\n\n    const addSpan = (content) => {\n      const span = document.createElement(\"span\");\n      if (state.bold) {\n        span.classList.add(\"bold\");\n      }\n      if (state.italic) {\n        span.classList.add(\"italic\");\n      }\n      if (state.underline) {\n        span.classList.add(\"underline\");\n      }\n      if (state.strikethrough) {\n        span.classList.add(\"strikethrough\");\n      }\n      if (state.foregroundColor !== null) {\n        span.classList.add(`fg-${state.foregroundColor}`);\n      }\n      if (state.backgroundColor !== null) {\n        span.classList.add(`bg-${state.backgroundColor}`);\n      }\n      span.appendChild(document.createTextNode(content));\n      pre.appendChild(span);\n    };\n\n    /* eslint-disable no-cond-assign */\n    let match;\n    // eslint-disable-next-line\n    while ((match = re.exec(text)) !== null) {\n      const j = match!.index;\n      addSpan(text.substring(i, j));\n      i = j + match[0].length;\n\n      if (match[1] === undefined) {\n        continue;\n      }\n\n      match[1].split(\";\").forEach((colorCode: string) => {\n        switch (parseInt(colorCode, 10)) {\n          case 0:\n            // reset\n            state.bold = false;\n            state.italic = false;\n            state.underline = false;\n            state.strikethrough = false;\n            state.foregroundColor = null;\n            state.backgroundColor = null;\n            break;\n          case 1:\n            state.bold = true;\n            break;\n          case 3:\n            state.italic = true;\n            break;\n          case 4:\n            state.underline = true;\n            break;\n          case 9:\n            state.strikethrough = true;\n            break;\n          case 22:\n            state.bold = false;\n            break;\n          case 23:\n            state.italic = false;\n            break;\n          case 24:\n            state.underline = false;\n            break;\n          case 29:\n            state.strikethrough = false;\n            break;\n          case 30:\n            // foreground black\n            state.foregroundColor = null;\n            break;\n          case 31:\n            state.foregroundColor = \"red\";\n            break;\n          case 32:\n            state.foregroundColor = \"green\";\n            break;\n          case 33:\n            state.foregroundColor = \"yellow\";\n            break;\n          case 34:\n            state.foregroundColor = \"blue\";\n            break;\n          case 35:\n            state.foregroundColor = \"magenta\";\n            break;\n          case 36:\n            state.foregroundColor = \"cyan\";\n            break;\n          case 37:\n            state.foregroundColor = \"white\";\n            break;\n          case 39:\n            // foreground reset\n            state.foregroundColor = null;\n            break;\n          case 40:\n            state.backgroundColor = \"black\";\n            break;\n          case 41:\n            state.backgroundColor = \"red\";\n            break;\n          case 42:\n            state.backgroundColor = \"green\";\n            break;\n          case 43:\n            state.backgroundColor = \"yellow\";\n            break;\n          case 44:\n            state.backgroundColor = \"blue\";\n            break;\n          case 45:\n            state.backgroundColor = \"magenta\";\n            break;\n          case 46:\n            state.backgroundColor = \"cyan\";\n            break;\n          case 47:\n            state.backgroundColor = \"white\";\n            break;\n          case 49:\n            // background reset\n            state.backgroundColor = null;\n            break;\n        }\n      });\n    }\n    addSpan(text.substring(i));\n\n    return pre;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-ansi-to-html\": HaAnsiToHtml;\n  }\n}\n","import { SelectBase } from \"@material/mwc-select/mwc-select-base\";\nimport { styles } from \"@material/mwc-select/mwc-select.css\";\nimport { css, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { debounce } from \"../common/util/debounce\";\nimport { nextRender } from \"../common/util/render-status\";\n\n@customElement(\"ha-select\")\nexport class HaSelect extends SelectBase {\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  protected override renderLeadingIcon() {\n    if (!this.icon) {\n      return nothing;\n    }\n\n    return html`<span class=\"mdc-select__icon\"\n      ><slot name=\"icon\"></slot\n    ></span>`;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"translations-updated\", this._translationsUpdated);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\n      \"translations-updated\",\n      this._translationsUpdated\n    );\n  }\n\n  private _translationsUpdated = debounce(async () => {\n    await nextRender();\n    this.layoutOptions();\n  }, 500);\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-select:not(.mdc-select--disabled) .mdc-select__icon {\n        color: var(--secondary-text-color);\n      }\n      .mdc-select__anchor {\n        width: var(--ha-select-min-width, 200px);\n      }\n      .mdc-select--filled .mdc-floating-label {\n        inset-inline-start: 12px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select--filled.mdc-select--with-leading-icon .mdc-floating-label {\n        inset-inline-start: 48px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select .mdc-select__anchor {\n        padding-inline-start: 12px;\n        padding-inline-end: 0px;\n        direction: var(--direction);\n      }\n      .mdc-select__anchor .mdc-floating-label--float-above {\n        transform-origin: var(--float-start);\n      }\n    `,\n  ];\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-select\": HaSelect;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { mdiRefresh } from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-ansi-to-html\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-select\";\nimport { fetchErrorLog } from \"../../../data/error_log\";\nimport { extractApiErrorMessage } from \"../../../data/hassio/common\";\nimport { fetchHassioLogs } from \"../../../data/hassio/supervisor\";\nimport { HomeAssistant } from \"../../../types\";\nimport { debounce } from \"../../../common/util/debounce\";\n\n@customElement(\"error-log-card\")\nclass ErrorLogCard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public filter = \"\";\n\n  @property() public provider!: string;\n\n  @property({ type: Boolean, attribute: true }) public show = false;\n\n  @state() private _isLogLoaded = false;\n\n  @state() private _logHTML?: TemplateResult[] | TemplateResult | string;\n\n  @state() private _error?: string;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"error-log-intro\">\n        ${this._error\n          ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`\n          : \"\"}\n        ${this._logHTML\n          ? html`\n              <ha-card outlined>\n                <div class=\"header\">\n                  <h2>\n                    ${this.hass.localize(\"ui.panel.config.logs.full_logs\")}\n                  </h2>\n                  <ha-icon-button\n                    .path=${mdiRefresh}\n                    @click=${this._refresh}\n                    .label=${this.hass.localize(\"ui.common.refresh\")}\n                  ></ha-icon-button>\n                </div>\n                <div class=\"card-content error-log\">${this._logHTML}</div>\n              </ha-card>\n            `\n          : \"\"}\n        ${!this._logHTML\n          ? html`\n              <mwc-button raised @click=${this._refreshLogs}>\n                ${this.hass.localize(\"ui.panel.config.logs.load_logs\")}\n              </mwc-button>\n            `\n          : \"\"}\n      </div>\n    `;\n  }\n\n  private _debounceSearch = debounce(\n    () => (this._isLogLoaded ? this._refreshLogs() : this._debounceSearch()),\n    150,\n    false\n  );\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n\n    if (this.hass?.config.safe_mode || this.show) {\n      this.hass.loadFragmentTranslation(\"config\");\n      this._refreshLogs();\n    }\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n\n    if (changedProps.has(\"provider\")) {\n      this._logHTML = undefined;\n    }\n\n    if (\n      (changedProps.has(\"show\") && this.show) ||\n      (changedProps.has(\"provider\") && this.show)\n    ) {\n      this._refreshLogs();\n      return;\n    }\n\n    if (changedProps.has(\"filter\")) {\n      this._debounceSearch();\n    }\n  }\n\n  private async _refresh(ev: CustomEvent): Promise<void> {\n    const button = ev.currentTarget as any;\n    button.progress = true;\n\n    await this._refreshLogs();\n    button.progress = false;\n  }\n\n  private async _refreshLogs(): Promise<void> {\n    this._logHTML = this.hass.localize(\"ui.panel.config.logs.loading_log\");\n    let log: string;\n\n    if (this.provider !== \"core\" && isComponentLoaded(this.hass, \"hassio\")) {\n      try {\n        log = await fetchHassioLogs(this.hass, this.provider);\n        if (this.filter) {\n          log = log\n            .split(\"\\n\")\n            .filter((entry) =>\n              entry.toLowerCase().includes(this.filter.toLowerCase())\n            )\n            .join(\"\\n\");\n        }\n        if (!log) {\n          this._logHTML = this.hass.localize(\"ui.panel.config.logs.no_errors\");\n          return;\n        }\n        this._logHTML = html`<ha-ansi-to-html .content=${log}>\n        </ha-ansi-to-html>`;\n        this._isLogLoaded = true;\n        return;\n      } catch (err: any) {\n        this._error = this.hass.localize(\n          \"ui.panel.config.logs.failed_get_logs\",\n          \"provider\",\n          this.provider,\n          \"error\",\n          extractApiErrorMessage(err)\n        );\n        return;\n      }\n    } else {\n      log = await fetchErrorLog(this.hass!);\n    }\n\n    this._isLogLoaded = true;\n\n    const split = log && log.split(\"\\n\");\n\n    this._logHTML = split\n      ? (this.filter\n          ? split.filter((entry) => {\n              if (this.filter) {\n                return entry.toLowerCase().includes(this.filter.toLowerCase());\n              }\n              return entry;\n            })\n          : split\n        ).map((entry) => {\n          if (entry.includes(\"INFO\"))\n            return html`<div class=\"info\">${entry}</div>`;\n\n          if (entry.includes(\"WARNING\"))\n            return html`<div class=\"warning\">${entry}</div>`;\n\n          if (\n            entry.includes(\"ERROR\") ||\n            entry.includes(\"FATAL\") ||\n            entry.includes(\"CRITICAL\")\n          )\n            return html`<div class=\"error\">${entry}</div>`;\n\n          return html`<div>${entry}</div>`;\n        })\n      : this.hass.localize(\"ui.panel.config.logs.no_errors\");\n  }\n\n  static styles: CSSResultGroup = css`\n    .error-log-intro {\n      text-align: center;\n      margin: 16px;\n    }\n\n    .header {\n      display: flex;\n      justify-content: space-between;\n      padding: 16px;\n    }\n\n    ha-select {\n      display: block;\n      max-width: 500px;\n      width: 100%;\n    }\n\n    ha-icon-button {\n      float: right;\n    }\n\n    .error-log {\n      font-family: var(--code-font-family, monospace);\n      clear: both;\n      text-align: left;\n      padding-top: 12px;\n    }\n\n    .error-log > div {\n      overflow: auto;\n      overflow-wrap: break-word;\n    }\n\n    .error-log > div:hover {\n      background-color: var(--secondary-background-color);\n    }\n\n    .error {\n      color: var(--error-color);\n    }\n\n    .warning {\n      color: var(--warning-color);\n    }\n\n    mwc-button {\n      direction: var(--direction);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"error-log-card\": ErrorLogCard;\n  }\n}\n"],"names":[],"sourceRoot":""}