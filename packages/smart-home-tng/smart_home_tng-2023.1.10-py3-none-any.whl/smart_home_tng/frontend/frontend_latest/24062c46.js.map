{"version":3,"file":"24062c46.js","mappings":";AAaA;;AAEA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;;;;;;;;;;;;;ACzEA;;;;;;;;;;;;;;;;;;;;ACIA;;;AC4CA;;;AAGA;;;AAMA;AACA;;;AAIA;AAGA;;;;AAIA;AACA;AACA;;AAEA;;;;AAKA;AAGA;;;;AAIA;AACA;;;;;AAKA;;;AAKA;;;AAGA;AACA;;;;AAIA;;AAIA;AACA;;;AAGA;AAGA;;;;AAMA;AAGA;;;AAGA;AACA;;;;;;;AAOA;AACA;;;AAGA;AACA;;;;;AAKA;;AAGA;;;AAMA;;;;AAKA;;;AAIA;AAIA;;AAEA;;;;AA9HA;;;;;;;;;AA4NA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-formfield.ts","webpack://home-assistant-frontend/./src/components/ha-switch.ts","webpack://home-assistant-frontend/./src/panels/config/users/dialog-add-user.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { FormfieldBase } from \"@material/mwc-formfield/mwc-formfield-base\";\nimport { styles } from \"@material/mwc-formfield/mwc-formfield.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n@customElement(\"ha-formfield\")\nexport class HaFormfield extends FormfieldBase {\n  protected _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      switch (input.tagName) {\n        case \"HA-CHECKBOX\":\n        case \"HA-RADIO\":\n          (input as any).checked = !(input as any).checked;\n          fireEvent(input, \"change\");\n          break;\n        default:\n          input.click();\n          break;\n      }\n    }\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host(:not([alignEnd])) ::slotted(ha-switch) {\n        margin-right: 10px;\n        margin-inline-end: 10px;\n        margin-inline-start: inline;\n      }\n      .mdc-form-field > label {\n        direction: var(--direction);\n        margin-inline-start: 0;\n        margin-inline-end: auto;\n        padding-inline-start: 4px;\n        padding-inline-end: 0;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-formfield\": HaFormfield;\n  }\n}\n","import { SwitchBase } from \"@material/mwc-switch/deprecated/mwc-switch-base\";\nimport { styles } from \"@material/mwc-switch/deprecated/mwc-switch.css\";\nimport { css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { forwardHaptic } from \"../data/haptics\";\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends SwitchBase {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--switch-checked-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n        background-color: var(--switch-checked-button-color);\n        border-color: var(--switch-checked-button-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__track {\n        background-color: var(--switch-checked-track-color);\n        border-color: var(--switch-checked-track-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n        background-color: var(--switch-unchecked-button-color);\n        border-color: var(--switch-unchecked-button-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n        background-color: var(--switch-unchecked-track-color);\n        border-color: var(--switch-unchecked-track-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { computeRTLDirection } from \"../../../common/util/compute_rtl\";\nimport \"../../../components/ha-circular-progress\";\nimport { createCloseHeading } from \"../../../components/ha-dialog\";\nimport \"../../../components/ha-formfield\";\nimport \"../../../components/ha-switch\";\nimport { createAuthForUser } from \"../../../data/auth\";\nimport {\n  createUser,\n  deleteUser,\n  SYSTEM_GROUP_ID_ADMIN,\n  SYSTEM_GROUP_ID_USER,\n  User,\n} from \"../../../data/user\";\nimport { PolymerChangedEvent } from \"../../../polymer-types\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport { AddUserDialogParams } from \"./show-dialog-add-user\";\n\n@customElement(\"dialog-add-user\")\nexport class DialogAddUser extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _loading = false;\n\n  // Error message when can't talk to server etc\n  @state() private _error?: string;\n\n  @state() private _params?: AddUserDialogParams;\n\n  @state() private _name?: string;\n\n  @state() private _username?: string;\n\n  @state() private _password?: string;\n\n  @state() private _passwordConfirm?: string;\n\n  @state() private _isAdmin?: boolean;\n\n  @state() private _localOnly?: boolean;\n\n  @state() private _allowChangeName = true;\n\n  public showDialog(params: AddUserDialogParams) {\n    this._params = params;\n    this._name = this._params.name || \"\";\n    this._username = \"\";\n    this._password = \"\";\n    this._passwordConfirm = \"\";\n    this._isAdmin = false;\n    this._localOnly = false;\n    this._error = undefined;\n    this._loading = false;\n\n    if (this._params.name) {\n      this._allowChangeName = false;\n      this._maybePopulateUsername();\n    } else {\n      this._allowChangeName = true;\n    }\n  }\n\n  protected firstUpdated(changedProperties: PropertyValues) {\n    super.firstUpdated(changedProperties);\n    this.addEventListener(\"keypress\", (ev) => {\n      if (ev.keyCode === 13) {\n        this._createUser(ev);\n      }\n    });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n    return html`\n      <ha-dialog\n        open\n        @closed=${this._close}\n        scrimClickAction\n        escapeKeyAction\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\"ui.panel.config.users.add_user.caption\")\n        )}\n      >\n        <div>\n          ${this._error ? html` <div class=\"error\">${this._error}</div> ` : \"\"}\n          ${this._allowChangeName\n            ? html` <paper-input\n                class=\"name\"\n                name=\"name\"\n                .label=${this.hass.localize(\n                  \"ui.panel.config.users.editor.name\"\n                )}\n                .value=${this._name}\n                required\n                auto-validate\n                autocapitalize=\"on\"\n                .errorMessage=${this.hass.localize(\"ui.common.error_required\")}\n                @value-changed=${this._handleValueChanged}\n                @blur=${this._maybePopulateUsername}\n                dialogInitialFocus\n              ></paper-input>`\n            : \"\"}\n          <paper-input\n            class=\"username\"\n            name=\"username\"\n            .label=${this.hass.localize(\n              \"ui.panel.config.users.editor.username\"\n            )}\n            .value=${this._username}\n            required\n            auto-validate\n            autocapitalize=\"none\"\n            @value-changed=${this._handleValueChanged}\n            .errorMessage=${this.hass.localize(\"ui.common.error_required\")}\n            dialogInitialFocus\n          ></paper-input>\n\n          <paper-input\n            .label=${this.hass.localize(\n              \"ui.panel.config.users.add_user.password\"\n            )}\n            type=\"password\"\n            name=\"password\"\n            .value=${this._password}\n            required\n            auto-validate\n            @value-changed=${this._handleValueChanged}\n            .errorMessage=${this.hass.localize(\"ui.common.error_required\")}\n          ></paper-input>\n\n          <paper-input\n            label=${this.hass.localize(\n              \"ui.panel.config.users.add_user.password_confirm\"\n            )}\n            name=\"passwordConfirm\"\n            .value=${this._passwordConfirm}\n            @value-changed=${this._handleValueChanged}\n            required\n            type=\"password\"\n            .invalid=${this._password !== \"\" &&\n            this._passwordConfirm !== \"\" &&\n            this._passwordConfirm !== this._password}\n            .errorMessage=${this.hass.localize(\n              \"ui.panel.config.users.add_user.password_not_match\"\n            )}\n          ></paper-input>\n          <div class=\"row\">\n            <ha-formfield\n              .label=${this.hass.localize(\n                \"ui.panel.config.users.editor.local_only\"\n              )}\n              .dir=${computeRTLDirection(this.hass)}\n            >\n              <ha-switch\n                .checked=${this._localOnly}\n                @change=${this._localOnlyChanged}\n              >\n              </ha-switch>\n            </ha-formfield>\n          </div>\n          <div class=\"row\">\n            <ha-formfield\n              .label=${this.hass.localize(\"ui.panel.config.users.editor.admin\")}\n              .dir=${computeRTLDirection(this.hass)}\n            >\n              <ha-switch\n                .checked=${this._isAdmin}\n                @change=${this._adminChanged}\n              >\n              </ha-switch>\n            </ha-formfield>\n          </div>\n          ${!this._isAdmin\n            ? html`\n                <br />\n                ${this.hass.localize(\n                  \"ui.panel.config.users.users_privileges_note\"\n                )}\n              `\n            : \"\"}\n        </div>\n        ${this._loading\n          ? html`\n              <div slot=\"primaryAction\" class=\"submit-spinner\">\n                <ha-circular-progress active></ha-circular-progress>\n              </div>\n            `\n          : html`\n              <mwc-button\n                slot=\"primaryAction\"\n                .disabled=${!this._name ||\n                !this._username ||\n                !this._password ||\n                this._password !== this._passwordConfirm}\n                @click=${this._createUser}\n              >\n                ${this.hass.localize(\"ui.panel.config.users.add_user.create\")}\n              </mwc-button>\n            `}\n      </ha-dialog>\n    `;\n  }\n\n  private _close() {\n    this._params = undefined;\n  }\n\n  private _maybePopulateUsername() {\n    if (this._username || !this._name) {\n      return;\n    }\n\n    const parts = this._name.split(\" \");\n\n    if (parts.length) {\n      this._username = parts[0].toLowerCase();\n    }\n  }\n\n  private _handleValueChanged(ev: PolymerChangedEvent<string>): void {\n    this._error = undefined;\n    const name = (ev.target as any).name;\n    this[`_${name}`] = ev.detail.value;\n  }\n\n  private async _adminChanged(ev): Promise<void> {\n    this._isAdmin = ev.target.checked;\n  }\n\n  private _localOnlyChanged(ev): void {\n    this._localOnly = ev.target.checked;\n  }\n\n  private async _createUser(ev) {\n    ev.preventDefault();\n    if (!this._name || !this._username || !this._password) {\n      return;\n    }\n\n    this._loading = true;\n    this._error = \"\";\n\n    let user: User;\n    try {\n      const userResponse = await createUser(\n        this.hass,\n        this._name,\n        [this._isAdmin ? SYSTEM_GROUP_ID_ADMIN : SYSTEM_GROUP_ID_USER],\n        this._localOnly\n      );\n      user = userResponse.user;\n    } catch (err: any) {\n      this._loading = false;\n      this._error = err.message;\n      return;\n    }\n\n    try {\n      await createAuthForUser(\n        this.hass,\n        user.id,\n        this._username,\n        this._password\n      );\n    } catch (err: any) {\n      await deleteUser(this.hass, user.id);\n      this._loading = false;\n      this._error = err.message;\n      return;\n    }\n\n    user.username = this._username;\n    this._params!.userAddedCallback(user);\n    this._close();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --mdc-dialog-max-width: 500px;\n          --dialog-z-index: 10;\n        }\n        .row {\n          display: flex;\n          padding: 8px 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-add-user\": DialogAddUser;\n  }\n}\n"],"names":[],"sourceRoot":""}