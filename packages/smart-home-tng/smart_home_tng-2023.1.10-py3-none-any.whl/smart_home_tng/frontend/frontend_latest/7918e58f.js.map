{"version":3,"file":"7918e58f.js","mappings":";;AAuCA;;AAIA;;;AAGA;AAEA;;AAGA;;AAEA;;;;AAKA;;;AAIA;;AAGA;;AAEA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;ACtFA;;AAGA;AAGA;AACA;;;AAGA;;AAEA;AAEA;;;AAIA;;;AAIA;AACA;AACA;;AAGA","sources":["webpack://home-assistant-frontend/./src/components/ha-attributes.ts","webpack://home-assistant-frontend/./src/dialogs/more-info/controls/more-info-remote.ts"],"sourcesContent":["import { HassEntity } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport {\n  formatAttributeName,\n  formatAttributeValue,\n  STATE_ATTRIBUTES,\n} from \"../data/entity_attributes\";\nimport { haStyle } from \"../resources/styles\";\nimport { HomeAssistant } from \"../types\";\n\nimport \"./ha-expansion-panel\";\n\n@customElement(\"ha-attributes\")\nclass HaAttributes extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public stateObj?: HassEntity;\n\n  @property({ attribute: \"extra-filters\" }) public extraFilters?: string;\n\n  @state() private _expanded = false;\n\n  protected render(): TemplateResult {\n    if (!this.stateObj) {\n      return html``;\n    }\n\n    const attributes = this.computeDisplayAttributes(\n      STATE_ATTRIBUTES.concat(\n        this.extraFilters ? this.extraFilters.split(\",\") : []\n      )\n    );\n    if (attributes.length === 0) {\n      return html``;\n    }\n\n    return html`\n      <ha-expansion-panel\n        .header=${this.hass.localize(\n          \"ui.components.attributes.expansion_header\"\n        )}\n        outlined\n        @expanded-will-change=${this.expandedChanged}\n      >\n        <div class=\"attribute-container\">\n          ${this._expanded\n            ? html`\n                ${attributes.map(\n                  (attribute) => html`\n                    <div class=\"data-entry\">\n                      <div class=\"key\">${formatAttributeName(attribute)}</div>\n                      <div class=\"value\">\n                        ${this.formatAttribute(attribute)}\n                      </div>\n                    </div>\n                  `\n                )}\n              `\n            : \"\"}\n        </div>\n      </ha-expansion-panel>\n      ${this.stateObj.attributes.attribution\n        ? html`\n            <div class=\"attribution\">\n              ${this.stateObj.attributes.attribution}\n            </div>\n          `\n        : \"\"}\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .attribute-container {\n          margin-bottom: 8px;\n          direction: ltr;\n        }\n        .data-entry {\n          display: flex;\n          flex-direction: row;\n          justify-content: space-between;\n        }\n        .data-entry .value {\n          max-width: 60%;\n          overflow-wrap: break-word;\n          text-align: right;\n        }\n        .key {\n          flex-grow: 1;\n        }\n        .attribution {\n          color: var(--secondary-text-color);\n          text-align: center;\n          margin-top: 16px;\n        }\n        pre {\n          font-family: inherit;\n          font-size: inherit;\n          margin: 0px;\n          overflow-wrap: break-word;\n          white-space: pre-line;\n        }\n        hr {\n          border-color: var(--divider-color);\n          border-bottom: none;\n          margin: 16px 0;\n        }\n      `,\n    ];\n  }\n\n  private computeDisplayAttributes(filtersArray: string[]): string[] {\n    if (!this.stateObj) {\n      return [];\n    }\n    return Object.keys(this.stateObj.attributes).filter(\n      (key) => filtersArray.indexOf(key) === -1\n    );\n  }\n\n  private formatAttribute(attribute: string): string | TemplateResult {\n    if (!this.stateObj) {\n      return \"â€”\";\n    }\n    const value = this.stateObj.attributes[attribute];\n    return formatAttributeValue(this.hass, value);\n  }\n\n  private expandedChanged(ev) {\n    this._expanded = ev.detail.expanded;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-attributes\": HaAttributes;\n  }\n}\n","import { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { supportsFeature } from \"../../../common/entity/supports-feature\";\nimport \"../../../components/ha-attributes\";\nimport { RemoteEntity, REMOTE_SUPPORT_ACTIVITY } from \"../../../data/remote\";\nimport { HomeAssistant } from \"../../../types\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport \"@material/mwc-list/mwc-list\";\nimport { stopPropagation } from \"../../../common/dom/stop_propagation\";\n\nconst filterExtraAttributes = \"activity_list,current_activity\";\n\n@customElement(\"more-info-remote\")\nclass MoreInfoRemote extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public stateObj?: RemoteEntity;\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this.stateObj) {\n      return html``;\n    }\n\n    const stateObj = this.stateObj;\n\n    return html`\n      ${supportsFeature(stateObj, REMOTE_SUPPORT_ACTIVITY)\n        ? html`\n            <mwc-list\n              .label=${this.hass!.localize(\n                \"ui.dialogs.more_info_control.remote.activity\"\n              )}\n              .value=${stateObj.attributes.current_activity}\n              @selected=${this.handleActivityChanged}\n              fixedMenuPosition\n              naturalMenuWidth\n              @closed=${stopPropagation}\n            >\n              ${stateObj.attributes.activity_list!.map(\n                (activity) => html`\n                  <mwc-list-item .value=${activity}>${activity}</mwc-list-item>\n                `\n              )}\n            </mwc-list>\n          `\n        : \"\"}\n\n      <ha-attributes\n        .hass=${this.hass}\n        .stateObj=${this.stateObj}\n        .extraFilters=${filterExtraAttributes}\n      ></ha-attributes>\n    `;\n  }\n\n  private handleActivityChanged(ev) {\n    const oldVal = this.stateObj!.attributes.current_activity;\n    const newVal = ev.target.value;\n\n    if (!newVal || oldVal === newVal) {\n      return;\n    }\n\n    this.hass.callService(\"remote\", \"turn_on\", {\n      entity_id: this.stateObj!.entity_id,\n      activity: newVal,\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"more-info-remote\": MoreInfoRemote;\n  }\n}\n"],"names":[],"sourceRoot":""}