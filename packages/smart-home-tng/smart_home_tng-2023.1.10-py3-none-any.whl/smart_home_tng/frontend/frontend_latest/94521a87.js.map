{"version":3,"file":"94521a87.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkGA;;;;;ACsCA;AACA;;AAEA;;AAEA;AACA;AACA;;;;AAIA;;;;;AAKA;AACA;;;;AAIA;;;;;;;AAOA;AACA;;;AAGA;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;;AAGA;;AAQA;AAEA;AAEA;AAGA;;AAGA;AACA;AACA;AACA;;AAEA;;AAGA;;AAQA;AAEA;AAEA;;;;AAKA;AACA;AACA;AACA;;;AAMA;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0GA;;;AC5RA;AACA;AACA;AACA;;AAGA;;;;AAMA","sources":["webpack://home-assistant-frontend/./src/layouts/ha-app-layout.js","webpack://home-assistant-frontend/./src/panels/config/dashboard/ha-config-dashboard.ts","webpack://home-assistant-frontend/./src/panels/config/dashboard/ha-config-navigation.ts"],"sourcesContent":["/* eslint-plugin-disable lit */\n/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\nThis code is copied from app-header-layout.\n'fullbleed' support is removed as Home Assisstant doesn't use it.\ntransform: translate(0) is added.\n*/\n/*\n  FIXME(polymer-modulizer): the above comments were extracted\n  from HTML and may be out of place here. Review them and\n  then delete this comment!\n*/\nimport \"@polymer/app-layout/app-header-layout/app-header-layout\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport \"@polymer/polymer/polymer-element\";\n\nclass HaAppLayout extends customElements.get(\"app-header-layout\") {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n          /**\n         * Force app-header-layout to have its own stacking context so that its parent can\n         * control the stacking of it relative to other elements (e.g. app-drawer-layout).\n         * This could be done using \\`isolation: isolate\\`, but that's not well supported\n         * across browsers.\n         */\n          position: relative;\n          z-index: 0;\n        }\n\n        #wrapper ::slotted([slot=\"header\"]) {\n          @apply --layout-fixed-top;\n          z-index: 1;\n        }\n\n        #wrapper.initializing ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) {\n          height: 100%;\n        }\n\n        :host([has-scrolling-region]) #wrapper ::slotted([slot=\"header\"]) {\n          position: absolute;\n        }\n\n        :host([has-scrolling-region])\n          #wrapper.initializing\n          ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) #wrapper #contentContainer {\n          @apply --layout-fit;\n          overflow-y: auto;\n          -webkit-overflow-scrolling: touch;\n        }\n\n        :host([has-scrolling-region]) #wrapper.initializing #contentContainer {\n          position: relative;\n        }\n\n        #contentContainer {\n          /* Create a stacking context here so that all children appear below the header. */\n          position: relative;\n          z-index: 0;\n          /* Using 'transform' will cause 'position: fixed' elements to behave like\n           'position: absolute' relative to this element. */\n          transform: translate(0);\n          margin-left: env(safe-area-inset-left);\n          margin-right: env(safe-area-inset-right);\n        }\n\n        @media print {\n          :host([has-scrolling-region]) #wrapper #contentContainer {\n            overflow-y: visible;\n          }\n        }\n      </style>\n\n      <div id=\"wrapper\" class=\"initializing\">\n        <slot id=\"headerSlot\" name=\"header\"></slot>\n\n        <div id=\"contentContainer\"><slot></slot></div>\n        <slot id=\"fab\" name=\"fab\"></slot>\n      </div>\n    `;\n  }\n}\ncustomElements.define(\"ha-app-layout\", HaAppLayout);\n","import type { ActionDetail } from \"@material/mwc-list\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { mdiCloudLock, mdiDotsVertical, mdiMagnify } from \"@mdi/js\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport { HassEntities, UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-icon-next\";\nimport \"../../../components/ha-menu-button\";\nimport \"../../../components/ha-svg-icon\";\nimport \"../../../components/ha-tip\";\nimport { CloudStatus } from \"../../../data/cloud\";\nimport {\n  RepairsIssue,\n  severitySort,\n  subscribeRepairsIssueRegistry,\n} from \"../../../data/repairs\";\nimport {\n  checkForEntityUpdates,\n  filterUpdateEntitiesWithInstall,\n  UpdateEntity,\n} from \"../../../data/update\";\nimport { showQuickBar } from \"../../../dialogs/quick-bar/show-dialog-quick-bar\";\nimport \"../../../layouts/ha-app-layout\";\nimport { PageNavigation } from \"../../../layouts/hass-tabs-subpage\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport \"../ha-config-section\";\nimport { configSections } from \"../ha-panel-config\";\nimport \"../repairs/ha-config-repairs\";\nimport \"./ha-config-navigation\";\nimport \"./ha-config-updates\";\n\nconst randomTip = (hass: HomeAssistant, narrow: boolean) => {\n  const weighted: string[] = [];\n  let tips = [\n    { content: hass.localize(\"ui.tips.key_c_hint\"), weight: 1, narrow: true },\n    { content: hass.localize(\"ui.tips.key_m_hint\"), weight: 1, narrow: false },\n  ];\n\n  if (narrow) {\n    tips = tips.filter((tip) => tip.narrow);\n  }\n\n  tips.forEach((tip) => {\n    for (let i = 0; i < tip.weight; i++) {\n      weighted.push(tip.content);\n    }\n  });\n\n  return weighted[Math.floor(Math.random() * weighted.length)];\n};\n\n@customElement(\"ha-config-dashboard\")\nclass HaConfigDashboard extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true })\n  public narrow!: boolean;\n\n  @property() public isWide!: boolean;\n\n  @property() public cloudStatus?: CloudStatus;\n\n  @property() public showAdvanced!: boolean;\n\n  @state() private _tip?: string;\n\n  @state() private _repairsIssues: { issues: RepairsIssue[]; total: number } = {\n    issues: [],\n    total: 0,\n  };\n\n  private _pages = memoizeOne((clouStatus, isLoaded) => {\n    const pages: PageNavigation[] = [];\n    if (clouStatus && isLoaded && false) {\n      pages.push({\n        component: \"cloud\",\n        path: \"/config/cloud\",\n        name: \"Home Assistant Cloud\",\n        info: this.cloudStatus,\n        iconPath: mdiCloudLock,\n        iconColor: \"#3B808E\",\n      });\n    }\n    return [...pages, ...configSections.dashboard];\n  });\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeRepairsIssueRegistry(this.hass.connection!, (repairs) => {\n        const repairsIssues = repairs.issues.filter((issue) => !issue.ignored);\n\n        this._repairsIssues = {\n          issues: repairsIssues\n            .sort((a, b) => severitySort[a.severity] - severitySort[b.severity])\n            .slice(0, repairsIssues.length === 3 ? repairsIssues.length : 2),\n          total: repairsIssues.length,\n        };\n\n        const integrations: Set<string> = new Set();\n        for (const issue of this._repairsIssues.issues) {\n          integrations.add(issue.domain);\n        }\n        this.hass.loadBackendTranslation(\"issues\", [...integrations]);\n      }),\n    ];\n  }\n\n  protected render(): TemplateResult {\n    const { updates: canInstallUpdates, total: totalUpdates } =\n      this._filterUpdateEntitiesWithInstall(this.hass.states);\n\n    const { issues: repairsIssues, total: totalRepairIssues } =\n      this._repairsIssues;\n\n    return html`\n      <ha-app-layout>\n        <app-header fixed slot=\"header\">\n          <app-toolbar>\n            <ha-menu-button\n              .hass=${this.hass}\n              .narrow=${this.narrow}\n            ></ha-menu-button>\n            <div main-title>${this.hass.localize(\"panel.config\")}</div>\n            <ha-icon-button\n              .label=${this.hass.localize(\"ui.dialogs.quick-bar.title\")}\n              .path=${mdiMagnify}\n              @click=${this._showQuickBar}\n            ></ha-icon-button>\n            <ha-button-menu\n              corner=\"BOTTOM_START\"\n              @action=${this._handleMenuAction}\n              activatable\n            >\n              <ha-icon-button\n                slot=\"trigger\"\n                .label=${this.hass.localize(\"ui.common.menu\")}\n                .path=${mdiDotsVertical}\n              ></ha-icon-button>\n\n              <mwc-list-item>\n                ${this.hass.localize(\"ui.panel.config.updates.check_updates\")}\n              </mwc-list-item>\n            </ha-button-menu>\n          </app-toolbar>\n        </app-header>\n\n        <ha-config-section\n          .narrow=${this.narrow}\n          .isWide=${this.isWide}\n          full-width\n        >\n          ${repairsIssues.length || canInstallUpdates.length\n            ? html`<ha-card outlined>\n                ${repairsIssues.length\n                  ? html`\n                      <ha-config-repairs\n                        .hass=${this.hass}\n                        .narrow=${this.narrow}\n                        .total=${totalRepairIssues}\n                        .repairsIssues=${repairsIssues}\n                      ></ha-config-repairs>\n                      ${totalRepairIssues > repairsIssues.length\n                        ? html`\n                            <a class=\"button\" href=\"/config/repairs\">\n                              ${this.hass.localize(\n                                \"ui.panel.config.repairs.more_repairs\",\n                                {\n                                  count:\n                                    totalRepairIssues - repairsIssues.length,\n                                }\n                              )}\n                            </a>\n                          `\n                        : \"\"}\n                    `\n                  : \"\"}\n                ${repairsIssues.length && canInstallUpdates.length\n                  ? html`<hr />`\n                  : \"\"}\n                ${canInstallUpdates.length\n                  ? html`\n                      <ha-config-updates\n                        .hass=${this.hass}\n                        .narrow=${this.narrow}\n                        .total=${totalUpdates}\n                        .updateEntities=${canInstallUpdates}\n                      ></ha-config-updates>\n                      ${totalUpdates > canInstallUpdates.length\n                        ? html`\n                            <a class=\"button\" href=\"/config/updates\">\n                              ${this.hass.localize(\n                                \"ui.panel.config.updates.more_updates\",\n                                {\n                                  count:\n                                    totalUpdates - canInstallUpdates.length,\n                                }\n                              )}\n                            </a>\n                          `\n                        : \"\"}\n                    `\n                  : \"\"}\n              </ha-card>`\n            : \"\"}\n\n          <ha-card outlined>\n            <ha-config-navigation\n              .hass=${this.hass}\n              .narrow=${this.narrow}\n              .showAdvanced=${this.showAdvanced}\n              .pages=${this._pages(\n                this.cloudStatus,\n                isComponentLoaded(this.hass, \"cloud\")\n              )}\n            ></ha-config-navigation>\n          </ha-card>\n          <ha-tip>${this._tip}</ha-tip>\n        </ha-config-section>\n      </ha-app-layout>\n    `;\n  }\n\n  protected override updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n\n    if (!this._tip && changedProps.has(\"hass\")) {\n      this._tip = randomTip(this.hass, this.narrow);\n    }\n  }\n\n  private _filterUpdateEntitiesWithInstall = memoizeOne(\n    (entities: HassEntities): { updates: UpdateEntity[]; total: number } => {\n      const updates = filterUpdateEntitiesWithInstall(entities);\n\n      return {\n        updates: updates.slice(0, updates.length === 3 ? updates.length : 2),\n        total: updates.length,\n      };\n    }\n  );\n\n  private _showQuickBar(): void {\n    showQuickBar(this, {\n      commandMode: true,\n      hint: this.hass.localize(\"ui.dialogs.quick-bar.key_c_hint\"),\n    });\n  }\n\n  private async _handleMenuAction(ev: CustomEvent<ActionDetail>) {\n    switch (ev.detail.index) {\n      case 0:\n        checkForEntityUpdates(this, this.hass);\n        break;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-card:last-child {\n          margin-bottom: env(safe-area-inset-bottom);\n        }\n        :host(:not([narrow])) ha-card:last-child {\n          margin-bottom: max(24px, env(safe-area-inset-bottom));\n        }\n        ha-config-section {\n          margin: auto;\n          margin-top: -32px;\n          max-width: 600px;\n        }\n        ha-card {\n          overflow: hidden;\n        }\n        ha-card a {\n          text-decoration: none;\n          color: var(--primary-text-color);\n        }\n        a.button {\n          display: inline-block;\n          color: var(--primary-text-color);\n          padding: 6px 16px;\n          margin: 8px 16px 16px 16px;\n          border-radius: 32px;\n          border: 1px solid var(--divider-color);\n        }\n        .title {\n          font-size: 16px;\n          padding: 16px;\n          padding-bottom: 0;\n        }\n\n        @media all and (max-width: 600px) {\n          ha-card {\n            border-width: 1px 0;\n            border-radius: 0;\n            box-shadow: unset;\n          }\n          ha-config-section {\n            margin-top: -42px;\n          }\n        }\n\n        ha-tip {\n          margin-bottom: max(env(safe-area-inset-bottom), 8px);\n        }\n\n        .new {\n          color: var(--primary-color);\n        }\n\n        .keep-together {\n          display: inline-block;\n        }\n\n        hr {\n          height: 1px;\n          background-color: var(\n            --ha-card-border-color,\n            var(--divider-color, #e0e0e0)\n          );\n          border: none;\n          margin-top: 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-dashboard\": HaConfigDashboard;\n  }\n}\n","import \"@material/mwc-list/mwc-list\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { canShowPage } from \"../../../common/config/can_show_page\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-icon-next\";\nimport \"../../../components/ha-navigation-list\";\nimport type { CloudStatus } from \"../../../data/cloud\";\nimport type { PageNavigation } from \"../../../layouts/hass-tabs-subpage\";\nimport type { HomeAssistant } from \"../../../types\";\n\n@customElement(\"ha-config-navigation\")\nclass HaConfigNavigation extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property({ attribute: false }) public pages!: PageNavigation[];\n\n  protected render(): TemplateResult {\n    const pages = this.pages\n      .filter((page) =>\n        page.path === \"#external-app-configuration\"\n          ? this.hass.auth.external?.config.hasSettingsScreen\n          : canShowPage(this.hass, page)\n      )\n      .map((page) => ({\n        ...page,\n        name:\n          page.name ||\n          this.hass.localize(\n            `ui.panel.config.dashboard.${page.translationKey}.main`\n          ),\n        description:\n          page.component === \"cloud\" && (page.info as CloudStatus)\n            ? page.info.logged_in\n              ? `\n                  ${this.hass.localize(\n                    \"ui.panel.config.cloud.description_login\"\n                  )}\n                `\n              : `\n                  ${this.hass.localize(\n                    \"ui.panel.config.cloud.description_features\"\n                  )}\n                `\n            : `\n                ${\n                  page.description ||\n                  this.hass.localize(\n                    `ui.panel.config.dashboard.${page.translationKey}.secondary`\n                  )\n                }\n              `,\n      }));\n    return html`\n      <ha-navigation-list\n        hasSecondary\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .pages=${pages}\n        .label=${this.hass.localize(\"panel.config\")}\n      ></ha-navigation-list>\n    `;\n  }\n\n  static styles: CSSResultGroup = css`\n    ha-navigation-list {\n      --navigation-list-item-title-font-size: 16px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-navigation\": HaConfigNavigation;\n  }\n}\n"],"names":[],"sourceRoot":""}