{"version":3,"file":"3ccb48bd.js","mappings":";;AAkKA;AACA;AACA;AACA;;AAOA;AAEA;AAcA;;AAGA;;;AAOA;;AAMA;AAEA;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;AC3LA;;ACoFA;;AAEA;;;;AAIA;AAGA;;;AAGA;AACA;;;;;AAKA;AACA;AACA;;AAEA;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0IA","sources":["webpack://home-assistant-frontend/mwc-list-item-base.ts","webpack://home-assistant-frontend/./src/components/ha-list-item.ts","webpack://home-assistant-frontend/./src/panels/config/core/ha-config-system-navigation.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n\nimport '@material/mwc-ripple/mwc-ripple.js';\n\nimport {observer} from '@material/mwc-base/observer.js';\nimport {Ripple} from '@material/mwc-ripple/mwc-ripple.js';\nimport {RippleHandlers} from '@material/mwc-ripple/ripple-handlers.js';\nimport {html, LitElement} from 'lit';\nimport {property, query, queryAsync, state} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\nexport type SelectionSource = 'interaction'|'property';\nexport interface RequestSelectedDetail {\n  selected: boolean;\n  source: SelectionSource;\n}\n\nexport interface Layoutable {\n  layout: (updateItems?: boolean) => void;\n  debouncedLayout?: (updateItems?: boolean) => void | undefined;\n}\n\nexport type GraphicType = 'avatar'|'icon'|'medium'|'large'|'control'|null;\n\n/**\n * @fires request-selected {RequestSelectedDetail}\n * @fires list-item-rendered\n */\nexport class ListItemBase extends LitElement {\n  @query('slot') protected slotElement!: HTMLSlotElement|null;\n  @queryAsync('mwc-ripple') ripple!: Promise<Ripple|null>;\n\n  @property({type: String}) value = '';\n  @property({type: String, reflect: true}) group: string|null = null;\n  @property({type: Number, reflect: true}) tabindex = -1;\n  @property({type: Boolean, reflect: true})\n  @observer(function(this: ListItemBase, value: boolean) {\n    if (value) {\n      this.setAttribute('aria-disabled', 'true');\n    } else {\n      this.setAttribute('aria-disabled', 'false');\n    }\n  })\n  disabled = false;\n  @property({type: Boolean, reflect: true}) twoline = false;\n  @property({type: Boolean, reflect: true}) activated = false;\n  @property({type: String, reflect: true}) graphic: GraphicType = null;\n  @property({type: Boolean}) multipleGraphics = false;\n  @property({type: Boolean}) hasMeta = false;\n  @property({type: Boolean, reflect: true})\n  @observer(function(this: ListItemBase, value: boolean) {\n    if (value) {\n      this.removeAttribute('aria-checked');\n      this.removeAttribute('mwc-list-item');\n      this.selected = false;\n      this.activated = false;\n      this.tabIndex = -1;\n    } else {\n      this.setAttribute('mwc-list-item', '');\n    }\n  })\n  noninteractive = false;\n  @property({type: Boolean, reflect: true})\n  @observer(function(this: ListItemBase, value: boolean) {\n    const role = this.getAttribute('role');\n    const isAriaSelectable = role === 'gridcell' || role === 'option' ||\n        role === 'row' || role === 'tab';\n\n    if (isAriaSelectable && value) {\n      this.setAttribute('aria-selected', 'true');\n    } else if (isAriaSelectable) {\n      this.setAttribute('aria-selected', 'false');\n    }\n\n    if (this._firstChanged) {\n      this._firstChanged = false;\n      return;\n    }\n\n    if (this._skipPropRequest) {\n      return;\n    }\n\n    this.fireRequestSelected(value, 'property');\n  })\n  selected = false;\n\n  @state() protected shouldRenderRipple = false;\n  @state() _managingList: Layoutable|null = null;\n\n  protected boundOnClick = this.onClick.bind(this);\n  protected _firstChanged = true;\n  protected _skipPropRequest = false;\n  protected rippleHandlers: RippleHandlers = new RippleHandlers(() => {\n    this.shouldRenderRipple = true;\n    return this.ripple;\n  });\n  protected listeners: ({\n    target: Element;\n    eventNames: string[];\n    cb: EventListenerOrEventListenerObject;\n  })[] =\n      [\n        {\n          target: this,\n          eventNames: ['click'],\n          cb:\n              () => {\n                this.onClick();\n              },\n        },\n        {\n          target: this,\n          eventNames: ['mouseenter'],\n          cb: this.rippleHandlers.startHover,\n        },\n        {\n          target: this,\n          eventNames: ['mouseleave'],\n          cb: this.rippleHandlers.endHover,\n        },\n        {\n          target: this,\n          eventNames: ['focus'],\n          cb: this.rippleHandlers.startFocus,\n        },\n        {\n          target: this,\n          eventNames: ['blur'],\n          cb: this.rippleHandlers.endFocus,\n        },\n        {\n          target: this,\n          eventNames: ['mousedown', 'touchstart'],\n          cb:\n              (e: Event) => {\n                const name = e.type;\n                this.onDown(name === 'mousedown' ? 'mouseup' : 'touchend', e);\n              },\n        },\n      ];\n\n  get text() {\n    const textContent = this.textContent;\n\n    return textContent ? textContent.trim() : '';\n  }\n\n  override render() {\n    const text = this.renderText();\n    const graphic = this.graphic ? this.renderGraphic() : html``;\n    const meta = this.hasMeta ? this.renderMeta() : html``;\n\n    return html`\n      ${this.renderRipple()}\n      ${graphic}\n      ${text}\n      ${meta}`;\n  }\n\n  protected renderRipple() {\n    if (this.shouldRenderRipple) {\n      return html`\n      <mwc-ripple\n        .activated=${this.activated}>\n      </mwc-ripple>`;\n    } else if (this.activated) {\n      return html`<div class=\"fake-activated-ripple\"></div>`;\n    } else {\n      return '';\n    }\n  }\n\n  protected renderGraphic() {\n    const graphicClasses = {\n      multi: this.multipleGraphics,\n    };\n\n    return html`\n      <span class=\"mdc-deprecated-list-item__graphic material-icons ${\n        classMap(graphicClasses)}\">\n        <slot name=\"graphic\"></slot>\n      </span>`;\n  }\n\n  protected renderMeta() {\n    return html`\n      <span class=\"mdc-deprecated-list-item__meta material-icons\">\n        <slot name=\"meta\"></slot>\n      </span>`;\n  }\n\n  protected renderText() {\n    const inner = this.twoline ? this.renderTwoline() : this.renderSingleLine();\n    return html`\n      <span class=\"mdc-deprecated-list-item__text\">\n        ${inner}\n      </span>`;\n  }\n\n  protected renderSingleLine() {\n    return html`<slot></slot>`;\n  }\n\n  protected renderTwoline() {\n    return html`\n      <span class=\"mdc-deprecated-list-item__primary-text\">\n        <slot></slot>\n      </span>\n      <span class=\"mdc-deprecated-list-item__secondary-text\">\n        <slot name=\"secondary\"></slot>\n      </span>\n    `;\n  }\n\n  protected onClick() {\n    this.fireRequestSelected(!this.selected, 'interaction');\n  }\n\n  protected onDown(upName: string, evt: Event) {\n    const onUp = () => {\n      window.removeEventListener(upName, onUp);\n      this.rippleHandlers.endPress();\n    };\n\n    window.addEventListener(upName, onUp);\n    this.rippleHandlers.startPress(evt);\n  }\n\n  protected fireRequestSelected(selected: boolean, source: SelectionSource) {\n    if (this.noninteractive) {\n      return;\n    }\n\n    const customEv = new CustomEvent<RequestSelectedDetail>(\n        'request-selected',\n        {bubbles: true, composed: true, detail: {source, selected}});\n\n    this.dispatchEvent(customEv);\n  }\n\n  override connectedCallback() {\n    super.connectedCallback();\n\n    if (!this.noninteractive) {\n      this.setAttribute('mwc-list-item', '');\n    }\n\n    for (const listener of this.listeners) {\n      for (const eventName of listener.eventNames) {\n        listener.target.addEventListener(\n            eventName, listener.cb, {passive: true});\n      }\n    }\n  }\n\n  override disconnectedCallback() {\n    super.disconnectedCallback();\n\n    for (const listener of this.listeners) {\n      for (const eventName of listener.eventNames) {\n        listener.target.removeEventListener(eventName, listener.cb);\n      }\n    }\n\n    if (this._managingList) {\n      this._managingList.debouncedLayout ?\n          this._managingList.debouncedLayout(true) :\n          this._managingList.layout(true);\n    }\n  }\n\n  // composed flag, event fire through shadow root and up through composed tree\n  protected override firstUpdated() {\n    const ev = new Event('list-item-rendered', {bubbles: true, composed: true});\n    this.dispatchEvent(ev);\n  }\n}\n","import { ListItemBase } from \"@material/mwc-list/mwc-list-item-base\";\nimport { styles } from \"@material/mwc-list/mwc-list-item.css\";\nimport { css, CSSResultGroup } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-list-item\")\nexport class HaListItem extends ListItemBase {\n  static get styles(): CSSResultGroup {\n    return [\n      styles,\n      css`\n        :host {\n          padding-left: var(--mdc-list-side-padding, 20px);\n          padding-right: var(--mdc-list-side-padding, 20px);\n        }\n        :host([graphic=\"avatar\"]:not([twoLine])),\n        :host([graphic=\"icon\"]:not([twoLine])) {\n          height: 48px;\n        }\n        span.material-icons:first-of-type {\n          margin-inline-start: 0px !important;\n          margin-inline-end: var(\n            --mdc-list-item-graphic-margin,\n            16px\n          ) !important;\n          direction: var(--direction);\n        }\n        span.material-icons:last-of-type {\n          margin-inline-start: auto !important;\n          margin-inline-end: 0px !important;\n          direction: var(--direction);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-list-item\": HaListItem;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { canShowPage } from \"../../../common/config/can_show_page\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { relativeTime } from \"../../../common/datetime/relative_time\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-navigation-list\";\nimport \"../../../components/ha-tip\";\nimport { BackupContent, fetchBackupInfo } from \"../../../data/backup\";\nimport { CloudStatus, fetchCloudStatus } from \"../../../data/cloud\";\nimport { BOARD_NAMES, HardwareInfo } from \"../../../data/hardware\";\nimport { fetchHassioBackups, HassioBackup } from \"../../../data/hassio/backup\";\nimport {\n  fetchHassioHassOsInfo,\n  fetchHassioHostInfo,\n  HassioHassOSInfo,\n  HassioHostInfo,\n} from \"../../../data/hassio/host\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-subpage\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport \"../ha-config-section\";\nimport { configSections } from \"../ha-panel-config\";\n\n@customElement(\"ha-config-system-navigation\")\nclass HaConfigSystemNavigation extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true })\n  public narrow!: boolean;\n\n  @property({ type: Boolean }) public isWide!: boolean;\n\n  @property({ attribute: false }) public cloudStatus?: CloudStatus;\n\n  @property({ type: Boolean }) public showAdvanced!: boolean;\n\n  @state() private _latestBackupDate?: string;\n\n  @state() private _boardName?: string;\n\n  @state() private _storageInfo?: { used: number; free: number; total: number };\n\n  @state() private _externalAccess = false;\n\n  protected render(): TemplateResult {\n    const pages = configSections.general\n      .filter((page) => canShowPage(this.hass, page))\n      .map((page) => {\n        let description = \"\";\n\n        switch (page.translationKey) {\n          case \"backup\":\n            description = this._latestBackupDate\n              ? this.hass.localize(\n                  \"ui.panel.config.backup.description\",\n                  \"relative_time\",\n                  relativeTime(\n                    new Date(this._latestBackupDate),\n                    this.hass.locale\n                  )\n                )\n              : this.hass.localize(\n                  \"ui.panel.config.backup.description_no_backup\"\n                );\n            break;\n          case \"network\":\n            description = this.hass.localize(\n              \"ui.panel.config.network.description\",\n              \"state\",\n              this._externalAccess\n                ? this.hass.localize(\"ui.panel.config.network.enabled\")\n                : this.hass.localize(\"ui.panel.config.network.disabled\")\n            );\n            break;\n          case \"storage\":\n            description = this._storageInfo\n              ? this.hass.localize(\n                  \"ui.panel.config.storage.description\",\n                  \"percent_used\",\n                  `${Math.round(\n                    (this._storageInfo.used / this._storageInfo.total) * 100\n                  )}%`,\n                  \"free_space\",\n                  `${this._storageInfo.free} GB`\n                )\n              : \"\";\n            break;\n          case \"hardware\":\n            description =\n              this._boardName ||\n              this.hass.localize(\"ui.panel.config.hardware.description\");\n            break;\n\n          default:\n            description = this.hass.localize(\n              `ui.panel.config.${page.translationKey}.description`\n            );\n            break;\n        }\n\n        return {\n          ...page,\n          name: page.translationKey\n            ? this.hass.localize(\n                `ui.panel.config.${page.translationKey}.caption`\n              )\n            : page.name,\n          description,\n        };\n      });\n\n    return html`\n      <hass-subpage\n        .hass=${this.hass}\n        back-path=\"/config\"\n        .header=${this.hass.localize(\"ui.panel.config.dashboard.system.main\")}\n      >\n        <mwc-button\n          slot=\"toolbar-icon\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.system_dashboard.restart_homeassistant_short\"\n          )}\n          @click=${this._restart}\n        ></mwc-button>\n        <ha-config-section\n          .narrow=${this.narrow}\n          .isWide=${this.isWide}\n          full-width\n        >\n          <ha-card outlined>\n            <ha-navigation-list\n              .hass=${this.hass}\n              .narrow=${this.narrow}\n              .pages=${pages}\n              hasSecondary\n              .label=${this.hass.localize(\n                \"ui.panel.config.dashboard.system.main\"\n              )}\n            ></ha-navigation-list>\n          </ha-card>\n        </ha-config-section>\n      </hass-subpage>\n    `;\n  }\n\n  protected firstUpdated(_changedProperties): void {\n    super.firstUpdated(_changedProperties);\n\n    this._fetchNetworkStatus();\n    const isHassioLoaded = isComponentLoaded(this.hass, \"hassio\");\n    this._fetchBackupInfo(isHassioLoaded);\n    this._fetchHardwareInfo(isHassioLoaded);\n    if (isHassioLoaded) {\n      this._fetchStorageInfo();\n    }\n  }\n\n  private _restart() {\n    showConfirmationDialog(this, {\n      title: this.hass.localize(\n        \"ui.panel.config.system_dashboard.confirm_restart_title\"\n      ),\n      text: this.hass.localize(\n        \"ui.panel.config.system_dashboard.confirm_restart_text\"\n      ),\n      confirmText: this.hass.localize(\n        \"ui.panel.config.system_dashboard.restart_homeassistant_short\"\n      ),\n      confirm: () => {\n        this.hass.callService(\"homeassistant\", \"restart\").catch((reason) => {\n          showAlertDialog(this, {\n            title: this.hass.localize(\n              \"ui.panel.config.system_dashboard.restart_error\"\n            ),\n            text: reason.message,\n          });\n        });\n      },\n    });\n  }\n\n  private async _fetchBackupInfo(isHassioLoaded: boolean) {\n    const backups: BackupContent[] | HassioBackup[] = isHassioLoaded\n      ? await fetchHassioBackups(this.hass)\n      : isComponentLoaded(this.hass, \"backup\")\n      ? await fetchBackupInfo(this.hass).then(\n          (backupData) => backupData.backups\n        )\n      : [];\n\n    if (backups.length > 0) {\n      this._latestBackupDate = (backups as any[]).reduce((a, b) =>\n        a.date > b.date ? a : b\n      ).date;\n    }\n  }\n\n  private async _fetchHardwareInfo(isHassioLoaded: boolean) {\n    if (isComponentLoaded(this.hass, \"hardware\")) {\n      const hardwareInfo: HardwareInfo = await this.hass.callWS({\n        type: \"hardware/info\",\n      });\n      this._boardName = hardwareInfo?.hardware?.[0].name;\n    } else if (isHassioLoaded) {\n      const osData: HassioHassOSInfo = await fetchHassioHassOsInfo(this.hass);\n      if (osData.board) {\n        this._boardName = BOARD_NAMES[osData.board];\n      }\n    }\n  }\n\n  private async _fetchStorageInfo() {\n    const hostInfo: HassioHostInfo = await fetchHassioHostInfo(this.hass);\n    this._storageInfo = {\n      used: hostInfo.disk_used,\n      free: hostInfo.disk_free,\n      total: hostInfo.disk_total,\n    };\n  }\n\n  private async _fetchNetworkStatus() {\n    if (isComponentLoaded(this.hass, \"cloud\")) {\n      const cloudStatus = await fetchCloudStatus(this.hass);\n      if (cloudStatus.logged_in) {\n        this._externalAccess = true;\n        return;\n      }\n    }\n    this._externalAccess = this.hass.config.external_url !== null;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host(:not([narrow])) ha-card {\n          margin-bottom: max(24px, env(safe-area-inset-bottom));\n        }\n\n        ha-config-section {\n          margin: auto;\n          margin-top: -32px;\n          max-width: 600px;\n        }\n\n        ha-card {\n          overflow: hidden;\n          margin-bottom: 24px;\n          margin-bottom: max(24px, env(safe-area-inset-bottom));\n        }\n\n        ha-card a {\n          text-decoration: none;\n          color: var(--primary-text-color);\n        }\n\n        .title {\n          font-size: 16px;\n          padding: 16px;\n          padding-bottom: 0;\n        }\n\n        @media all and (max-width: 600px) {\n          ha-card {\n            border-width: 1px 0;\n            border-radius: 0;\n            box-shadow: unset;\n          }\n          ha-config-section {\n            margin-top: -42px;\n          }\n        }\n\n        ha-navigation-list {\n          --navigation-list-item-title-font-size: 16px;\n        }\n        ha-tip {\n          margin-bottom: max(env(safe-area-inset-bottom), 8px);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-system-navigation\": HaConfigSystemNavigation;\n  }\n}\n"],"names":[],"sourceRoot":""}