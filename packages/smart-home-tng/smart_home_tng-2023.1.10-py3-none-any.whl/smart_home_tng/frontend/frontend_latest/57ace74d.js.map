{"version":3,"file":"57ace74d.js","mappings":";AA0DA;AACA;;AAGA;AACA;;AAEA;;AAGA;;;;AAlBA;;AAEA;;AAyBA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/entity-rows/hui-group-entity-row.ts"],"sourcesContent":["import { html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { DOMAINS_TOGGLE } from \"../../../common/const\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeStateDisplay } from \"../../../common/entity/compute_state_display\";\nimport \"../../../components/entity/ha-entity-toggle\";\nimport { HomeAssistant } from \"../../../types\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport \"../components/hui-generic-entity-row\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport { EntityConfig, LovelaceRow } from \"./types\";\n\n@customElement(\"hui-group-entity-row\")\nclass HuiGroupEntityRow extends LitElement implements LovelaceRow {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: EntityConfig;\n\n  private _computeCanToggle(hass: HomeAssistant, entityIds: string[]): boolean {\n    return entityIds.some((entityId) => {\n      const domain = computeDomain(entityId);\n      if (domain === \"group\") {\n        return this._computeCanToggle(\n          hass,\n          this.hass?.states[entityId].attributes.entity_id\n        );\n      }\n      return DOMAINS_TOGGLE.has(domain);\n    });\n  }\n\n  public setConfig(config: EntityConfig): void {\n    if (!config) {\n      throw new Error(\"Invalid configuration\");\n    }\n    this._config = config;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity];\n\n    if (!stateObj) {\n      return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        </hui-warning>\n      `;\n    }\n\n    return html`\n      <hui-generic-entity-row .hass=${this.hass} .config=${this._config}>\n        ${this._computeCanToggle(this.hass, stateObj.attributes.entity_id)\n          ? html`\n              <ha-entity-toggle\n                .hass=${this.hass}\n                .stateObj=${stateObj}\n              ></ha-entity-toggle>\n            `\n          : html`\n              <div class=\"text-content\">\n                ${computeStateDisplay(\n                  this.hass!.localize,\n                  stateObj,\n                  this.hass.locale\n                )}\n              </div>\n            `}\n      </hui-generic-entity-row>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-group-entity-row\": HuiGroupEntityRow;\n  }\n}\n"],"names":[],"sourceRoot":""}