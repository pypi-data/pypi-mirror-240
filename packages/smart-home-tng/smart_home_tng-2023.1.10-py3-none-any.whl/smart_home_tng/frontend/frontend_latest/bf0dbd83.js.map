{"version":3,"file":"bf0dbd83.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgFA;ACnEA;;AAEA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;;;AC0BA;;;AAGA;;;AAMA;AAGA;;;AAGA;AAGA;;;AAGA;AAEA;AAEA;;;AAGA;AAGA;;;AAGA;;AAIA;;AAEA;;AAIA;;AAGA;;;AAKA;AAGA;;;AAGA;AAGA;;AAEA;AAEA;;AAGA;;;AAKA;AAGA;;;AAGA;AAGA;;AAEA;;AA5CA;;;;AAmDA;AACA;;;AAIA;;;AAQA;;;AAIA;;;;AAQA;;;;AASA;;;AAQA;;;AAIA;;;;AAQA;;;;AASA;;AAgCA;AAEA;;;AAKA;;;;AAIA;;AATA;AAeA;;;AAUA;;AAIA;;AAGA;;AAKA;AACA;AAGA;;AAEA;;;AALA;;AAeA;;AAEA;;AAGA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuGA","sources":["webpack://home-assistant-frontend/./node_modules/@polymer/paper-item/paper-item-body.js","webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/panels/config/repairs/dialog-system-information.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/default-theme.js';\nimport '@polymer/paper-styles/typography.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/*\nUse `<paper-item-body>` in a `<paper-item>` or `<paper-icon-item>` to make two-\nor three- line items. It is a flex item that is a vertical flexbox.\n\n    <paper-item>\n      <paper-item-body two-line>\n        <div>Show your status</div>\n        <div secondary>Your status is visible to everyone</div>\n      </paper-item-body>\n    </paper-item>\n\nThe child elements with the `secondary` attribute is given secondary text\nstyling.\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-body-two-line-min-height` | Minimum height of a two-line item | `72px`\n`--paper-item-body-three-line-min-height` | Minimum height of a three-line item | `88px`\n`--paper-item-body-secondary-color` | Foreground color for the `secondary` area | `--secondary-text-color`\n`--paper-item-body-secondary` | Mixin applied to the `secondary` area | `{}`\n\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        overflow: hidden; /* needed for text-overflow: ellipsis to work on ff */\n        @apply --layout-vertical;\n        @apply --layout-center-justified;\n        @apply --layout-flex;\n      }\n\n      :host([two-line]) {\n        min-height: var(--paper-item-body-two-line-min-height, 72px);\n      }\n\n      :host([three-line]) {\n        min-height: var(--paper-item-body-three-line-min-height, 88px);\n      }\n\n      :host > ::slotted(*) {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n      }\n\n      :host > ::slotted([secondary]) {\n        @apply --paper-font-body1;\n\n        color: var(--paper-item-body-secondary-color, var(--secondary-text-color));\n\n        @apply --paper-item-body-secondary;\n      }\n    </style>\n\n    <slot></slot>\n`,\n\n  is: 'paper-item-body'\n});\n","import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { formatDateTime } from \"../../../common/datetime/format_date_time\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { copyToClipboard } from \"../../../common/util/copy-clipboard\";\nimport { subscribePollingCollection } from \"../../../common/util/subscribe-polling\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-card\";\nimport { createCloseHeading } from \"../../../components/ha-dialog\";\nimport \"../../../components/ha-metric\";\nimport { fetchHassioStats, HassioStats } from \"../../../data/hassio/common\";\nimport {\n  fetchHassioResolution,\n  HassioResolution,\n} from \"../../../data/hassio/resolution\";\nimport { domainToName } from \"../../../data/integration\";\nimport {\n  subscribeSystemHealthInfo,\n  SystemCheckValueObject,\n  SystemHealthInfo,\n} from \"../../../data/system_health\";\nimport { showAlertDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport { showToast } from \"../../../util/toast\";\nimport \"../../../components/ha-circular-progress\";\n\nconst sortKeys = (a: string, b: string) => {\n  if (a === \"homeassistant\") {\n    return -1;\n  }\n  if (b === \"homeassistant\") {\n    return 1;\n  }\n  if (a < b) {\n    return -1;\n  }\n  if (b < a) {\n    return 1;\n  }\n  return 0;\n};\n\nexport const UNSUPPORTED_REASON_URL = {};\nexport const UNHEALTHY_REASON_URL = {\n  privileged: \"/more-info/unsupported/privileged\",\n};\n\n@customElement(\"dialog-system-information\")\nclass DialogSystemInformation extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _systemInfo?: SystemHealthInfo;\n\n  @state() private _resolutionInfo?: HassioResolution;\n\n  @state() private _supervisorStats?: HassioStats;\n\n  @state() private _coreStats?: HassioStats;\n\n  @state() private _opened = false;\n\n  private _subscriptions?: Array<UnsubscribeFunc | Promise<UnsubscribeFunc>>;\n\n  public showDialog(): void {\n    this._opened = true;\n    this.hass!.loadBackendTranslation(\"system_health\");\n    this._subscribe();\n  }\n\n  public closeDialog() {\n    this._opened = false;\n    this._unsubscribe();\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  private _subscribe(): void {\n    const subs: Array<UnsubscribeFunc | Promise<UnsubscribeFunc>> = [];\n    if (isComponentLoaded(this.hass, \"system_health\")) {\n      subs.push(\n        subscribeSystemHealthInfo(this.hass!, (info) => {\n          this._systemInfo = info;\n        })\n      );\n    }\n\n    if (isComponentLoaded(this.hass, \"hassio\")) {\n      subs.push(\n        subscribePollingCollection(\n          this.hass,\n          async () => {\n            this._supervisorStats = await fetchHassioStats(\n              this.hass,\n              \"supervisor\"\n            );\n            this._coreStats = await fetchHassioStats(this.hass, \"core\");\n          },\n          10000\n        )\n      );\n\n      fetchHassioResolution(this.hass).then((data) => {\n        this._resolutionInfo = data;\n      });\n    }\n\n    this._subscriptions = subs;\n  }\n\n  private _unsubscribe() {\n    while (this._subscriptions?.length) {\n      const unsub = this._subscriptions.pop()!;\n      if (unsub instanceof Promise) {\n        unsub.then((unsubFunc) => unsubFunc());\n      } else {\n        unsub();\n      }\n    }\n    this._subscriptions = undefined;\n\n    this._systemInfo = undefined;\n    this._resolutionInfo = undefined;\n    this._coreStats = undefined;\n    this._supervisorStats = undefined;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._opened) {\n      return html``;\n    }\n\n    const sections = this._getSections();\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        scrimClickAction\n        escapeKeyAction\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\"ui.panel.config.repairs.system_information\")\n        )}\n      >\n        <div>\n          ${this._resolutionInfo\n            ? html`${this._resolutionInfo.unhealthy.length\n                ? html`<ha-alert alert-type=\"error\">\n                    ${this.hass.localize(\"ui.dialogs.unhealthy.title\")}\n                    <mwc-button\n                      slot=\"action\"\n                      .label=${this.hass.localize(\n                        \"ui.panel.config.common.learn_more\"\n                      )}\n                      @click=${this._unhealthyDialog}\n                    >\n                    </mwc-button\n                  ></ha-alert>`\n                : \"\"}\n              ${this._resolutionInfo.unsupported.length\n                ? html`<ha-alert alert-type=\"warning\">\n                    ${this.hass.localize(\"ui.dialogs.unsupported.title\")}\n                    <mwc-button\n                      slot=\"action\"\n                      .label=${this.hass.localize(\n                        \"ui.panel.config.common.learn_more\"\n                      )}\n                      @click=${this._unsupportedDialog}\n                    >\n                    </mwc-button>\n                  </ha-alert>`\n                : \"\"} `\n            : \"\"}\n\n          <div>${sections}</div>\n\n          ${!this._coreStats && !this._supervisorStats\n            ? \"\"\n            : html`\n                <div>\n                  ${this._coreStats\n                    ? html`\n                        <h3>\n                          ${this.hass.localize(\n                            \"ui.panel.config.system_health.core_stats\"\n                          )}\n                        </h3>\n                        <ha-metric\n                          .heading=${this.hass.localize(\n                            \"ui.panel.config.system_health.cpu_usage\"\n                          )}\n                          .value=${this._coreStats.cpu_percent}\n                        ></ha-metric>\n                        <ha-metric\n                          .heading=${this.hass.localize(\n                            \"ui.panel.config.system_health.ram_usage\"\n                          )}\n                          .value=${this._coreStats.memory_percent}\n                        ></ha-metric>\n                      `\n                    : \"\"}\n                  ${this._supervisorStats\n                    ? html`\n                        <h3>\n                          ${this.hass.localize(\n                            \"ui.panel.config.system_health.supervisor_stats\"\n                          )}\n                        </h3>\n                        <ha-metric\n                          .heading=${this.hass.localize(\n                            \"ui.panel.config.system_health.cpu_usage\"\n                          )}\n                          .value=${this._supervisorStats.cpu_percent}\n                        ></ha-metric>\n                        <ha-metric\n                          .heading=${this.hass.localize(\n                            \"ui.panel.config.system_health.ram_usage\"\n                          )}\n                          .value=${this._supervisorStats.memory_percent}\n                        ></ha-metric>\n                      `\n                    : \"\"}\n                </div>\n              `}\n        </div>\n        <mwc-button\n          slot=\"primaryAction\"\n          .label=${this.hass.localize(\"ui.panel.config.repairs.copy\")}\n          @click=${this._copyInfo}\n        ></mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private async _unsupportedDialog(): Promise<void> {\n    await showAlertDialog(this, {\n      title: this.hass.localize(\"ui.dialogs.unsupported.title\"),\n      text: html`${this.hass.localize(\"ui.dialogs.unsupported.description\")}\n        <br /><br />\n        <ul>\n          ${this._resolutionInfo!.unsupported.map(\n            (reason) => html`\n              <li>\n                <a\n                  href=${documentationUrl(\n                    this.hass,\n                    UNSUPPORTED_REASON_URL[reason] ||\n                      `/more-info/unsupported/${reason}`\n                  )}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  ${this.hass.localize(\n                    `ui.dialogs.unsupported.reason.${reason}`\n                  ) || reason}\n                </a>\n              </li>\n            `\n          )}\n        </ul>`,\n    });\n  }\n\n  private async _unhealthyDialog(): Promise<void> {\n    await showAlertDialog(this, {\n      title: this.hass.localize(\"ui.dialogs.unhealthy.title\"),\n      text: html`${this.hass.localize(\"ui.dialogs.unhealthy.description\")}\n        <br /><br />\n        <ul>\n          ${this._resolutionInfo!.unhealthy.map(\n            (reason) => html`\n              <li>\n                <a\n                  href=${documentationUrl(\n                    this.hass,\n                    UNHEALTHY_REASON_URL[reason] ||\n                      `/more-info/unhealthy/${reason}`\n                  )}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  ${this.hass.localize(\n                    `ui.dialogs.unhealthy.reason.${reason}`\n                  ) || reason}\n                </a>\n              </li>\n            `\n          )}\n        </ul>`,\n    });\n  }\n\n  private _getSections(): TemplateResult[] {\n    const sections: TemplateResult[] = [];\n\n    if (!this._systemInfo) {\n      sections.push(\n        html`\n          <div class=\"loading-container\">\n            <ha-circular-progress active></ha-circular-progress>\n          </div>\n        `\n      );\n    } else {\n      const domains = Object.keys(this._systemInfo).sort(sortKeys);\n      for (const domain of domains) {\n        const domainInfo = this._systemInfo[domain];\n        const keys: TemplateResult[] = [];\n\n        for (const key of Object.keys(domainInfo.info)) {\n          let value: unknown;\n\n          if (\n            domainInfo.info[key] &&\n            typeof domainInfo.info[key] === \"object\"\n          ) {\n            const info = domainInfo.info[key] as SystemCheckValueObject;\n\n            if (info.type === \"pending\") {\n              value = html`\n                <ha-circular-progress active size=\"tiny\"></ha-circular-progress>\n              `;\n            } else if (info.type === \"failed\") {\n              value = html`\n                <span class=\"error\">${info.error}</span>${!info.more_info\n                  ? \"\"\n                  : html`\n                      –\n                      <a\n                        href=${info.more_info}\n                        target=\"_blank\"\n                        rel=\"noreferrer noopener\"\n                      >\n                        ${this.hass.localize(\n                          \"ui.panel.config.info.system_health.more_info\"\n                        )}\n                      </a>\n                    `}\n              `;\n            } else if (info.type === \"date\") {\n              value = formatDateTime(new Date(info.value), this.hass.locale);\n            }\n          } else {\n            value = domainInfo.info[key];\n          }\n\n          keys.push(html`\n            <tr>\n              <td>\n                ${this.hass.localize(\n                  `component.${domain}.system_health.info.${key}`\n                ) || key}\n              </td>\n              <td>${value}</td>\n            </tr>\n          `);\n        }\n        if (domain !== \"homeassistant\") {\n          sections.push(\n            html`\n              <div class=\"card-header\">\n                <h3>${domainToName(this.hass.localize, domain)}</h3>\n                ${!domainInfo.manage_url\n                  ? \"\"\n                  : html`\n                      <a class=\"manage\" href=${domainInfo.manage_url}>\n                        <mwc-button>\n                          ${this.hass.localize(\n                            \"ui.panel.config.info.system_health.manage\"\n                          )}\n                        </mwc-button>\n                      </a>\n                    `}\n              </div>\n            `\n          );\n        }\n        sections.push(html`\n          <table>\n            ${keys}\n          </table>\n        `);\n      }\n    }\n    return sections;\n  }\n\n  private async _copyInfo(): Promise<void> {\n    let haContent: string | undefined;\n    const domainParts: string[] = [];\n\n    for (const domain of Object.keys(this._systemInfo!).sort(sortKeys)) {\n      const domainInfo = this._systemInfo![domain];\n      let first = true;\n      const parts = [\n        `${\n          domain !== \"homeassistant\"\n            ? `<details><summary>${domainToName(\n                this.hass.localize,\n                domain\n              )}</summary>\\n`\n            : \"\"\n        }`,\n      ];\n\n      for (const key of Object.keys(domainInfo.info)) {\n        let value: unknown;\n\n        if (domainInfo.info[key] && typeof domainInfo.info[key] === \"object\") {\n          const info = domainInfo.info[key] as SystemCheckValueObject;\n\n          if (info.type === \"pending\") {\n            value = \"pending\";\n          } else if (info.type === \"failed\") {\n            value = `failed to load: ${info.error}`;\n          } else if (info.type === \"date\") {\n            value = formatDateTime(new Date(info.value), this.hass.locale);\n          }\n        } else {\n          value = domainInfo.info[key];\n        }\n        if (first) {\n          parts.push(`${key} | ${value}\\n-- | --`);\n          first = false;\n        } else {\n          parts.push(`${key} | ${value}`);\n        }\n      }\n\n      if (domain === \"homeassistant\") {\n        haContent = parts.join(\"\\n\");\n      } else {\n        domainParts.push(parts.join(\"\\n\"));\n        if (domain !== \"homeassistant\") {\n          domainParts.push(\"</details>\");\n        }\n      }\n    }\n\n    await copyToClipboard(\n      `${\"## \"}System Information\\n${haContent}\\n\\n${domainParts.join(\"\\n\\n\")}`\n    );\n\n    showToast(this, {\n      message: this.hass.localize(\"ui.common.copied_clipboard\"),\n    });\n  }\n\n  static styles: CSSResultGroup = [\n    haStyleDialog,\n    css`\n      ha-alert {\n        margin-bottom: 16px;\n        display: block;\n      }\n      table {\n        width: 100%;\n      }\n\n      td:first-child {\n        width: 45%;\n      }\n\n      td:last-child {\n        direction: ltr;\n      }\n\n      .loading-container {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n\n      .card-header {\n        justify-content: space-between;\n        display: flex;\n        align-items: center;\n      }\n\n      .error {\n        color: var(--error-color);\n      }\n\n      a.manage {\n        text-decoration: none;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-system-information\": DialogSystemInformation;\n  }\n}\n"],"names":[],"sourceRoot":""}