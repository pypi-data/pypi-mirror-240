{"version":3,"file":"267e314f.js","mappings":";AAsEA;;AAEA;;;AAVA;;AAEA;;AAYA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/entity-rows/hui-timer-entity-row.ts"],"sourcesContent":["import { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { computeDisplayTimer, timerTimeRemaining } from \"../../../data/timer\";\nimport { HomeAssistant } from \"../../../types\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport \"../components/hui-generic-entity-row\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport { EntityConfig } from \"./types\";\n\n@customElement(\"hui-timer-entity-row\")\nclass HuiTimerEntityRow extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: EntityConfig;\n\n  @state() private _timeRemaining?: number;\n\n  private _interval?: number;\n\n  public setConfig(config: EntityConfig): void {\n    if (!config) {\n      throw new Error(\"Invalid configuration\");\n    }\n    this._config = config;\n\n    if (!this.hass) {\n      return;\n    }\n\n    const stateObj = this.hass!.states[this._config.entity];\n\n    if (stateObj) {\n      this._startInterval(stateObj);\n    } else {\n      this._clearInterval();\n    }\n  }\n\n  public disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this._clearInterval();\n  }\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    if (this._config && this._config.entity) {\n      const stateObj = this.hass?.states[this._config!.entity];\n      if (stateObj) {\n        this._startInterval(stateObj);\n      }\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity];\n\n    if (!stateObj) {\n      return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        </hui-warning>\n      `;\n    }\n\n    return html`\n      <hui-generic-entity-row .hass=${this.hass} .config=${this._config}>\n        <div class=\"text-content\">\n          ${computeDisplayTimer(this.hass, stateObj, this._timeRemaining)}\n        </div>\n      </hui-generic-entity-row>\n    `;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    if (changedProps.has(\"_timeRemaining\")) {\n      return true;\n    }\n\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n\n    if (!this._config || !changedProps.has(\"hass\")) {\n      return;\n    }\n    const stateObj = this.hass!.states[this._config!.entity];\n    const oldHass = changedProps.get(\"hass\") as this[\"hass\"];\n    const oldStateObj = oldHass\n      ? oldHass.states[this._config!.entity]\n      : undefined;\n\n    if (oldStateObj !== stateObj) {\n      this._startInterval(stateObj);\n    } else if (!stateObj) {\n      this._clearInterval();\n    }\n  }\n\n  private _clearInterval(): void {\n    if (this._interval) {\n      window.clearInterval(this._interval);\n      this._interval = undefined;\n    }\n  }\n\n  private _startInterval(stateObj: HassEntity): void {\n    this._clearInterval();\n    this._calculateRemaining(stateObj);\n\n    if (stateObj.state === \"active\") {\n      this._interval = window.setInterval(\n        () => this._calculateRemaining(stateObj),\n        1000\n      );\n    }\n  }\n\n  private _calculateRemaining(stateObj: HassEntity): void {\n    this._timeRemaining = timerTimeRemaining(stateObj);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-timer-entity-row\": HuiTimerEntityRow;\n  }\n}\n"],"names":[],"sourceRoot":""}