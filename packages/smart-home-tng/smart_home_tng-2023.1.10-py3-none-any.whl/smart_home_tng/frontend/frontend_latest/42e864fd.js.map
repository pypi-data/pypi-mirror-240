{"version":3,"file":"42e864fd.js","mappings":";AAgDA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAKA;;;;;;;;AA+CA;;ACxFA;AACA;AACA;AAEA;;;;;;;;;;AA0BA;;;;;;;;;;;;;;;;;;;;;;AClBA;;;;ACjBA;;;;AAIA;;AAEA;;AAIA;;;AAMA","sources":["webpack://home-assistant-frontend/./src/components/ha-button-menu.ts","webpack://home-assistant-frontend/./src/components/ha-clickable-list-item.ts","webpack://home-assistant-frontend/./src/components/ha-list-item.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/ha-integration-overflow-menu.ts"],"sourcesContent":["import type { Button } from \"@material/mwc-button\";\nimport \"@material/mwc-menu\";\nimport type { Corner, Menu, MenuCorner } from \"@material/mwc-menu\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HaIconButton } from \"./ha-icon-button\";\n\n@customElement(\"ha-button-menu\")\nexport class HaButtonMenu extends LitElement {\n  protected readonly [FOCUS_TARGET];\n\n  @property() public corner: Corner = \"TOP_START\";\n\n  @property() public menuCorner: MenuCorner = \"START\";\n\n  @property({ type: Number }) public x: number | null = null;\n\n  @property({ type: Number }) public y: number | null = null;\n\n  @property({ type: Boolean }) public multi = false;\n\n  @property({ type: Boolean }) public activatable = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public fixed = false;\n\n  @query(\"mwc-menu\", true) private _menu?: Menu;\n\n  public get items() {\n    return this._menu?.items;\n  }\n\n  public get selected() {\n    return this._menu?.selected;\n  }\n\n  public override focus() {\n    if (this._menu?.open) {\n      this._menu.focusItemAtIndex(0);\n    } else {\n      this._triggerButton?.focus();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div @click=${this._handleClick}>\n        <slot name=\"trigger\" @slotchange=${this._setTriggerAria}></slot>\n      </div>\n      <mwc-menu\n        .corner=${this.corner}\n        .menuCorner=${this.menuCorner}\n        .fixed=${this.fixed}\n        .multi=${this.multi}\n        .activatable=${this.activatable}\n        .y=${this.y}\n        .x=${this.x}\n      >\n        <slot></slot>\n      </mwc-menu>\n    `;\n  }\n\n  protected firstUpdated(changedProps): void {\n    super.firstUpdated(changedProps);\n\n    if (document.dir === \"rtl\") {\n      this.updateComplete.then(() => {\n        this.querySelectorAll(\"mwc-list-item\").forEach((item) => {\n          const style = document.createElement(\"style\");\n          style.innerHTML =\n            \"span.material-icons:first-of-type { margin-left: var(--mdc-list-item-graphic-margin, 32px) !important; margin-right: 0px !important;}\";\n          item!.shadowRoot!.appendChild(style);\n        });\n      });\n    }\n  }\n\n  private _handleClick(): void {\n    if (this.disabled) {\n      return;\n    }\n    this._menu!.anchor = this;\n    this._menu!.show();\n  }\n\n  private get _triggerButton() {\n    return this.querySelector(\n      'ha-icon-button[slot=\"trigger\"], mwc-button[slot=\"trigger\"]'\n    ) as HaIconButton | Button | null;\n  }\n\n  private _setTriggerAria() {\n    if (this._triggerButton) {\n      this._triggerButton.ariaHasPopup = \"menu\";\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ::slotted([disabled]) {\n        color: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-menu\": HaButtonMenu;\n  }\n}\n","import { css, CSSResultGroup, html } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { HaListItem } from \"./ha-list-item\";\n\n@customElement(\"ha-clickable-list-item\")\nexport class HaClickableListItem extends HaListItem {\n  @property() public href?: string;\n\n  @property({ type: Boolean }) public disableHref = false;\n\n  @property({ type: Boolean, reflect: true }) public openNewTab = false;\n\n  @query(\"a\") private _anchor!: HTMLAnchorElement;\n\n  public render() {\n    const r = super.render();\n    const href = this.href || \"\";\n\n    return html`${this.disableHref\n      ? html`<a aria-role=\"option\">${r}</a>`\n      : html`<a\n          aria-role=\"option\"\n          target=${this.openNewTab ? \"_blank\" : \"\"}\n          href=${href}\n          >${r}</a\n        >`}`;\n  }\n\n  firstUpdated() {\n    super.firstUpdated();\n    this.addEventListener(\"keydown\", (ev) => {\n      if (ev.key === \"Enter\" || ev.key === \" \") {\n        this._anchor.click();\n      }\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      super.styles,\n      css`\n        a {\n          width: 100%;\n          height: 100%;\n          display: flex;\n          align-items: center;\n          padding-left: var(--mdc-list-side-padding, 20px);\n          padding-right: var(--mdc-list-side-padding, 20px);\n          overflow: hidden;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-clickable-list-item\": HaClickableListItem;\n  }\n}\n","import { ListItemBase } from \"@material/mwc-list/mwc-list-item-base\";\nimport { styles } from \"@material/mwc-list/mwc-list-item.css\";\nimport { css, CSSResultGroup } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-list-item\")\nexport class HaListItem extends ListItemBase {\n  static get styles(): CSSResultGroup {\n    return [\n      styles,\n      css`\n        :host {\n          padding-left: var(--mdc-list-side-padding, 20px);\n          padding-right: var(--mdc-list-side-padding, 20px);\n        }\n        :host([graphic=\"avatar\"]:not([twoLine])),\n        :host([graphic=\"icon\"]:not([twoLine])) {\n          height: 48px;\n        }\n        span.material-icons:first-of-type {\n          margin-inline-start: 0px !important;\n          margin-inline-end: var(\n            --mdc-list-item-graphic-margin,\n            16px\n          ) !important;\n          direction: var(--direction);\n        }\n        span.material-icons:last-of-type {\n          margin-inline-start: auto !important;\n          margin-inline-end: 0px !important;\n          direction: var(--direction);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-list-item\": HaListItem;\n  }\n}\n","import { mdiDotsVertical } from \"@mdi/js\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-clickable-list-item\";\nimport \"../../../components/ha-icon-button\";\nimport type { HomeAssistant } from \"../../../types\";\n\n@customElement(\"ha-integration-overflow-menu\")\nexport class HaIntegrationOverflowMenu extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  protected render() {\n    return html`\n      <ha-button-menu activatable corner=\"BOTTOM_START\">\n        <ha-icon-button\n          slot=\"trigger\"\n          .label=${this.hass.localize(\"ui.common.menu\")}\n          .path=${mdiDotsVertical}\n        ></ha-icon-button>\n        <ha-clickable-list-item\n          @click=${this._entryClicked}\n          href=\"/config/application_credentials\"\n          aria-label=${this.hass.localize(\n            \"ui.panel.config.application_credentials.caption\"\n          )}\n        >\n          ${this.hass.localize(\n            \"ui.panel.config.application_credentials.caption\"\n          )}\n        </ha-clickable-list-item>\n      </ha-button-menu>\n    `;\n  }\n\n  private _entryClicked(ev) {\n    ev.currentTarget.blur();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-integration-overflow-menu\": HaIntegrationOverflowMenu;\n  }\n}\n"],"names":[],"sourceRoot":""}