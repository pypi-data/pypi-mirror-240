import re
import argparse
from pathlib import Path
from common import print_warning


class PairError(Exception):

    def __init__(self, lineNum: int, line: str):
        self.lineNum = lineNum
        self.line = line


class Item(object):

    def __init__(self, enterFlag: bool, moduleName: str, funcName: str):
        self.enterFlag = enterFlag
        self.moduleName = moduleName
        self.funcName = funcName

    def pairWith(self, item) -> bool:
        return self.moduleName == item.moduleName and \
            self.funcName == item.funcName and \
            self.enterFlag != item.enterFlag


def parse(line: str):
    pattern = r'^.{23} \[\w.+\] (>>|<<)(\w*)!(\S+)'
    m = re.match(pattern, line)
    if m:
        enterFlag = m.group(1) == ">>"
        moduleName = m.group(2)
        funcName = m.group(3)
        item = Item(enterFlag, moduleName, funcName)
        return item


def parse_file(filefullpath: str):
    stack = []
    nDepth = 0
    with open(filefullpath, 'r', encoding='utf-8') as f:
        for num, line in enumerate(f, 1):
            curItem = parse(line.rstrip())
            if not curItem:
                continue

            paired = False
            if stack:
                topItem = stack[-1]
                if curItem.pairWith(topItem):
                    if curItem.enterFlag:
                        raise PairError(num, line)
                    paired = True

            if paired:
                stack.pop()
                nDepth = nDepth - 1
            else:
                if not curItem.enterFlag:
                    raise PairError(num, line)
                stack.append(curItem)
                nDepth = nDepth + 1
                print('    ' * nDepth + curItem.funcName)


def adjust_file_path(filename: str) -> str:
    if Path(filename).is_file():
        return filename

    newpath = Path.cwd().joinpath(filename)
    if Path(newpath).is_file():
        return newpath

    return None


def main():
    parser = argparse.ArgumentParser()
    parser.formatter_class = argparse.ArgumentDefaultsHelpFormatter
    parser.add_argument(
        'file', help="set the log file generated by cm command")
    args = parser.parse_args()

    filepath = adjust_file_path(args.file)
    if not filepath:
        print_warning(f'Cannot find the file: {args.file}')
        exit()

    try:
        parse_file(filepath)
    except PairError as e:
        print_warning(f'The line {e.lineNum} is not paired')
        print_warning(f'    {e.line}')


if __name__ == '__main__':
    main()
