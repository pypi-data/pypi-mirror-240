# Generated file. To retain edits, remove this comment.

from itkwasm.pyodide import JsPackageConfig, JsPackage

from ._version import __version__
default_js_module = """data:text/javascript;base64,dmFyIEV0PSIxLjAuMC1iLjE1NCIsWD1FdDt2YXIgZHQ9e3BpcGVsaW5lV29ya2VyVXJsOmBodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2l0ay13YXNtQCR7WH0vZGlzdC9jb3JlL3dlYi13b3JrZXJzL2J1bmRsZXMvcGlwZWxpbmUubWluLndvcmtlci5qc2AsaW1hZ2VJT1VybDpgaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9pdGstaW1hZ2UtaW9AJHtYfWAsbWVzaElPVXJsOmBodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2l0ay1tZXNoLWlvQCR7WH1gLHBpcGVsaW5lc1VybDpgaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9pdGstd2FzbUAke1h9L2Rpc3QvcGlwZWxpbmVzYH0sdj1kdDt2YXIgUXQ9e1RleHRGaWxlOiJJbnRlcmZhY2VUZXh0RmlsZSIsQmluYXJ5RmlsZToiSW50ZXJmYWNlQmluYXJ5RmlsZSIsVGV4dFN0cmVhbToiSW50ZXJmYWNlVGV4dFN0cmVhbSIsQmluYXJ5U3RyZWFtOiJJbnRlcmZhY2VCaW5hcnlTdHJlYW0iLEltYWdlOiJJbnRlcmZhY2VJbWFnZSIsTWVzaDoiSW50ZXJmYWNlTWVzaCIsUG9seURhdGE6IkludGVyZmFjZVBvbHlEYXRhIixKc29uQ29tcGF0aWJsZToiSW50ZXJmYWNlSnNvbkNvbXBhdGlibGUifSxFPVF0O3ZhciBwdD17SW50ODoiaW50OCIsVUludDg6InVpbnQ4IixJbnQxNjoiaW50MTYiLFVJbnQxNjoidWludDE2IixJbnQzMjoiaW50MzIiLFVJbnQzMjoidWludDMyIixJbnQ2NDoiaW50NjQiLFVJbnQ2NDoidWludDY0IixTaXplVmFsdWVUeXBlOiJ1aW50NjQiLElkZW50aWZpZXJUeXBlOiJ1aW50NjQiLEluZGV4VmFsdWVUeXBlOiJpbnQ2NCIsT2Zmc2V0VmFsdWVUeXBlOiJpbnQ2NCJ9LEQ9cHQ7dmFyIG10PXtGbG9hdDMyOiJmbG9hdDMyIixGbG9hdDY0OiJmbG9hdDY0IixTcGFjZVByZWNpc2lvblR5cGU6ImZsb2F0NjQifSxIPW10O3ZhciBodD17VGV4dDoiVGV4dCIsQmluYXJ5OiJCaW5hcnkiLEltYWdlOiJJbWFnZSIsTWVzaDoiTWVzaCJ9LGs9aHQ7dmFyIHl0PXtVbmtub3duOiJVbmtub3duIixTY2FsYXI6IlNjYWxhciIsUkdCOiJSR0IiLFJHQkE6IlJHQkEiLE9mZnNldDoiT2Zmc2V0IixWZWN0b3I6IlZlY3RvciIsUG9pbnQ6IlBvaW50IixDb3ZhcmlhbnRWZWN0b3I6IkNvdmFyaWFudFZlY3RvciIsU3ltbWV0cmljU2Vjb25kUmFua1RlbnNvcjoiU3ltbWV0cmljU2Vjb25kUmFua1RlbnNvciIsRGlmZnVzaW9uVGVuc29yM0Q6IkRpZmZ1c2lvblRlbnNvcjNEIixDb21wbGV4OiJDb21wbGV4IixGaXhlZEFycmF5OiJGaXhlZEFycmF5IixBcnJheToiQXJyYXkiLE1hdHJpeDoiTWF0cml4IixWYXJpYWJsZUxlbmd0aFZlY3RvcjoiVmFyaWFibGVMZW5ndGhWZWN0b3IiLFZhcmlhYmxlU2l6ZU1hdHJpeDoiVmFyaWFibGVTaXplTWF0cml4In0sc2U9eXQ7ZnVuY3Rpb24gd3QoQSx0LGUscixuKXtBW3IrZSp0XT1ufXZhciBJZT13dDt2YXIgRkE9Y2xhc3N7Y29uc3RydWN0b3IodD0yLGU9RC5VSW50OCxyPXNlLlNjYWxhcixuPTEpe3RoaXMuZGltZW5zaW9uPXQsdGhpcy5jb21wb25lbnRUeXBlPWUsdGhpcy5waXhlbFR5cGU9cix0aGlzLmNvbXBvbmVudHM9bn19LGdlPUZBO3ZhciBrQT1jbGFzc3tjb25zdHJ1Y3Rvcih0PW5ldyBnZSl7dGhpcy5pbWFnZVR5cGU9dCx0aGlzLm5hbWU9ImltYWdlIjtsZXQgZT10LmRpbWVuc2lvbjt0aGlzLm9yaWdpbj1uZXcgQXJyYXkoZSksdGhpcy5vcmlnaW4uZmlsbCgwKSx0aGlzLnNwYWNpbmc9bmV3IEFycmF5KGUpLHRoaXMuc3BhY2luZy5maWxsKDEpLHRoaXMuZGlyZWN0aW9uPW5ldyBGbG9hdDY0QXJyYXkoZSplKSx0aGlzLmRpcmVjdGlvbi5maWxsKDApO2ZvcihsZXQgcj0wO3I8ZTtyKyspSWUodGhpcy5kaXJlY3Rpb24sZSxyLHIsMSk7dGhpcy5zaXplPW5ldyBBcnJheShlKSx0aGlzLnNpemUuZmlsbCgwKSx0aGlzLm1ldGFkYXRhPW5ldyBNYXAsdGhpcy5kYXRhPW51bGx9fSxsZT1rQTtmdW5jdGlvbiBEdChBLHQpe2xldCBlPW51bGw7c3dpdGNoKEEpe2Nhc2UgRC5VSW50ODp7ZT1uZXcgVWludDhBcnJheSh0KTticmVha31jYXNlIEQuSW50ODp7ZT1uZXcgSW50OEFycmF5KHQpO2JyZWFrfWNhc2UgRC5VSW50MTY6e2U9bmV3IFVpbnQxNkFycmF5KHQpO2JyZWFrfWNhc2UgRC5JbnQxNjp7ZT1uZXcgSW50MTZBcnJheSh0KTticmVha31jYXNlIEQuVUludDMyOntlPW5ldyBVaW50MzJBcnJheSh0KTticmVha31jYXNlIEQuSW50MzI6e2U9bmV3IEludDMyQXJyYXkodCk7YnJlYWt9Y2FzZSBELlVJbnQ2NDp7dHlwZW9mIGdsb2JhbFRoaXMuQmlnVWludDY0QXJyYXk9PSJmdW5jdGlvbiI/ZT1uZXcgQmlnVWludDY0QXJyYXkodCk6ZT1uZXcgVWludDhBcnJheSh0KTticmVha31jYXNlIEQuSW50NjQ6e3R5cGVvZiBnbG9iYWxUaGlzLkJpZ0ludDY0QXJyYXk9PSJmdW5jdGlvbiI/ZT1uZXcgQmlnSW50NjRBcnJheSh0KTplPW5ldyBVaW50OEFycmF5KHQpO2JyZWFrfWNhc2UgSC5GbG9hdDMyOntlPW5ldyBGbG9hdDMyQXJyYXkodCk7YnJlYWt9Y2FzZSBILkZsb2F0NjQ6e2U9bmV3IEZsb2F0NjRBcnJheSh0KTticmVha31jYXNlIm51bGwiOntlPW51bGw7YnJlYWt9Y2FzZSBudWxsOntlPW51bGw7YnJlYWt9ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoIlR5cGUgaXMgbm90IHN1cHBvcnRlZCBhcyBhIFR5cGVkQXJyYXkiKX1yZXR1cm4gZX12YXIgdz1EdDtmdW5jdGlvbiBTdChBKXtpZihBLmxlbmd0aDwxKXRocm93IEVycm9yKCJBdCBsZWFzdCBvbmUgaW1hZ2VzIGlzIHJlcXVpcmVkLiIpO2xldCB0PUFbMF07aWYodC5kYXRhPT09bnVsbCl0aHJvdyBFcnJvcigiSW1hZ2UgZGF0YSBpcyBudWxsLiIpO2xldCBlPW5ldyBsZSh0LmltYWdlVHlwZSk7ZS5vcmlnaW49QXJyYXkuZnJvbSh0Lm9yaWdpbiksZS5zcGFjaW5nPUFycmF5LmZyb20odC5zcGFjaW5nKTtsZXQgcj1lLmltYWdlVHlwZS5kaW1lbnNpb247ZS5kaXJlY3Rpb249dC5kaXJlY3Rpb24uc2xpY2UoKTtsZXQgbj1yLTE7ZS5zaXplPUFycmF5LmZyb20odC5zaXplKTtsZXQgYT1BLnJlZHVjZSgocyxDKT0+cytDLnNpemVbbl0sMCk7ZS5zaXplW25dPWE7bGV0IGk9ZS5zaXplLnJlZHVjZSgocyxDKT0+cypDLDEpKmUuaW1hZ2VUeXBlLmNvbXBvbmVudHMsbD10LmRhdGEuY29uc3RydWN0b3I7ZS5kYXRhPW5ldyBsKGkpO2xldCB1PWUuaW1hZ2VUeXBlLmNvbXBvbmVudHM7Zm9yKGxldCBzPTA7czxlLnNpemUubGVuZ3RoLTE7cysrKXUqPWUuc2l6ZVtzXTtsZXQgbz0wO2lmKGUuZGF0YSE9bnVsbClmb3IobGV0IHM9MDtzPEEubGVuZ3RoO3MrKyllLmRhdGEuc2V0KEFbc10uZGF0YSx1Km8pLG8rPUFbc10uc2l6ZVtuXTtlbHNlIHRocm93IEVycm9yKCJDb3VsZCBub3QgY3JlYXRlIHJlc3VsdCBpbWFnZSBkYXRhLiIpO3JldHVybiBlfXZhciBSQT1TdDt2YXIgYnQ9ZnVuY3Rpb24oQSx0KXt2YXIgZT17fTtmb3IodmFyIHIgaW4gQSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoQSxyKSYmdC5pbmRleE9mKHIpPDAmJihlW3JdPUFbcl0pO2lmKEEhPW51bGwmJnR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzPT0iZnVuY3Rpb24iKWZvcih2YXIgbj0wLHI9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhBKTtuPHIubGVuZ3RoO24rKyl0LmluZGV4T2YocltuXSk8MCYmT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKEEscltuXSkmJihlW3Jbbl1dPUFbcltuXV0pO3JldHVybiBlfSxVQT1jbGFzc3tjb25zdHJ1Y3Rvcih0LGUpe3RoaXMuZmNuPWUsdGhpcy53b3JrZXJRdWV1ZT1uZXcgQXJyYXkodCksdGhpcy53b3JrZXJRdWV1ZS5maWxsKG51bGwpLHRoaXMucnVuSW5mbz1bXX1ydW5UYXNrcyh0LGU9bnVsbCl7bGV0IHI9e3Rhc2tRdWV1ZTpbXSxyZXN1bHRzOltdLGFkZGluZ1Rhc2tzOiExLHBvc3Rwb25lZDohMSxydW5uaW5nV29ya2VyczowLGluZGV4OjAsY29tcGxldGVkVGFza3M6MCxwcm9ncmVzc0NhbGxiYWNrOmUsY2FuY2VsZWQ6ITF9O3JldHVybiB0aGlzLnJ1bkluZm8ucHVzaChyKSxyLmluZGV4PXRoaXMucnVuSW5mby5sZW5ndGgtMSx7cHJvbWlzZTpuZXcgUHJvbWlzZSgobixhKT0+e3IucmVzb2x2ZT1uLHIucmVqZWN0PWEsci5yZXN1bHRzPW5ldyBBcnJheSh0Lmxlbmd0aCksci5jb21wbGV0ZWRUYXNrcz0wLHIuYWRkaW5nVGFza3M9ITAsdC5mb3JFYWNoKChpLGwpPT57dGhpcy5hZGRUYXNrKHIuaW5kZXgsbCxpKX0pLHIuYWRkaW5nVGFza3M9ITF9KSxydW5JZDpyLmluZGV4fX10ZXJtaW5hdGVXb3JrZXJzKCl7Zm9yKGxldCB0PTA7dDx0aGlzLndvcmtlclF1ZXVlLmxlbmd0aDt0Kyspe2xldCBlPXRoaXMud29ya2VyUXVldWVbdF07ZT8udGVybWluYXRlKCksdGhpcy53b3JrZXJRdWV1ZVt0XT1udWxsfX1jYW5jZWwodCl7bGV0IGU9dGhpcy5ydW5JbmZvW3RdO2UhPW51bGwmJihlLmNhbmNlbGVkPSEwKX1hZGRUYXNrKHQsZSxyKXtsZXQgbj10aGlzLnJ1bkluZm9bdF07aWYobj8uY2FuY2VsZWQ9PT0hMCl7bi5yZWplY3QoIlJlbWFpbmluZyB0YXNrcyBjYW5jZWxlZCIpLHRoaXMuY2xlYXJUYXNrKG4uaW5kZXgpO3JldHVybn1pZih0aGlzLndvcmtlclF1ZXVlLmxlbmd0aD4wKXtsZXQgYT10aGlzLndvcmtlclF1ZXVlLnBvcCgpO24ucnVubmluZ1dvcmtlcnMrKyx0aGlzLmZjbihhLC4uLnIpLnRoZW4oaT0+e3Zhcnt3ZWJXb3JrZXI6bH09aSx1PWJ0KGksWyJ3ZWJXb3JrZXIiXSk7aWYodGhpcy53b3JrZXJRdWV1ZS5wdXNoKGwpLHRoaXMucnVuSW5mb1t0XSE9PW51bGwpe2lmKG4ucnVubmluZ1dvcmtlcnMtLSxuLnJlc3VsdHNbZV09dSxuLmNvbXBsZXRlZFRhc2tzKyssbi5wcm9ncmVzc0NhbGxiYWNrIT1udWxsJiZuLnByb2dyZXNzQ2FsbGJhY2sobi5jb21wbGV0ZWRUYXNrcyxuLnJlc3VsdHMubGVuZ3RoKSxuLnRhc2tRdWV1ZS5sZW5ndGg+MCl7bGV0IG89bi50YXNrUXVldWUuc2hpZnQoKTt0aGlzLmFkZFRhc2sodCxvWzBdLG9bMV0pfWVsc2UgaWYoIW4uYWRkaW5nVGFza3MmJm4ucnVubmluZ1dvcmtlcnM9PT0wKXtsZXQgbz1uLnJlc3VsdHM7bi5yZXNvbHZlKG8pLHRoaXMuY2xlYXJUYXNrKG4uaW5kZXgpfX19KS5jYXRjaChpPT57bi5yZWplY3QoaSksdGhpcy5jbGVhclRhc2sobi5pbmRleCl9KX1lbHNlIG4ucnVubmluZ1dvcmtlcnMhPT0wfHxuLnBvc3Rwb25lZD9uLnRhc2tRdWV1ZS5wdXNoKFtlLHJdKToobi5wb3N0cG9uZWQ9ITAsc2V0VGltZW91dCgoKT0+e24ucG9zdHBvbmVkPSExLHRoaXMuYWRkVGFzayhuLmluZGV4LGUscil9LDUwKSl9Y2xlYXJUYXNrKHQpe3RoaXMucnVuSW5mb1t0XS5yZXN1bHRzPVtdLHRoaXMucnVuSW5mb1t0XS50YXNrUXVldWU9W10sdGhpcy5ydW5JbmZvW3RdLnByb2dyZXNzQ2FsbGJhY2s9bnVsbCx0aGlzLnJ1bkluZm9bdF0uY2FuY2VsZWQ9bnVsbCx0aGlzLnJ1bkluZm9bdF0ucmVqZWN0PSgpPT57fSx0aGlzLnJ1bkluZm9bdF0ucmVzb2x2ZT0oKT0+e319fSxOQT1VQTt2YXIgRnQ9dHlwZW9mIGdsb2JhbFRoaXMuU2hhcmVkQXJyYXlCdWZmZXI8InUiO2Z1bmN0aW9uIGt0KEEpe2lmKEE9PW51bGwpcmV0dXJuW107bGV0IHQ9W107Zm9yKGxldCBlPTA7ZTxBLmxlbmd0aDtlKyspe2xldCByPVJ0KEFbZV0pO3IhPT1udWxsJiZ0LnB1c2gocil9cmV0dXJuIHR9ZnVuY3Rpb24gUnQoQSl7aWYoQT09bnVsbClyZXR1cm4gbnVsbDtsZXQgdD1udWxsO3JldHVybiBBLmJ1ZmZlciE9PXZvaWQgMD90PUEuYnVmZmVyOkEuYnl0ZUxlbmd0aCE9PXZvaWQgMCYmKHQ9QSksRnQmJnQgaW5zdGFuY2VvZiBTaGFyZWRBcnJheUJ1ZmZlcj9udWxsOnR9dmFyIGNlPWt0O2Z1bmN0aW9uICQoQSx0KXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gQS5hcHBseSh0LGFyZ3VtZW50cyl9fXZhcnt0b1N0cmluZzpVdH09T2JqZWN0LnByb3RvdHlwZSx7Z2V0UHJvdG90eXBlT2Y6R0F9PU9iamVjdCxJQT0oQT0+dD0+e2xldCBlPVV0LmNhbGwodCk7cmV0dXJuIEFbZV18fChBW2VdPWUuc2xpY2UoOCwtMSkudG9Mb3dlckNhc2UoKSl9KShPYmplY3QuY3JlYXRlKG51bGwpKSxHPUE9PihBPUEudG9Mb3dlckNhc2UoKSx0PT5JQSh0KT09PUEpLGdBPUE9PnQ9PnR5cGVvZiB0PT09QSx7aXNBcnJheTpLfT1BcnJheSxBQT1nQSgidW5kZWZpbmVkIik7ZnVuY3Rpb24gTnQoQSl7cmV0dXJuIEEhPT1udWxsJiYhQUEoQSkmJkEuY29uc3RydWN0b3IhPT1udWxsJiYhQUEoQS5jb25zdHJ1Y3RvcikmJk4oQS5jb25zdHJ1Y3Rvci5pc0J1ZmZlcikmJkEuY29uc3RydWN0b3IuaXNCdWZmZXIoQSl9dmFyIENlPUcoIkFycmF5QnVmZmVyIik7ZnVuY3Rpb24gT3QoQSl7bGV0IHQ7cmV0dXJuIHR5cGVvZiBBcnJheUJ1ZmZlcjwidSImJkFycmF5QnVmZmVyLmlzVmlldz90PUFycmF5QnVmZmVyLmlzVmlldyhBKTp0PUEmJkEuYnVmZmVyJiZDZShBLmJ1ZmZlciksdH12YXIgVHQ9Z0EoInN0cmluZyIpLE49Z0EoImZ1bmN0aW9uIiksQmU9Z0EoIm51bWJlciIpLGxBPUE9PkEhPT1udWxsJiZ0eXBlb2YgQT09Im9iamVjdCIsR3Q9QT0+QT09PSEwfHxBPT09ITEsc0E9QT0+e2lmKElBKEEpIT09Im9iamVjdCIpcmV0dXJuITE7bGV0IHQ9R0EoQSk7cmV0dXJuKHQ9PT1udWxsfHx0PT09T2JqZWN0LnByb3RvdHlwZXx8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpPT09bnVsbCkmJiEoU3ltYm9sLnRvU3RyaW5nVGFnIGluIEEpJiYhKFN5bWJvbC5pdGVyYXRvciBpbiBBKX0seHQ9RygiRGF0ZSIpLEx0PUcoIkZpbGUiKSxQdD1HKCJCbG9iIiksTXQ9RygiRmlsZUxpc3QiKSxKdD1BPT5sQShBKSYmTihBLnBpcGUpLEh0PUE9PntsZXQgdDtyZXR1cm4gQSYmKHR5cGVvZiBGb3JtRGF0YT09ImZ1bmN0aW9uIiYmQSBpbnN0YW5jZW9mIEZvcm1EYXRhfHxOKEEuYXBwZW5kKSYmKCh0PUlBKEEpKT09PSJmb3JtZGF0YSJ8fHQ9PT0ib2JqZWN0IiYmTihBLnRvU3RyaW5nKSYmQS50b1N0cmluZygpPT09IltvYmplY3QgRm9ybURhdGFdIikpfSxZdD1HKCJVUkxTZWFyY2hQYXJhbXMiKSxxdD1BPT5BLnRyaW0/QS50cmltKCk6QS5yZXBsYWNlKC9eW1xzXHVGRUZGXHhBMF0rfFtcc1x1RkVGRlx4QTBdKyQvZywiIik7ZnVuY3Rpb24gZUEoQSx0LHthbGxPd25LZXlzOmU9ITF9PXt9KXtpZihBPT09bnVsbHx8dHlwZW9mIEE+InUiKXJldHVybjtsZXQgcixuO2lmKHR5cGVvZiBBIT0ib2JqZWN0IiYmKEE9W0FdKSxLKEEpKWZvcihyPTAsbj1BLmxlbmd0aDtyPG47cisrKXQuY2FsbChudWxsLEFbcl0scixBKTtlbHNle2xldCBhPWU/T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoQSk6T2JqZWN0LmtleXMoQSksaT1hLmxlbmd0aCxsO2ZvcihyPTA7cjxpO3IrKylsPWFbcl0sdC5jYWxsKG51bGwsQVtsXSxsLEEpfX1mdW5jdGlvbiBFZShBLHQpe3Q9dC50b0xvd2VyQ2FzZSgpO2xldCBlPU9iamVjdC5rZXlzKEEpLHI9ZS5sZW5ndGgsbjtmb3IoO3ItLSA+MDspaWYobj1lW3JdLHQ9PT1uLnRvTG93ZXJDYXNlKCkpcmV0dXJuIG47cmV0dXJuIG51bGx9dmFyIGRlPSgoKT0+dHlwZW9mIGdsb2JhbFRoaXM8InUiP2dsb2JhbFRoaXM6dHlwZW9mIHNlbGY8InUiP3NlbGY6dHlwZW9mIHdpbmRvdzwidSI/d2luZG93Omdsb2JhbCkoKSxRZT1BPT4hQUEoQSkmJkEhPT1kZTtmdW5jdGlvbiBUQSgpe2xldHtjYXNlbGVzczpBfT1RZSh0aGlzKSYmdGhpc3x8e30sdD17fSxlPShyLG4pPT57bGV0IGE9QSYmRWUodCxuKXx8bjtzQSh0W2FdKSYmc0Eocik/dFthXT1UQSh0W2FdLHIpOnNBKHIpP3RbYV09VEEoe30scik6SyhyKT90W2FdPXIuc2xpY2UoKTp0W2FdPXJ9O2ZvcihsZXQgcj0wLG49YXJndW1lbnRzLmxlbmd0aDtyPG47cisrKWFyZ3VtZW50c1tyXSYmZUEoYXJndW1lbnRzW3JdLGUpO3JldHVybiB0fXZhciB2dD0oQSx0LGUse2FsbE93bktleXM6cn09e30pPT4oZUEodCwobixhKT0+e2UmJk4obik/QVthXT0kKG4sZSk6QVthXT1ufSx7YWxsT3duS2V5czpyfSksQSksS3Q9QT0+KEEuY2hhckNvZGVBdCgwKT09PTY1Mjc5JiYoQT1BLnNsaWNlKDEpKSxBKSxXdD0oQSx0LGUscik9PntBLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQucHJvdG90eXBlLHIpLEEucHJvdG90eXBlLmNvbnN0cnVjdG9yPUEsT2JqZWN0LmRlZmluZVByb3BlcnR5KEEsInN1cGVyIix7dmFsdWU6dC5wcm90b3R5cGV9KSxlJiZPYmplY3QuYXNzaWduKEEucHJvdG90eXBlLGUpfSxqdD0oQSx0LGUscik9PntsZXQgbixhLGksbD17fTtpZih0PXR8fHt9LEE9PW51bGwpcmV0dXJuIHQ7ZG97Zm9yKG49T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoQSksYT1uLmxlbmd0aDthLS0gPjA7KWk9blthXSwoIXJ8fHIoaSxBLHQpKSYmIWxbaV0mJih0W2ldPUFbaV0sbFtpXT0hMCk7QT1lIT09ITEmJkdBKEEpfXdoaWxlKEEmJighZXx8ZShBLHQpKSYmQSE9PU9iamVjdC5wcm90b3R5cGUpO3JldHVybiB0fSxfdD0oQSx0LGUpPT57QT1TdHJpbmcoQSksKGU9PT12b2lkIDB8fGU+QS5sZW5ndGgpJiYoZT1BLmxlbmd0aCksZS09dC5sZW5ndGg7bGV0IHI9QS5pbmRleE9mKHQsZSk7cmV0dXJuIHIhPT0tMSYmcj09PWV9LHp0PUE9PntpZighQSlyZXR1cm4gbnVsbDtpZihLKEEpKXJldHVybiBBO2xldCB0PUEubGVuZ3RoO2lmKCFCZSh0KSlyZXR1cm4gbnVsbDtsZXQgZT1uZXcgQXJyYXkodCk7Zm9yKDt0LS0gPjA7KWVbdF09QVt0XTtyZXR1cm4gZX0sVnQ9KEE9PnQ9PkEmJnQgaW5zdGFuY2VvZiBBKSh0eXBlb2YgVWludDhBcnJheTwidSImJkdBKFVpbnQ4QXJyYXkpKSxadD0oQSx0KT0+e2xldCByPShBJiZBW1N5bWJvbC5pdGVyYXRvcl0pLmNhbGwoQSksbjtmb3IoOyhuPXIubmV4dCgpKSYmIW4uZG9uZTspe2xldCBhPW4udmFsdWU7dC5jYWxsKEEsYVswXSxhWzFdKX19LFh0PShBLHQpPT57bGV0IGUscj1bXTtmb3IoOyhlPUEuZXhlYyh0KSkhPT1udWxsOylyLnB1c2goZSk7cmV0dXJuIHJ9LCR0PUcoIkhUTUxGb3JtRWxlbWVudCIpLEFyPUE9PkEudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bLV9cc10oW2EtelxkXSkoXHcqKS9nLGZ1bmN0aW9uKGUscixuKXtyZXR1cm4gci50b1VwcGVyQ2FzZSgpK259KSxmZT0oKHtoYXNPd25Qcm9wZXJ0eTpBfSk9Pih0LGUpPT5BLmNhbGwodCxlKSkoT2JqZWN0LnByb3RvdHlwZSksZXI9RygiUmVnRXhwIikscGU9KEEsdCk9PntsZXQgZT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhBKSxyPXt9O2VBKGUsKG4sYSk9Pnt0KG4sYSxBKSE9PSExJiYoclthXT1uKX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEEscil9LHRyPUE9PntwZShBLCh0LGUpPT57aWYoTihBKSYmWyJhcmd1bWVudHMiLCJjYWxsZXIiLCJjYWxsZWUiXS5pbmRleE9mKGUpIT09LTEpcmV0dXJuITE7bGV0IHI9QVtlXTtpZihOKHIpKXtpZih0LmVudW1lcmFibGU9ITEsIndyaXRhYmxlImluIHQpe3Qud3JpdGFibGU9ITE7cmV0dXJufXQuc2V0fHwodC5zZXQ9KCk9Pnt0aHJvdyBFcnJvcigiQ2FuIG5vdCByZXdyaXRlIHJlYWQtb25seSBtZXRob2QgJyIrZSsiJyIpfSl9fSl9LHJyPShBLHQpPT57bGV0IGU9e30scj1uPT57bi5mb3JFYWNoKGE9PntlW2FdPSEwfSl9O3JldHVybiBLKEEpP3IoQSk6cihTdHJpbmcoQSkuc3BsaXQodCkpLGV9LG5yPSgpPT57fSxpcj0oQSx0KT0+KEE9K0EsTnVtYmVyLmlzRmluaXRlKEEpP0E6dCksT0E9ImFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6Iix1ZT0iMDEyMzQ1Njc4OSIsbWU9e0RJR0lUOnVlLEFMUEhBOk9BLEFMUEhBX0RJR0lUOk9BK09BLnRvVXBwZXJDYXNlKCkrdWV9LGFyPShBPTE2LHQ9bWUuQUxQSEFfRElHSVQpPT57bGV0IGU9IiIse2xlbmd0aDpyfT10O2Zvcig7QS0tOyllKz10W01hdGgucmFuZG9tKCkqcnwwXTtyZXR1cm4gZX07ZnVuY3Rpb24gb3IoQSl7cmV0dXJuISEoQSYmTihBLmFwcGVuZCkmJkFbU3ltYm9sLnRvU3RyaW5nVGFnXT09PSJGb3JtRGF0YSImJkFbU3ltYm9sLml0ZXJhdG9yXSl9dmFyIHNyPUE9PntsZXQgdD1uZXcgQXJyYXkoMTApLGU9KHIsbik9PntpZihsQShyKSl7aWYodC5pbmRleE9mKHIpPj0wKXJldHVybjtpZighKCJ0b0pTT04iaW4gcikpe3Rbbl09cjtsZXQgYT1LKHIpP1tdOnt9O3JldHVybiBlQShyLChpLGwpPT57bGV0IHU9ZShpLG4rMSk7IUFBKHUpJiYoYVtsXT11KX0pLHRbbl09dm9pZCAwLGF9fXJldHVybiByfTtyZXR1cm4gZShBLDApfSxJcj1HKCJBc3luY0Z1bmN0aW9uIiksZ3I9QT0+QSYmKGxBKEEpfHxOKEEpKSYmTihBLnRoZW4pJiZOKEEuY2F0Y2gpLGc9e2lzQXJyYXk6Syxpc0FycmF5QnVmZmVyOkNlLGlzQnVmZmVyOk50LGlzRm9ybURhdGE6SHQsaXNBcnJheUJ1ZmZlclZpZXc6T3QsaXNTdHJpbmc6VHQsaXNOdW1iZXI6QmUsaXNCb29sZWFuOkd0LGlzT2JqZWN0OmxBLGlzUGxhaW5PYmplY3Q6c0EsaXNVbmRlZmluZWQ6QUEsaXNEYXRlOnh0LGlzRmlsZTpMdCxpc0Jsb2I6UHQsaXNSZWdFeHA6ZXIsaXNGdW5jdGlvbjpOLGlzU3RyZWFtOkp0LGlzVVJMU2VhcmNoUGFyYW1zOll0LGlzVHlwZWRBcnJheTpWdCxpc0ZpbGVMaXN0Ok10LGZvckVhY2g6ZUEsbWVyZ2U6VEEsZXh0ZW5kOnZ0LHRyaW06cXQsc3RyaXBCT006S3QsaW5oZXJpdHM6V3QsdG9GbGF0T2JqZWN0Omp0LGtpbmRPZjpJQSxraW5kT2ZUZXN0OkcsZW5kc1dpdGg6X3QsdG9BcnJheTp6dCxmb3JFYWNoRW50cnk6WnQsbWF0Y2hBbGw6WHQsaXNIVE1MRm9ybTokdCxoYXNPd25Qcm9wZXJ0eTpmZSxoYXNPd25Qcm9wOmZlLHJlZHVjZURlc2NyaXB0b3JzOnBlLGZyZWV6ZU1ldGhvZHM6dHIsdG9PYmplY3RTZXQ6cnIsdG9DYW1lbENhc2U6QXIsbm9vcDpucix0b0Zpbml0ZU51bWJlcjppcixmaW5kS2V5OkVlLGdsb2JhbDpkZSxpc0NvbnRleHREZWZpbmVkOlFlLEFMUEhBQkVUOm1lLGdlbmVyYXRlU3RyaW5nOmFyLGlzU3BlY0NvbXBsaWFudEZvcm06b3IsdG9KU09OT2JqZWN0OnNyLGlzQXN5bmNGbjpJcixpc1RoZW5hYmxlOmdyfTtmdW5jdGlvbiBXKEEsdCxlLHIsbil7RXJyb3IuY2FsbCh0aGlzKSxFcnJvci5jYXB0dXJlU3RhY2tUcmFjZT9FcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLHRoaXMuY29uc3RydWN0b3IpOnRoaXMuc3RhY2s9bmV3IEVycm9yKCkuc3RhY2ssdGhpcy5tZXNzYWdlPUEsdGhpcy5uYW1lPSJBeGlvc0Vycm9yIix0JiYodGhpcy5jb2RlPXQpLGUmJih0aGlzLmNvbmZpZz1lKSxyJiYodGhpcy5yZXF1ZXN0PXIpLG4mJih0aGlzLnJlc3BvbnNlPW4pfWcuaW5oZXJpdHMoVyxFcnJvcix7dG9KU09OOmZ1bmN0aW9uKCl7cmV0dXJue21lc3NhZ2U6dGhpcy5tZXNzYWdlLG5hbWU6dGhpcy5uYW1lLGRlc2NyaXB0aW9uOnRoaXMuZGVzY3JpcHRpb24sbnVtYmVyOnRoaXMubnVtYmVyLGZpbGVOYW1lOnRoaXMuZmlsZU5hbWUsbGluZU51bWJlcjp0aGlzLmxpbmVOdW1iZXIsY29sdW1uTnVtYmVyOnRoaXMuY29sdW1uTnVtYmVyLHN0YWNrOnRoaXMuc3RhY2ssY29uZmlnOmcudG9KU09OT2JqZWN0KHRoaXMuY29uZmlnKSxjb2RlOnRoaXMuY29kZSxzdGF0dXM6dGhpcy5yZXNwb25zZSYmdGhpcy5yZXNwb25zZS5zdGF0dXM/dGhpcy5yZXNwb25zZS5zdGF0dXM6bnVsbH19fSk7dmFyIGhlPVcucHJvdG90eXBlLHllPXt9O1siRVJSX0JBRF9PUFRJT05fVkFMVUUiLCJFUlJfQkFEX09QVElPTiIsIkVDT05OQUJPUlRFRCIsIkVUSU1FRE9VVCIsIkVSUl9ORVRXT1JLIiwiRVJSX0ZSX1RPT19NQU5ZX1JFRElSRUNUUyIsIkVSUl9ERVBSRUNBVEVEIiwiRVJSX0JBRF9SRVNQT05TRSIsIkVSUl9CQURfUkVRVUVTVCIsIkVSUl9DQU5DRUxFRCIsIkVSUl9OT1RfU1VQUE9SVCIsIkVSUl9JTlZBTElEX1VSTCJdLmZvckVhY2goQT0+e3llW0FdPXt2YWx1ZTpBfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFcseWUpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShoZSwiaXNBeGlvc0Vycm9yIix7dmFsdWU6ITB9KTtXLmZyb209KEEsdCxlLHIsbixhKT0+e2xldCBpPU9iamVjdC5jcmVhdGUoaGUpO3JldHVybiBnLnRvRmxhdE9iamVjdChBLGksZnVuY3Rpb24odSl7cmV0dXJuIHUhPT1FcnJvci5wcm90b3R5cGV9LGw9PmwhPT0iaXNBeGlvc0Vycm9yIiksVy5jYWxsKGksQS5tZXNzYWdlLHQsZSxyLG4pLGkuY2F1c2U9QSxpLm5hbWU9QS5uYW1lLGEmJk9iamVjdC5hc3NpZ24oaSxhKSxpfTt2YXIgZD1XO3ZhciBjQT1udWxsO2Z1bmN0aW9uIHhBKEEpe3JldHVybiBnLmlzUGxhaW5PYmplY3QoQSl8fGcuaXNBcnJheShBKX1mdW5jdGlvbiBEZShBKXtyZXR1cm4gZy5lbmRzV2l0aChBLCJbXSIpP0Euc2xpY2UoMCwtMik6QX1mdW5jdGlvbiB3ZShBLHQsZSl7cmV0dXJuIEE/QS5jb25jYXQodCkubWFwKGZ1bmN0aW9uKG4sYSl7cmV0dXJuIG49RGUobiksIWUmJmE/IlsiK24rIl0iOm59KS5qb2luKGU/Ii4iOiIiKTp0fWZ1bmN0aW9uIGxyKEEpe3JldHVybiBnLmlzQXJyYXkoQSkmJiFBLnNvbWUoeEEpfXZhciBjcj1nLnRvRmxhdE9iamVjdChnLHt9LG51bGwsZnVuY3Rpb24odCl7cmV0dXJuL15pc1tBLVpdLy50ZXN0KHQpfSk7ZnVuY3Rpb24gZnIoQSx0LGUpe2lmKCFnLmlzT2JqZWN0KEEpKXRocm93IG5ldyBUeXBlRXJyb3IoInRhcmdldCBtdXN0IGJlIGFuIG9iamVjdCIpO3Q9dHx8bmV3KGNBfHxGb3JtRGF0YSksZT1nLnRvRmxhdE9iamVjdChlLHttZXRhVG9rZW5zOiEwLGRvdHM6ITEsaW5kZXhlczohMX0sITEsZnVuY3Rpb24oQixwKXtyZXR1cm4hZy5pc1VuZGVmaW5lZChwW0JdKX0pO2xldCByPWUubWV0YVRva2VucyxuPWUudmlzaXRvcnx8cyxhPWUuZG90cyxpPWUuaW5kZXhlcyx1PShlLkJsb2J8fHR5cGVvZiBCbG9iPCJ1IiYmQmxvYikmJmcuaXNTcGVjQ29tcGxpYW50Rm9ybSh0KTtpZighZy5pc0Z1bmN0aW9uKG4pKXRocm93IG5ldyBUeXBlRXJyb3IoInZpc2l0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uIik7ZnVuY3Rpb24gbyhmKXtpZihmPT09bnVsbClyZXR1cm4iIjtpZihnLmlzRGF0ZShmKSlyZXR1cm4gZi50b0lTT1N0cmluZygpO2lmKCF1JiZnLmlzQmxvYihmKSl0aHJvdyBuZXcgZCgiQmxvYiBpcyBub3Qgc3VwcG9ydGVkLiBVc2UgYSBCdWZmZXIgaW5zdGVhZC4iKTtyZXR1cm4gZy5pc0FycmF5QnVmZmVyKGYpfHxnLmlzVHlwZWRBcnJheShmKT91JiZ0eXBlb2YgQmxvYj09ImZ1bmN0aW9uIj9uZXcgQmxvYihbZl0pOkJ1ZmZlci5mcm9tKGYpOmZ9ZnVuY3Rpb24gcyhmLEIscCl7bGV0IG09ZjtpZihmJiYhcCYmdHlwZW9mIGY9PSJvYmplY3QiKXtpZihnLmVuZHNXaXRoKEIsInt9IikpQj1yP0I6Qi5zbGljZSgwLC0yKSxmPUpTT04uc3RyaW5naWZ5KGYpO2Vsc2UgaWYoZy5pc0FycmF5KGYpJiZscihmKXx8KGcuaXNGaWxlTGlzdChmKXx8Zy5lbmRzV2l0aChCLCJbXSIpKSYmKG09Zy50b0FycmF5KGYpKSlyZXR1cm4gQj1EZShCKSxtLmZvckVhY2goZnVuY3Rpb24oaCxiQSl7IShnLmlzVW5kZWZpbmVkKGgpfHxoPT09bnVsbCkmJnQuYXBwZW5kKGk9PT0hMD93ZShbQl0sYkEsYSk6aT09PW51bGw/QjpCKyJbXSIsbyhoKSl9KSwhMX1yZXR1cm4geEEoZik/ITA6KHQuYXBwZW5kKHdlKHAsQixhKSxvKGYpKSwhMSl9bGV0IEM9W10sYz1PYmplY3QuYXNzaWduKGNyLHtkZWZhdWx0VmlzaXRvcjpzLGNvbnZlcnRWYWx1ZTpvLGlzVmlzaXRhYmxlOnhBfSk7ZnVuY3Rpb24gSShmLEIpe2lmKCFnLmlzVW5kZWZpbmVkKGYpKXtpZihDLmluZGV4T2YoZikhPT0tMSl0aHJvdyBFcnJvcigiQ2lyY3VsYXIgcmVmZXJlbmNlIGRldGVjdGVkIGluICIrQi5qb2luKCIuIikpO0MucHVzaChmKSxnLmZvckVhY2goZixmdW5jdGlvbihtLFEpeyghKGcuaXNVbmRlZmluZWQobSl8fG09PT1udWxsKSYmbi5jYWxsKHQsbSxnLmlzU3RyaW5nKFEpP1EudHJpbSgpOlEsQixjKSk9PT0hMCYmSShtLEI/Qi5jb25jYXQoUSk6W1FdKX0pLEMucG9wKCl9fWlmKCFnLmlzT2JqZWN0KEEpKXRocm93IG5ldyBUeXBlRXJyb3IoImRhdGEgbXVzdCBiZSBhbiBvYmplY3QiKTtyZXR1cm4gSShBKSx0fXZhciBMPWZyO2Z1bmN0aW9uIFNlKEEpe2xldCB0PXsiISI6IiUyMSIsIiciOiIlMjciLCIoIjoiJTI4IiwiKSI6IiUyOSIsIn4iOiIlN0UiLCIlMjAiOiIrIiwiJTAwIjoiXDAifTtyZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KEEpLnJlcGxhY2UoL1shJygpfl18JTIwfCUwMC9nLGZ1bmN0aW9uKHIpe3JldHVybiB0W3JdfSl9ZnVuY3Rpb24gYmUoQSx0KXt0aGlzLl9wYWlycz1bXSxBJiZMKEEsdGhpcyx0KX12YXIgRmU9YmUucHJvdG90eXBlO0ZlLmFwcGVuZD1mdW5jdGlvbih0LGUpe3RoaXMuX3BhaXJzLnB1c2goW3QsZV0pfTtGZS50b1N0cmluZz1mdW5jdGlvbih0KXtsZXQgZT10P2Z1bmN0aW9uKHIpe3JldHVybiB0LmNhbGwodGhpcyxyLFNlKX06U2U7cmV0dXJuIHRoaXMuX3BhaXJzLm1hcChmdW5jdGlvbihuKXtyZXR1cm4gZShuWzBdKSsiPSIrZShuWzFdKX0sIiIpLmpvaW4oIiYiKX07dmFyIGZBPWJlO2Z1bmN0aW9uIHVyKEEpe3JldHVybiBlbmNvZGVVUklDb21wb25lbnQoQSkucmVwbGFjZSgvJTNBL2dpLCI6IikucmVwbGFjZSgvJTI0L2csIiQiKS5yZXBsYWNlKC8lMkMvZ2ksIiwiKS5yZXBsYWNlKC8lMjAvZywiKyIpLnJlcGxhY2UoLyU1Qi9naSwiWyIpLnJlcGxhY2UoLyU1RC9naSwiXSIpfWZ1bmN0aW9uIHRBKEEsdCxlKXtpZighdClyZXR1cm4gQTtsZXQgcj1lJiZlLmVuY29kZXx8dXIsbj1lJiZlLnNlcmlhbGl6ZSxhO2lmKG4/YT1uKHQsZSk6YT1nLmlzVVJMU2VhcmNoUGFyYW1zKHQpP3QudG9TdHJpbmcoKTpuZXcgZkEodCxlKS50b1N0cmluZyhyKSxhKXtsZXQgaT1BLmluZGV4T2YoIiMiKTtpIT09LTEmJihBPUEuc2xpY2UoMCxpKSksQSs9KEEuaW5kZXhPZigiPyIpPT09LTE/Ij8iOiImIikrYX1yZXR1cm4gQX12YXIgTEE9Y2xhc3N7Y29uc3RydWN0b3IoKXt0aGlzLmhhbmRsZXJzPVtdfXVzZSh0LGUscil7cmV0dXJuIHRoaXMuaGFuZGxlcnMucHVzaCh7ZnVsZmlsbGVkOnQscmVqZWN0ZWQ6ZSxzeW5jaHJvbm91czpyP3Iuc3luY2hyb25vdXM6ITEscnVuV2hlbjpyP3IucnVuV2hlbjpudWxsfSksdGhpcy5oYW5kbGVycy5sZW5ndGgtMX1lamVjdCh0KXt0aGlzLmhhbmRsZXJzW3RdJiYodGhpcy5oYW5kbGVyc1t0XT1udWxsKX1jbGVhcigpe3RoaXMuaGFuZGxlcnMmJih0aGlzLmhhbmRsZXJzPVtdKX1mb3JFYWNoKHQpe2cuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLGZ1bmN0aW9uKHIpe3IhPT1udWxsJiZ0KHIpfSl9fSxQQT1MQTt2YXIgdUE9e3NpbGVudEpTT05QYXJzaW5nOiEwLGZvcmNlZEpTT05QYXJzaW5nOiEwLGNsYXJpZnlUaW1lb3V0RXJyb3I6ITF9O3ZhciBrZT10eXBlb2YgVVJMU2VhcmNoUGFyYW1zPCJ1Ij9VUkxTZWFyY2hQYXJhbXM6ZkE7dmFyIFJlPXR5cGVvZiBGb3JtRGF0YTwidSI/Rm9ybURhdGE6bnVsbDt2YXIgVWU9dHlwZW9mIEJsb2I8InUiP0Jsb2I6bnVsbDt2YXIgQ3I9KCgpPT57bGV0IEE7cmV0dXJuIHR5cGVvZiBuYXZpZ2F0b3I8InUiJiYoKEE9bmF2aWdhdG9yLnByb2R1Y3QpPT09IlJlYWN0TmF0aXZlInx8QT09PSJOYXRpdmVTY3JpcHQifHxBPT09Ik5TIik/ITE6dHlwZW9mIHdpbmRvdzwidSImJnR5cGVvZiBkb2N1bWVudDwidSJ9KSgpLEJyPSgoKT0+dHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlPCJ1IiYmc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlJiZ0eXBlb2Ygc2VsZi5pbXBvcnRTY3JpcHRzPT0iZnVuY3Rpb24iKSgpLFM9e2lzQnJvd3NlcjohMCxjbGFzc2VzOntVUkxTZWFyY2hQYXJhbXM6a2UsRm9ybURhdGE6UmUsQmxvYjpVZX0saXNTdGFuZGFyZEJyb3dzZXJFbnY6Q3IsaXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnY6QnIscHJvdG9jb2xzOlsiaHR0cCIsImh0dHBzIiwiZmlsZSIsImJsb2IiLCJ1cmwiLCJkYXRhIl19O2Z1bmN0aW9uIE1BKEEsdCl7cmV0dXJuIEwoQSxuZXcgUy5jbGFzc2VzLlVSTFNlYXJjaFBhcmFtcyxPYmplY3QuYXNzaWduKHt2aXNpdG9yOmZ1bmN0aW9uKGUscixuLGEpe3JldHVybiBTLmlzTm9kZSYmZy5pc0J1ZmZlcihlKT8odGhpcy5hcHBlbmQocixlLnRvU3RyaW5nKCJiYXNlNjQiKSksITEpOmEuZGVmYXVsdFZpc2l0b3IuYXBwbHkodGhpcyxhcmd1bWVudHMpfX0sdCkpfWZ1bmN0aW9uIEVyKEEpe3JldHVybiBnLm1hdGNoQWxsKC9cdyt8XFsoXHcqKV0vZyxBKS5tYXAodD0+dFswXT09PSJbXSI/IiI6dFsxXXx8dFswXSl9ZnVuY3Rpb24gZHIoQSl7bGV0IHQ9e30sZT1PYmplY3Qua2V5cyhBKSxyLG49ZS5sZW5ndGgsYTtmb3Iocj0wO3I8bjtyKyspYT1lW3JdLHRbYV09QVthXTtyZXR1cm4gdH1mdW5jdGlvbiBRcihBKXtmdW5jdGlvbiB0KGUscixuLGEpe2xldCBpPWVbYSsrXSxsPU51bWJlci5pc0Zpbml0ZSgraSksdT1hPj1lLmxlbmd0aDtyZXR1cm4gaT0haSYmZy5pc0FycmF5KG4pP24ubGVuZ3RoOmksdT8oZy5oYXNPd25Qcm9wKG4saSk/bltpXT1bbltpXSxyXTpuW2ldPXIsIWwpOigoIW5baV18fCFnLmlzT2JqZWN0KG5baV0pKSYmKG5baV09W10pLHQoZSxyLG5baV0sYSkmJmcuaXNBcnJheShuW2ldKSYmKG5baV09ZHIobltpXSkpLCFsKX1pZihnLmlzRm9ybURhdGEoQSkmJmcuaXNGdW5jdGlvbihBLmVudHJpZXMpKXtsZXQgZT17fTtyZXR1cm4gZy5mb3JFYWNoRW50cnkoQSwocixuKT0+e3QoRXIociksbixlLDApfSksZX1yZXR1cm4gbnVsbH12YXIgQ0E9UXI7dmFyIHByPXsiQ29udGVudC1UeXBlIjp2b2lkIDB9O2Z1bmN0aW9uIG1yKEEsdCxlKXtpZihnLmlzU3RyaW5nKEEpKXRyeXtyZXR1cm4odHx8SlNPTi5wYXJzZSkoQSksZy50cmltKEEpfWNhdGNoKHIpe2lmKHIubmFtZSE9PSJTeW50YXhFcnJvciIpdGhyb3cgcn1yZXR1cm4oZXx8SlNPTi5zdHJpbmdpZnkpKEEpfXZhciBCQT17dHJhbnNpdGlvbmFsOnVBLGFkYXB0ZXI6WyJ4aHIiLCJodHRwIl0sdHJhbnNmb3JtUmVxdWVzdDpbZnVuY3Rpb24odCxlKXtsZXQgcj1lLmdldENvbnRlbnRUeXBlKCl8fCIiLG49ci5pbmRleE9mKCJhcHBsaWNhdGlvbi9qc29uIik+LTEsYT1nLmlzT2JqZWN0KHQpO2lmKGEmJmcuaXNIVE1MRm9ybSh0KSYmKHQ9bmV3IEZvcm1EYXRhKHQpKSxnLmlzRm9ybURhdGEodCkpcmV0dXJuIG4mJm4/SlNPTi5zdHJpbmdpZnkoQ0EodCkpOnQ7aWYoZy5pc0FycmF5QnVmZmVyKHQpfHxnLmlzQnVmZmVyKHQpfHxnLmlzU3RyZWFtKHQpfHxnLmlzRmlsZSh0KXx8Zy5pc0Jsb2IodCkpcmV0dXJuIHQ7aWYoZy5pc0FycmF5QnVmZmVyVmlldyh0KSlyZXR1cm4gdC5idWZmZXI7aWYoZy5pc1VSTFNlYXJjaFBhcmFtcyh0KSlyZXR1cm4gZS5zZXRDb250ZW50VHlwZSgiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgiLCExKSx0LnRvU3RyaW5nKCk7bGV0IGw7aWYoYSl7aWYoci5pbmRleE9mKCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiKT4tMSlyZXR1cm4gTUEodCx0aGlzLmZvcm1TZXJpYWxpemVyKS50b1N0cmluZygpO2lmKChsPWcuaXNGaWxlTGlzdCh0KSl8fHIuaW5kZXhPZigibXVsdGlwYXJ0L2Zvcm0tZGF0YSIpPi0xKXtsZXQgdT10aGlzLmVudiYmdGhpcy5lbnYuRm9ybURhdGE7cmV0dXJuIEwobD97ImZpbGVzW10iOnR9OnQsdSYmbmV3IHUsdGhpcy5mb3JtU2VyaWFsaXplcil9fXJldHVybiBhfHxuPyhlLnNldENvbnRlbnRUeXBlKCJhcHBsaWNhdGlvbi9qc29uIiwhMSksbXIodCkpOnR9XSx0cmFuc2Zvcm1SZXNwb25zZTpbZnVuY3Rpb24odCl7bGV0IGU9dGhpcy50cmFuc2l0aW9uYWx8fEJBLnRyYW5zaXRpb25hbCxyPWUmJmUuZm9yY2VkSlNPTlBhcnNpbmcsbj10aGlzLnJlc3BvbnNlVHlwZT09PSJqc29uIjtpZih0JiZnLmlzU3RyaW5nKHQpJiYociYmIXRoaXMucmVzcG9uc2VUeXBlfHxuKSl7bGV0IGk9IShlJiZlLnNpbGVudEpTT05QYXJzaW5nKSYmbjt0cnl7cmV0dXJuIEpTT04ucGFyc2UodCl9Y2F0Y2gobCl7aWYoaSl0aHJvdyBsLm5hbWU9PT0iU3ludGF4RXJyb3IiP2QuZnJvbShsLGQuRVJSX0JBRF9SRVNQT05TRSx0aGlzLG51bGwsdGhpcy5yZXNwb25zZSk6bH19cmV0dXJuIHR9XSx0aW1lb3V0OjAseHNyZkNvb2tpZU5hbWU6IlhTUkYtVE9LRU4iLHhzcmZIZWFkZXJOYW1lOiJYLVhTUkYtVE9LRU4iLG1heENvbnRlbnRMZW5ndGg6LTEsbWF4Qm9keUxlbmd0aDotMSxlbnY6e0Zvcm1EYXRhOlMuY2xhc3Nlcy5Gb3JtRGF0YSxCbG9iOlMuY2xhc3Nlcy5CbG9ifSx2YWxpZGF0ZVN0YXR1czpmdW5jdGlvbih0KXtyZXR1cm4gdD49MjAwJiZ0PDMwMH0saGVhZGVyczp7Y29tbW9uOntBY2NlcHQ6ImFwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKiJ9fX07Zy5mb3JFYWNoKFsiZGVsZXRlIiwiZ2V0IiwiaGVhZCJdLGZ1bmN0aW9uKHQpe0JBLmhlYWRlcnNbdF09e319KTtnLmZvckVhY2goWyJwb3N0IiwicHV0IiwicGF0Y2giXSxmdW5jdGlvbih0KXtCQS5oZWFkZXJzW3RdPWcubWVyZ2UocHIpfSk7dmFyIGo9QkE7dmFyIGhyPWcudG9PYmplY3RTZXQoWyJhZ2UiLCJhdXRob3JpemF0aW9uIiwiY29udGVudC1sZW5ndGgiLCJjb250ZW50LXR5cGUiLCJldGFnIiwiZXhwaXJlcyIsImZyb20iLCJob3N0IiwiaWYtbW9kaWZpZWQtc2luY2UiLCJpZi11bm1vZGlmaWVkLXNpbmNlIiwibGFzdC1tb2RpZmllZCIsImxvY2F0aW9uIiwibWF4LWZvcndhcmRzIiwicHJveHktYXV0aG9yaXphdGlvbiIsInJlZmVyZXIiLCJyZXRyeS1hZnRlciIsInVzZXItYWdlbnQiXSksTmU9QT0+e2xldCB0PXt9LGUscixuO3JldHVybiBBJiZBLnNwbGl0KGAKYCkuZm9yRWFjaChmdW5jdGlvbihpKXtuPWkuaW5kZXhPZigiOiIpLGU9aS5zdWJzdHJpbmcoMCxuKS50cmltKCkudG9Mb3dlckNhc2UoKSxyPWkuc3Vic3RyaW5nKG4rMSkudHJpbSgpLCEoIWV8fHRbZV0mJmhyW2VdKSYmKGU9PT0ic2V0LWNvb2tpZSI/dFtlXT90W2VdLnB1c2gocik6dFtlXT1bcl06dFtlXT10W2VdP3RbZV0rIiwgIityOnIpfSksdH07dmFyIE9lPVN5bWJvbCgiaW50ZXJuYWxzIik7ZnVuY3Rpb24gckEoQSl7cmV0dXJuIEEmJlN0cmluZyhBKS50cmltKCkudG9Mb3dlckNhc2UoKX1mdW5jdGlvbiBFQShBKXtyZXR1cm4gQT09PSExfHxBPT1udWxsP0E6Zy5pc0FycmF5KEEpP0EubWFwKEVBKTpTdHJpbmcoQSl9ZnVuY3Rpb24geXIoQSl7bGV0IHQ9T2JqZWN0LmNyZWF0ZShudWxsKSxlPS8oW15ccyw7PV0rKVxzKig/Oj1ccyooW14sO10rKSk/L2cscjtmb3IoO3I9ZS5leGVjKEEpOyl0W3JbMV1dPXJbMl07cmV0dXJuIHR9dmFyIHdyPUE9Pi9eWy1fYS16QS1aMC05XmB8fiwhIyQlJicqKy5dKyQvLnRlc3QoQS50cmltKCkpO2Z1bmN0aW9uIEpBKEEsdCxlLHIsbil7aWYoZy5pc0Z1bmN0aW9uKHIpKXJldHVybiByLmNhbGwodGhpcyx0LGUpO2lmKG4mJih0PWUpLCEhZy5pc1N0cmluZyh0KSl7aWYoZy5pc1N0cmluZyhyKSlyZXR1cm4gdC5pbmRleE9mKHIpIT09LTE7aWYoZy5pc1JlZ0V4cChyKSlyZXR1cm4gci50ZXN0KHQpfX1mdW5jdGlvbiBEcihBKXtyZXR1cm4gQS50cmltKCkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8oW2EtelxkXSkoXHcqKS9nLCh0LGUscik9PmUudG9VcHBlckNhc2UoKStyKX1mdW5jdGlvbiBTcihBLHQpe2xldCBlPWcudG9DYW1lbENhc2UoIiAiK3QpO1siZ2V0Iiwic2V0IiwiaGFzIl0uZm9yRWFjaChyPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KEEscitlLHt2YWx1ZTpmdW5jdGlvbihuLGEsaSl7cmV0dXJuIHRoaXNbcl0uY2FsbCh0aGlzLHQsbixhLGkpfSxjb25maWd1cmFibGU6ITB9KX0pfXZhciBfPWNsYXNze2NvbnN0cnVjdG9yKHQpe3QmJnRoaXMuc2V0KHQpfXNldCh0LGUscil7bGV0IG49dGhpcztmdW5jdGlvbiBhKGwsdSxvKXtsZXQgcz1yQSh1KTtpZighcyl0aHJvdyBuZXcgRXJyb3IoImhlYWRlciBuYW1lIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nIik7bGV0IEM9Zy5maW5kS2V5KG4scyk7KCFDfHxuW0NdPT09dm9pZCAwfHxvPT09ITB8fG89PT12b2lkIDAmJm5bQ10hPT0hMSkmJihuW0N8fHVdPUVBKGwpKX1sZXQgaT0obCx1KT0+Zy5mb3JFYWNoKGwsKG8scyk9PmEobyxzLHUpKTtyZXR1cm4gZy5pc1BsYWluT2JqZWN0KHQpfHx0IGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3Rvcj9pKHQsZSk6Zy5pc1N0cmluZyh0KSYmKHQ9dC50cmltKCkpJiYhd3IodCk/aShOZSh0KSxlKTp0IT1udWxsJiZhKGUsdCxyKSx0aGlzfWdldCh0LGUpe2lmKHQ9ckEodCksdCl7bGV0IHI9Zy5maW5kS2V5KHRoaXMsdCk7aWYocil7bGV0IG49dGhpc1tyXTtpZighZSlyZXR1cm4gbjtpZihlPT09ITApcmV0dXJuIHlyKG4pO2lmKGcuaXNGdW5jdGlvbihlKSlyZXR1cm4gZS5jYWxsKHRoaXMsbixyKTtpZihnLmlzUmVnRXhwKGUpKXJldHVybiBlLmV4ZWMobik7dGhyb3cgbmV3IFR5cGVFcnJvcigicGFyc2VyIG11c3QgYmUgYm9vbGVhbnxyZWdleHB8ZnVuY3Rpb24iKX19fWhhcyh0LGUpe2lmKHQ9ckEodCksdCl7bGV0IHI9Zy5maW5kS2V5KHRoaXMsdCk7cmV0dXJuISEociYmdGhpc1tyXSE9PXZvaWQgMCYmKCFlfHxKQSh0aGlzLHRoaXNbcl0scixlKSkpfXJldHVybiExfWRlbGV0ZSh0LGUpe2xldCByPXRoaXMsbj0hMTtmdW5jdGlvbiBhKGkpe2lmKGk9ckEoaSksaSl7bGV0IGw9Zy5maW5kS2V5KHIsaSk7bCYmKCFlfHxKQShyLHJbbF0sbCxlKSkmJihkZWxldGUgcltsXSxuPSEwKX19cmV0dXJuIGcuaXNBcnJheSh0KT90LmZvckVhY2goYSk6YSh0KSxufWNsZWFyKHQpe2xldCBlPU9iamVjdC5rZXlzKHRoaXMpLHI9ZS5sZW5ndGgsbj0hMTtmb3IoO3ItLTspe2xldCBhPWVbcl07KCF0fHxKQSh0aGlzLHRoaXNbYV0sYSx0LCEwKSkmJihkZWxldGUgdGhpc1thXSxuPSEwKX1yZXR1cm4gbn1ub3JtYWxpemUodCl7bGV0IGU9dGhpcyxyPXt9O3JldHVybiBnLmZvckVhY2godGhpcywobixhKT0+e2xldCBpPWcuZmluZEtleShyLGEpO2lmKGkpe2VbaV09RUEobiksZGVsZXRlIGVbYV07cmV0dXJufWxldCBsPXQ/RHIoYSk6U3RyaW5nKGEpLnRyaW0oKTtsIT09YSYmZGVsZXRlIGVbYV0sZVtsXT1FQShuKSxyW2xdPSEwfSksdGhpc31jb25jYXQoLi4udCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IuY29uY2F0KHRoaXMsLi4udCl9dG9KU09OKHQpe2xldCBlPU9iamVjdC5jcmVhdGUobnVsbCk7cmV0dXJuIGcuZm9yRWFjaCh0aGlzLChyLG4pPT57ciE9bnVsbCYmciE9PSExJiYoZVtuXT10JiZnLmlzQXJyYXkocik/ci5qb2luKCIsICIpOnIpfSksZX1bU3ltYm9sLml0ZXJhdG9yXSgpe3JldHVybiBPYmplY3QuZW50cmllcyh0aGlzLnRvSlNPTigpKVtTeW1ib2wuaXRlcmF0b3JdKCl9dG9TdHJpbmcoKXtyZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy50b0pTT04oKSkubWFwKChbdCxlXSk9PnQrIjogIitlKS5qb2luKGAKYCl9Z2V0W1N5bWJvbC50b1N0cmluZ1RhZ10oKXtyZXR1cm4iQXhpb3NIZWFkZXJzIn1zdGF0aWMgZnJvbSh0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIHRoaXM/dDpuZXcgdGhpcyh0KX1zdGF0aWMgY29uY2F0KHQsLi4uZSl7bGV0IHI9bmV3IHRoaXModCk7cmV0dXJuIGUuZm9yRWFjaChuPT5yLnNldChuKSkscn1zdGF0aWMgYWNjZXNzb3IodCl7bGV0IHI9KHRoaXNbT2VdPXRoaXNbT2VdPXthY2Nlc3NvcnM6e319KS5hY2Nlc3NvcnMsbj10aGlzLnByb3RvdHlwZTtmdW5jdGlvbiBhKGkpe2xldCBsPXJBKGkpO3JbbF18fChTcihuLGkpLHJbbF09ITApfXJldHVybiBnLmlzQXJyYXkodCk/dC5mb3JFYWNoKGEpOmEodCksdGhpc319O18uYWNjZXNzb3IoWyJDb250ZW50LVR5cGUiLCJDb250ZW50LUxlbmd0aCIsIkFjY2VwdCIsIkFjY2VwdC1FbmNvZGluZyIsIlVzZXItQWdlbnQiLCJBdXRob3JpemF0aW9uIl0pO2cuZnJlZXplTWV0aG9kcyhfLnByb3RvdHlwZSk7Zy5mcmVlemVNZXRob2RzKF8pO3ZhciBGPV87ZnVuY3Rpb24gbkEoQSx0KXtsZXQgZT10aGlzfHxqLHI9dHx8ZSxuPUYuZnJvbShyLmhlYWRlcnMpLGE9ci5kYXRhO3JldHVybiBnLmZvckVhY2goQSxmdW5jdGlvbihsKXthPWwuY2FsbChlLGEsbi5ub3JtYWxpemUoKSx0P3Quc3RhdHVzOnZvaWQgMCl9KSxuLm5vcm1hbGl6ZSgpLGF9ZnVuY3Rpb24gaUEoQSl7cmV0dXJuISEoQSYmQS5fX0NBTkNFTF9fKX1mdW5jdGlvbiBUZShBLHQsZSl7ZC5jYWxsKHRoaXMsQT8/ImNhbmNlbGVkIixkLkVSUl9DQU5DRUxFRCx0LGUpLHRoaXMubmFtZT0iQ2FuY2VsZWRFcnJvciJ9Zy5pbmhlcml0cyhUZSxkLHtfX0NBTkNFTF9fOiEwfSk7dmFyIFA9VGU7ZnVuY3Rpb24gSEEoQSx0LGUpe2xldCByPWUuY29uZmlnLnZhbGlkYXRlU3RhdHVzOyFlLnN0YXR1c3x8IXJ8fHIoZS5zdGF0dXMpP0EoZSk6dChuZXcgZCgiUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAiK2Uuc3RhdHVzLFtkLkVSUl9CQURfUkVRVUVTVCxkLkVSUl9CQURfUkVTUE9OU0VdW01hdGguZmxvb3IoZS5zdGF0dXMvMTAwKS00XSxlLmNvbmZpZyxlLnJlcXVlc3QsZSkpfXZhciBHZT1TLmlzU3RhbmRhcmRCcm93c2VyRW52P2Z1bmN0aW9uKCl7cmV0dXJue3dyaXRlOmZ1bmN0aW9uKGUscixuLGEsaSxsKXtsZXQgdT1bXTt1LnB1c2goZSsiPSIrZW5jb2RlVVJJQ29tcG9uZW50KHIpKSxnLmlzTnVtYmVyKG4pJiZ1LnB1c2goImV4cGlyZXM9IituZXcgRGF0ZShuKS50b0dNVFN0cmluZygpKSxnLmlzU3RyaW5nKGEpJiZ1LnB1c2goInBhdGg9IithKSxnLmlzU3RyaW5nKGkpJiZ1LnB1c2goImRvbWFpbj0iK2kpLGw9PT0hMCYmdS5wdXNoKCJzZWN1cmUiKSxkb2N1bWVudC5jb29raWU9dS5qb2luKCI7ICIpfSxyZWFkOmZ1bmN0aW9uKGUpe2xldCByPWRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCIoXnw7XFxzKikoIitlKyIpPShbXjtdKikiKSk7cmV0dXJuIHI/ZGVjb2RlVVJJQ29tcG9uZW50KHJbM10pOm51bGx9LHJlbW92ZTpmdW5jdGlvbihlKXt0aGlzLndyaXRlKGUsIiIsRGF0ZS5ub3coKS04NjRlNSl9fX0oKTpmdW5jdGlvbigpe3JldHVybnt3cml0ZTpmdW5jdGlvbigpe30scmVhZDpmdW5jdGlvbigpe3JldHVybiBudWxsfSxyZW1vdmU6ZnVuY3Rpb24oKXt9fX0oKTtmdW5jdGlvbiBZQShBKXtyZXR1cm4vXihbYS16XVthLXpcZCtcLS5dKjopP1wvXC8vaS50ZXN0KEEpfWZ1bmN0aW9uIHFBKEEsdCl7cmV0dXJuIHQ/QS5yZXBsYWNlKC9cLyskLywiIikrIi8iK3QucmVwbGFjZSgvXlwvKy8sIiIpOkF9ZnVuY3Rpb24gYUEoQSx0KXtyZXR1cm4gQSYmIVlBKHQpP3FBKEEsdCk6dH12YXIgeGU9Uy5pc1N0YW5kYXJkQnJvd3NlckVudj9mdW5jdGlvbigpe2xldCB0PS8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJhIikscjtmdW5jdGlvbiBuKGEpe2xldCBpPWE7cmV0dXJuIHQmJihlLnNldEF0dHJpYnV0ZSgiaHJlZiIsaSksaT1lLmhyZWYpLGUuc2V0QXR0cmlidXRlKCJocmVmIixpKSx7aHJlZjplLmhyZWYscHJvdG9jb2w6ZS5wcm90b2NvbD9lLnByb3RvY29sLnJlcGxhY2UoLzokLywiIik6IiIsaG9zdDplLmhvc3Qsc2VhcmNoOmUuc2VhcmNoP2Uuc2VhcmNoLnJlcGxhY2UoL15cPy8sIiIpOiIiLGhhc2g6ZS5oYXNoP2UuaGFzaC5yZXBsYWNlKC9eIy8sIiIpOiIiLGhvc3RuYW1lOmUuaG9zdG5hbWUscG9ydDplLnBvcnQscGF0aG5hbWU6ZS5wYXRobmFtZS5jaGFyQXQoMCk9PT0iLyI/ZS5wYXRobmFtZToiLyIrZS5wYXRobmFtZX19cmV0dXJuIHI9bih3aW5kb3cubG9jYXRpb24uaHJlZiksZnVuY3Rpb24oaSl7bGV0IGw9Zy5pc1N0cmluZyhpKT9uKGkpOmk7cmV0dXJuIGwucHJvdG9jb2w9PT1yLnByb3RvY29sJiZsLmhvc3Q9PT1yLmhvc3R9fSgpOmZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuITB9fSgpO2Z1bmN0aW9uIHZBKEEpe2xldCB0PS9eKFstK1x3XXsxLDI1fSkoOj9cL1wvfDopLy5leGVjKEEpO3JldHVybiB0JiZ0WzFdfHwiIn1mdW5jdGlvbiBicihBLHQpe0E9QXx8MTA7bGV0IGU9bmV3IEFycmF5KEEpLHI9bmV3IEFycmF5KEEpLG49MCxhPTAsaTtyZXR1cm4gdD10IT09dm9pZCAwP3Q6MWUzLGZ1bmN0aW9uKHUpe2xldCBvPURhdGUubm93KCkscz1yW2FdO2l8fChpPW8pLGVbbl09dSxyW25dPW87bGV0IEM9YSxjPTA7Zm9yKDtDIT09bjspYys9ZVtDKytdLEM9QyVBO2lmKG49KG4rMSklQSxuPT09YSYmKGE9KGErMSklQSksby1pPHQpcmV0dXJuO2xldCBJPXMmJm8tcztyZXR1cm4gST9NYXRoLnJvdW5kKGMqMWUzL0kpOnZvaWQgMH19dmFyIExlPWJyO2Z1bmN0aW9uIFBlKEEsdCl7bGV0IGU9MCxyPUxlKDUwLDI1MCk7cmV0dXJuIG49PntsZXQgYT1uLmxvYWRlZCxpPW4ubGVuZ3RoQ29tcHV0YWJsZT9uLnRvdGFsOnZvaWQgMCxsPWEtZSx1PXIobCksbz1hPD1pO2U9YTtsZXQgcz17bG9hZGVkOmEsdG90YWw6aSxwcm9ncmVzczppP2EvaTp2b2lkIDAsYnl0ZXM6bCxyYXRlOnV8fHZvaWQgMCxlc3RpbWF0ZWQ6dSYmaSYmbz8oaS1hKS91OnZvaWQgMCxldmVudDpufTtzW3Q/ImRvd25sb2FkIjoidXBsb2FkIl09ITAsQShzKX19dmFyIEZyPXR5cGVvZiBYTUxIdHRwUmVxdWVzdDwidSIsTWU9RnImJmZ1bmN0aW9uKEEpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihlLHIpe2xldCBuPUEuZGF0YSxhPUYuZnJvbShBLmhlYWRlcnMpLm5vcm1hbGl6ZSgpLGk9QS5yZXNwb25zZVR5cGUsbDtmdW5jdGlvbiB1KCl7QS5jYW5jZWxUb2tlbiYmQS5jYW5jZWxUb2tlbi51bnN1YnNjcmliZShsKSxBLnNpZ25hbCYmQS5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigiYWJvcnQiLGwpfWcuaXNGb3JtRGF0YShuKSYmKFMuaXNTdGFuZGFyZEJyb3dzZXJFbnZ8fFMuaXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnY/YS5zZXRDb250ZW50VHlwZSghMSk6YS5zZXRDb250ZW50VHlwZSgibXVsdGlwYXJ0L2Zvcm0tZGF0YTsiLCExKSk7bGV0IG89bmV3IFhNTEh0dHBSZXF1ZXN0O2lmKEEuYXV0aCl7bGV0IEk9QS5hdXRoLnVzZXJuYW1lfHwiIixmPUEuYXV0aC5wYXNzd29yZD91bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoQS5hdXRoLnBhc3N3b3JkKSk6IiI7YS5zZXQoIkF1dGhvcml6YXRpb24iLCJCYXNpYyAiK2J0b2EoSSsiOiIrZikpfWxldCBzPWFBKEEuYmFzZVVSTCxBLnVybCk7by5vcGVuKEEubWV0aG9kLnRvVXBwZXJDYXNlKCksdEEocyxBLnBhcmFtcyxBLnBhcmFtc1NlcmlhbGl6ZXIpLCEwKSxvLnRpbWVvdXQ9QS50aW1lb3V0O2Z1bmN0aW9uIEMoKXtpZighbylyZXR1cm47bGV0IEk9Ri5mcm9tKCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiaW4gbyYmby5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSksQj17ZGF0YTohaXx8aT09PSJ0ZXh0Inx8aT09PSJqc29uIj9vLnJlc3BvbnNlVGV4dDpvLnJlc3BvbnNlLHN0YXR1czpvLnN0YXR1cyxzdGF0dXNUZXh0Om8uc3RhdHVzVGV4dCxoZWFkZXJzOkksY29uZmlnOkEscmVxdWVzdDpvfTtIQShmdW5jdGlvbihtKXtlKG0pLHUoKX0sZnVuY3Rpb24obSl7cihtKSx1KCl9LEIpLG89bnVsbH1pZigib25sb2FkZW5kImluIG8/by5vbmxvYWRlbmQ9QzpvLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpeyFvfHxvLnJlYWR5U3RhdGUhPT00fHxvLnN0YXR1cz09PTAmJiEoby5yZXNwb25zZVVSTCYmby5yZXNwb25zZVVSTC5pbmRleE9mKCJmaWxlOiIpPT09MCl8fHNldFRpbWVvdXQoQyl9LG8ub25hYm9ydD1mdW5jdGlvbigpe28mJihyKG5ldyBkKCJSZXF1ZXN0IGFib3J0ZWQiLGQuRUNPTk5BQk9SVEVELEEsbykpLG89bnVsbCl9LG8ub25lcnJvcj1mdW5jdGlvbigpe3IobmV3IGQoIk5ldHdvcmsgRXJyb3IiLGQuRVJSX05FVFdPUkssQSxvKSksbz1udWxsfSxvLm9udGltZW91dD1mdW5jdGlvbigpe2xldCBmPUEudGltZW91dD8idGltZW91dCBvZiAiK0EudGltZW91dCsibXMgZXhjZWVkZWQiOiJ0aW1lb3V0IGV4Y2VlZGVkIixCPUEudHJhbnNpdGlvbmFsfHx1QTtBLnRpbWVvdXRFcnJvck1lc3NhZ2UmJihmPUEudGltZW91dEVycm9yTWVzc2FnZSkscihuZXcgZChmLEIuY2xhcmlmeVRpbWVvdXRFcnJvcj9kLkVUSU1FRE9VVDpkLkVDT05OQUJPUlRFRCxBLG8pKSxvPW51bGx9LFMuaXNTdGFuZGFyZEJyb3dzZXJFbnYpe2xldCBJPShBLndpdGhDcmVkZW50aWFsc3x8eGUocykpJiZBLnhzcmZDb29raWVOYW1lJiZHZS5yZWFkKEEueHNyZkNvb2tpZU5hbWUpO0kmJmEuc2V0KEEueHNyZkhlYWRlck5hbWUsSSl9bj09PXZvaWQgMCYmYS5zZXRDb250ZW50VHlwZShudWxsKSwic2V0UmVxdWVzdEhlYWRlciJpbiBvJiZnLmZvckVhY2goYS50b0pTT04oKSxmdW5jdGlvbihmLEIpe28uc2V0UmVxdWVzdEhlYWRlcihCLGYpfSksZy5pc1VuZGVmaW5lZChBLndpdGhDcmVkZW50aWFscyl8fChvLndpdGhDcmVkZW50aWFscz0hIUEud2l0aENyZWRlbnRpYWxzKSxpJiZpIT09Impzb24iJiYoby5yZXNwb25zZVR5cGU9QS5yZXNwb25zZVR5cGUpLHR5cGVvZiBBLm9uRG93bmxvYWRQcm9ncmVzcz09ImZ1bmN0aW9uIiYmby5hZGRFdmVudExpc3RlbmVyKCJwcm9ncmVzcyIsUGUoQS5vbkRvd25sb2FkUHJvZ3Jlc3MsITApKSx0eXBlb2YgQS5vblVwbG9hZFByb2dyZXNzPT0iZnVuY3Rpb24iJiZvLnVwbG9hZCYmby51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigicHJvZ3Jlc3MiLFBlKEEub25VcGxvYWRQcm9ncmVzcykpLChBLmNhbmNlbFRva2VufHxBLnNpZ25hbCkmJihsPUk9PntvJiYocighSXx8SS50eXBlP25ldyBQKG51bGwsQSxvKTpJKSxvLmFib3J0KCksbz1udWxsKX0sQS5jYW5jZWxUb2tlbiYmQS5jYW5jZWxUb2tlbi5zdWJzY3JpYmUobCksQS5zaWduYWwmJihBLnNpZ25hbC5hYm9ydGVkP2woKTpBLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCJhYm9ydCIsbCkpKTtsZXQgYz12QShzKTtpZihjJiZTLnByb3RvY29scy5pbmRleE9mKGMpPT09LTEpe3IobmV3IGQoIlVuc3VwcG9ydGVkIHByb3RvY29sICIrYysiOiIsZC5FUlJfQkFEX1JFUVVFU1QsQSkpO3JldHVybn1vLnNlbmQobnx8bnVsbCl9KX07dmFyIGRBPXtodHRwOmNBLHhocjpNZX07Zy5mb3JFYWNoKGRBLChBLHQpPT57aWYoQSl7dHJ5e09iamVjdC5kZWZpbmVQcm9wZXJ0eShBLCJuYW1lIix7dmFsdWU6dH0pfWNhdGNoe31PYmplY3QuZGVmaW5lUHJvcGVydHkoQSwiYWRhcHRlck5hbWUiLHt2YWx1ZTp0fSl9fSk7dmFyIEplPXtnZXRBZGFwdGVyOkE9PntBPWcuaXNBcnJheShBKT9BOltBXTtsZXR7bGVuZ3RoOnR9PUEsZSxyO2ZvcihsZXQgbj0wO248dCYmKGU9QVtuXSwhKHI9Zy5pc1N0cmluZyhlKT9kQVtlLnRvTG93ZXJDYXNlKCldOmUpKTtuKyspO2lmKCFyKXRocm93IHI9PT0hMT9uZXcgZChgQWRhcHRlciAke2V9IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGVudmlyb25tZW50YCwiRVJSX05PVF9TVVBQT1JUIik6bmV3IEVycm9yKGcuaGFzT3duUHJvcChkQSxlKT9gQWRhcHRlciAnJHtlfScgaXMgbm90IGF2YWlsYWJsZSBpbiB0aGUgYnVpbGRgOmBVbmtub3duIGFkYXB0ZXIgJyR7ZX0nYCk7aWYoIWcuaXNGdW5jdGlvbihyKSl0aHJvdyBuZXcgVHlwZUVycm9yKCJhZGFwdGVyIGlzIG5vdCBhIGZ1bmN0aW9uIik7cmV0dXJuIHJ9LGFkYXB0ZXJzOmRBfTtmdW5jdGlvbiBLQShBKXtpZihBLmNhbmNlbFRva2VuJiZBLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKSxBLnNpZ25hbCYmQS5zaWduYWwuYWJvcnRlZCl0aHJvdyBuZXcgUChudWxsLEEpfWZ1bmN0aW9uIFFBKEEpe3JldHVybiBLQShBKSxBLmhlYWRlcnM9Ri5mcm9tKEEuaGVhZGVycyksQS5kYXRhPW5BLmNhbGwoQSxBLnRyYW5zZm9ybVJlcXVlc3QpLFsicG9zdCIsInB1dCIsInBhdGNoIl0uaW5kZXhPZihBLm1ldGhvZCkhPT0tMSYmQS5oZWFkZXJzLnNldENvbnRlbnRUeXBlKCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiLCExKSxKZS5nZXRBZGFwdGVyKEEuYWRhcHRlcnx8ai5hZGFwdGVyKShBKS50aGVuKGZ1bmN0aW9uKHIpe3JldHVybiBLQShBKSxyLmRhdGE9bkEuY2FsbChBLEEudHJhbnNmb3JtUmVzcG9uc2Usciksci5oZWFkZXJzPUYuZnJvbShyLmhlYWRlcnMpLHJ9LGZ1bmN0aW9uKHIpe3JldHVybiBpQShyKXx8KEtBKEEpLHImJnIucmVzcG9uc2UmJihyLnJlc3BvbnNlLmRhdGE9bkEuY2FsbChBLEEudHJhbnNmb3JtUmVzcG9uc2Usci5yZXNwb25zZSksci5yZXNwb25zZS5oZWFkZXJzPUYuZnJvbShyLnJlc3BvbnNlLmhlYWRlcnMpKSksUHJvbWlzZS5yZWplY3Qocil9KX12YXIgSGU9QT0+QSBpbnN0YW5jZW9mIEY/QS50b0pTT04oKTpBO2Z1bmN0aW9uIHgoQSx0KXt0PXR8fHt9O2xldCBlPXt9O2Z1bmN0aW9uIHIobyxzLEMpe3JldHVybiBnLmlzUGxhaW5PYmplY3QobykmJmcuaXNQbGFpbk9iamVjdChzKT9nLm1lcmdlLmNhbGwoe2Nhc2VsZXNzOkN9LG8scyk6Zy5pc1BsYWluT2JqZWN0KHMpP2cubWVyZ2Uoe30scyk6Zy5pc0FycmF5KHMpP3Muc2xpY2UoKTpzfWZ1bmN0aW9uIG4obyxzLEMpe2lmKGcuaXNVbmRlZmluZWQocykpe2lmKCFnLmlzVW5kZWZpbmVkKG8pKXJldHVybiByKHZvaWQgMCxvLEMpfWVsc2UgcmV0dXJuIHIobyxzLEMpfWZ1bmN0aW9uIGEobyxzKXtpZighZy5pc1VuZGVmaW5lZChzKSlyZXR1cm4gcih2b2lkIDAscyl9ZnVuY3Rpb24gaShvLHMpe2lmKGcuaXNVbmRlZmluZWQocykpe2lmKCFnLmlzVW5kZWZpbmVkKG8pKXJldHVybiByKHZvaWQgMCxvKX1lbHNlIHJldHVybiByKHZvaWQgMCxzKX1mdW5jdGlvbiBsKG8scyxDKXtpZihDIGluIHQpcmV0dXJuIHIobyxzKTtpZihDIGluIEEpcmV0dXJuIHIodm9pZCAwLG8pfWxldCB1PXt1cmw6YSxtZXRob2Q6YSxkYXRhOmEsYmFzZVVSTDppLHRyYW5zZm9ybVJlcXVlc3Q6aSx0cmFuc2Zvcm1SZXNwb25zZTppLHBhcmFtc1NlcmlhbGl6ZXI6aSx0aW1lb3V0OmksdGltZW91dE1lc3NhZ2U6aSx3aXRoQ3JlZGVudGlhbHM6aSxhZGFwdGVyOmkscmVzcG9uc2VUeXBlOmkseHNyZkNvb2tpZU5hbWU6aSx4c3JmSGVhZGVyTmFtZTppLG9uVXBsb2FkUHJvZ3Jlc3M6aSxvbkRvd25sb2FkUHJvZ3Jlc3M6aSxkZWNvbXByZXNzOmksbWF4Q29udGVudExlbmd0aDppLG1heEJvZHlMZW5ndGg6aSxiZWZvcmVSZWRpcmVjdDppLHRyYW5zcG9ydDppLGh0dHBBZ2VudDppLGh0dHBzQWdlbnQ6aSxjYW5jZWxUb2tlbjppLHNvY2tldFBhdGg6aSxyZXNwb25zZUVuY29kaW5nOmksdmFsaWRhdGVTdGF0dXM6bCxoZWFkZXJzOihvLHMpPT5uKEhlKG8pLEhlKHMpLCEwKX07cmV0dXJuIGcuZm9yRWFjaChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LEEsdCkpLGZ1bmN0aW9uKHMpe2xldCBDPXVbc118fG4sYz1DKEFbc10sdFtzXSxzKTtnLmlzVW5kZWZpbmVkKGMpJiZDIT09bHx8KGVbc109Yyl9KSxlfXZhciBwQT0iMS40LjAiO3ZhciBXQT17fTtbIm9iamVjdCIsImJvb2xlYW4iLCJudW1iZXIiLCJmdW5jdGlvbiIsInN0cmluZyIsInN5bWJvbCJdLmZvckVhY2goKEEsdCk9PntXQVtBXT1mdW5jdGlvbihyKXtyZXR1cm4gdHlwZW9mIHI9PT1BfHwiYSIrKHQ8MT8ibiAiOiIgIikrQX19KTt2YXIgWWU9e307V0EudHJhbnNpdGlvbmFsPWZ1bmN0aW9uKHQsZSxyKXtmdW5jdGlvbiBuKGEsaSl7cmV0dXJuIltBeGlvcyB2IitwQSsiXSBUcmFuc2l0aW9uYWwgb3B0aW9uICciK2ErIiciK2krKHI/Ii4gIityOiIiKX1yZXR1cm4oYSxpLGwpPT57aWYodD09PSExKXRocm93IG5ldyBkKG4oaSwiIGhhcyBiZWVuIHJlbW92ZWQiKyhlPyIgaW4gIitlOiIiKSksZC5FUlJfREVQUkVDQVRFRCk7cmV0dXJuIGUmJiFZZVtpXSYmKFllW2ldPSEwLGNvbnNvbGUud2FybihuKGksIiBoYXMgYmVlbiBkZXByZWNhdGVkIHNpbmNlIHYiK2UrIiBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZWFyIGZ1dHVyZSIpKSksdD90KGEsaSxsKTohMH19O2Z1bmN0aW9uIGtyKEEsdCxlKXtpZih0eXBlb2YgQSE9Im9iamVjdCIpdGhyb3cgbmV3IGQoIm9wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QiLGQuRVJSX0JBRF9PUFRJT05fVkFMVUUpO2xldCByPU9iamVjdC5rZXlzKEEpLG49ci5sZW5ndGg7Zm9yKDtuLS0gPjA7KXtsZXQgYT1yW25dLGk9dFthXTtpZihpKXtsZXQgbD1BW2FdLHU9bD09PXZvaWQgMHx8aShsLGEsQSk7aWYodSE9PSEwKXRocm93IG5ldyBkKCJvcHRpb24gIithKyIgbXVzdCBiZSAiK3UsZC5FUlJfQkFEX09QVElPTl9WQUxVRSk7Y29udGludWV9aWYoZSE9PSEwKXRocm93IG5ldyBkKCJVbmtub3duIG9wdGlvbiAiK2EsZC5FUlJfQkFEX09QVElPTil9fXZhciBtQT17YXNzZXJ0T3B0aW9uczprcix2YWxpZGF0b3JzOldBfTt2YXIgTT1tQS52YWxpZGF0b3JzLHo9Y2xhc3N7Y29uc3RydWN0b3IodCl7dGhpcy5kZWZhdWx0cz10LHRoaXMuaW50ZXJjZXB0b3JzPXtyZXF1ZXN0Om5ldyBQQSxyZXNwb25zZTpuZXcgUEF9fXJlcXVlc3QodCxlKXt0eXBlb2YgdD09InN0cmluZyI/KGU9ZXx8e30sZS51cmw9dCk6ZT10fHx7fSxlPXgodGhpcy5kZWZhdWx0cyxlKTtsZXR7dHJhbnNpdGlvbmFsOnIscGFyYW1zU2VyaWFsaXplcjpuLGhlYWRlcnM6YX09ZTtyIT09dm9pZCAwJiZtQS5hc3NlcnRPcHRpb25zKHIse3NpbGVudEpTT05QYXJzaW5nOk0udHJhbnNpdGlvbmFsKE0uYm9vbGVhbiksZm9yY2VkSlNPTlBhcnNpbmc6TS50cmFuc2l0aW9uYWwoTS5ib29sZWFuKSxjbGFyaWZ5VGltZW91dEVycm9yOk0udHJhbnNpdGlvbmFsKE0uYm9vbGVhbil9LCExKSxuIT1udWxsJiYoZy5pc0Z1bmN0aW9uKG4pP2UucGFyYW1zU2VyaWFsaXplcj17c2VyaWFsaXplOm59Om1BLmFzc2VydE9wdGlvbnMobix7ZW5jb2RlOk0uZnVuY3Rpb24sc2VyaWFsaXplOk0uZnVuY3Rpb259LCEwKSksZS5tZXRob2Q9KGUubWV0aG9kfHx0aGlzLmRlZmF1bHRzLm1ldGhvZHx8ImdldCIpLnRvTG93ZXJDYXNlKCk7bGV0IGk7aT1hJiZnLm1lcmdlKGEuY29tbW9uLGFbZS5tZXRob2RdKSxpJiZnLmZvckVhY2goWyJkZWxldGUiLCJnZXQiLCJoZWFkIiwicG9zdCIsInB1dCIsInBhdGNoIiwiY29tbW9uIl0sZj0+e2RlbGV0ZSBhW2ZdfSksZS5oZWFkZXJzPUYuY29uY2F0KGksYSk7bGV0IGw9W10sdT0hMDt0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24oQil7dHlwZW9mIEIucnVuV2hlbj09ImZ1bmN0aW9uIiYmQi5ydW5XaGVuKGUpPT09ITF8fCh1PXUmJkIuc3luY2hyb25vdXMsbC51bnNoaWZ0KEIuZnVsZmlsbGVkLEIucmVqZWN0ZWQpKX0pO2xldCBvPVtdO3RoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24oQil7by5wdXNoKEIuZnVsZmlsbGVkLEIucmVqZWN0ZWQpfSk7bGV0IHMsQz0wLGM7aWYoIXUpe2xldCBmPVtRQS5iaW5kKHRoaXMpLHZvaWQgMF07Zm9yKGYudW5zaGlmdC5hcHBseShmLGwpLGYucHVzaC5hcHBseShmLG8pLGM9Zi5sZW5ndGgscz1Qcm9taXNlLnJlc29sdmUoZSk7QzxjOylzPXMudGhlbihmW0MrK10sZltDKytdKTtyZXR1cm4gc31jPWwubGVuZ3RoO2xldCBJPWU7Zm9yKEM9MDtDPGM7KXtsZXQgZj1sW0MrK10sQj1sW0MrK107dHJ5e0k9ZihJKX1jYXRjaChwKXtCLmNhbGwodGhpcyxwKTticmVha319dHJ5e3M9UUEuY2FsbCh0aGlzLEkpfWNhdGNoKGYpe3JldHVybiBQcm9taXNlLnJlamVjdChmKX1mb3IoQz0wLGM9by5sZW5ndGg7QzxjOylzPXMudGhlbihvW0MrK10sb1tDKytdKTtyZXR1cm4gc31nZXRVcmkodCl7dD14KHRoaXMuZGVmYXVsdHMsdCk7bGV0IGU9YUEodC5iYXNlVVJMLHQudXJsKTtyZXR1cm4gdEEoZSx0LnBhcmFtcyx0LnBhcmFtc1NlcmlhbGl6ZXIpfX07Zy5mb3JFYWNoKFsiZGVsZXRlIiwiZ2V0IiwiaGVhZCIsIm9wdGlvbnMiXSxmdW5jdGlvbih0KXt6LnByb3RvdHlwZVt0XT1mdW5jdGlvbihlLHIpe3JldHVybiB0aGlzLnJlcXVlc3QoeChyfHx7fSx7bWV0aG9kOnQsdXJsOmUsZGF0YToocnx8e30pLmRhdGF9KSl9fSk7Zy5mb3JFYWNoKFsicG9zdCIsInB1dCIsInBhdGNoIl0sZnVuY3Rpb24odCl7ZnVuY3Rpb24gZShyKXtyZXR1cm4gZnVuY3Rpb24oYSxpLGwpe3JldHVybiB0aGlzLnJlcXVlc3QoeChsfHx7fSx7bWV0aG9kOnQsaGVhZGVyczpyP3siQ29udGVudC1UeXBlIjoibXVsdGlwYXJ0L2Zvcm0tZGF0YSJ9Ont9LHVybDphLGRhdGE6aX0pKX19ei5wcm90b3R5cGVbdF09ZSgpLHoucHJvdG90eXBlW3QrIkZvcm0iXT1lKCEwKX0pO3ZhciBvQT16O3ZhciBqQT1jbGFzcyBBe2NvbnN0cnVjdG9yKHQpe2lmKHR5cGVvZiB0IT0iZnVuY3Rpb24iKXRocm93IG5ldyBUeXBlRXJyb3IoImV4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4iKTtsZXQgZTt0aGlzLnByb21pc2U9bmV3IFByb21pc2UoZnVuY3Rpb24oYSl7ZT1hfSk7bGV0IHI9dGhpczt0aGlzLnByb21pc2UudGhlbihuPT57aWYoIXIuX2xpc3RlbmVycylyZXR1cm47bGV0IGE9ci5fbGlzdGVuZXJzLmxlbmd0aDtmb3IoO2EtLSA+MDspci5fbGlzdGVuZXJzW2FdKG4pO3IuX2xpc3RlbmVycz1udWxsfSksdGhpcy5wcm9taXNlLnRoZW49bj0+e2xldCBhLGk9bmV3IFByb21pc2UobD0+e3Iuc3Vic2NyaWJlKGwpLGE9bH0pLnRoZW4obik7cmV0dXJuIGkuY2FuY2VsPWZ1bmN0aW9uKCl7ci51bnN1YnNjcmliZShhKX0saX0sdChmdW5jdGlvbihhLGksbCl7ci5yZWFzb258fChyLnJlYXNvbj1uZXcgUChhLGksbCksZShyLnJlYXNvbikpfSl9dGhyb3dJZlJlcXVlc3RlZCgpe2lmKHRoaXMucmVhc29uKXRocm93IHRoaXMucmVhc29ufXN1YnNjcmliZSh0KXtpZih0aGlzLnJlYXNvbil7dCh0aGlzLnJlYXNvbik7cmV0dXJufXRoaXMuX2xpc3RlbmVycz90aGlzLl9saXN0ZW5lcnMucHVzaCh0KTp0aGlzLl9saXN0ZW5lcnM9W3RdfXVuc3Vic2NyaWJlKHQpe2lmKCF0aGlzLl9saXN0ZW5lcnMpcmV0dXJuO2xldCBlPXRoaXMuX2xpc3RlbmVycy5pbmRleE9mKHQpO2UhPT0tMSYmdGhpcy5fbGlzdGVuZXJzLnNwbGljZShlLDEpfXN0YXRpYyBzb3VyY2UoKXtsZXQgdDtyZXR1cm57dG9rZW46bmV3IEEoZnVuY3Rpb24obil7dD1ufSksY2FuY2VsOnR9fX0scWU9akE7ZnVuY3Rpb24gX0EoQSl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBBLmFwcGx5KG51bGwsZSl9fWZ1bmN0aW9uIHpBKEEpe3JldHVybiBnLmlzT2JqZWN0KEEpJiZBLmlzQXhpb3NFcnJvcj09PSEwfXZhciBWQT17Q29udGludWU6MTAwLFN3aXRjaGluZ1Byb3RvY29sczoxMDEsUHJvY2Vzc2luZzoxMDIsRWFybHlIaW50czoxMDMsT2s6MjAwLENyZWF0ZWQ6MjAxLEFjY2VwdGVkOjIwMixOb25BdXRob3JpdGF0aXZlSW5mb3JtYXRpb246MjAzLE5vQ29udGVudDoyMDQsUmVzZXRDb250ZW50OjIwNSxQYXJ0aWFsQ29udGVudDoyMDYsTXVsdGlTdGF0dXM6MjA3LEFscmVhZHlSZXBvcnRlZDoyMDgsSW1Vc2VkOjIyNixNdWx0aXBsZUNob2ljZXM6MzAwLE1vdmVkUGVybWFuZW50bHk6MzAxLEZvdW5kOjMwMixTZWVPdGhlcjozMDMsTm90TW9kaWZpZWQ6MzA0LFVzZVByb3h5OjMwNSxVbnVzZWQ6MzA2LFRlbXBvcmFyeVJlZGlyZWN0OjMwNyxQZXJtYW5lbnRSZWRpcmVjdDozMDgsQmFkUmVxdWVzdDo0MDAsVW5hdXRob3JpemVkOjQwMSxQYXltZW50UmVxdWlyZWQ6NDAyLEZvcmJpZGRlbjo0MDMsTm90Rm91bmQ6NDA0LE1ldGhvZE5vdEFsbG93ZWQ6NDA1LE5vdEFjY2VwdGFibGU6NDA2LFByb3h5QXV0aGVudGljYXRpb25SZXF1aXJlZDo0MDcsUmVxdWVzdFRpbWVvdXQ6NDA4LENvbmZsaWN0OjQwOSxHb25lOjQxMCxMZW5ndGhSZXF1aXJlZDo0MTEsUHJlY29uZGl0aW9uRmFpbGVkOjQxMixQYXlsb2FkVG9vTGFyZ2U6NDEzLFVyaVRvb0xvbmc6NDE0LFVuc3VwcG9ydGVkTWVkaWFUeXBlOjQxNSxSYW5nZU5vdFNhdGlzZmlhYmxlOjQxNixFeHBlY3RhdGlvbkZhaWxlZDo0MTcsSW1BVGVhcG90OjQxOCxNaXNkaXJlY3RlZFJlcXVlc3Q6NDIxLFVucHJvY2Vzc2FibGVFbnRpdHk6NDIyLExvY2tlZDo0MjMsRmFpbGVkRGVwZW5kZW5jeTo0MjQsVG9vRWFybHk6NDI1LFVwZ3JhZGVSZXF1aXJlZDo0MjYsUHJlY29uZGl0aW9uUmVxdWlyZWQ6NDI4LFRvb01hbnlSZXF1ZXN0czo0MjksUmVxdWVzdEhlYWRlckZpZWxkc1Rvb0xhcmdlOjQzMSxVbmF2YWlsYWJsZUZvckxlZ2FsUmVhc29uczo0NTEsSW50ZXJuYWxTZXJ2ZXJFcnJvcjo1MDAsTm90SW1wbGVtZW50ZWQ6NTAxLEJhZEdhdGV3YXk6NTAyLFNlcnZpY2VVbmF2YWlsYWJsZTo1MDMsR2F0ZXdheVRpbWVvdXQ6NTA0LEh0dHBWZXJzaW9uTm90U3VwcG9ydGVkOjUwNSxWYXJpYW50QWxzb05lZ290aWF0ZXM6NTA2LEluc3VmZmljaWVudFN0b3JhZ2U6NTA3LExvb3BEZXRlY3RlZDo1MDgsTm90RXh0ZW5kZWQ6NTEwLE5ldHdvcmtBdXRoZW50aWNhdGlvblJlcXVpcmVkOjUxMX07T2JqZWN0LmVudHJpZXMoVkEpLmZvckVhY2goKFtBLHRdKT0+e1ZBW3RdPUF9KTt2YXIgdmU9VkE7ZnVuY3Rpb24gS2UoQSl7bGV0IHQ9bmV3IG9BKEEpLGU9JChvQS5wcm90b3R5cGUucmVxdWVzdCx0KTtyZXR1cm4gZy5leHRlbmQoZSxvQS5wcm90b3R5cGUsdCx7YWxsT3duS2V5czohMH0pLGcuZXh0ZW5kKGUsdCxudWxsLHthbGxPd25LZXlzOiEwfSksZS5jcmVhdGU9ZnVuY3Rpb24obil7cmV0dXJuIEtlKHgoQSxuKSl9LGV9dmFyIHk9S2Uoaik7eS5BeGlvcz1vQTt5LkNhbmNlbGVkRXJyb3I9UDt5LkNhbmNlbFRva2VuPXFlO3kuaXNDYW5jZWw9aUE7eS5WRVJTSU9OPXBBO3kudG9Gb3JtRGF0YT1MO3kuQXhpb3NFcnJvcj1kO3kuQ2FuY2VsPXkuQ2FuY2VsZWRFcnJvcjt5LmFsbD1mdW5jdGlvbih0KXtyZXR1cm4gUHJvbWlzZS5hbGwodCl9O3kuc3ByZWFkPV9BO3kuaXNBeGlvc0Vycm9yPXpBO3kubWVyZ2VDb25maWc9eDt5LkF4aW9zSGVhZGVycz1GO3kuZm9ybVRvSlNPTj1BPT5DQShnLmlzSFRNTEZvcm0oQSk/bmV3IEZvcm1EYXRhKEEpOkEpO3kuSHR0cFN0YXR1c0NvZGU9dmU7eS5kZWZhdWx0PXk7dmFyIFk9eTt2YXJ7QXhpb3M6Z28sQXhpb3NFcnJvcjpsbyxDYW5jZWxlZEVycm9yOmNvLGlzQ2FuY2VsOmZvLENhbmNlbFRva2VuOnVvLFZFUlNJT046Q28sYWxsOkJvLENhbmNlbDpFbyxpc0F4aW9zRXJyb3I6UW8sc3ByZWFkOnBvLHRvRm9ybURhdGE6bW8sQXhpb3NIZWFkZXJzOmhvLEh0dHBTdGF0dXNDb2RlOnlvLGZvcm1Ub0pTT046d28sbWVyZ2VDb25maWc6RG99PVk7dmFyIGplPVN5bWJvbCgiQ29tbGluay5wcm94eSIpLFJyPVN5bWJvbCgiQ29tbGluay5lbmRwb2ludCIpLCRBPVN5bWJvbCgiQ29tbGluay5yZWxlYXNlUHJveHkiKSxaQT1TeW1ib2woIkNvbWxpbmsuZmluYWxpemVyIikseUE9U3ltYm9sKCJDb21saW5rLnRocm93biIpLF9lPUE9PnR5cGVvZiBBPT0ib2JqZWN0IiYmQSE9PW51bGx8fHR5cGVvZiBBPT0iZnVuY3Rpb24iLFVyPXtjYW5IYW5kbGU6QT0+X2UoQSkmJkFbamVdLHNlcmlhbGl6ZShBKXtsZXR7cG9ydDE6dCxwb3J0MjplfT1uZXcgTWVzc2FnZUNoYW5uZWw7cmV0dXJuIFZlKEEsdCksW2UsW2VdXX0sZGVzZXJpYWxpemUoQSl7cmV0dXJuIEEuc3RhcnQoKSxBZShBKX19LE5yPXtjYW5IYW5kbGU6QT0+X2UoQSkmJnlBIGluIEEsc2VyaWFsaXplKHt2YWx1ZTpBfSl7bGV0IHQ7cmV0dXJuIEEgaW5zdGFuY2VvZiBFcnJvcj90PXtpc0Vycm9yOiEwLHZhbHVlOnttZXNzYWdlOkEubWVzc2FnZSxuYW1lOkEubmFtZSxzdGFjazpBLnN0YWNrfX06dD17aXNFcnJvcjohMSx2YWx1ZTpBfSxbdCxbXV19LGRlc2VyaWFsaXplKEEpe3Rocm93IEEuaXNFcnJvcj9PYmplY3QuYXNzaWduKG5ldyBFcnJvcihBLnZhbHVlLm1lc3NhZ2UpLEEudmFsdWUpOkEudmFsdWV9fSx6ZT1uZXcgTWFwKFtbInByb3h5IixVcl0sWyJ0aHJvdyIsTnJdXSk7ZnVuY3Rpb24gT3IoQSx0KXtmb3IobGV0IGUgb2YgQSlpZih0PT09ZXx8ZT09PSIqInx8ZSBpbnN0YW5jZW9mIFJlZ0V4cCYmZS50ZXN0KHQpKXJldHVybiEwO3JldHVybiExfWZ1bmN0aW9uIFZlKEEsdD1nbG9iYWxUaGlzLGU9WyIqIl0pe3QuYWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsZnVuY3Rpb24gcihuKXtpZighbnx8IW4uZGF0YSlyZXR1cm47aWYoIU9yKGUsbi5vcmlnaW4pKXtjb25zb2xlLndhcm4oYEludmFsaWQgb3JpZ2luICcke24ub3JpZ2lufScgZm9yIGNvbWxpbmsgcHJveHlgKTtyZXR1cm59bGV0e2lkOmEsdHlwZTppLHBhdGg6bH09T2JqZWN0LmFzc2lnbih7cGF0aDpbXX0sbi5kYXRhKSx1PShuLmRhdGEuYXJndW1lbnRMaXN0fHxbXSkubWFwKHEpLG87dHJ5e2xldCBzPWwuc2xpY2UoMCwtMSkucmVkdWNlKChjLEkpPT5jW0ldLEEpLEM9bC5yZWR1Y2UoKGMsSSk9PmNbSV0sQSk7c3dpdGNoKGkpe2Nhc2UiR0VUIjpvPUM7YnJlYWs7Y2FzZSJTRVQiOnNbbC5zbGljZSgtMSlbMF1dPXEobi5kYXRhLnZhbHVlKSxvPSEwO2JyZWFrO2Nhc2UiQVBQTFkiOm89Qy5hcHBseShzLHUpO2JyZWFrO2Nhc2UiQ09OU1RSVUNUIjp7bGV0IGM9bmV3IEMoLi4udSk7bz1QcihjKX1icmVhaztjYXNlIkVORFBPSU5UIjp7bGV0e3BvcnQxOmMscG9ydDI6SX09bmV3IE1lc3NhZ2VDaGFubmVsO1ZlKEEsSSksbz1lZShjLFtjXSl9YnJlYWs7Y2FzZSJSRUxFQVNFIjpvPXZvaWQgMDticmVhaztkZWZhdWx0OnJldHVybn19Y2F0Y2gocyl7bz17dmFsdWU6cyxbeUFdOjB9fVByb21pc2UucmVzb2x2ZShvKS5jYXRjaChzPT4oe3ZhbHVlOnMsW3lBXTowfSkpLnRoZW4ocz0+e2xldFtDLGNdPVNBKHMpO3QucG9zdE1lc3NhZ2UoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LEMpLHtpZDphfSksYyksaT09PSJSRUxFQVNFIiYmKHQucmVtb3ZlRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsciksWmUodCksWkEgaW4gQSYmdHlwZW9mIEFbWkFdPT0iZnVuY3Rpb24iJiZBW1pBXSgpKX0pLmNhdGNoKHM9PntsZXRbQyxjXT1TQSh7dmFsdWU6bmV3IFR5cGVFcnJvcigiVW5zZXJpYWxpemFibGUgcmV0dXJuIHZhbHVlIiksW3lBXTowfSk7dC5wb3N0TWVzc2FnZShPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sQykse2lkOmF9KSxjKX0pfSksdC5zdGFydCYmdC5zdGFydCgpfWZ1bmN0aW9uIFRyKEEpe3JldHVybiBBLmNvbnN0cnVjdG9yLm5hbWU9PT0iTWVzc2FnZVBvcnQifWZ1bmN0aW9uIFplKEEpe1RyKEEpJiZBLmNsb3NlKCl9ZnVuY3Rpb24gQWUoQSx0KXtyZXR1cm4gWEEoQSxbXSx0KX1mdW5jdGlvbiBoQShBKXtpZihBKXRocm93IG5ldyBFcnJvcigiUHJveHkgaGFzIGJlZW4gcmVsZWFzZWQgYW5kIGlzIG5vdCB1c2VhYmxlIil9ZnVuY3Rpb24gWGUoQSl7cmV0dXJuIFYoQSx7dHlwZToiUkVMRUFTRSJ9KS50aGVuKCgpPT57WmUoQSl9KX12YXIgd0E9bmV3IFdlYWtNYXAsREE9IkZpbmFsaXphdGlvblJlZ2lzdHJ5ImluIGdsb2JhbFRoaXMmJm5ldyBGaW5hbGl6YXRpb25SZWdpc3RyeShBPT57bGV0IHQ9KHdBLmdldChBKXx8MCktMTt3QS5zZXQoQSx0KSx0PT09MCYmWGUoQSl9KTtmdW5jdGlvbiBHcihBLHQpe2xldCBlPSh3QS5nZXQodCl8fDApKzE7d0Euc2V0KHQsZSksREEmJkRBLnJlZ2lzdGVyKEEsdCxBKX1mdW5jdGlvbiB4cihBKXtEQSYmREEudW5yZWdpc3RlcihBKX1mdW5jdGlvbiBYQShBLHQ9W10sZT1mdW5jdGlvbigpe30pe2xldCByPSExLG49bmV3IFByb3h5KGUse2dldChhLGkpe2lmKGhBKHIpLGk9PT0kQSlyZXR1cm4oKT0+e3hyKG4pLFhlKEEpLHI9ITB9O2lmKGk9PT0idGhlbiIpe2lmKHQubGVuZ3RoPT09MClyZXR1cm57dGhlbjooKT0+bn07bGV0IGw9VihBLHt0eXBlOiJHRVQiLHBhdGg6dC5tYXAodT0+dS50b1N0cmluZygpKX0pLnRoZW4ocSk7cmV0dXJuIGwudGhlbi5iaW5kKGwpfXJldHVybiBYQShBLFsuLi50LGldKX0sc2V0KGEsaSxsKXtoQShyKTtsZXRbdSxvXT1TQShsKTtyZXR1cm4gVihBLHt0eXBlOiJTRVQiLHBhdGg6Wy4uLnQsaV0ubWFwKHM9PnMudG9TdHJpbmcoKSksdmFsdWU6dX0sbykudGhlbihxKX0sYXBwbHkoYSxpLGwpe2hBKHIpO2xldCB1PXRbdC5sZW5ndGgtMV07aWYodT09PVJyKXJldHVybiBWKEEse3R5cGU6IkVORFBPSU5UIn0pLnRoZW4ocSk7aWYodT09PSJiaW5kIilyZXR1cm4gWEEoQSx0LnNsaWNlKDAsLTEpKTtsZXRbbyxzXT1XZShsKTtyZXR1cm4gVihBLHt0eXBlOiJBUFBMWSIscGF0aDp0Lm1hcChDPT5DLnRvU3RyaW5nKCkpLGFyZ3VtZW50TGlzdDpvfSxzKS50aGVuKHEpfSxjb25zdHJ1Y3QoYSxpKXtoQShyKTtsZXRbbCx1XT1XZShpKTtyZXR1cm4gVihBLHt0eXBlOiJDT05TVFJVQ1QiLHBhdGg6dC5tYXAobz0+by50b1N0cmluZygpKSxhcmd1bWVudExpc3Q6bH0sdSkudGhlbihxKX19KTtyZXR1cm4gR3IobixBKSxufWZ1bmN0aW9uIExyKEEpe3JldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLEEpfWZ1bmN0aW9uIFdlKEEpe2xldCB0PUEubWFwKFNBKTtyZXR1cm5bdC5tYXAoZT0+ZVswXSksTHIodC5tYXAoZT0+ZVsxXSkpXX12YXIgJGU9bmV3IFdlYWtNYXA7ZnVuY3Rpb24gZWUoQSx0KXtyZXR1cm4gJGUuc2V0KEEsdCksQX1mdW5jdGlvbiBQcihBKXtyZXR1cm4gT2JqZWN0LmFzc2lnbihBLHtbamVdOiEwfSl9ZnVuY3Rpb24gU0EoQSl7Zm9yKGxldFt0LGVdb2YgemUpaWYoZS5jYW5IYW5kbGUoQSkpe2xldFtyLG5dPWUuc2VyaWFsaXplKEEpO3JldHVyblt7dHlwZToiSEFORExFUiIsbmFtZTp0LHZhbHVlOnJ9LG5dfXJldHVyblt7dHlwZToiUkFXIix2YWx1ZTpBfSwkZS5nZXQoQSl8fFtdXX1mdW5jdGlvbiBxKEEpe3N3aXRjaChBLnR5cGUpe2Nhc2UiSEFORExFUiI6cmV0dXJuIHplLmdldChBLm5hbWUpLmRlc2VyaWFsaXplKEEudmFsdWUpO2Nhc2UiUkFXIjpyZXR1cm4gQS52YWx1ZX19ZnVuY3Rpb24gVihBLHQsZSl7cmV0dXJuIG5ldyBQcm9taXNlKHI9PntsZXQgbj1NcigpO0EuYWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsZnVuY3Rpb24gYShpKXshaS5kYXRhfHwhaS5kYXRhLmlkfHxpLmRhdGEuaWQhPT1ufHwoQS5yZW1vdmVFdmVudExpc3RlbmVyKCJtZXNzYWdlIixhKSxyKGkuZGF0YSkpfSksQS5zdGFydCYmQS5zdGFydCgpLEEucG9zdE1lc3NhZ2UoT2JqZWN0LmFzc2lnbih7aWQ6bn0sdCksZSl9KX1mdW5jdGlvbiBNcigpe3JldHVybiBuZXcgQXJyYXkoNCkuZmlsbCgwKS5tYXAoKCk9Pk1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSpOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikudG9TdHJpbmcoMTYpKS5qb2luKCItIil9ZnVuY3Rpb24gZXQoQSl7bGV0IHQ9QWUoQSksZT1BO3JldHVybiBlLndvcmtlclByb3h5PXQsZS5vcmlnaW5hbFRlcm1pbmF0ZT1lLnRlcm1pbmF0ZSxlLnRlcm1pbmF0ZT0oKT0+e2Uud29ya2VyUHJveHlbJEFdKCksZS5vcmlnaW5hbFRlcm1pbmF0ZSgpfSx7d29ya2VyUHJveHk6dCx3b3JrZXI6ZX19YXN5bmMgZnVuY3Rpb24gSnIoQSx0KXtsZXQgZTtpZihBIT1udWxsKXtsZXQgaT1BO3JldHVybiBpLndvcmtlclByb3h5IT09dm9pZCAwPyhlPWkud29ya2VyUHJveHkse3dvcmtlclByb3h5OmUsd29ya2VyOml9KTpldChBKX1sZXQgcj10eXBlb2YgdD4idSI/di5waXBlbGluZVdvcmtlclVybDp0LG49bnVsbCxhPXYud2ViV29ya2Vyc1VybDtpZih0eXBlb2YgYTwidSIpe2NvbnNvbGUud2FybigiaXRrQ29uZmlnIHdlYldvcmtlcnNVcmwgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBwaXBlbGluZVdvcmtlclVybCB3aXRoIHRoZSBmdWxsIHBhdGggdG8gdGhlIHBpcGVsaW5lIHdvcmtlci4iKTtsZXQgaT0ibWluLiIsbD1hO2lmKGwuc3RhcnRzV2l0aCgiaHR0cCIpKXtsZXQgdT1hd2FpdCBZLmdldChgJHtsfS9idW5kbGVzL3BpcGVsaW5lLiR7aX13b3JrZXIuanNgLHtyZXNwb25zZVR5cGU6ImJsb2IifSksbz1VUkwuY3JlYXRlT2JqZWN0VVJMKHUuZGF0YSk7bj1uZXcgV29ya2VyKG8se3R5cGU6Im1vZHVsZSJ9KX1lbHNlIG49bmV3IFdvcmtlcihgJHtsfS9idW5kbGVzL3BpcGVsaW5lLiR7aX13b3JrZXIuanNgLHt0eXBlOiJtb2R1bGUifSl9ZWxzZSBpZihyPT09bnVsbCluPW5ldyBXb3JrZXIobmV3IFVSTCgiLi93ZWItd29ya2Vycy9pdGstd2FzbS1waXBlbGluZS53b3JrZXIuanMiLGltcG9ydC5tZXRhLnVybCkse3R5cGU6Im1vZHVsZSJ9KTtlbHNlIGlmKHIuc3RhcnRzV2l0aCgiaHR0cCIpKXtsZXQgaT1hd2FpdCBZLmdldChyLHtyZXNwb25zZVR5cGU6ImJsb2IifSksbD1VUkwuY3JlYXRlT2JqZWN0VVJMKGkuZGF0YSk7bj1uZXcgV29ya2VyKGwse3R5cGU6Im1vZHVsZSJ9KX1lbHNlIG49bmV3IFdvcmtlcihyLHt0eXBlOiJtb2R1bGUifSk7cmV0dXJuIGV0KG4pfXZhciB0dD1Kcjt2YXIgSHI7ZnVuY3Rpb24gcnQoKXtyZXR1cm4gSHJ9dmFyIFlyO2Z1bmN0aW9uIG50KCl7cmV0dXJuIFlyfWZ1bmN0aW9uIHFyKEEpe3JldHVybltBLmRhdGEsQS5kaXJlY3Rpb25dfXZhciB0ZT1xcjtmdW5jdGlvbiB2cihBKXtyZXR1cm5bQS5wb2ludHMsQS5wb2ludERhdGEsQS5jZWxscyxBLmNlbGxEYXRhXX12YXIgaXQ9dnI7YXN5bmMgZnVuY3Rpb24gS3IoQSx0KXtsZXQgZT0idW5rbm93biI7dHlwZW9mIEEhPSJzdHJpbmciP2U9QS5ocmVmOkEuc3RhcnRzV2l0aCgiaHR0cCIpP2U9QTplPWAke3R9LyR7QX1gLGUuZW5kc1dpdGgoIi5qcyIpJiYoZT1lLnN1YnN0cmluZygwLGUubGVuZ3RoLTMpKSxlLmVuZHNXaXRoKCIud2FzbSIpJiYoZT1lLnN1YnN0cmluZygwLGUubGVuZ3RoLTUpKTtsZXQgcj1gJHtlfS53YXNtYCxhPShhd2FpdCBZLmdldChyLHtyZXNwb25zZVR5cGU6ImFycmF5YnVmZmVyIn0pKS5kYXRhO3JldHVybihhd2FpdCBpbXBvcnQoYCR7ZX0uanNgKSkuZGVmYXVsdCh7d2FzbUJpbmFyeTphfSl9dmFyIGF0PUtyO3ZhciBvdD1hc3luYygpPT5XZWJBc3NlbWJseS52YWxpZGF0ZShuZXcgVWludDhBcnJheShbMCw5NywxMTUsMTA5LDEsMCwwLDAsMSw1LDEsOTYsMCwxLDEyMywzLDIsMSwwLDEwLDEwLDEsOCwwLDY1LDAsMjUzLDE1LDI1Myw5OCwxMV0pKTt2YXIgZ3Q9dHlwZW9mIGdsb2JhbFRoaXMuU2hhcmVkQXJyYXlCdWZmZXI9PSJmdW5jdGlvbiIsc3Q9bmV3IFRleHRFbmNvZGVyLEl0PW5ldyBUZXh0RGVjb2RlcigidXRmLTgiKTtmdW5jdGlvbiBKKEEsdCl7bGV0IGU9e2ZsYWdzOiJyIixlbmNvZGluZzoiYmluYXJ5In0scj1BLmZzX29wZW4odCxlLmZsYWdzKSxhPUEuZnNfc3RhdCh0KS5zaXplLGk9bnVsbDtndD9pPW5ldyBTaGFyZWRBcnJheUJ1ZmZlcihhKTppPW5ldyBBcnJheUJ1ZmZlcihhKTtsZXQgbD1uZXcgVWludDhBcnJheShpKTtyZXR1cm4gQS5mc19yZWFkKHIsbCwwLGEsMCksQS5mc19jbG9zZShyKSxsfWZ1bmN0aW9uIGx0KEEsdCxlKXtsZXQgcj1udWxsO2d0P3I9bmV3IFNoYXJlZEFycmF5QnVmZmVyKGUpOnI9bmV3IEFycmF5QnVmZmVyKGUpO2xldCBuPW5ldyBVaW50OEFycmF5KHIpLGE9bmV3IFVpbnQ4QXJyYXkoQS5IRUFQVTguYnVmZmVyLHQsZSk7cmV0dXJuIG4uc2V0KGEpLG59ZnVuY3Rpb24gYihBLHQsZSxyKXtsZXQgbj0wO3JldHVybiB0IT09bnVsbCYmKG49QS5jY2FsbCgiaXRrX3dhc21faW5wdXRfYXJyYXlfYWxsb2MiLCJudW1iZXIiLFsibnVtYmVyIiwibnVtYmVyIiwibnVtYmVyIiwibnVtYmVyIl0sWzAsZSxyLHQuYnVmZmVyLmJ5dGVMZW5ndGhdKSxBLkhFQVBVOC5zZXQobmV3IFVpbnQ4QXJyYXkodC5idWZmZXIpLG4pKSxufWZ1bmN0aW9uIFooQSx0LGUpe2xldCByPUpTT04uc3RyaW5naWZ5KHQpLG49QS5jY2FsbCgiaXRrX3dhc21faW5wdXRfanNvbl9hbGxvYyIsIm51bWJlciIsWyJudW1iZXIiLCJudW1iZXIiLCJudW1iZXIiXSxbMCxlLHIubGVuZ3RoXSk7QS53cml0ZUFzY2lpVG9NZW1vcnkocixuLCExKX1mdW5jdGlvbiBSKEEsdCxlLHIpe2xldCBuPUEuY2NhbGwoIml0a193YXNtX291dHB1dF9hcnJheV9hZGRyZXNzIiwibnVtYmVyIixbIm51bWJlciIsIm51bWJlciIsIm51bWJlciJdLFswLHQsZV0pLGE9QS5jY2FsbCgiaXRrX3dhc21fb3V0cHV0X2FycmF5X3NpemUiLCJudW1iZXIiLFsibnVtYmVyIiwibnVtYmVyIiwibnVtYmVyIl0sWzAsdCxlXSksaT1sdChBLG4sYSk7cmV0dXJuIHcocixpLmJ1ZmZlcil9ZnVuY3Rpb24gcmUoQSx0KXtsZXQgZT1BLmNjYWxsKCJpdGtfd2FzbV9vdXRwdXRfanNvbl9hZGRyZXNzIiwibnVtYmVyIixbIm51bWJlciIsIm51bWJlciJdLFswLHRdKSxyPUEuQXNjaWlUb1N0cmluZyhlKTtyZXR1cm4gSlNPTi5wYXJzZShyKX1mdW5jdGlvbiBXcihBLHQsZSxyKXtyIT1udWxsJiZyLmxlbmd0aD4wJiZyLmZvckVhY2goZnVuY3Rpb24obyxzKXt2YXIgQztzd2l0Y2goby50eXBlKXtjYXNlIEUuVGV4dFN0cmVhbTp7bGV0IGM9c3QuZW5jb2RlKG8uZGF0YS5kYXRhKSxJPWIoQSxjLHMsMCksZj17c2l6ZTpjLmJ1ZmZlci5ieXRlTGVuZ3RoLGRhdGE6YGRhdGE6YXBwbGljYXRpb24vdm5kLml0ay5hZGRyZXNzLDA6JHtJfWB9O1ooQSxmLHMpO2JyZWFrfWNhc2UgRS5Kc29uQ29tcGF0aWJsZTp7bGV0IGM9c3QuZW5jb2RlKEpTT04uc3RyaW5naWZ5KG8uZGF0YSkpLEk9YihBLGMscywwKSxmPXtzaXplOmMuYnVmZmVyLmJ5dGVMZW5ndGgsZGF0YTpgZGF0YTphcHBsaWNhdGlvbi92bmQuaXRrLmFkZHJlc3MsMDoke0l9YH07WihBLGYscyk7YnJlYWt9Y2FzZSBFLkJpbmFyeVN0cmVhbTp7bGV0IGM9by5kYXRhLmRhdGEsST1iKEEsYyxzLDApLGY9e3NpemU6Yy5idWZmZXIuYnl0ZUxlbmd0aCxkYXRhOmBkYXRhOmFwcGxpY2F0aW9uL3ZuZC5pdGsuYWRkcmVzcywwOiR7SX1gfTtaKEEsZixzKTticmVha31jYXNlIEUuVGV4dEZpbGU6e0EuZnNfd3JpdGVGaWxlKG8uZGF0YS5wYXRoLG8uZGF0YS5kYXRhKTticmVha31jYXNlIEUuQmluYXJ5RmlsZTp7QS5mc193cml0ZUZpbGUoby5kYXRhLnBhdGgsby5kYXRhLmRhdGEpO2JyZWFrfWNhc2UgRS5JbWFnZTp7bGV0IGM9by5kYXRhLEk9YihBLGMuZGF0YSxzLDApLGY9YihBLGMuZGlyZWN0aW9uLHMsMSksQj10eXBlb2YoKEM9Yy5tZXRhZGF0YSk9PT1udWxsfHxDPT09dm9pZCAwP3ZvaWQgMDpDLmVudHJpZXMpPCJ1Ij9KU09OLnN0cmluZ2lmeShBcnJheS5mcm9tKGMubWV0YWRhdGEuZW50cmllcygpKSk6IltdIixwPXtpbWFnZVR5cGU6Yy5pbWFnZVR5cGUsbmFtZTpjLm5hbWUsb3JpZ2luOmMub3JpZ2luLHNwYWNpbmc6Yy5zcGFjaW5nLGRpcmVjdGlvbjpgZGF0YTphcHBsaWNhdGlvbi92bmQuaXRrLmFkZHJlc3MsMDoke2Z9YCxzaXplOmMuc2l6ZSxkYXRhOmBkYXRhOmFwcGxpY2F0aW9uL3ZuZC5pdGsuYWRkcmVzcywwOiR7SX1gLG1ldGFkYXRhOkJ9O1ooQSxwLHMpO2JyZWFrfWNhc2UgRS5NZXNoOntsZXQgYz1vLmRhdGEsST1iKEEsYy5wb2ludHMscywwKSxmPWIoQSxjLmNlbGxzLHMsMSksQj1iKEEsYy5wb2ludERhdGEscywyKSxwPWIoQSxjLmNlbGxEYXRhLHMsMyksbT17bWVzaFR5cGU6Yy5tZXNoVHlwZSxuYW1lOmMubmFtZSxudW1iZXJPZlBvaW50czpjLm51bWJlck9mUG9pbnRzLHBvaW50czpgZGF0YTphcHBsaWNhdGlvbi92bmQuaXRrLmFkZHJlc3MsMDoke0l9YCxudW1iZXJPZkNlbGxzOmMubnVtYmVyT2ZDZWxscyxjZWxsczpgZGF0YTphcHBsaWNhdGlvbi92bmQuaXRrLmFkZHJlc3MsMDoke2Z9YCxjZWxsQnVmZmVyU2l6ZTpjLmNlbGxCdWZmZXJTaXplLG51bWJlck9mUG9pbnRQaXhlbHM6Yy5udW1iZXJPZlBvaW50UGl4ZWxzLHBvaW50RGF0YTpgZGF0YTphcHBsaWNhdGlvbi92bmQuaXRrLmFkZHJlc3MsMDoke0J9YCxudW1iZXJPZkNlbGxQaXhlbHM6Yy5udW1iZXJPZkNlbGxQaXhlbHMsY2VsbERhdGE6YGRhdGE6YXBwbGljYXRpb24vdm5kLml0ay5hZGRyZXNzLDA6JHtwfWB9O1ooQSxtLHMpO2JyZWFrfWNhc2UgRS5Qb2x5RGF0YTp7bGV0IGM9by5kYXRhLEk9YihBLGMucG9pbnRzLHMsMCksZj1iKEEsYy52ZXJ0aWNlcyxzLDEpLEI9YihBLGMubGluZXMscywyKSxwPWIoQSxjLnBvbHlnb25zLHMsMyksbT1iKEEsYy50cmlhbmdsZVN0cmlwcyxzLDQpLFE9YihBLGMucG9pbnREYXRhLHMsNSksaD1iKEEsYy5wb2ludERhdGEscyw2KSxiQT17cG9seURhdGFUeXBlOmMucG9seURhdGFUeXBlLG5hbWU6Yy5uYW1lLG51bWJlck9mUG9pbnRzOmMubnVtYmVyT2ZQb2ludHMscG9pbnRzOmBkYXRhOmFwcGxpY2F0aW9uL3ZuZC5pdGsuYWRkcmVzcywwOiR7SX1gLHZlcnRpY2VzQnVmZmVyU2l6ZTpjLnZlcnRpY2VzQnVmZmVyU2l6ZSx2ZXJ0aWNlczpgZGF0YTphcHBsaWNhdGlvbi92bmQuaXRrLmFkZHJlc3MsMDoke2Z9YCxsaW5lc0J1ZmZlclNpemU6Yy5saW5lc0J1ZmZlclNpemUsbGluZXM6YGRhdGE6YXBwbGljYXRpb24vdm5kLml0ay5hZGRyZXNzLDA6JHtCfWAscG9seWdvbnNCdWZmZXJTaXplOmMucG9seWdvbnNCdWZmZXJTaXplLHBvbHlnb25zOmBkYXRhOmFwcGxpY2F0aW9uL3ZuZC5pdGsuYWRkcmVzcywwOiR7cH1gLHRyaWFuZ2xlU3RyaXBzQnVmZmVyU2l6ZTpjLnRyaWFuZ2xlU3RyaXBzQnVmZmVyU2l6ZSx0cmlhbmdsZVN0cmlwczpgZGF0YTphcHBsaWNhdGlvbi92bmQuaXRrLmFkZHJlc3MsMDoke219YCxudW1iZXJPZlBvaW50UGl4ZWxzOmMubnVtYmVyT2ZQb2ludFBpeGVscyxwb2ludERhdGE6YGRhdGE6YXBwbGljYXRpb24vdm5kLml0ay5hZGRyZXNzLDA6JHtRfWAsbnVtYmVyT2ZDZWxsUGl4ZWxzOmMubnVtYmVyT2ZDZWxsUGl4ZWxzLGNlbGxEYXRhOmBkYXRhOmFwcGxpY2F0aW9uL3ZuZC5pdGsuYWRkcmVzcywwOiR7aH1gfTtaKEEsYkEscyk7YnJlYWt9Y2FzZSBrLlRleHQ6e0EuZnNfd3JpdGVGaWxlKG8ucGF0aCxvLmRhdGEpO2JyZWFrfWNhc2Ugay5CaW5hcnk6e0EuZnNfd3JpdGVGaWxlKG8ucGF0aCxvLmRhdGEpO2JyZWFrfWNhc2Ugay5JbWFnZTp7bGV0IGM9by5kYXRhLEk9e2ltYWdlVHlwZTpjLmltYWdlVHlwZSxuYW1lOmMubmFtZSxvcmlnaW46Yy5vcmlnaW4sc3BhY2luZzpjLnNwYWNpbmcsZGlyZWN0aW9uOiJkYXRhOmFwcGxpY2F0aW9uL3ZuZC5pdGsucGF0aCxkYXRhL2RpcmVjdGlvbi5yYXciLHNpemU6Yy5zaXplLGRhdGE6ImRhdGE6YXBwbGljYXRpb24vdm5kLml0ay5wYXRoLGRhdGEvZGF0YS5yYXcifTtpZihBLmZzX21rZGlycyhgJHtvLnBhdGh9L2RhdGFgKSxBLmZzX3dyaXRlRmlsZShgJHtvLnBhdGh9L2luZGV4Lmpzb25gLEpTT04uc3RyaW5naWZ5KEkpKSxjLmRhdGE9PT1udWxsKXRocm93IEVycm9yKCJpbWFnZS5kYXRhIGlzIG51bGwiKTtBLmZzX3dyaXRlRmlsZShgJHtvLnBhdGh9L2RhdGEvZGF0YS5yYXdgLG5ldyBVaW50OEFycmF5KGMuZGF0YS5idWZmZXIpKSxBLmZzX3dyaXRlRmlsZShgJHtvLnBhdGh9L2RhdGEvZGlyZWN0aW9uLnJhd2AsbmV3IFVpbnQ4QXJyYXkoYy5kaXJlY3Rpb24uYnVmZmVyKSk7YnJlYWt9Y2FzZSBrLk1lc2g6e2xldCBjPW8uZGF0YSxJPXttZXNoVHlwZTpjLm1lc2hUeXBlLG5hbWU6Yy5uYW1lLG51bWJlck9mUG9pbnRzOmMubnVtYmVyT2ZQb2ludHMscG9pbnRzOiJkYXRhOmFwcGxpY2F0aW9uL3ZuZC5pdGsucGF0aCxkYXRhL3BvaW50cy5yYXciLG51bWJlck9mUG9pbnRQaXhlbHM6Yy5udW1iZXJPZlBvaW50UGl4ZWxzLHBvaW50RGF0YToiZGF0YTphcHBsaWNhdGlvbi92bmQuaXRrLnBhdGgsZGF0YS9wb2ludERhdGEucmF3IixudW1iZXJPZkNlbGxzOmMubnVtYmVyT2ZDZWxscyxjZWxsczoiZGF0YTphcHBsaWNhdGlvbi92bmQuaXRrLnBhdGgsZGF0YS9jZWxscy5yYXciLG51bWJlck9mQ2VsbFBpeGVsczpjLm51bWJlck9mQ2VsbFBpeGVscyxjZWxsRGF0YToiZGF0YTphcHBsaWNhdGlvbi92bmQuaXRrLnBhdGgsZGF0YS9jZWxsRGF0YS5yYXciLGNlbGxCdWZmZXJTaXplOmMuY2VsbEJ1ZmZlclNpemV9O2lmKEEuZnNfbWtkaXJzKGAke28ucGF0aH0vZGF0YWApLEEuZnNfd3JpdGVGaWxlKGAke28ucGF0aH0vaW5kZXguanNvbmAsSlNPTi5zdHJpbmdpZnkoSSkpLEkubnVtYmVyT2ZQb2ludHM+MCl7aWYoYy5wb2ludHM9PT1udWxsKXRocm93IEVycm9yKCJtZXNoLnBvaW50cyBpcyBudWxsIik7QS5mc193cml0ZUZpbGUoYCR7by5wYXRofS9kYXRhL3BvaW50cy5yYXdgLG5ldyBVaW50OEFycmF5KGMucG9pbnRzLmJ1ZmZlcikpfWlmKEkubnVtYmVyT2ZQb2ludFBpeGVscz4wKXtpZihjLnBvaW50RGF0YT09PW51bGwpdGhyb3cgRXJyb3IoIm1lc2gucG9pbnREYXRhIGlzIG51bGwiKTtBLmZzX3dyaXRlRmlsZShgJHtvLnBhdGh9L2RhdGEvcG9pbnREYXRhLnJhd2AsbmV3IFVpbnQ4QXJyYXkoYy5wb2ludERhdGEuYnVmZmVyKSl9aWYoSS5udW1iZXJPZkNlbGxzPjApe2lmKGMuY2VsbHM9PT1udWxsKXRocm93IEVycm9yKCJtZXNoLmNlbGxzIGlzIG51bGwiKTtBLmZzX3dyaXRlRmlsZShgJHtvLnBhdGh9L2RhdGEvY2VsbHMucmF3YCxuZXcgVWludDhBcnJheShjLmNlbGxzLmJ1ZmZlcikpfWlmKEkubnVtYmVyT2ZDZWxsUGl4ZWxzPjApe2lmKGMuY2VsbERhdGE9PT1udWxsKXRocm93IEVycm9yKCJtZXNoLmNlbGxEYXRhIGlzIG51bGwiKTtBLmZzX3dyaXRlRmlsZShgJHtvLnBhdGh9L2RhdGEvY2VsbERhdGEucmF3YCxuZXcgVWludDhBcnJheShjLmNlbGxEYXRhLmJ1ZmZlcikpfWJyZWFrfWRlZmF1bHQ6dGhyb3cgRXJyb3IoIlVuc3VwcG9ydGVkIGlucHV0IEludGVyZmFjZVR5cGUiKX19KSxBLnJlc2V0TW9kdWxlU3Rkb3V0KCksQS5yZXNldE1vZHVsZVN0ZGVycigpO2xldCBuPUEuc3RhY2tTYXZlKCksYT0wO3RyeXthPUEuY2FsbE1haW4odC5zbGljZSgpKX1jYXRjaChvKXt0aHJvdyB0eXBlb2Ygbz09Im51bWJlciImJihjb25zb2xlLmxvZygiRXhjZXB0aW9uIHdoaWxlIHJ1bm5pbmcgcGlwZWxpbmU6IiksY29uc29sZS5sb2coInN0ZG91dDoiLEEuZ2V0TW9kdWxlU3Rkb3V0KCkpLGNvbnNvbGUuZXJyb3IoInN0ZGVycjoiLEEuZ2V0TW9kdWxlU3RkZXJyKCkpLHR5cGVvZiBBLmdldEV4Y2VwdGlvbk1lc3NhZ2U8InUiP2NvbnNvbGUuZXJyb3IoImV4Y2VwdGlvbjoiLEEuZ2V0RXhjZXB0aW9uTWVzc2FnZShvKSk6Y29uc29sZS5lcnJvcigiQnVpbGQgbW9kdWxlIGluIERlYnVnIG1vZGUgZm9yIGV4Y2VwdGlvbiBtZXNzYWdlIGluZm9ybWF0aW9uLiIpKSxvfWZpbmFsbHl7QS5zdGFja1Jlc3RvcmUobil9bGV0IGk9QS5nZXRNb2R1bGVTdGRvdXQoKSxsPUEuZ2V0TW9kdWxlU3RkZXJyKCksdT1bXTtyZXR1cm4gZSE9bnVsbCYmZS5sZW5ndGg+MCYmYT09PTAmJmUuZm9yRWFjaChmdW5jdGlvbihvLHMpe2xldCBDPW51bGw7c3dpdGNoKG8udHlwZSl7Y2FzZSBFLlRleHRTdHJlYW06e2xldCBJPUEuY2NhbGwoIml0a193YXNtX291dHB1dF9hcnJheV9hZGRyZXNzIiwibnVtYmVyIixbIm51bWJlciIsIm51bWJlciIsIm51bWJlciJdLFswLHMsMF0pLGY9QS5jY2FsbCgiaXRrX3dhc21fb3V0cHV0X2FycmF5X3NpemUiLCJudW1iZXIiLFsibnVtYmVyIiwibnVtYmVyIiwibnVtYmVyIl0sWzAscywwXSksQj1uZXcgVWludDhBcnJheShBLkhFQVBVOC5idWZmZXIsSSxmKTtDPXtkYXRhOkl0LmRlY29kZShCKX07YnJlYWt9Y2FzZSBFLkpzb25Db21wYXRpYmxlOntsZXQgST1BLmNjYWxsKCJpdGtfd2FzbV9vdXRwdXRfYXJyYXlfYWRkcmVzcyIsIm51bWJlciIsWyJudW1iZXIiLCJudW1iZXIiLCJudW1iZXIiXSxbMCxzLDBdKSxmPUEuY2NhbGwoIml0a193YXNtX291dHB1dF9hcnJheV9zaXplIiwibnVtYmVyIixbIm51bWJlciIsIm51bWJlciIsIm51bWJlciJdLFswLHMsMF0pLEI9bmV3IFVpbnQ4QXJyYXkoQS5IRUFQVTguYnVmZmVyLEksZik7Qz1KU09OLnBhcnNlKEl0LmRlY29kZShCKSk7YnJlYWt9Y2FzZSBFLkJpbmFyeVN0cmVhbTp7bGV0IEk9QS5jY2FsbCgiaXRrX3dhc21fb3V0cHV0X2FycmF5X2FkZHJlc3MiLCJudW1iZXIiLFsibnVtYmVyIiwibnVtYmVyIiwibnVtYmVyIl0sWzAscywwXSksZj1BLmNjYWxsKCJpdGtfd2FzbV9vdXRwdXRfYXJyYXlfc2l6ZSIsIm51bWJlciIsWyJudW1iZXIiLCJudW1iZXIiLCJudW1iZXIiXSxbMCxzLDBdKTtDPXtkYXRhOmx0KEEsSSxmKX07YnJlYWt9Y2FzZSBFLlRleHRGaWxlOntDPXtwYXRoOm8uZGF0YS5wYXRoLGRhdGE6QS5mc19yZWFkRmlsZShvLmRhdGEucGF0aCx7ZW5jb2Rpbmc6InV0ZjgifSl9O2JyZWFrfWNhc2UgRS5CaW5hcnlGaWxlOntDPXtwYXRoOm8uZGF0YS5wYXRoLGRhdGE6SihBLG8uZGF0YS5wYXRoKX07YnJlYWt9Y2FzZSBFLkltYWdlOntsZXQgST1yZShBLHMpO0kuZGF0YT1SKEEscywwLEkuaW1hZ2VUeXBlLmNvbXBvbmVudFR5cGUpLEkuZGlyZWN0aW9uPVIoQSxzLDEsSC5GbG9hdDY0KSxJLm1ldGFkYXRhPW5ldyBNYXAoSS5tZXRhZGF0YSksQz1JO2JyZWFrfWNhc2UgRS5NZXNoOntsZXQgST1yZShBLHMpO0kubnVtYmVyT2ZQb2ludHM+MD9JLnBvaW50cz1SKEEscywwLEkubWVzaFR5cGUucG9pbnRDb21wb25lbnRUeXBlKTpJLnBvaW50cz13KEkubWVzaFR5cGUucG9pbnRDb21wb25lbnRUeXBlLG5ldyBBcnJheUJ1ZmZlcigwKSksSS5udW1iZXJPZkNlbGxzPjA/SS5jZWxscz1SKEEscywxLEkubWVzaFR5cGUuY2VsbENvbXBvbmVudFR5cGUpOkkuY2VsbHM9dyhJLm1lc2hUeXBlLmNlbGxDb21wb25lbnRUeXBlLG5ldyBBcnJheUJ1ZmZlcigwKSksSS5udW1iZXJPZlBvaW50UGl4ZWxzPjA/SS5wb2ludERhdGE9UihBLHMsMixJLm1lc2hUeXBlLnBvaW50UGl4ZWxDb21wb25lbnRUeXBlKTpJLnBvaW50RGF0YT13KEkubWVzaFR5cGUucG9pbnRQaXhlbENvbXBvbmVudFR5cGUsbmV3IEFycmF5QnVmZmVyKDApKSxJLm51bWJlck9mQ2VsbFBpeGVscz4wP0kuY2VsbERhdGE9UihBLHMsMyxJLm1lc2hUeXBlLmNlbGxQaXhlbENvbXBvbmVudFR5cGUpOkkuY2VsbERhdGE9dyhJLm1lc2hUeXBlLmNlbGxQaXhlbENvbXBvbmVudFR5cGUsbmV3IEFycmF5QnVmZmVyKDApKSxDPUk7YnJlYWt9Y2FzZSBFLlBvbHlEYXRhOntsZXQgST1yZShBLHMpO0kubnVtYmVyT2ZQb2ludHM+MD9JLnBvaW50cz1SKEEscywwLEguRmxvYXQzMik6SS5wb2ludHM9bmV3IEZsb2F0MzJBcnJheSxJLnZlcnRpY2VzQnVmZmVyU2l6ZT4wP0kudmVydGljZXM9UihBLHMsMSxELlVJbnQzMik6SS52ZXJ0aWNlcz1uZXcgVWludDMyQXJyYXksSS5saW5lc0J1ZmZlclNpemU+MD9JLmxpbmVzPVIoQSxzLDIsRC5VSW50MzIpOkkubGluZXM9bmV3IFVpbnQzMkFycmF5LEkucG9seWdvbnNCdWZmZXJTaXplPjA/SS5wb2x5Z29ucz1SKEEscywzLEQuVUludDMyKTpJLnBvbHlnb25zPW5ldyBVaW50MzJBcnJheSxJLnRyaWFuZ2xlU3RyaXBzQnVmZmVyU2l6ZT4wP0kudHJpYW5nbGVTdHJpcHM9UihBLHMsNCxELlVJbnQzMik6SS50cmlhbmdsZVN0cmlwcz1uZXcgVWludDMyQXJyYXksSS5udW1iZXJPZlBvaW50UGl4ZWxzPjA/SS5wb2ludERhdGE9UihBLHMsNSxJLnBvbHlEYXRhVHlwZS5wb2ludFBpeGVsQ29tcG9uZW50VHlwZSk6SS5wb2ludERhdGE9dyhJLnBvbHlEYXRhVHlwZS5wb2ludFBpeGVsQ29tcG9uZW50VHlwZSxuZXcgQXJyYXlCdWZmZXIoMCkpLEkubnVtYmVyT2ZDZWxsUGl4ZWxzPjA/SS5jZWxsRGF0YT1SKEEscyw2LEkucG9seURhdGFUeXBlLmNlbGxQaXhlbENvbXBvbmVudFR5cGUpOkkuY2VsbERhdGE9dyhJLnBvbHlEYXRhVHlwZS5jZWxsUGl4ZWxDb21wb25lbnRUeXBlLG5ldyBBcnJheUJ1ZmZlcigwKSksQz1JO2JyZWFrfWNhc2Ugay5UZXh0OntpZih0eXBlb2Ygby5wYXRoPiJ1Iil0aHJvdyBuZXcgRXJyb3IoIm91dHB1dC5wYXRoIG5vdCBkZWZpbmVkIik7Qz1BLmZzX3JlYWRGaWxlKG8ucGF0aCx7ZW5jb2Rpbmc6InV0ZjgifSk7YnJlYWt9Y2FzZSBrLkJpbmFyeTp7aWYodHlwZW9mIG8ucGF0aD4idSIpdGhyb3cgbmV3IEVycm9yKCJvdXRwdXQucGF0aCBub3QgZGVmaW5lZCIpO0M9SihBLG8ucGF0aCk7YnJlYWt9Y2FzZSBrLkltYWdlOntpZih0eXBlb2Ygby5wYXRoPiJ1Iil0aHJvdyBuZXcgRXJyb3IoIm91dHB1dC5wYXRoIG5vdCBkZWZpbmVkIik7bGV0IEk9QS5mc19yZWFkRmlsZShgJHtvLnBhdGh9L2luZGV4Lmpzb25gLHtlbmNvZGluZzoidXRmOCJ9KSxmPUpTT04ucGFyc2UoSSksQj1KKEEsYCR7by5wYXRofS9kYXRhL2RhdGEucmF3YCk7Zi5kYXRhPXcoZi5pbWFnZVR5cGUuY29tcG9uZW50VHlwZSxCLmJ1ZmZlcik7bGV0IHA9SihBLGAke28ucGF0aH0vZGF0YS9kaXJlY3Rpb24ucmF3YCk7Zi5kaXJlY3Rpb249dyhILkZsb2F0NjQscC5idWZmZXIpLEM9ZjticmVha31jYXNlIGsuTWVzaDp7aWYodHlwZW9mIG8ucGF0aD4idSIpdGhyb3cgbmV3IEVycm9yKCJvdXRwdXQucGF0aCBub3QgZGVmaW5lZCIpO2xldCBJPUEuZnNfcmVhZEZpbGUoYCR7by5wYXRofS9pbmRleC5qc29uYCx7ZW5jb2Rpbmc6InV0ZjgifSksZj1KU09OLnBhcnNlKEkpO2lmKGYubnVtYmVyT2ZQb2ludHM+MCl7bGV0IEI9SihBLGAke28ucGF0aH0vZGF0YS9wb2ludHMucmF3YCk7Zi5wb2ludHM9dyhmLm1lc2hUeXBlLnBvaW50Q29tcG9uZW50VHlwZSxCLmJ1ZmZlcil9ZWxzZSBmLnBvaW50cz13KGYubWVzaFR5cGUucG9pbnRDb21wb25lbnRUeXBlLG5ldyBBcnJheUJ1ZmZlcigwKSk7aWYoZi5udW1iZXJPZlBvaW50UGl4ZWxzPjApe2xldCBCPUooQSxgJHtvLnBhdGh9L2RhdGEvcG9pbnREYXRhLnJhd2ApO2YucG9pbnREYXRhPXcoZi5tZXNoVHlwZS5wb2ludFBpeGVsQ29tcG9uZW50VHlwZSxCLmJ1ZmZlcil9ZWxzZSBmLnBvaW50RGF0YT13KGYubWVzaFR5cGUucG9pbnRQaXhlbENvbXBvbmVudFR5cGUsbmV3IEFycmF5QnVmZmVyKDApKTtpZihmLm51bWJlck9mQ2VsbHM+MCl7bGV0IEI9SihBLGAke28ucGF0aH0vZGF0YS9jZWxscy5yYXdgKTtmLmNlbGxzPXcoZi5tZXNoVHlwZS5jZWxsQ29tcG9uZW50VHlwZSxCLmJ1ZmZlcil9ZWxzZSBmLmNlbGxzPXcoZi5tZXNoVHlwZS5jZWxsQ29tcG9uZW50VHlwZSxuZXcgQXJyYXlCdWZmZXIoMCkpO2lmKGYubnVtYmVyT2ZDZWxsUGl4ZWxzPjApe2xldCBCPUooQSxgJHtvLnBhdGh9L2RhdGEvY2VsbERhdGEucmF3YCk7Zi5jZWxsRGF0YT13KGYubWVzaFR5cGUuY2VsbFBpeGVsQ29tcG9uZW50VHlwZSxCLmJ1ZmZlcil9ZWxzZSBmLmNlbGxEYXRhPXcoZi5tZXNoVHlwZS5jZWxsUGl4ZWxDb21wb25lbnRUeXBlLG5ldyBBcnJheUJ1ZmZlcigwKSk7Qz1mO2JyZWFrfWRlZmF1bHQ6dGhyb3cgRXJyb3IoIlVuc3VwcG9ydGVkIG91dHB1dCBJbnRlcmZhY2VUeXBlIil9bGV0IGM9e3R5cGU6by50eXBlLGRhdGE6Q307dS5wdXNoKGMpfSkse3JldHVyblZhbHVlOmEsc3Rkb3V0Omksc3RkZXJyOmwsb3V0cHV0czp1fX12YXIgY3Q9V3I7dmFyIG5lPW5ldyBNYXA7YXN5bmMgZnVuY3Rpb24ganIoQSl7bGV0IHQ9QSxlPUE7aWYodHlwZW9mIEEhPSJzdHJpbmciJiYodD1uZXcgVVJMKEEuaHJlZiksZT10LmhyZWYpLG5lLmhhcyhlKSlyZXR1cm4gbmUuZ2V0KGUpO3tsZXQgcj1hd2FpdCBhdChBLHYucGlwZWxpbmVzVXJsKTtyZXR1cm4gbmUuc2V0KGUscikscn19YXN5bmMgZnVuY3Rpb24gX3IoQSx0LGUscixuLGEpe3ZhciBpLGw7aWYoIWF3YWl0IG90KCkpe2xldCBRPSJXZWJBc3NlbWJseSBTSU1EIHN1cHBvcnQgaXMgcmVxdWlyZWQgLS0gcGxlYXNlIHVwZGF0ZSB5b3VyIGJyb3dzZXIuIjt0aHJvdyBhbGVydChRKSxuZXcgRXJyb3IoUSl9aWYoQT09PSExKXtsZXQgUT1hd2FpdCBqcih0LnRvU3RyaW5nKCkpO3JldHVybiBjdChRLGUscixuKX1sZXQgdT1BLG89KGk9YT8ucGlwZWxpbmVXb3JrZXJVcmwpIT09bnVsbCYmaSE9PXZvaWQgMD9pOm51bGwscz10eXBlb2YgbyE9InN0cmluZyImJnR5cGVvZiBvPy5ocmVmPCJ1Ij9vLmhyZWY6byx7d29ya2VyUHJveHk6Qyx3b3JrZXI6Y309YXdhaXQgdHQodSxzKTt1PWM7bGV0IEk9W107biE9bnVsbCYmbi5sZW5ndGg+MCYmbi5mb3JFYWNoKGZ1bmN0aW9uKFEpe2lmKFEudHlwZT09PUUuQmluYXJ5U3RyZWFtKXtsZXQgaD1RLmRhdGEuZGF0YTtJLnB1c2goaCl9ZWxzZSBpZihRLnR5cGU9PT1FLkJpbmFyeUZpbGUpe2xldCBoPVEuZGF0YS5kYXRhO0kucHVzaChoKX1lbHNlIGlmKFEudHlwZT09PUUuSW1hZ2Upe2xldCBoPVEuZGF0YTtpZihoLmRhdGE9PT1udWxsKXRocm93IEVycm9yKCJpbWFnZSBkYXRhIGNhbm5vdCBiZSBudWxsIik7SS5wdXNoKC4uLnRlKGgpKX1lbHNlIGlmKFEudHlwZT09PWsuQmluYXJ5KUkucHVzaChRLmRhdGEpO2Vsc2UgaWYoUS50eXBlPT09ay5JbWFnZSl7bGV0IGg9US5kYXRhO2lmKGguZGF0YT09PW51bGwpdGhyb3cgRXJyb3IoImltYWdlIGRhdGEgY2Fubm90IGJlIG51bGwiKTtJLnB1c2goLi4udGUoaCkpfWVsc2UgaWYoUS50eXBlPT09ay5NZXNoKXtsZXQgaD1RLmRhdGE7SS5wdXNoKC4uLml0KGgpKX19KTtsZXQgZj0obD1hPy5waXBlbGluZUJhc2VVcmwpIT09bnVsbCYmbCE9PXZvaWQgMD9sOiJwaXBlbGluZXNVcmwiLEI9dHlwZW9mIGYhPSJzdHJpbmciJiZ0eXBlb2YgZj8uaHJlZjwidSI/Zi5ocmVmOmYscD1uIT1udWxsP2VlKG4sY2UoSSkpOm51bGwsbT1hd2FpdCBDLnJ1blBpcGVsaW5lKHYsdC50b1N0cmluZygpLEIsZSxyLHApO3JldHVybntyZXR1cm5WYWx1ZTptLnJldHVyblZhbHVlLHN0ZG91dDptLnN0ZG91dCxzdGRlcnI6bS5zdGRlcnIsb3V0cHV0czptLm91dHB1dHMsd2ViV29ya2VyOnV9fXZhciBVPV9yO3ZhciBmdD17bmFtZToiQGl0ay13YXNtL2RpY29tIix2ZXJzaW9uOiI1LjAuMCIsZGVzY3JpcHRpb246IlJlYWQgZmlsZXMgYW5kIGltYWdlcyByZWxhdGVkIHRvIERJQ09NIGZpbGUgZm9ybWF0LiIsdHlwZToibW9kdWxlIixtb2R1bGU6Ii4vZGlzdC9pbmRleC5qcyIsdHlwZXM6Ii4vZGlzdC9pbmRleC5kLnRzIixleHBvcnRzOnsiLiI6e3R5cGVzOiIuL2Rpc3QvaW5kZXguZC50cyIsYnJvd3NlcjoiLi9kaXN0L2luZGV4LmpzIixub2RlOiIuL2Rpc3QvaW5kZXgtbm9kZS5qcyIsZGVmYXVsdDoiLi9kaXN0L2luZGV4LmpzIn19LHNjcmlwdHM6e3N0YXJ0OiJucG0gcnVuIGNvcHlTaG9lbGFjZUFzc2V0cyAmJiB2aXRlIC1jIGJ1aWxkL3ZpdGUuY29uZmlnLmpzIix0ZXN0OiJucG0gcnVuIHRlc3Q6bm9kZSAmJiBucG0gcnVuIHRlc3Q6YnJvd3NlciIsInRlc3Q6bm9kZSI6ImF2YSB0ZXN0L25vZGUvKi5qcyIsInRlc3Q6YnJvd3NlciI6Im5wbSBydW4gdGVzdDpicm93c2VyOmNocm9tZSAmJiBucG0gcnVuIHRlc3Q6YnJvd3NlcjpmaXJlZm94IiwidGVzdDpicm93c2VyOmZpcmVmb3giOiJzdGFydC1zZXJ2ZXItYW5kLXRlc3Qgc3RhcnQgaHR0cC1nZXQ6Ly9sb2NhbGhvc3Q6NTE3MyBjeXByZXNzOnJ1bkZpcmVmb3giLCJ0ZXN0OmJyb3dzZXI6Y2hyb21lIjoic3RhcnQtc2VydmVyLWFuZC10ZXN0IHN0YXJ0IGh0dHAtZ2V0Oi8vbG9jYWxob3N0OjUxNzMgY3lwcmVzczpydW5DaHJvbWUiLCJ0ZXN0OmJyb3dzZXI6ZGVidWciOiJzdGFydC1zZXJ2ZXItYW5kLXRlc3Qgc3RhcnQgaHR0cC1nZXQ6Ly9sb2NhbGhvc3Q6NTE3MyBjeXByZXNzOm9wZW4iLGNvcHlTaG9lbGFjZUFzc2V0czoic2h4IG1rZGlyIC1wIHRlc3QvYnJvd3Nlci9kZW1vLWFwcC9wdWJsaWMvc2hvZWxhY2UgJiYgc2h4IGNwIC1yIG5vZGVfbW9kdWxlcy9Ac2hvZWxhY2Utc3R5bGUvc2hvZWxhY2UvZGlzdC9hc3NldHMgdGVzdC9icm93c2VyL2RlbW8tYXBwL3B1YmxpYy8iLCJjeXByZXNzOm9wZW4iOiJucHggY3lwcmVzcyBvcGVuIiwiY3lwcmVzczpydW5DaHJvbWUiOiJucHggY3lwcmVzcyBydW4gLS1icm93c2VyIGNocm9tZSIsImN5cHJlc3M6cnVuRmlyZWZveCI6Im5weCBjeXByZXNzIHJ1biAtLWJyb3dzZXIgZmlyZWZveCIsYnVpbGQ6Im5wbSBydW4gYnVpbGQ6dHNjICYmIG5wbSBydW4gYnVpbGQ6YnJvd3Nlcjp3b3JrZXJFbWJlZGRlZCAmJiBucG0gcnVuIGJ1aWxkOmJyb3dzZXI6d29ya2VyRW1iZWRkZWRNaW4gJiYgbnBtIHJ1biBidWlsZDpkZW1vIiwiYnVpbGQ6YnJvd3Nlcjp3b3JrZXJFbWJlZGRlZCI6ImVzYnVpbGQgLS1sb2FkZXI6Lndvcmtlci5qcz1kYXRhdXJsIC0tYnVuZGxlIC0tZm9ybWF0PWVzbSAtLW91dGZpbGU9Li9kaXN0L2J1bmRsZS9pbmRleC13b3JrZXItZW1iZWRkZWQuanMgLi9zcmMvaW5kZXgtd29ya2VyLWVtYmVkZGVkLnRzIiwiYnVpbGQ6YnJvd3Nlcjp3b3JrZXJFbWJlZGRlZE1pbiI6ImVzYnVpbGQgLS1taW5pZnkgLS1sb2FkZXI6Lndvcmtlci5qcz1kYXRhdXJsIC0tYnVuZGxlIC0tZm9ybWF0PWVzbSAtLW91dGZpbGU9Li9kaXN0L2J1bmRsZS9pbmRleC13b3JrZXItZW1iZWRkZWQubWluLmpzIC4vc3JjL2luZGV4LXdvcmtlci1lbWJlZGRlZC5taW4udHMiLCJidWlsZDp0c2MiOiJ0c2MgLS1wcmV0dHkiLCJidWlsZDpkZW1vIjoibnBtIHJ1biBjb3B5U2hvZWxhY2VBc3NldHMgJiYgdml0ZSAtYyBidWlsZC92aXRlLmNvbmZpZy5qcyBidWlsZCJ9LGtleXdvcmRzOlsiaXRrIiwid2FzbSIsIndlYmFzc2VtYmx5Il0sYXV0aG9yOiIiLGxpY2Vuc2U6IkFwYWNoZS0yLjAiLGRlcGVuZGVuY2llczp7Iml0ay13YXNtIjoiXjEuMC4wLWIuMTU0In0sZGV2RGVwZW5kZW5jaWVzOnsiQGl0ay13YXNtL2ltYWdlLWlvIjoiXjAuNC4wIiwiQHNob2VsYWNlLXN0eWxlL3Nob2VsYWNlIjoiXjIuNS4yIiwiQHR5cGVzL25vZGUiOiJeMjAuMi41IixhdmE6Il41LjEuMCIsY3lwcmVzczoiXjEyLjE3LjIiLHNoeDoiXjAuMy40Iiwic3RhcnQtc2VydmVyLWFuZC10ZXN0IjoiXjIuMC4wIix0eXBlc2NyaXB0OiJeNS4xLjYiLHZpdGU6Il40LjQuMTEiLCJ2aXRlLXBsdWdpbi1zdGF0aWMtY29weSI6Il4wLjE3LjAifSxyZXBvc2l0b3J5Ont0eXBlOiJnaXQiLHVybDoiaHR0cHM6Ly9naXRodWIuY29tL0luc2lnaHRTb2Z0d2FyZUNvbnNvcnRpdW0vaXRrLXdhc20ifX07dmFyIGllLFZyPWBodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL0BpdGstd2FzbS9kaWNvbUAke2Z0LnZlcnNpb259L2Rpc3QvcGlwZWxpbmVzYDtmdW5jdGlvbiBJcyhBKXtpZT1BfWZ1bmN0aW9uIE8oKXtpZih0eXBlb2YgaWU8InUiKXJldHVybiBpZTtsZXQgQT1udCgpO3JldHVybiB0eXBlb2YgQTwidSI/QTpWcn12YXIgYWUsWnI9bnVsbDtmdW5jdGlvbiB1dChBKXthZT1BfWZ1bmN0aW9uIFQoKXtpZih0eXBlb2YgYWU8InUiKXJldHVybiBhZTtsZXQgQT1ydCgpO3JldHVybiB0eXBlb2YgQTwidSI/QTpacn1hc3luYyBmdW5jdGlvbiBYcihBLHQsZSxyPXt9KXtsZXQgbj1be3R5cGU6RS5Kc29uQ29tcGF0aWJsZX0se3R5cGU6RS5JbWFnZX1dLGE9dDtpZih0IGluc3RhbmNlb2YgRmlsZSl7bGV0IGg9YXdhaXQgdC5hcnJheUJ1ZmZlcigpO2E9e3BhdGg6dC5uYW1lLGRhdGE6bmV3IFVpbnQ4QXJyYXkoaCl9fWxldCBpPWU7aWYoZSBpbnN0YW5jZW9mIEZpbGUpe2xldCBoPWF3YWl0IGUuYXJyYXlCdWZmZXIoKTtpPXtwYXRoOmUubmFtZSxkYXRhOm5ldyBVaW50OEFycmF5KGgpfX1sZXQgbD1be3R5cGU6RS5CaW5hcnlGaWxlLGRhdGE6YX0se3R5cGU6RS5CaW5hcnlGaWxlLGRhdGE6aX1dLHU9W10sbz1hLnBhdGg7dS5wdXNoKG8pO2xldCBzPWkucGF0aDt1LnB1c2gocyk7bGV0IEM9IjAiO3UucHVzaChDKTtsZXQgYz0iMSI7dS5wdXNoKGMpLHUucHVzaCgiLS1tZW1vcnktaW8iKSx0eXBlb2Ygci5jb2xvck91dHB1dDwidSImJnIuY29sb3JPdXRwdXQmJnUucHVzaCgiLS1jb2xvci1vdXRwdXQiKSx0eXBlb2Ygci5jb25maWdGaWxlPCJ1IiYmdS5wdXNoKCItLWNvbmZpZy1maWxlIixyLmNvbmZpZ0ZpbGUudG9TdHJpbmcoKSksdHlwZW9mIHIuZnJhbWU8InUiJiZ1LnB1c2goIi0tZnJhbWUiLHIuZnJhbWUudG9TdHJpbmcoKSksdHlwZW9mIHIubm9QcmVzZW50YXRpb25TdGF0ZU91dHB1dDwidSImJnIubm9QcmVzZW50YXRpb25TdGF0ZU91dHB1dCYmdS5wdXNoKCItLW5vLXByZXNlbnRhdGlvbi1zdGF0ZS1vdXRwdXQiKSx0eXBlb2Ygci5ub0JpdG1hcE91dHB1dDwidSImJnIubm9CaXRtYXBPdXRwdXQmJnUucHVzaCgiLS1uby1iaXRtYXAtb3V0cHV0Iik7bGV0IEk9ImFwcGx5LXByZXNlbnRhdGlvbi1zdGF0ZS10by1pbWFnZSIse3dlYldvcmtlcjpmLHJldHVyblZhbHVlOkIsc3RkZXJyOnAsb3V0cHV0czptfT1hd2FpdCBVKEEsSSx1LG4sbCx7cGlwZWxpbmVCYXNlVXJsOk8oKSxwaXBlbGluZVdvcmtlclVybDpUKCl9KTtpZihCIT09MCYmcCE9PSIiKXRocm93IG5ldyBFcnJvcihwKTtyZXR1cm57d2ViV29ya2VyOmYscHJlc2VudGF0aW9uU3RhdGVPdXRTdHJlYW06bVswXT8uZGF0YSxvdXRwdXRJbWFnZTptWzFdPy5kYXRhfX12YXIgJHI9WHI7YXN5bmMgZnVuY3Rpb24gQW4oQSx0LGU9e30pe2xldCByPVt7dHlwZTpFLkJpbmFyeVN0cmVhbX1dLG49dDtpZih0IGluc3RhbmNlb2YgRmlsZSl7bGV0IEI9YXdhaXQgdC5hcnJheUJ1ZmZlcigpO249e3BhdGg6dC5uYW1lLGRhdGE6bmV3IFVpbnQ4QXJyYXkoQil9fWxldCBhPVt7dHlwZTpFLkJpbmFyeUZpbGUsZGF0YTpufV0saT1bXSxsPW4ucGF0aDtpLnB1c2gobCk7bGV0IHU9IjAiO2kucHVzaCh1KSxpLnB1c2goIi0tbWVtb3J5LWlvIiksdHlwZW9mIGUucmVhZEZpbGVPbmx5PCJ1IiYmZS5yZWFkRmlsZU9ubHkmJmkucHVzaCgiLS1yZWFkLWZpbGUtb25seSIpLHR5cGVvZiBlLnJlYWREYXRhc2V0PCJ1IiYmZS5yZWFkRGF0YXNldCYmaS5wdXNoKCItLXJlYWQtZGF0YXNldCIpLHR5cGVvZiBlLnJlYWRYZmVyQXV0bzwidSImJmUucmVhZFhmZXJBdXRvJiZpLnB1c2goIi0tcmVhZC14ZmVyLWF1dG8iKSx0eXBlb2YgZS5yZWFkWGZlckRldGVjdDwidSImJmUucmVhZFhmZXJEZXRlY3QmJmkucHVzaCgiLS1yZWFkLXhmZXItZGV0ZWN0IiksdHlwZW9mIGUucmVhZFhmZXJMaXR0bGU8InUiJiZlLnJlYWRYZmVyTGl0dGxlJiZpLnB1c2goIi0tcmVhZC14ZmVyLWxpdHRsZSIpLHR5cGVvZiBlLnJlYWRYZmVyQmlnPCJ1IiYmZS5yZWFkWGZlckJpZyYmaS5wdXNoKCItLXJlYWQteGZlci1iaWciKSx0eXBlb2YgZS5yZWFkWGZlckltcGxpY2l0PCJ1IiYmZS5yZWFkWGZlckltcGxpY2l0JiZpLnB1c2goIi0tcmVhZC14ZmVyLWltcGxpY2l0IiksdHlwZW9mIGUuYWNjZXB0T2RkTGVuZ3RoPCJ1IiYmZS5hY2NlcHRPZGRMZW5ndGgmJmkucHVzaCgiLS1hY2NlcHQtb2RkLWxlbmd0aCIpLHR5cGVvZiBlLmFzc3VtZUV2ZW5MZW5ndGg8InUiJiZlLmFzc3VtZUV2ZW5MZW5ndGgmJmkucHVzaCgiLS1hc3N1bWUtZXZlbi1sZW5ndGgiKSx0eXBlb2YgZS5lbmFibGVDcDI0NjwidSImJmUuZW5hYmxlQ3AyNDYmJmkucHVzaCgiLS1lbmFibGUtY3AyNDYiKSx0eXBlb2YgZS5kaXNhYmxlQ3AyNDY8InUiJiZlLmRpc2FibGVDcDI0NiYmaS5wdXNoKCItLWRpc2FibGUtY3AyNDYiKSx0eXBlb2YgZS5yZXRhaW5VbjwidSImJmUucmV0YWluVW4mJmkucHVzaCgiLS1yZXRhaW4tdW4iKSx0eXBlb2YgZS5jb252ZXJ0VW48InUiJiZlLmNvbnZlcnRVbiYmaS5wdXNoKCItLWNvbnZlcnQtdW4iKSx0eXBlb2YgZS5lbmFibGVDb3JyZWN0aW9uPCJ1IiYmZS5lbmFibGVDb3JyZWN0aW9uJiZpLnB1c2goIi0tZW5hYmxlLWNvcnJlY3Rpb24iKSx0eXBlb2YgZS5kaXNhYmxlQ29ycmVjdGlvbjwidSImJmUuZGlzYWJsZUNvcnJlY3Rpb24mJmkucHVzaCgiLS1kaXNhYmxlLWNvcnJlY3Rpb24iKTtsZXQgbz0icmVhZC1kaWNvbS1lbmNhcHN1bGF0ZWQtcGRmIix7d2ViV29ya2VyOnMscmV0dXJuVmFsdWU6QyxzdGRlcnI6YyxvdXRwdXRzOkl9PWF3YWl0IFUoQSxvLGkscixhLHtwaXBlbGluZUJhc2VVcmw6TygpLHBpcGVsaW5lV29ya2VyVXJsOlQoKX0pO2lmKEMhPT0wJiZjIT09IiIpdGhyb3cgbmV3IEVycm9yKGMpO3JldHVybnt3ZWJXb3JrZXI6cyxwZGZCaW5hcnlPdXRwdXQ6KElbMF0/LmRhdGEpLmRhdGF9fXZhciBlbj1Bbjthc3luYyBmdW5jdGlvbiB0bihBLHQsZT17fSl7bGV0IHI9W3t0eXBlOkUuVGV4dFN0cmVhbX1dLG49dDtpZih0IGluc3RhbmNlb2YgRmlsZSl7bGV0IEI9YXdhaXQgdC5hcnJheUJ1ZmZlcigpO249e3BhdGg6dC5uYW1lLGRhdGE6bmV3IFVpbnQ4QXJyYXkoQil9fWxldCBhPVt7dHlwZTpFLkJpbmFyeUZpbGUsZGF0YTpufV0saT1bXSxsPW4ucGF0aDtpLnB1c2gobCk7bGV0IHU9IjAiO2lmKGkucHVzaCh1KSxpLnB1c2goIi0tbWVtb3J5LWlvIiksdHlwZW9mIGUucmVhZEZpbGVPbmx5PCJ1IiYmZS5yZWFkRmlsZU9ubHkmJmkucHVzaCgiLS1yZWFkLWZpbGUtb25seSIpLHR5cGVvZiBlLnJlYWREYXRhc2V0PCJ1IiYmZS5yZWFkRGF0YXNldCYmaS5wdXNoKCItLXJlYWQtZGF0YXNldCIpLHR5cGVvZiBlLnJlYWRYZmVyQXV0bzwidSImJmUucmVhZFhmZXJBdXRvJiZpLnB1c2goIi0tcmVhZC14ZmVyLWF1dG8iKSx0eXBlb2YgZS5yZWFkWGZlckRldGVjdDwidSImJmUucmVhZFhmZXJEZXRlY3QmJmkucHVzaCgiLS1yZWFkLXhmZXItZGV0ZWN0IiksdHlwZW9mIGUucmVhZFhmZXJMaXR0bGU8InUiJiZlLnJlYWRYZmVyTGl0dGxlJiZpLnB1c2goIi0tcmVhZC14ZmVyLWxpdHRsZSIpLHR5cGVvZiBlLnJlYWRYZmVyQmlnPCJ1IiYmZS5yZWFkWGZlckJpZyYmaS5wdXNoKCItLXJlYWQteGZlci1iaWciKSx0eXBlb2YgZS5yZWFkWGZlckltcGxpY2l0PCJ1IiYmZS5yZWFkWGZlckltcGxpY2l0JiZpLnB1c2goIi0tcmVhZC14ZmVyLWltcGxpY2l0IiksdHlwZW9mIGUucHJvY2Vzc2luZ0RldGFpbHM8InUiJiZlLnByb2Nlc3NpbmdEZXRhaWxzJiZpLnB1c2goIi0tcHJvY2Vzc2luZy1kZXRhaWxzIiksdHlwZW9mIGUudW5rbm93blJlbGF0aW9uc2hpcDwidSImJmUudW5rbm93blJlbGF0aW9uc2hpcCYmaS5wdXNoKCItLXVua25vd24tcmVsYXRpb25zaGlwIiksdHlwZW9mIGUuaW52YWxpZEl0ZW1WYWx1ZTwidSImJmUuaW52YWxpZEl0ZW1WYWx1ZSYmaS5wdXNoKCItLWludmFsaWQtaXRlbS12YWx1ZSIpLHR5cGVvZiBlLmlnbm9yZUNvbnN0cmFpbnRzPCJ1IiYmZS5pZ25vcmVDb25zdHJhaW50cyYmaS5wdXNoKCItLWlnbm9yZS1jb25zdHJhaW50cyIpLHR5cGVvZiBlLmlnbm9yZUl0ZW1FcnJvcnM8InUiJiZlLmlnbm9yZUl0ZW1FcnJvcnMmJmkucHVzaCgiLS1pZ25vcmUtaXRlbS1lcnJvcnMiKSx0eXBlb2YgZS5za2lwSW52YWxpZEl0ZW1zPCJ1IiYmZS5za2lwSW52YWxpZEl0ZW1zJiZpLnB1c2goIi0tc2tpcC1pbnZhbGlkLWl0ZW1zIiksdHlwZW9mIGUuZGlzYWJsZVZyQ2hlY2tlcjwidSImJmUuZGlzYWJsZVZyQ2hlY2tlciYmaS5wdXNoKCItLWRpc2FibGUtdnItY2hlY2tlciIpLHR5cGVvZiBlLmNoYXJzZXRSZXF1aXJlPCJ1IiYmZS5jaGFyc2V0UmVxdWlyZSYmaS5wdXNoKCItLWNoYXJzZXQtcmVxdWlyZSIpLHR5cGVvZiBlLmNoYXJzZXRBc3N1bWU8InUiJiZpLnB1c2goIi0tY2hhcnNldC1hc3N1bWUiLGUuY2hhcnNldEFzc3VtZS50b1N0cmluZygpKSx0eXBlb2YgZS5jaGFyc2V0Q2hlY2tBbGw8InUiJiZlLmNoYXJzZXRDaGVja0FsbCYmaS5wdXNoKCItLWNoYXJzZXQtY2hlY2stYWxsIiksdHlwZW9mIGUuY29udmVydFRvVXRmODwidSImJmUuY29udmVydFRvVXRmOCYmaS5wdXNoKCItLWNvbnZlcnQtdG8tdXRmOCIpLHR5cGVvZiBlLnVybFByZWZpeDwidSImJmkucHVzaCgiLS11cmwtcHJlZml4IixlLnVybFByZWZpeC50b1N0cmluZygpKSx0eXBlb2YgZS5odG1sMzI8InUiJiZlLmh0bWwzMiYmaS5wdXNoKCItLWh0bWwtMzIiKSx0eXBlb2YgZS5odG1sNDA8InUiJiZlLmh0bWw0MCYmaS5wdXNoKCItLWh0bWwtNDAiKSx0eXBlb2YgZS54aHRtbDExPCJ1IiYmZS54aHRtbDExJiZpLnB1c2goIi0teGh0bWwtMTEiKSx0eXBlb2YgZS5hZGREb2N1bWVudFR5cGU8InUiJiZlLmFkZERvY3VtZW50VHlwZSYmaS5wdXNoKCItLWFkZC1kb2N1bWVudC10eXBlIiksdHlwZW9mIGUuY3NzUmVmZXJlbmNlPCJ1Iil7bGV0IEI9YS5sZW5ndGgudG9TdHJpbmcoKTthLnB1c2goe3R5cGU6RS5UZXh0U3RyZWFtLGRhdGE6e2RhdGE6ZS5jc3NSZWZlcmVuY2V9fSksaS5wdXNoKCItLWNzcy1yZWZlcmVuY2UiLEIpfWlmKHR5cGVvZiBlLmNzc0ZpbGU8InUiKXtsZXQgQj1lLmNzc0ZpbGUscD1CO2lmKEIgaW5zdGFuY2VvZiBGaWxlKXtsZXQgUT1hd2FpdCBCLmFycmF5QnVmZmVyKCk7cD17cGF0aDpCLm5hbWUsZGF0YTpuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoUSl9fWkucHVzaCgiLS1jc3MtZmlsZSIpLGEucHVzaCh7dHlwZTpFLlRleHRGaWxlLGRhdGE6cH0pO2xldCBtPUIgaW5zdGFuY2VvZiBGaWxlP0IubmFtZTpCLnBhdGg7aS5wdXNoKG0pfXR5cGVvZiBlLmV4cGFuZElubGluZTwidSImJmUuZXhwYW5kSW5saW5lJiZpLnB1c2goIi0tZXhwYW5kLWlubGluZSIpLHR5cGVvZiBlLm5ldmVyRXhwYW5kSW5saW5lPCJ1IiYmZS5uZXZlckV4cGFuZElubGluZSYmaS5wdXNoKCItLW5ldmVyLWV4cGFuZC1pbmxpbmUiKSx0eXBlb2YgZS5hbHdheXNFeHBhbmRJbmxpbmU8InUiJiZlLmFsd2F5c0V4cGFuZElubGluZSYmaS5wdXNoKCItLWFsd2F5cy1leHBhbmQtaW5saW5lIiksdHlwZW9mIGUucmVuZGVyRnVsbERhdGE8InUiJiZlLnJlbmRlckZ1bGxEYXRhJiZpLnB1c2goIi0tcmVuZGVyLWZ1bGwtZGF0YSIpLHR5cGVvZiBlLnNlY3Rpb25UaXRsZUlubGluZTwidSImJmUuc2VjdGlvblRpdGxlSW5saW5lJiZpLnB1c2goIi0tc2VjdGlvbi10aXRsZS1pbmxpbmUiKSx0eXBlb2YgZS5kb2N1bWVudFR5cGVUaXRsZTwidSImJmUuZG9jdW1lbnRUeXBlVGl0bGUmJmkucHVzaCgiLS1kb2N1bWVudC10eXBlLXRpdGxlIiksdHlwZW9mIGUucGF0aWVudEluZm9UaXRsZTwidSImJmUucGF0aWVudEluZm9UaXRsZSYmaS5wdXNoKCItLXBhdGllbnQtaW5mby10aXRsZSIpLHR5cGVvZiBlLm5vRG9jdW1lbnRIZWFkZXI8InUiJiZlLm5vRG9jdW1lbnRIZWFkZXImJmkucHVzaCgiLS1uby1kb2N1bWVudC1oZWFkZXIiKSx0eXBlb2YgZS5yZW5kZXJJbmxpbmVDb2RlczwidSImJmUucmVuZGVySW5saW5lQ29kZXMmJmkucHVzaCgiLS1yZW5kZXItaW5saW5lLWNvZGVzIiksdHlwZW9mIGUuY29uY2VwdE5hbWVDb2RlczwidSImJmUuY29uY2VwdE5hbWVDb2RlcyYmaS5wdXNoKCItLWNvbmNlcHQtbmFtZS1jb2RlcyIpLHR5cGVvZiBlLm51bWVyaWNVbml0Q29kZXM8InUiJiZlLm51bWVyaWNVbml0Q29kZXMmJmkucHVzaCgiLS1udW1lcmljLXVuaXQtY29kZXMiKSx0eXBlb2YgZS5jb2RlVmFsdWVVbml0PCJ1IiYmZS5jb2RlVmFsdWVVbml0JiZpLnB1c2goIi0tY29kZS12YWx1ZS11bml0IiksdHlwZW9mIGUuY29kZU1lYW5pbmdVbml0PCJ1IiYmZS5jb2RlTWVhbmluZ1VuaXQmJmkucHVzaCgiLS1jb2RlLW1lYW5pbmctdW5pdCIpLHR5cGVvZiBlLnJlbmRlckFsbENvZGVzPCJ1IiYmZS5yZW5kZXJBbGxDb2RlcyYmaS5wdXNoKCItLXJlbmRlci1hbGwtY29kZXMiKSx0eXBlb2YgZS5jb2RlRGV0YWlsc1Rvb2x0aXA8InUiJiZlLmNvZGVEZXRhaWxzVG9vbHRpcCYmaS5wdXNoKCItLWNvZGUtZGV0YWlscy10b29sdGlwIik7bGV0IG89InN0cnVjdHVyZWQtcmVwb3J0LXRvLWh0bWwiLHt3ZWJXb3JrZXI6cyxyZXR1cm5WYWx1ZTpDLHN0ZGVycjpjLG91dHB1dHM6SX09YXdhaXQgVShBLG8saSxyLGEse3BpcGVsaW5lQmFzZVVybDpPKCkscGlwZWxpbmVXb3JrZXJVcmw6VCgpfSk7aWYoQyE9PTAmJmMhPT0iIil0aHJvdyBuZXcgRXJyb3IoYyk7cmV0dXJue3dlYldvcmtlcjpzLG91dHB1dFRleHQ6KElbMF0/LmRhdGEpLmRhdGF9fXZhciBybj10bjthc3luYyBmdW5jdGlvbiBubihBLHQsZT17fSl7bGV0IHI9W3t0eXBlOkUuVGV4dFN0cmVhbX1dLG49dDtpZih0IGluc3RhbmNlb2YgRmlsZSl7bGV0IEI9YXdhaXQgdC5hcnJheUJ1ZmZlcigpO249e3BhdGg6dC5uYW1lLGRhdGE6bmV3IFVpbnQ4QXJyYXkoQil9fWxldCBhPVt7dHlwZTpFLkJpbmFyeUZpbGUsZGF0YTpufV0saT1bXSxsPW4ucGF0aDtpLnB1c2gobCk7bGV0IHU9IjAiO2kucHVzaCh1KSxpLnB1c2goIi0tbWVtb3J5LWlvIiksdHlwZW9mIGUudW5rbm93blJlbGF0aW9uc2hpcDwidSImJmUudW5rbm93blJlbGF0aW9uc2hpcCYmaS5wdXNoKCItLXVua25vd24tcmVsYXRpb25zaGlwIiksdHlwZW9mIGUuaW52YWxpZEl0ZW1WYWx1ZTwidSImJmUuaW52YWxpZEl0ZW1WYWx1ZSYmaS5wdXNoKCItLWludmFsaWQtaXRlbS12YWx1ZSIpLHR5cGVvZiBlLmlnbm9yZUNvbnN0cmFpbnRzPCJ1IiYmZS5pZ25vcmVDb25zdHJhaW50cyYmaS5wdXNoKCItLWlnbm9yZS1jb25zdHJhaW50cyIpLHR5cGVvZiBlLmlnbm9yZUl0ZW1FcnJvcnM8InUiJiZlLmlnbm9yZUl0ZW1FcnJvcnMmJmkucHVzaCgiLS1pZ25vcmUtaXRlbS1lcnJvcnMiKSx0eXBlb2YgZS5za2lwSW52YWxpZEl0ZW1zPCJ1IiYmZS5za2lwSW52YWxpZEl0ZW1zJiZpLnB1c2goIi0tc2tpcC1pbnZhbGlkLWl0ZW1zIiksdHlwZW9mIGUubm9Eb2N1bWVudEhlYWRlcjwidSImJmUubm9Eb2N1bWVudEhlYWRlciYmaS5wdXNoKCItLW5vLWRvY3VtZW50LWhlYWRlciIpLHR5cGVvZiBlLm51bWJlck5lc3RlZEl0ZW1zPCJ1IiYmZS5udW1iZXJOZXN0ZWRJdGVtcyYmaS5wdXNoKCItLW51bWJlci1uZXN0ZWQtaXRlbXMiKSx0eXBlb2YgZS5zaG9ydGVuTG9uZ1ZhbHVlczwidSImJmUuc2hvcnRlbkxvbmdWYWx1ZXMmJmkucHVzaCgiLS1zaG9ydGVuLWxvbmctdmFsdWVzIiksdHlwZW9mIGUucHJpbnRJbnN0YW5jZVVpZDwidSImJmUucHJpbnRJbnN0YW5jZVVpZCYmaS5wdXNoKCItLXByaW50LWluc3RhbmNlLXVpZCIpLHR5cGVvZiBlLnByaW50U29wY2xhc3NTaG9ydDwidSImJmUucHJpbnRTb3BjbGFzc1Nob3J0JiZpLnB1c2goIi0tcHJpbnQtc29wY2xhc3Mtc2hvcnQiKSx0eXBlb2YgZS5wcmludFNvcGNsYXNzTG9uZzwidSImJmUucHJpbnRTb3BjbGFzc0xvbmcmJmkucHVzaCgiLS1wcmludC1zb3BjbGFzcy1sb25nIiksdHlwZW9mIGUucHJpbnRTb3BjbGFzc1VpZDwidSImJmUucHJpbnRTb3BjbGFzc1VpZCYmaS5wdXNoKCItLXByaW50LXNvcGNsYXNzLXVpZCIpLHR5cGVvZiBlLnByaW50QWxsQ29kZXM8InUiJiZlLnByaW50QWxsQ29kZXMmJmkucHVzaCgiLS1wcmludC1hbGwtY29kZXMiKSx0eXBlb2YgZS5wcmludEludmFsaWRDb2RlczwidSImJmUucHJpbnRJbnZhbGlkQ29kZXMmJmkucHVzaCgiLS1wcmludC1pbnZhbGlkLWNvZGVzIiksdHlwZW9mIGUucHJpbnRUZW1wbGF0ZUlkPCJ1IiYmZS5wcmludFRlbXBsYXRlSWQmJmkucHVzaCgiLS1wcmludC10ZW1wbGF0ZS1pZCIpLHR5cGVvZiBlLmluZGljYXRlRW5oYW5jZWQ8InUiJiZlLmluZGljYXRlRW5oYW5jZWQmJmkucHVzaCgiLS1pbmRpY2F0ZS1lbmhhbmNlZCIpLHR5cGVvZiBlLnByaW50Q29sb3I8InUiJiZlLnByaW50Q29sb3ImJmkucHVzaCgiLS1wcmludC1jb2xvciIpO2xldCBvPSJzdHJ1Y3R1cmVkLXJlcG9ydC10by10ZXh0Iix7d2ViV29ya2VyOnMscmV0dXJuVmFsdWU6QyxzdGRlcnI6YyxvdXRwdXRzOkl9PWF3YWl0IFUoQSxvLGkscixhLHtwaXBlbGluZUJhc2VVcmw6TygpLHBpcGVsaW5lV29ya2VyVXJsOlQoKX0pO2lmKEMhPT0wJiZjIT09IiIpdGhyb3cgbmV3IEVycm9yKGMpO3JldHVybnt3ZWJXb3JrZXI6cyxvdXRwdXRUZXh0OihJWzBdPy5kYXRhKS5kYXRhfX12YXIgYW49bm47YXN5bmMgZnVuY3Rpb24gb24oQSx0LGU9e30pe2xldCByPVt7dHlwZTpFLkpzb25Db21wYXRpYmxlfV0sbj10O2lmKHQgaW5zdGFuY2VvZiBGaWxlKXtsZXQgQj1hd2FpdCB0LmFycmF5QnVmZmVyKCk7bj17cGF0aDp0Lm5hbWUsZGF0YTpuZXcgVWludDhBcnJheShCKX19bGV0IGE9W3t0eXBlOkUuQmluYXJ5RmlsZSxkYXRhOm59XSxpPVtdLGw9bi5wYXRoO2kucHVzaChsKTtsZXQgdT0iMCI7aWYoaS5wdXNoKHUpLGkucHVzaCgiLS1tZW1vcnktaW8iKSx0eXBlb2YgZS50YWdzVG9SZWFkPCJ1Iil7bGV0IEI9YS5sZW5ndGgudG9TdHJpbmcoKTthLnB1c2goe3R5cGU6RS5Kc29uQ29tcGF0aWJsZSxkYXRhOmUudGFnc1RvUmVhZH0pLGkucHVzaCgiLS10YWdzLXRvLXJlYWQiLEIpfWxldCBvPSJyZWFkLWRpY29tLXRhZ3MiLHt3ZWJXb3JrZXI6cyxyZXR1cm5WYWx1ZTpDLHN0ZGVycjpjLG91dHB1dHM6SX09YXdhaXQgVShBLG8saSxyLGEse3BpcGVsaW5lQmFzZVVybDpPKCkscGlwZWxpbmVXb3JrZXJVcmw6VCgpfSk7aWYoQyE9PTApdGhyb3cgbmV3IEVycm9yKGMpO3JldHVybnt3ZWJXb3JrZXI6cyx0YWdzOklbMF0uZGF0YX19dmFyIHNuPW9uO2FzeW5jIGZ1bmN0aW9uIEluKEEsdCxlPSExKXtsZXQgcj1be3R5cGU6RS5JbWFnZX0se3R5cGU6RS5Kc29uQ29tcGF0aWJsZX1dLG49W10sYT1bXSxpPSIwIjthLnB1c2goaSk7bGV0IGw9IjEiO2EucHVzaChsKSxhLnB1c2goIi0tbWVtb3J5LWlvIiksYS5wdXNoKCItLWlucHV0LWltYWdlcyIpLHQuZm9yRWFjaChmPT57bi5wdXNoKHt0eXBlOkUuQmluYXJ5RmlsZSxkYXRhOmZ9KSxhLnB1c2goZi5wYXRoKX0pLHR5cGVvZiBlPCJ1IiYmZSYmYS5wdXNoKCItLXNpbmdsZS1zb3J0ZWQtc2VyaWVzIik7bGV0IHU9InJlYWQtaW1hZ2UtZGljb20tZmlsZS1zZXJpZXMiLHt3ZWJXb3JrZXI6byxyZXR1cm5WYWx1ZTpzLHN0ZGVycjpDLG91dHB1dHM6Y309YXdhaXQgVShBLHUsYSxyLG4se3BpcGVsaW5lQmFzZVVybDpPKCkscGlwZWxpbmVXb3JrZXJVcmw6VCgpfSk7aWYocyE9PTApdGhyb3cgbmV3IEVycm9yKEMpO3JldHVybnt3ZWJXb3JrZXI6byxvdXRwdXRJbWFnZTpjWzBdLmRhdGEsc29ydGVkRmlsZW5hbWVzOmNbMV0uZGF0YX19dmFyIG9lPUluO3ZhciBnbj10eXBlb2YgZ2xvYmFsVGhpcy5uYXZpZ2F0b3I/LmhhcmR3YXJlQ29uY3VycmVuY3k9PSJudW1iZXIiP2dsb2JhbFRoaXMubmF2aWdhdG9yLmhhcmR3YXJlQ29uY3VycmVuY3k6NCxDdD04O2FzeW5jIGZ1bmN0aW9uIGxuKEEsdD17aW5wdXRJbWFnZXM6W119KXtsZXQgZT1BO2U9PT1udWxsJiYoZT1uZXcgTkEoZ24sb2UpKTtsZXQgcj1bXTtpZih0LmlucHV0SW1hZ2VzLmxlbmd0aDwxKXRocm93IG5ldyBFcnJvcignImlucHV0LWltYWdlcyIgb3B0aW9uIG11c3QgaGF2ZSBhIGxlbmd0aCA+IDEnKTtpZihhd2FpdCBQcm9taXNlLmFsbCh0LmlucHV0SW1hZ2VzLm1hcChhc3luYyBuPT57bGV0IGE9bjtpZihuIGluc3RhbmNlb2YgRmlsZSl7bGV0IGk9YXdhaXQgbi5hcnJheUJ1ZmZlcigpO2E9e3BhdGg6bi5uYW1lLGRhdGE6bmV3IFVpbnQ4QXJyYXkoaSl9fXIucHVzaChhKX0pKSx0LnNpbmdsZVNvcnRlZFNlcmllcyl7bGV0IG49W107Zm9yKGxldCBvPTA7bzxyLmxlbmd0aDtvKz1DdCl7bGV0IHM9ci5zbGljZShvLG8rQ3QpO24ucHVzaChbcyx0LnNpbmdsZVNvcnRlZFNlcmllc10pfWxldCBhPWF3YWl0IGUucnVuVGFza3MobikucHJvbWlzZSxpPWEubWFwKG89Pm8ub3V0cHV0SW1hZ2UpLGw9YS5yZWR1Y2UoKG8scyk9Pm8uY29uY2F0KHMuc29ydGVkRmlsZW5hbWVzKSxbXSk7cmV0dXJue291dHB1dEltYWdlOlJBKGkpLHdlYldvcmtlclBvb2w6ZSxzb3J0ZWRGaWxlbmFtZXM6bH19ZWxzZXtsZXQgbj1bW3IsdC5zaW5nbGVTb3J0ZWRTZXJpZXNdXSxhPWF3YWl0IGUucnVuVGFza3MobikucHJvbWlzZTtyZXR1cm57b3V0cHV0SW1hZ2U6YVswXS5vdXRwdXRJbWFnZSx3ZWJXb3JrZXJQb29sOmUsc29ydGVkRmlsZW5hbWVzOmFbMF0uc29ydGVkRmlsZW5hbWVzfX19dmFyIGNuPWxuO3ZhciBCdD0nZGF0YTp0ZXh0L2phdmFzY3JpcHQ7Y2hhcnNldD11dGYtOCx2YXIgY2U9U3ltYm9sKCJDb21saW5rLnByb3h5IiksQ3Q9U3ltYm9sKCJDb21saW5rLmVuZHBvaW50IiksQnQ9U3ltYm9sKCJDb21saW5rLnJlbGVhc2VQcm94eSIpLE1BPVN5bWJvbCgiQ29tbGluay5maW5hbGl6ZXIiKSxzQT1TeW1ib2woIkNvbWxpbmsudGhyb3duIiksZmU9QT0+dHlwZW9mIEE9PSJvYmplY3QiJiZBIT09bnVsbHx8dHlwZW9mIEE9PSJmdW5jdGlvbiIsUXQ9e2NhbkhhbmRsZTpBPT5mZShBKSYmQVtjZV0sc2VyaWFsaXplKEEpe2xldHtwb3J0MTplLHBvcnQyOnR9PW5ldyBNZXNzYWdlQ2hhbm5lbDtyZXR1cm4gRUEoQSxlKSxbdCxbdF1dfSxkZXNlcmlhbGl6ZShBKXtyZXR1cm4gQS5zdGFydCgpLGx0KEEpfX0sRXQ9e2NhbkhhbmRsZTpBPT5mZShBKSYmc0EgaW4gQSxzZXJpYWxpemUoe3ZhbHVlOkF9KXtsZXQgZTtyZXR1cm4gQSBpbnN0YW5jZW9mIEVycm9yP2U9e2lzRXJyb3I6ITAsdmFsdWU6e21lc3NhZ2U6QS5tZXNzYWdlLG5hbWU6QS5uYW1lLHN0YWNrOkEuc3RhY2t9fTplPXtpc0Vycm9yOiExLHZhbHVlOkF9LFtlLFtdXX0sZGVzZXJpYWxpemUoQSl7dGhyb3cgQS5pc0Vycm9yP09iamVjdC5hc3NpZ24obmV3IEVycm9yKEEudmFsdWUubWVzc2FnZSksQS52YWx1ZSk6QS52YWx1ZX19LGxlPW5ldyBNYXAoW1sicHJveHkiLFF0XSxbInRocm93IixFdF1dKTtmdW5jdGlvbiBjdChBLGUpe2ZvcihsZXQgdCBvZiBBKWlmKGU9PT10fHx0PT09IioifHx0IGluc3RhbmNlb2YgUmVnRXhwJiZ0LnRlc3QoZSkpcmV0dXJuITA7cmV0dXJuITF9ZnVuY3Rpb24gRUEoQSxlPWdsb2JhbFRoaXMsdD1bIioiXSl7ZS5hZGRFdmVudExpc3RlbmVyKCJtZXNzYWdlIixmdW5jdGlvbiBJKHIpe2lmKCFyfHwhci5kYXRhKXJldHVybjtpZighY3QodCxyLm9yaWdpbikpe2NvbnNvbGUud2FybihgSW52YWxpZCBvcmlnaW4gXCcke3Iub3JpZ2lufVwnIGZvciBjb21saW5rIHByb3h5YCk7cmV0dXJufWxldHtpZDppLHR5cGU6ZyxwYXRoOm59PU9iamVjdC5hc3NpZ24oe3BhdGg6W119LHIuZGF0YSksRT0oci5kYXRhLmFyZ3VtZW50TGlzdHx8W10pLm1hcChxKSxvO3RyeXtsZXQgQj1uLnNsaWNlKDAsLTEpLnJlZHVjZSgoYSxDKT0+YVtDXSxBKSxjPW4ucmVkdWNlKChhLEMpPT5hW0NdLEEpO3N3aXRjaChnKXtjYXNlIkdFVCI6bz1jO2JyZWFrO2Nhc2UiU0VUIjpCW24uc2xpY2UoLTEpWzBdXT1xKHIuZGF0YS52YWx1ZSksbz0hMDticmVhaztjYXNlIkFQUExZIjpvPWMuYXBwbHkoQixFKTticmVhaztjYXNlIkNPTlNUUlVDVCI6e2xldCBhPW5ldyBjKC4uLkUpO289bXQoYSl9YnJlYWs7Y2FzZSJFTkRQT0lOVCI6e2xldHtwb3J0MTphLHBvcnQyOkN9PW5ldyBNZXNzYWdlQ2hhbm5lbDtFQShBLEMpLG89SEEoYSxbYV0pfWJyZWFrO2Nhc2UiUkVMRUFTRSI6bz12b2lkIDA7YnJlYWs7ZGVmYXVsdDpyZXR1cm59fWNhdGNoKEIpe289e3ZhbHVlOkIsW3NBXTowfX1Qcm9taXNlLnJlc29sdmUobykuY2F0Y2goQj0+KHt2YWx1ZTpCLFtzQV06MH0pKS50aGVuKEI9PntsZXRbYyxhXT1RQShCKTtlLnBvc3RNZXNzYWdlKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSxjKSx7aWQ6aX0pLGEpLGc9PT0iUkVMRUFTRSImJihlLnJlbW92ZUV2ZW50TGlzdGVuZXIoIm1lc3NhZ2UiLEkpLHVlKGUpLE1BIGluIEEmJnR5cGVvZiBBW01BXT09ImZ1bmN0aW9uIiYmQVtNQV0oKSl9KS5jYXRjaChCPT57bGV0W2MsYV09UUEoe3ZhbHVlOm5ldyBUeXBlRXJyb3IoIlVuc2VyaWFsaXphYmxlIHJldHVybiB2YWx1ZSIpLFtzQV06MH0pO2UucG9zdE1lc3NhZ2UoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LGMpLHtpZDppfSksYSl9KX0pLGUuc3RhcnQmJmUuc3RhcnQoKX1mdW5jdGlvbiBmdChBKXtyZXR1cm4gQS5jb25zdHJ1Y3Rvci5uYW1lPT09Ik1lc3NhZ2VQb3J0In1mdW5jdGlvbiB1ZShBKXtmdChBKSYmQS5jbG9zZSgpfWZ1bmN0aW9uIGx0KEEsZSl7cmV0dXJuIGJBKEEsW10sZSl9ZnVuY3Rpb24gYUEoQSl7aWYoQSl0aHJvdyBuZXcgRXJyb3IoIlByb3h5IGhhcyBiZWVuIHJlbGVhc2VkIGFuZCBpcyBub3QgdXNlYWJsZSIpfWZ1bmN0aW9uIGhlKEEpe3JldHVybiB4KEEse3R5cGU6IlJFTEVBU0UifSkudGhlbigoKT0+e3VlKEEpfSl9dmFyIENBPW5ldyBXZWFrTWFwLEJBPSJGaW5hbGl6YXRpb25SZWdpc3RyeSJpbiBnbG9iYWxUaGlzJiZuZXcgRmluYWxpemF0aW9uUmVnaXN0cnkoQT0+e2xldCBlPShDQS5nZXQoQSl8fDApLTE7Q0Euc2V0KEEsZSksZT09PTAmJmhlKEEpfSk7ZnVuY3Rpb24gdXQoQSxlKXtsZXQgdD0oQ0EuZ2V0KGUpfHwwKSsxO0NBLnNldChlLHQpLEJBJiZCQS5yZWdpc3RlcihBLGUsQSl9ZnVuY3Rpb24gaHQoQSl7QkEmJkJBLnVucmVnaXN0ZXIoQSl9ZnVuY3Rpb24gYkEoQSxlPVtdLHQ9ZnVuY3Rpb24oKXt9KXtsZXQgST0hMSxyPW5ldyBQcm94eSh0LHtnZXQoaSxnKXtpZihhQShJKSxnPT09QnQpcmV0dXJuKCk9PntodChyKSxoZShBKSxJPSEwfTtpZihnPT09InRoZW4iKXtpZihlLmxlbmd0aD09PTApcmV0dXJue3RoZW46KCk9PnJ9O2xldCBuPXgoQSx7dHlwZToiR0VUIixwYXRoOmUubWFwKEU9PkUudG9TdHJpbmcoKSl9KS50aGVuKHEpO3JldHVybiBuLnRoZW4uYmluZChuKX1yZXR1cm4gYkEoQSxbLi4uZSxnXSl9LHNldChpLGcsbil7YUEoSSk7bGV0W0Usb109UUEobik7cmV0dXJuIHgoQSx7dHlwZToiU0VUIixwYXRoOlsuLi5lLGddLm1hcChCPT5CLnRvU3RyaW5nKCkpLHZhbHVlOkV9LG8pLnRoZW4ocSl9LGFwcGx5KGksZyxuKXthQShJKTtsZXQgRT1lW2UubGVuZ3RoLTFdO2lmKEU9PT1DdClyZXR1cm4geChBLHt0eXBlOiJFTkRQT0lOVCJ9KS50aGVuKHEpO2lmKEU9PT0iYmluZCIpcmV0dXJuIGJBKEEsZS5zbGljZSgwLC0xKSk7bGV0W28sQl09RWUobik7cmV0dXJuIHgoQSx7dHlwZToiQVBQTFkiLHBhdGg6ZS5tYXAoYz0+Yy50b1N0cmluZygpKSxhcmd1bWVudExpc3Q6b30sQikudGhlbihxKX0sY29uc3RydWN0KGksZyl7YUEoSSk7bGV0W24sRV09RWUoZyk7cmV0dXJuIHgoQSx7dHlwZToiQ09OU1RSVUNUIixwYXRoOmUubWFwKG89Pm8udG9TdHJpbmcoKSksYXJndW1lbnRMaXN0Om59LEUpLnRoZW4ocSl9fSk7cmV0dXJuIHV0KHIsQSkscn1mdW5jdGlvbiBkdChBKXtyZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSxBKX1mdW5jdGlvbiBFZShBKXtsZXQgZT1BLm1hcChRQSk7cmV0dXJuW2UubWFwKHQ9PnRbMF0pLGR0KGUubWFwKHQ9PnRbMV0pKV19dmFyIGRlPW5ldyBXZWFrTWFwO2Z1bmN0aW9uIEhBKEEsZSl7cmV0dXJuIGRlLnNldChBLGUpLEF9ZnVuY3Rpb24gbXQoQSl7cmV0dXJuIE9iamVjdC5hc3NpZ24oQSx7W2NlXTohMH0pfWZ1bmN0aW9uIFFBKEEpe2ZvcihsZXRbZSx0XW9mIGxlKWlmKHQuY2FuSGFuZGxlKEEpKXtsZXRbSSxyXT10LnNlcmlhbGl6ZShBKTtyZXR1cm5be3R5cGU6IkhBTkRMRVIiLG5hbWU6ZSx2YWx1ZTpJfSxyXX1yZXR1cm5be3R5cGU6IlJBVyIsdmFsdWU6QX0sZGUuZ2V0KEEpfHxbXV19ZnVuY3Rpb24gcShBKXtzd2l0Y2goQS50eXBlKXtjYXNlIkhBTkRMRVIiOnJldHVybiBsZS5nZXQoQS5uYW1lKS5kZXNlcmlhbGl6ZShBLnZhbHVlKTtjYXNlIlJBVyI6cmV0dXJuIEEudmFsdWV9fWZ1bmN0aW9uIHgoQSxlLHQpe3JldHVybiBuZXcgUHJvbWlzZShJPT57bGV0IHI9RHQoKTtBLmFkZEV2ZW50TGlzdGVuZXIoIm1lc3NhZ2UiLGZ1bmN0aW9uIGkoZyl7IWcuZGF0YXx8IWcuZGF0YS5pZHx8Zy5kYXRhLmlkIT09cnx8KEEucmVtb3ZlRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsaSksSShnLmRhdGEpKX0pLEEuc3RhcnQmJkEuc3RhcnQoKSxBLnBvc3RNZXNzYWdlKE9iamVjdC5hc3NpZ24oe2lkOnJ9LGUpLHQpfSl9ZnVuY3Rpb24gRHQoKXtyZXR1cm4gbmV3IEFycmF5KDQpLmZpbGwoMCkubWFwKCgpPT5NYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpLnRvU3RyaW5nKDE2KSkuam9pbigiLSIpfWZ1bmN0aW9uIFgoQSxlKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gQS5hcHBseShlLGFyZ3VtZW50cyl9fXZhcnt0b1N0cmluZzp5dH09T2JqZWN0LnByb3RvdHlwZSx7Z2V0UHJvdG90eXBlT2Y6VEF9PU9iamVjdCxmQT0oQT0+ZT0+e2xldCB0PXl0LmNhbGwoZSk7cmV0dXJuIEFbdF18fChBW3RdPXQuc2xpY2UoOCwtMSkudG9Mb3dlckNhc2UoKSl9KShPYmplY3QuY3JlYXRlKG51bGwpKSxVPUE9PihBPUEudG9Mb3dlckNhc2UoKSxlPT5mQShlKT09PUEpLGxBPUE9PmU9PnR5cGVvZiBlPT09QSx7aXNBcnJheTpQfT1BcnJheSx2PWxBKCJ1bmRlZmluZWQiKTtmdW5jdGlvbiB3dChBKXtyZXR1cm4gQSE9PW51bGwmJiF2KEEpJiZBLmNvbnN0cnVjdG9yIT09bnVsbCYmIXYoQS5jb25zdHJ1Y3RvcikmJlIoQS5jb25zdHJ1Y3Rvci5pc0J1ZmZlcikmJkEuY29uc3RydWN0b3IuaXNCdWZmZXIoQSl9dmFyIHdlPVUoIkFycmF5QnVmZmVyIik7ZnVuY3Rpb24gcHQoQSl7bGV0IGU7cmV0dXJuIHR5cGVvZiBBcnJheUJ1ZmZlcjwidSImJkFycmF5QnVmZmVyLmlzVmlldz9lPUFycmF5QnVmZmVyLmlzVmlldyhBKTplPUEmJkEuYnVmZmVyJiZ3ZShBLmJ1ZmZlciksZX12YXIgRnQ9bEEoInN0cmluZyIpLFI9bEEoImZ1bmN0aW9uIikscGU9bEEoIm51bWJlciIpLHVBPUE9PkEhPT1udWxsJiZ0eXBlb2YgQT09Im9iamVjdCIsU3Q9QT0+QT09PSEwfHxBPT09ITEsY0E9QT0+e2lmKGZBKEEpIT09Im9iamVjdCIpcmV0dXJuITE7bGV0IGU9VEEoQSk7cmV0dXJuKGU9PT1udWxsfHxlPT09T2JqZWN0LnByb3RvdHlwZXx8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpPT09bnVsbCkmJiEoU3ltYm9sLnRvU3RyaW5nVGFnIGluIEEpJiYhKFN5bWJvbC5pdGVyYXRvciBpbiBBKX0sTnQ9VSgiRGF0ZSIpLFJ0PVUoIkZpbGUiKSxHdD1VKCJCbG9iIiksVXQ9VSgiRmlsZUxpc3QiKSxrdD1BPT51QShBKSYmUihBLnBpcGUpLEx0PUE9PntsZXQgZTtyZXR1cm4gQSYmKHR5cGVvZiBGb3JtRGF0YT09ImZ1bmN0aW9uIiYmQSBpbnN0YW5jZW9mIEZvcm1EYXRhfHxSKEEuYXBwZW5kKSYmKChlPWZBKEEpKT09PSJmb3JtZGF0YSJ8fGU9PT0ib2JqZWN0IiYmUihBLnRvU3RyaW5nKSYmQS50b1N0cmluZygpPT09IltvYmplY3QgRm9ybURhdGFdIikpfSxPdD1VKCJVUkxTZWFyY2hQYXJhbXMiKSxKdD1BPT5BLnRyaW0/QS50cmltKCk6QS5yZXBsYWNlKC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZywiIik7ZnVuY3Rpb24gJChBLGUse2FsbE93bktleXM6dD0hMX09e30pe2lmKEE9PT1udWxsfHx0eXBlb2YgQT4idSIpcmV0dXJuO2xldCBJLHI7aWYodHlwZW9mIEEhPSJvYmplY3QiJiYoQT1bQV0pLFAoQSkpZm9yKEk9MCxyPUEubGVuZ3RoO0k8cjtJKyspZS5jYWxsKG51bGwsQVtJXSxJLEEpO2Vsc2V7bGV0IGk9dD9PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhBKTpPYmplY3Qua2V5cyhBKSxnPWkubGVuZ3RoLG47Zm9yKEk9MDtJPGc7SSsrKW49aVtJXSxlLmNhbGwobnVsbCxBW25dLG4sQSl9fWZ1bmN0aW9uIEZlKEEsZSl7ZT1lLnRvTG93ZXJDYXNlKCk7bGV0IHQ9T2JqZWN0LmtleXMoQSksST10Lmxlbmd0aCxyO2Zvcig7SS0tID4wOylpZihyPXRbSV0sZT09PXIudG9Mb3dlckNhc2UoKSlyZXR1cm4gcjtyZXR1cm4gbnVsbH12YXIgU2U9KCgpPT50eXBlb2YgZ2xvYmFsVGhpczwidSI/Z2xvYmFsVGhpczp0eXBlb2Ygc2VsZjwidSI/c2VsZjp0eXBlb2Ygd2luZG93PCJ1Ij93aW5kb3c6Z2xvYmFsKSgpLE5lPUE9PiF2KEEpJiZBIT09U2U7ZnVuY3Rpb24gcUEoKXtsZXR7Y2FzZWxlc3M6QX09TmUodGhpcykmJnRoaXN8fHt9LGU9e30sdD0oSSxyKT0+e2xldCBpPUEmJkZlKGUscil8fHI7Y0EoZVtpXSkmJmNBKEkpP2VbaV09cUEoZVtpXSxJKTpjQShJKT9lW2ldPXFBKHt9LEkpOlAoSSk/ZVtpXT1JLnNsaWNlKCk6ZVtpXT1JfTtmb3IobGV0IEk9MCxyPWFyZ3VtZW50cy5sZW5ndGg7STxyO0krKylhcmd1bWVudHNbSV0mJiQoYXJndW1lbnRzW0ldLHQpO3JldHVybiBlfXZhciBNdD0oQSxlLHQse2FsbE93bktleXM6SX09e30pPT4oJChlLChyLGkpPT57dCYmUihyKT9BW2ldPVgocix0KTpBW2ldPXJ9LHthbGxPd25LZXlzOkl9KSxBKSxidD1BPT4oQS5jaGFyQ29kZUF0KDApPT09NjUyNzkmJihBPUEuc2xpY2UoMSkpLEEpLEh0PShBLGUsdCxJKT0+e0EucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZS5wcm90b3R5cGUsSSksQS5wcm90b3R5cGUuY29uc3RydWN0b3I9QSxPYmplY3QuZGVmaW5lUHJvcGVydHkoQSwic3VwZXIiLHt2YWx1ZTplLnByb3RvdHlwZX0pLHQmJk9iamVjdC5hc3NpZ24oQS5wcm90b3R5cGUsdCl9LFl0PShBLGUsdCxJKT0+e2xldCByLGksZyxuPXt9O2lmKGU9ZXx8e30sQT09bnVsbClyZXR1cm4gZTtkb3tmb3Iocj1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhBKSxpPXIubGVuZ3RoO2ktLSA+MDspZz1yW2ldLCghSXx8SShnLEEsZSkpJiYhbltnXSYmKGVbZ109QVtnXSxuW2ddPSEwKTtBPXQhPT0hMSYmVEEoQSl9d2hpbGUoQSYmKCF0fHx0KEEsZSkpJiZBIT09T2JqZWN0LnByb3RvdHlwZSk7cmV0dXJuIGV9LHF0PShBLGUsdCk9PntBPVN0cmluZyhBKSwodD09PXZvaWQgMHx8dD5BLmxlbmd0aCkmJih0PUEubGVuZ3RoKSx0LT1lLmxlbmd0aDtsZXQgST1BLmluZGV4T2YoZSx0KTtyZXR1cm4gSSE9PS0xJiZJPT09dH0sVHQ9QT0+e2lmKCFBKXJldHVybiBudWxsO2lmKFAoQSkpcmV0dXJuIEE7bGV0IGU9QS5sZW5ndGg7aWYoIXBlKGUpKXJldHVybiBudWxsO2xldCB0PW5ldyBBcnJheShlKTtmb3IoO2UtLSA+MDspdFtlXT1BW2VdO3JldHVybiB0fSxLdD0oQT0+ZT0+QSYmZSBpbnN0YW5jZW9mIEEpKHR5cGVvZiBVaW50OEFycmF5PCJ1IiYmVEEoVWludDhBcnJheSkpLHh0PShBLGUpPT57bGV0IEk9KEEmJkFbU3ltYm9sLml0ZXJhdG9yXSkuY2FsbChBKSxyO2Zvcig7KHI9SS5uZXh0KCkpJiYhci5kb25lOyl7bGV0IGk9ci52YWx1ZTtlLmNhbGwoQSxpWzBdLGlbMV0pfX0sUHQ9KEEsZSk9PntsZXQgdCxJPVtdO2Zvcig7KHQ9QS5leGVjKGUpKSE9PW51bGw7KUkucHVzaCh0KTtyZXR1cm4gSX0sV3Q9VSgiSFRNTEZvcm1FbGVtZW50IiksanQ9QT0+QS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1stX1xcc10oW2EtelxcZF0pKFxcdyopL2csZnVuY3Rpb24odCxJLHIpe3JldHVybiBJLnRvVXBwZXJDYXNlKCkrcn0pLERlPSgoe2hhc093blByb3BlcnR5OkF9KT0+KGUsdCk9PkEuY2FsbChlLHQpKShPYmplY3QucHJvdG90eXBlKSxadD1VKCJSZWdFeHAiKSxSZT0oQSxlKT0+e2xldCB0PU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKEEpLEk9e307JCh0LChyLGkpPT57ZShyLGksQSkhPT0hMSYmKElbaV09cil9KSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyhBLEkpfSxfdD1BPT57UmUoQSwoZSx0KT0+e2lmKFIoQSkmJlsiYXJndW1lbnRzIiwiY2FsbGVyIiwiY2FsbGVlIl0uaW5kZXhPZih0KSE9PS0xKXJldHVybiExO2xldCBJPUFbdF07aWYoUihJKSl7aWYoZS5lbnVtZXJhYmxlPSExLCJ3cml0YWJsZSJpbiBlKXtlLndyaXRhYmxlPSExO3JldHVybn1lLnNldHx8KGUuc2V0PSgpPT57dGhyb3cgRXJyb3IoIkNhbiBub3QgcmV3cml0ZSByZWFkLW9ubHkgbWV0aG9kIFwnIit0KyJcJyIpfSl9fSl9LFZ0PShBLGUpPT57bGV0IHQ9e30sST1yPT57ci5mb3JFYWNoKGk9Pnt0W2ldPSEwfSl9O3JldHVybiBQKEEpP0koQSk6SShTdHJpbmcoQSkuc3BsaXQoZSkpLHR9LHp0PSgpPT57fSxYdD0oQSxlKT0+KEE9K0EsTnVtYmVyLmlzRmluaXRlKEEpP0E6ZSksWUE9ImFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6Iix5ZT0iMDEyMzQ1Njc4OSIsR2U9e0RJR0lUOnllLEFMUEhBOllBLEFMUEhBX0RJR0lUOllBK1lBLnRvVXBwZXJDYXNlKCkreWV9LHZ0PShBPTE2LGU9R2UuQUxQSEFfRElHSVQpPT57bGV0IHQ9IiIse2xlbmd0aDpJfT1lO2Zvcig7QS0tOyl0Kz1lW01hdGgucmFuZG9tKCkqSXwwXTtyZXR1cm4gdH07ZnVuY3Rpb24gJHQoQSl7cmV0dXJuISEoQSYmUihBLmFwcGVuZCkmJkFbU3ltYm9sLnRvU3RyaW5nVGFnXT09PSJGb3JtRGF0YSImJkFbU3ltYm9sLml0ZXJhdG9yXSl9dmFyIEFJPUE9PntsZXQgZT1uZXcgQXJyYXkoMTApLHQ9KEkscik9PntpZih1QShJKSl7aWYoZS5pbmRleE9mKEkpPj0wKXJldHVybjtpZighKCJ0b0pTT04iaW4gSSkpe2Vbcl09STtsZXQgaT1QKEkpP1tdOnt9O3JldHVybiAkKEksKGcsbik9PntsZXQgRT10KGcscisxKTshdihFKSYmKGlbbl09RSl9KSxlW3JdPXZvaWQgMCxpfX1yZXR1cm4gSX07cmV0dXJuIHQoQSwwKX0sZUk9VSgiQXN5bmNGdW5jdGlvbiIpLHRJPUE9PkEmJih1QShBKXx8UihBKSkmJlIoQS50aGVuKSYmUihBLmNhdGNoKSxzPXtpc0FycmF5OlAsaXNBcnJheUJ1ZmZlcjp3ZSxpc0J1ZmZlcjp3dCxpc0Zvcm1EYXRhOkx0LGlzQXJyYXlCdWZmZXJWaWV3OnB0LGlzU3RyaW5nOkZ0LGlzTnVtYmVyOnBlLGlzQm9vbGVhbjpTdCxpc09iamVjdDp1QSxpc1BsYWluT2JqZWN0OmNBLGlzVW5kZWZpbmVkOnYsaXNEYXRlOk50LGlzRmlsZTpSdCxpc0Jsb2I6R3QsaXNSZWdFeHA6WnQsaXNGdW5jdGlvbjpSLGlzU3RyZWFtOmt0LGlzVVJMU2VhcmNoUGFyYW1zOk90LGlzVHlwZWRBcnJheTpLdCxpc0ZpbGVMaXN0OlV0LGZvckVhY2g6JCxtZXJnZTpxQSxleHRlbmQ6TXQsdHJpbTpKdCxzdHJpcEJPTTpidCxpbmhlcml0czpIdCx0b0ZsYXRPYmplY3Q6WXQsa2luZE9mOmZBLGtpbmRPZlRlc3Q6VSxlbmRzV2l0aDpxdCx0b0FycmF5OlR0LGZvckVhY2hFbnRyeTp4dCxtYXRjaEFsbDpQdCxpc0hUTUxGb3JtOld0LGhhc093blByb3BlcnR5OkRlLGhhc093blByb3A6RGUscmVkdWNlRGVzY3JpcHRvcnM6UmUsZnJlZXplTWV0aG9kczpfdCx0b09iamVjdFNldDpWdCx0b0NhbWVsQ2FzZTpqdCxub29wOnp0LHRvRmluaXRlTnVtYmVyOlh0LGZpbmRLZXk6RmUsZ2xvYmFsOlNlLGlzQ29udGV4dERlZmluZWQ6TmUsQUxQSEFCRVQ6R2UsZ2VuZXJhdGVTdHJpbmc6dnQsaXNTcGVjQ29tcGxpYW50Rm9ybTokdCx0b0pTT05PYmplY3Q6QUksaXNBc3luY0ZuOmVJLGlzVGhlbmFibGU6dEl9O2Z1bmN0aW9uIFcoQSxlLHQsSSxyKXtFcnJvci5jYWxsKHRoaXMpLEVycm9yLmNhcHR1cmVTdGFja1RyYWNlP0Vycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsdGhpcy5jb25zdHJ1Y3Rvcik6dGhpcy5zdGFjaz1uZXcgRXJyb3IoKS5zdGFjayx0aGlzLm1lc3NhZ2U9QSx0aGlzLm5hbWU9IkF4aW9zRXJyb3IiLGUmJih0aGlzLmNvZGU9ZSksdCYmKHRoaXMuY29uZmlnPXQpLEkmJih0aGlzLnJlcXVlc3Q9SSksciYmKHRoaXMucmVzcG9uc2U9cil9cy5pbmhlcml0cyhXLEVycm9yLHt0b0pTT046ZnVuY3Rpb24oKXtyZXR1cm57bWVzc2FnZTp0aGlzLm1lc3NhZ2UsbmFtZTp0aGlzLm5hbWUsZGVzY3JpcHRpb246dGhpcy5kZXNjcmlwdGlvbixudW1iZXI6dGhpcy5udW1iZXIsZmlsZU5hbWU6dGhpcy5maWxlTmFtZSxsaW5lTnVtYmVyOnRoaXMubGluZU51bWJlcixjb2x1bW5OdW1iZXI6dGhpcy5jb2x1bW5OdW1iZXIsc3RhY2s6dGhpcy5zdGFjayxjb25maWc6cy50b0pTT05PYmplY3QodGhpcy5jb25maWcpLGNvZGU6dGhpcy5jb2RlLHN0YXR1czp0aGlzLnJlc3BvbnNlJiZ0aGlzLnJlc3BvbnNlLnN0YXR1cz90aGlzLnJlc3BvbnNlLnN0YXR1czpudWxsfX19KTt2YXIgVWU9Vy5wcm90b3R5cGUsa2U9e307WyJFUlJfQkFEX09QVElPTl9WQUxVRSIsIkVSUl9CQURfT1BUSU9OIiwiRUNPTk5BQk9SVEVEIiwiRVRJTUVET1VUIiwiRVJSX05FVFdPUksiLCJFUlJfRlJfVE9PX01BTllfUkVESVJFQ1RTIiwiRVJSX0RFUFJFQ0FURUQiLCJFUlJfQkFEX1JFU1BPTlNFIiwiRVJSX0JBRF9SRVFVRVNUIiwiRVJSX0NBTkNFTEVEIiwiRVJSX05PVF9TVVBQT1JUIiwiRVJSX0lOVkFMSURfVVJMIl0uZm9yRWFjaChBPT57a2VbQV09e3ZhbHVlOkF9fSk7T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoVyxrZSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KFVlLCJpc0F4aW9zRXJyb3IiLHt2YWx1ZTohMH0pO1cuZnJvbT0oQSxlLHQsSSxyLGkpPT57bGV0IGc9T2JqZWN0LmNyZWF0ZShVZSk7cmV0dXJuIHMudG9GbGF0T2JqZWN0KEEsZyxmdW5jdGlvbihFKXtyZXR1cm4gRSE9PUVycm9yLnByb3RvdHlwZX0sbj0+biE9PSJpc0F4aW9zRXJyb3IiKSxXLmNhbGwoZyxBLm1lc3NhZ2UsZSx0LEksciksZy5jYXVzZT1BLGcubmFtZT1BLm5hbWUsaSYmT2JqZWN0LmFzc2lnbihnLGkpLGd9O3ZhciBsPVc7dmFyIGhBPW51bGw7ZnVuY3Rpb24gS0EoQSl7cmV0dXJuIHMuaXNQbGFpbk9iamVjdChBKXx8cy5pc0FycmF5KEEpfWZ1bmN0aW9uIE9lKEEpe3JldHVybiBzLmVuZHNXaXRoKEEsIltdIik/QS5zbGljZSgwLC0yKTpBfWZ1bmN0aW9uIExlKEEsZSx0KXtyZXR1cm4gQT9BLmNvbmNhdChlKS5tYXAoZnVuY3Rpb24ocixpKXtyZXR1cm4gcj1PZShyKSwhdCYmaT8iWyIrcisiXSI6cn0pLmpvaW4odD8iLiI6IiIpOmV9ZnVuY3Rpb24gSUkoQSl7cmV0dXJuIHMuaXNBcnJheShBKSYmIUEuc29tZShLQSl9dmFyIHJJPXMudG9GbGF0T2JqZWN0KHMse30sbnVsbCxmdW5jdGlvbihlKXtyZXR1cm4vXmlzW0EtWl0vLnRlc3QoZSl9KTtmdW5jdGlvbiBpSShBLGUsdCl7aWYoIXMuaXNPYmplY3QoQSkpdGhyb3cgbmV3IFR5cGVFcnJvcigidGFyZ2V0IG11c3QgYmUgYW4gb2JqZWN0Iik7ZT1lfHxuZXcoaEF8fEZvcm1EYXRhKSx0PXMudG9GbGF0T2JqZWN0KHQse21ldGFUb2tlbnM6ITAsZG90czohMSxpbmRleGVzOiExfSwhMSxmdW5jdGlvbihmLG0pe3JldHVybiFzLmlzVW5kZWZpbmVkKG1bZl0pfSk7bGV0IEk9dC5tZXRhVG9rZW5zLHI9dC52aXNpdG9yfHxCLGk9dC5kb3RzLGc9dC5pbmRleGVzLEU9KHQuQmxvYnx8dHlwZW9mIEJsb2I8InUiJiZCbG9iKSYmcy5pc1NwZWNDb21wbGlhbnRGb3JtKGUpO2lmKCFzLmlzRnVuY3Rpb24ocikpdGhyb3cgbmV3IFR5cGVFcnJvcigidmlzaXRvciBtdXN0IGJlIGEgZnVuY3Rpb24iKTtmdW5jdGlvbiBvKFEpe2lmKFE9PT1udWxsKXJldHVybiIiO2lmKHMuaXNEYXRlKFEpKXJldHVybiBRLnRvSVNPU3RyaW5nKCk7aWYoIUUmJnMuaXNCbG9iKFEpKXRocm93IG5ldyBsKCJCbG9iIGlzIG5vdCBzdXBwb3J0ZWQuIFVzZSBhIEJ1ZmZlciBpbnN0ZWFkLiIpO3JldHVybiBzLmlzQXJyYXlCdWZmZXIoUSl8fHMuaXNUeXBlZEFycmF5KFEpP0UmJnR5cGVvZiBCbG9iPT0iZnVuY3Rpb24iP25ldyBCbG9iKFtRXSk6QnVmZmVyLmZyb20oUSk6UX1mdW5jdGlvbiBCKFEsZixtKXtsZXQgdz1RO2lmKFEmJiFtJiZ0eXBlb2YgUT09Im9iamVjdCIpe2lmKHMuZW5kc1dpdGgoZiwie30iKSlmPUk/ZjpmLnNsaWNlKDAsLTIpLFE9SlNPTi5zdHJpbmdpZnkoUSk7ZWxzZSBpZihzLmlzQXJyYXkoUSkmJklJKFEpfHwocy5pc0ZpbGVMaXN0KFEpfHxzLmVuZHNXaXRoKGYsIltdIikpJiYodz1zLnRvQXJyYXkoUSkpKXJldHVybiBmPU9lKGYpLHcuZm9yRWFjaChmdW5jdGlvbihLLEpBKXshKHMuaXNVbmRlZmluZWQoSyl8fEs9PT1udWxsKSYmZS5hcHBlbmQoZz09PSEwP0xlKFtmXSxKQSxpKTpnPT09bnVsbD9mOmYrIltdIixvKEspKX0pLCExfXJldHVybiBLQShRKT8hMDooZS5hcHBlbmQoTGUobSxmLGkpLG8oUSkpLCExKX1sZXQgYz1bXSxhPU9iamVjdC5hc3NpZ24ockkse2RlZmF1bHRWaXNpdG9yOkIsY29udmVydFZhbHVlOm8saXNWaXNpdGFibGU6S0F9KTtmdW5jdGlvbiBDKFEsZil7aWYoIXMuaXNVbmRlZmluZWQoUSkpe2lmKGMuaW5kZXhPZihRKSE9PS0xKXRocm93IEVycm9yKCJDaXJjdWxhciByZWZlcmVuY2UgZGV0ZWN0ZWQgaW4gIitmLmpvaW4oIi4iKSk7Yy5wdXNoKFEpLHMuZm9yRWFjaChRLGZ1bmN0aW9uKHcsTyl7KCEocy5pc1VuZGVmaW5lZCh3KXx8dz09PW51bGwpJiZyLmNhbGwoZSx3LHMuaXNTdHJpbmcoTyk/Ty50cmltKCk6TyxmLGEpKT09PSEwJiZDKHcsZj9mLmNvbmNhdChPKTpbT10pfSksYy5wb3AoKX19aWYoIXMuaXNPYmplY3QoQSkpdGhyb3cgbmV3IFR5cGVFcnJvcigiZGF0YSBtdXN0IGJlIGFuIG9iamVjdCIpO3JldHVybiBDKEEpLGV9dmFyIEo9aUk7ZnVuY3Rpb24gSmUoQSl7bGV0IGU9eyIhIjoiJTI1MjEiLCJcJyI6IiUyNTI3IiwiKCI6IiUyNTI4IiwiKSI6IiUyNTI5IiwifiI6IiUyNTdFIiwiJTI1MjAiOiIrIiwiJTI1MDAiOiJcXDAifTtyZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KEEpLnJlcGxhY2UoL1shXCcoKX5dfCUyNTIwfCUyNTAwL2csZnVuY3Rpb24oSSl7cmV0dXJuIGVbSV19KX1mdW5jdGlvbiBNZShBLGUpe3RoaXMuX3BhaXJzPVtdLEEmJkooQSx0aGlzLGUpfXZhciBiZT1NZS5wcm90b3R5cGU7YmUuYXBwZW5kPWZ1bmN0aW9uKGUsdCl7dGhpcy5fcGFpcnMucHVzaChbZSx0XSl9O2JlLnRvU3RyaW5nPWZ1bmN0aW9uKGUpe2xldCB0PWU/ZnVuY3Rpb24oSSl7cmV0dXJuIGUuY2FsbCh0aGlzLEksSmUpfTpKZTtyZXR1cm4gdGhpcy5fcGFpcnMubWFwKGZ1bmN0aW9uKHIpe3JldHVybiB0KHJbMF0pKyI9Iit0KHJbMV0pfSwiIikuam9pbigiJiIpfTt2YXIgZEE9TWU7ZnVuY3Rpb24gZ0koQSl7cmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChBKS5yZXBsYWNlKC8lMjUzQS9naSwiOiIpLnJlcGxhY2UoLyUyNTI0L2csIiQiKS5yZXBsYWNlKC8lMjUyQy9naSwiLCIpLnJlcGxhY2UoLyUyNTIwL2csIisiKS5yZXBsYWNlKC8lMjU1Qi9naSwiWyIpLnJlcGxhY2UoLyUyNTVEL2dpLCJdIil9ZnVuY3Rpb24gQUEoQSxlLHQpe2lmKCFlKXJldHVybiBBO2xldCBJPXQmJnQuZW5jb2RlfHxnSSxyPXQmJnQuc2VyaWFsaXplLGk7aWYocj9pPXIoZSx0KTppPXMuaXNVUkxTZWFyY2hQYXJhbXMoZSk/ZS50b1N0cmluZygpOm5ldyBkQShlLHQpLnRvU3RyaW5nKEkpLGkpe2xldCBnPUEuaW5kZXhPZigiJTIzIik7ZyE9PS0xJiYoQT1BLnNsaWNlKDAsZykpLEErPShBLmluZGV4T2YoIj8iKT09PS0xPyI/IjoiJiIpK2l9cmV0dXJuIEF9dmFyIHhBPWNsYXNze2NvbnN0cnVjdG9yKCl7dGhpcy5oYW5kbGVycz1bXX11c2UoZSx0LEkpe3JldHVybiB0aGlzLmhhbmRsZXJzLnB1c2goe2Z1bGZpbGxlZDplLHJlamVjdGVkOnQsc3luY2hyb25vdXM6ST9JLnN5bmNocm9ub3VzOiExLHJ1bldoZW46ST9JLnJ1bldoZW46bnVsbH0pLHRoaXMuaGFuZGxlcnMubGVuZ3RoLTF9ZWplY3QoZSl7dGhpcy5oYW5kbGVyc1tlXSYmKHRoaXMuaGFuZGxlcnNbZV09bnVsbCl9Y2xlYXIoKXt0aGlzLmhhbmRsZXJzJiYodGhpcy5oYW5kbGVycz1bXSl9Zm9yRWFjaChlKXtzLmZvckVhY2godGhpcy5oYW5kbGVycyxmdW5jdGlvbihJKXtJIT09bnVsbCYmZShJKX0pfX0sUEE9eEE7dmFyIG1BPXtzaWxlbnRKU09OUGFyc2luZzohMCxmb3JjZWRKU09OUGFyc2luZzohMCxjbGFyaWZ5VGltZW91dEVycm9yOiExfTt2YXIgSGU9dHlwZW9mIFVSTFNlYXJjaFBhcmFtczwidSI/VVJMU2VhcmNoUGFyYW1zOmRBO3ZhciBZZT10eXBlb2YgRm9ybURhdGE8InUiP0Zvcm1EYXRhOm51bGw7dmFyIHFlPXR5cGVvZiBCbG9iPCJ1Ij9CbG9iOm51bGw7dmFyIG9JPSgoKT0+e2xldCBBO3JldHVybiB0eXBlb2YgbmF2aWdhdG9yPCJ1IiYmKChBPW5hdmlnYXRvci5wcm9kdWN0KT09PSJSZWFjdE5hdGl2ZSJ8fEE9PT0iTmF0aXZlU2NyaXB0Inx8QT09PSJOUyIpPyExOnR5cGVvZiB3aW5kb3c8InUiJiZ0eXBlb2YgZG9jdW1lbnQ8InUifSkoKSxuST0oKCk9PnR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZTwidSImJnNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSYmdHlwZW9mIHNlbGYuaW1wb3J0U2NyaXB0cz09ImZ1bmN0aW9uIikoKSxEPXtpc0Jyb3dzZXI6ITAsY2xhc3Nlczp7VVJMU2VhcmNoUGFyYW1zOkhlLEZvcm1EYXRhOlllLEJsb2I6cWV9LGlzU3RhbmRhcmRCcm93c2VyRW52Om9JLGlzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52Om5JLHByb3RvY29sczpbImh0dHAiLCJodHRwcyIsImZpbGUiLCJibG9iIiwidXJsIiwiZGF0YSJdfTtmdW5jdGlvbiBXQShBLGUpe3JldHVybiBKKEEsbmV3IEQuY2xhc3Nlcy5VUkxTZWFyY2hQYXJhbXMsT2JqZWN0LmFzc2lnbih7dmlzaXRvcjpmdW5jdGlvbih0LEkscixpKXtyZXR1cm4gRC5pc05vZGUmJnMuaXNCdWZmZXIodCk/KHRoaXMuYXBwZW5kKEksdC50b1N0cmluZygiYmFzZTY0IikpLCExKTppLmRlZmF1bHRWaXNpdG9yLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19LGUpKX1mdW5jdGlvbiBhSShBKXtyZXR1cm4gcy5tYXRjaEFsbCgvXFx3K3xcXFsoXFx3KildL2csQSkubWFwKGU9PmVbMF09PT0iW10iPyIiOmVbMV18fGVbMF0pfWZ1bmN0aW9uIHNJKEEpe2xldCBlPXt9LHQ9T2JqZWN0LmtleXMoQSksSSxyPXQubGVuZ3RoLGk7Zm9yKEk9MDtJPHI7SSsrKWk9dFtJXSxlW2ldPUFbaV07cmV0dXJuIGV9ZnVuY3Rpb24gQ0koQSl7ZnVuY3Rpb24gZSh0LEkscixpKXtsZXQgZz10W2krK10sbj1OdW1iZXIuaXNGaW5pdGUoK2cpLEU9aT49dC5sZW5ndGg7cmV0dXJuIGc9IWcmJnMuaXNBcnJheShyKT9yLmxlbmd0aDpnLEU/KHMuaGFzT3duUHJvcChyLGcpP3JbZ109W3JbZ10sSV06cltnXT1JLCFuKTooKCFyW2ddfHwhcy5pc09iamVjdChyW2ddKSkmJihyW2ddPVtdKSxlKHQsSSxyW2ddLGkpJiZzLmlzQXJyYXkocltnXSkmJihyW2ddPXNJKHJbZ10pKSwhbil9aWYocy5pc0Zvcm1EYXRhKEEpJiZzLmlzRnVuY3Rpb24oQS5lbnRyaWVzKSl7bGV0IHQ9e307cmV0dXJuIHMuZm9yRWFjaEVudHJ5KEEsKEkscik9PntlKGFJKEkpLHIsdCwwKX0pLHR9cmV0dXJuIG51bGx9dmFyIERBPUNJO3ZhciBCST17IkNvbnRlbnQtVHlwZSI6dm9pZCAwfTtmdW5jdGlvbiBRSShBLGUsdCl7aWYocy5pc1N0cmluZyhBKSl0cnl7cmV0dXJuKGV8fEpTT04ucGFyc2UpKEEpLHMudHJpbShBKX1jYXRjaChJKXtpZihJLm5hbWUhPT0iU3ludGF4RXJyb3IiKXRocm93IEl9cmV0dXJuKHR8fEpTT04uc3RyaW5naWZ5KShBKX12YXIgeUE9e3RyYW5zaXRpb25hbDptQSxhZGFwdGVyOlsieGhyIiwiaHR0cCJdLHRyYW5zZm9ybVJlcXVlc3Q6W2Z1bmN0aW9uKGUsdCl7bGV0IEk9dC5nZXRDb250ZW50VHlwZSgpfHwiIixyPUkuaW5kZXhPZigiYXBwbGljYXRpb24vanNvbiIpPi0xLGk9cy5pc09iamVjdChlKTtpZihpJiZzLmlzSFRNTEZvcm0oZSkmJihlPW5ldyBGb3JtRGF0YShlKSkscy5pc0Zvcm1EYXRhKGUpKXJldHVybiByJiZyP0pTT04uc3RyaW5naWZ5KERBKGUpKTplO2lmKHMuaXNBcnJheUJ1ZmZlcihlKXx8cy5pc0J1ZmZlcihlKXx8cy5pc1N0cmVhbShlKXx8cy5pc0ZpbGUoZSl8fHMuaXNCbG9iKGUpKXJldHVybiBlO2lmKHMuaXNBcnJheUJ1ZmZlclZpZXcoZSkpcmV0dXJuIGUuYnVmZmVyO2lmKHMuaXNVUkxTZWFyY2hQYXJhbXMoZSkpcmV0dXJuIHQuc2V0Q29udGVudFR5cGUoImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04IiwhMSksZS50b1N0cmluZygpO2xldCBuO2lmKGkpe2lmKEkuaW5kZXhPZigiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIik+LTEpcmV0dXJuIFdBKGUsdGhpcy5mb3JtU2VyaWFsaXplcikudG9TdHJpbmcoKTtpZigobj1zLmlzRmlsZUxpc3QoZSkpfHxJLmluZGV4T2YoIm11bHRpcGFydC9mb3JtLWRhdGEiKT4tMSl7bGV0IEU9dGhpcy5lbnYmJnRoaXMuZW52LkZvcm1EYXRhO3JldHVybiBKKG4/eyJmaWxlc1tdIjplfTplLEUmJm5ldyBFLHRoaXMuZm9ybVNlcmlhbGl6ZXIpfX1yZXR1cm4gaXx8cj8odC5zZXRDb250ZW50VHlwZSgiYXBwbGljYXRpb24vanNvbiIsITEpLFFJKGUpKTplfV0sdHJhbnNmb3JtUmVzcG9uc2U6W2Z1bmN0aW9uKGUpe2xldCB0PXRoaXMudHJhbnNpdGlvbmFsfHx5QS50cmFuc2l0aW9uYWwsST10JiZ0LmZvcmNlZEpTT05QYXJzaW5nLHI9dGhpcy5yZXNwb25zZVR5cGU9PT0ianNvbiI7aWYoZSYmcy5pc1N0cmluZyhlKSYmKEkmJiF0aGlzLnJlc3BvbnNlVHlwZXx8cikpe2xldCBnPSEodCYmdC5zaWxlbnRKU09OUGFyc2luZykmJnI7dHJ5e3JldHVybiBKU09OLnBhcnNlKGUpfWNhdGNoKG4pe2lmKGcpdGhyb3cgbi5uYW1lPT09IlN5bnRheEVycm9yIj9sLmZyb20obixsLkVSUl9CQURfUkVTUE9OU0UsdGhpcyxudWxsLHRoaXMucmVzcG9uc2UpOm59fXJldHVybiBlfV0sdGltZW91dDowLHhzcmZDb29raWVOYW1lOiJYU1JGLVRPS0VOIix4c3JmSGVhZGVyTmFtZToiWC1YU1JGLVRPS0VOIixtYXhDb250ZW50TGVuZ3RoOi0xLG1heEJvZHlMZW5ndGg6LTEsZW52OntGb3JtRGF0YTpELmNsYXNzZXMuRm9ybURhdGEsQmxvYjpELmNsYXNzZXMuQmxvYn0sdmFsaWRhdGVTdGF0dXM6ZnVuY3Rpb24oZSl7cmV0dXJuIGU+PTIwMCYmZTwzMDB9LGhlYWRlcnM6e2NvbW1vbjp7QWNjZXB0OiJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyoifX19O3MuZm9yRWFjaChbImRlbGV0ZSIsImdldCIsImhlYWQiXSxmdW5jdGlvbihlKXt5QS5oZWFkZXJzW2VdPXt9fSk7cy5mb3JFYWNoKFsicG9zdCIsInB1dCIsInBhdGNoIl0sZnVuY3Rpb24oZSl7eUEuaGVhZGVyc1tlXT1zLm1lcmdlKEJJKX0pO3ZhciBqPXlBO3ZhciBFST1zLnRvT2JqZWN0U2V0KFsiYWdlIiwiYXV0aG9yaXphdGlvbiIsImNvbnRlbnQtbGVuZ3RoIiwiY29udGVudC10eXBlIiwiZXRhZyIsImV4cGlyZXMiLCJmcm9tIiwiaG9zdCIsImlmLW1vZGlmaWVkLXNpbmNlIiwiaWYtdW5tb2RpZmllZC1zaW5jZSIsImxhc3QtbW9kaWZpZWQiLCJsb2NhdGlvbiIsIm1heC1mb3J3YXJkcyIsInByb3h5LWF1dGhvcml6YXRpb24iLCJyZWZlcmVyIiwicmV0cnktYWZ0ZXIiLCJ1c2VyLWFnZW50Il0pLFRlPUE9PntsZXQgZT17fSx0LEkscjtyZXR1cm4gQSYmQS5zcGxpdChgJTBBYCkuZm9yRWFjaChmdW5jdGlvbihnKXtyPWcuaW5kZXhPZigiOiIpLHQ9Zy5zdWJzdHJpbmcoMCxyKS50cmltKCkudG9Mb3dlckNhc2UoKSxJPWcuc3Vic3RyaW5nKHIrMSkudHJpbSgpLCEoIXR8fGVbdF0mJkVJW3RdKSYmKHQ9PT0ic2V0LWNvb2tpZSI/ZVt0XT9lW3RdLnB1c2goSSk6ZVt0XT1bSV06ZVt0XT1lW3RdP2VbdF0rIiwgIitJOkkpfSksZX07dmFyIEtlPVN5bWJvbCgiaW50ZXJuYWxzIik7ZnVuY3Rpb24gZUEoQSl7cmV0dXJuIEEmJlN0cmluZyhBKS50cmltKCkudG9Mb3dlckNhc2UoKX1mdW5jdGlvbiB3QShBKXtyZXR1cm4gQT09PSExfHxBPT1udWxsP0E6cy5pc0FycmF5KEEpP0EubWFwKHdBKTpTdHJpbmcoQSl9ZnVuY3Rpb24gY0koQSl7bGV0IGU9T2JqZWN0LmNyZWF0ZShudWxsKSx0PS8oW15cXHMsOz1dKylcXHMqKD86PVxccyooW14sO10rKSk/L2csSTtmb3IoO0k9dC5leGVjKEEpOyllW0lbMV1dPUlbMl07cmV0dXJuIGV9dmFyIGZJPUE9Pi9eWy1fYS16QS1aMC05XmB8fiwhJTIzJCUmXCcqKy5dKyQvLnRlc3QoQS50cmltKCkpO2Z1bmN0aW9uIGpBKEEsZSx0LEkscil7aWYocy5pc0Z1bmN0aW9uKEkpKXJldHVybiBJLmNhbGwodGhpcyxlLHQpO2lmKHImJihlPXQpLCEhcy5pc1N0cmluZyhlKSl7aWYocy5pc1N0cmluZyhJKSlyZXR1cm4gZS5pbmRleE9mKEkpIT09LTE7aWYocy5pc1JlZ0V4cChJKSlyZXR1cm4gSS50ZXN0KGUpfX1mdW5jdGlvbiBsSShBKXtyZXR1cm4gQS50cmltKCkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8oW2EtelxcZF0pKFxcdyopL2csKGUsdCxJKT0+dC50b1VwcGVyQ2FzZSgpK0kpfWZ1bmN0aW9uIHVJKEEsZSl7bGV0IHQ9cy50b0NhbWVsQ2FzZSgiICIrZSk7WyJnZXQiLCJzZXQiLCJoYXMiXS5mb3JFYWNoKEk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkoQSxJK3Qse3ZhbHVlOmZ1bmN0aW9uKHIsaSxnKXtyZXR1cm4gdGhpc1tJXS5jYWxsKHRoaXMsZSxyLGksZyl9LGNvbmZpZ3VyYWJsZTohMH0pfSl9dmFyIFo9Y2xhc3N7Y29uc3RydWN0b3IoZSl7ZSYmdGhpcy5zZXQoZSl9c2V0KGUsdCxJKXtsZXQgcj10aGlzO2Z1bmN0aW9uIGkobixFLG8pe2xldCBCPWVBKEUpO2lmKCFCKXRocm93IG5ldyBFcnJvcigiaGVhZGVyIG5hbWUgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmciKTtsZXQgYz1zLmZpbmRLZXkocixCKTsoIWN8fHJbY109PT12b2lkIDB8fG89PT0hMHx8bz09PXZvaWQgMCYmcltjXSE9PSExKSYmKHJbY3x8RV09d0EobikpfWxldCBnPShuLEUpPT5zLmZvckVhY2gobiwobyxCKT0+aShvLEIsRSkpO3JldHVybiBzLmlzUGxhaW5PYmplY3QoZSl8fGUgaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yP2coZSx0KTpzLmlzU3RyaW5nKGUpJiYoZT1lLnRyaW0oKSkmJiFmSShlKT9nKFRlKGUpLHQpOmUhPW51bGwmJmkodCxlLEkpLHRoaXN9Z2V0KGUsdCl7aWYoZT1lQShlKSxlKXtsZXQgST1zLmZpbmRLZXkodGhpcyxlKTtpZihJKXtsZXQgcj10aGlzW0ldO2lmKCF0KXJldHVybiByO2lmKHQ9PT0hMClyZXR1cm4gY0kocik7aWYocy5pc0Z1bmN0aW9uKHQpKXJldHVybiB0LmNhbGwodGhpcyxyLEkpO2lmKHMuaXNSZWdFeHAodCkpcmV0dXJuIHQuZXhlYyhyKTt0aHJvdyBuZXcgVHlwZUVycm9yKCJwYXJzZXIgbXVzdCBiZSBib29sZWFufHJlZ2V4cHxmdW5jdGlvbiIpfX19aGFzKGUsdCl7aWYoZT1lQShlKSxlKXtsZXQgST1zLmZpbmRLZXkodGhpcyxlKTtyZXR1cm4hIShJJiZ0aGlzW0ldIT09dm9pZCAwJiYoIXR8fGpBKHRoaXMsdGhpc1tJXSxJLHQpKSl9cmV0dXJuITF9ZGVsZXRlKGUsdCl7bGV0IEk9dGhpcyxyPSExO2Z1bmN0aW9uIGkoZyl7aWYoZz1lQShnKSxnKXtsZXQgbj1zLmZpbmRLZXkoSSxnKTtuJiYoIXR8fGpBKEksSVtuXSxuLHQpKSYmKGRlbGV0ZSBJW25dLHI9ITApfX1yZXR1cm4gcy5pc0FycmF5KGUpP2UuZm9yRWFjaChpKTppKGUpLHJ9Y2xlYXIoZSl7bGV0IHQ9T2JqZWN0LmtleXModGhpcyksST10Lmxlbmd0aCxyPSExO2Zvcig7SS0tOyl7bGV0IGk9dFtJXTsoIWV8fGpBKHRoaXMsdGhpc1tpXSxpLGUsITApKSYmKGRlbGV0ZSB0aGlzW2ldLHI9ITApfXJldHVybiByfW5vcm1hbGl6ZShlKXtsZXQgdD10aGlzLEk9e307cmV0dXJuIHMuZm9yRWFjaCh0aGlzLChyLGkpPT57bGV0IGc9cy5maW5kS2V5KEksaSk7aWYoZyl7dFtnXT13QShyKSxkZWxldGUgdFtpXTtyZXR1cm59bGV0IG49ZT9sSShpKTpTdHJpbmcoaSkudHJpbSgpO24hPT1pJiZkZWxldGUgdFtpXSx0W25dPXdBKHIpLElbbl09ITB9KSx0aGlzfWNvbmNhdCguLi5lKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5jb25jYXQodGhpcywuLi5lKX10b0pTT04oZSl7bGV0IHQ9T2JqZWN0LmNyZWF0ZShudWxsKTtyZXR1cm4gcy5mb3JFYWNoKHRoaXMsKEkscik9PntJIT1udWxsJiZJIT09ITEmJih0W3JdPWUmJnMuaXNBcnJheShJKT9JLmpvaW4oIiwgIik6SSl9KSx0fVtTeW1ib2wuaXRlcmF0b3JdKCl7cmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMudG9KU09OKCkpW1N5bWJvbC5pdGVyYXRvcl0oKX10b1N0cmluZygpe3JldHVybiBPYmplY3QuZW50cmllcyh0aGlzLnRvSlNPTigpKS5tYXAoKFtlLHRdKT0+ZSsiOiAiK3QpLmpvaW4oYCUwQWApfWdldFtTeW1ib2wudG9TdHJpbmdUYWddKCl7cmV0dXJuIkF4aW9zSGVhZGVycyJ9c3RhdGljIGZyb20oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiB0aGlzP2U6bmV3IHRoaXMoZSl9c3RhdGljIGNvbmNhdChlLC4uLnQpe2xldCBJPW5ldyB0aGlzKGUpO3JldHVybiB0LmZvckVhY2gocj0+SS5zZXQocikpLEl9c3RhdGljIGFjY2Vzc29yKGUpe2xldCBJPSh0aGlzW0tlXT10aGlzW0tlXT17YWNjZXNzb3JzOnt9fSkuYWNjZXNzb3JzLHI9dGhpcy5wcm90b3R5cGU7ZnVuY3Rpb24gaShnKXtsZXQgbj1lQShnKTtJW25dfHwodUkocixnKSxJW25dPSEwKX1yZXR1cm4gcy5pc0FycmF5KGUpP2UuZm9yRWFjaChpKTppKGUpLHRoaXN9fTtaLmFjY2Vzc29yKFsiQ29udGVudC1UeXBlIiwiQ29udGVudC1MZW5ndGgiLCJBY2NlcHQiLCJBY2NlcHQtRW5jb2RpbmciLCJVc2VyLUFnZW50IiwiQXV0aG9yaXphdGlvbiJdKTtzLmZyZWV6ZU1ldGhvZHMoWi5wcm90b3R5cGUpO3MuZnJlZXplTWV0aG9kcyhaKTt2YXIgcD1aO2Z1bmN0aW9uIHRBKEEsZSl7bGV0IHQ9dGhpc3x8aixJPWV8fHQscj1wLmZyb20oSS5oZWFkZXJzKSxpPUkuZGF0YTtyZXR1cm4gcy5mb3JFYWNoKEEsZnVuY3Rpb24obil7aT1uLmNhbGwodCxpLHIubm9ybWFsaXplKCksZT9lLnN0YXR1czp2b2lkIDApfSksci5ub3JtYWxpemUoKSxpfWZ1bmN0aW9uIElBKEEpe3JldHVybiEhKEEmJkEuX19DQU5DRUxfXyl9ZnVuY3Rpb24geGUoQSxlLHQpe2wuY2FsbCh0aGlzLEE/PyJjYW5jZWxlZCIsbC5FUlJfQ0FOQ0VMRUQsZSx0KSx0aGlzLm5hbWU9IkNhbmNlbGVkRXJyb3IifXMuaW5oZXJpdHMoeGUsbCx7X19DQU5DRUxfXzohMH0pO3ZhciBNPXhlO2Z1bmN0aW9uIFpBKEEsZSx0KXtsZXQgST10LmNvbmZpZy52YWxpZGF0ZVN0YXR1czshdC5zdGF0dXN8fCFJfHxJKHQuc3RhdHVzKT9BKHQpOmUobmV3IGwoIlJlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgIit0LnN0YXR1cyxbbC5FUlJfQkFEX1JFUVVFU1QsbC5FUlJfQkFEX1JFU1BPTlNFXVtNYXRoLmZsb29yKHQuc3RhdHVzLzEwMCktNF0sdC5jb25maWcsdC5yZXF1ZXN0LHQpKX12YXIgUGU9RC5pc1N0YW5kYXJkQnJvd3NlckVudj9mdW5jdGlvbigpe3JldHVybnt3cml0ZTpmdW5jdGlvbih0LEkscixpLGcsbil7bGV0IEU9W107RS5wdXNoKHQrIj0iK2VuY29kZVVSSUNvbXBvbmVudChJKSkscy5pc051bWJlcihyKSYmRS5wdXNoKCJleHBpcmVzPSIrbmV3IERhdGUocikudG9HTVRTdHJpbmcoKSkscy5pc1N0cmluZyhpKSYmRS5wdXNoKCJwYXRoPSIraSkscy5pc1N0cmluZyhnKSYmRS5wdXNoKCJkb21haW49IitnKSxuPT09ITAmJkUucHVzaCgic2VjdXJlIiksZG9jdW1lbnQuY29va2llPUUuam9pbigiOyAiKX0scmVhZDpmdW5jdGlvbih0KXtsZXQgST1kb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgiKF58O1xcXFxzKikoIit0KyIpPShbXjtdKikiKSk7cmV0dXJuIEk/ZGVjb2RlVVJJQ29tcG9uZW50KElbM10pOm51bGx9LHJlbW92ZTpmdW5jdGlvbih0KXt0aGlzLndyaXRlKHQsIiIsRGF0ZS5ub3coKS04NjRlNSl9fX0oKTpmdW5jdGlvbigpe3JldHVybnt3cml0ZTpmdW5jdGlvbigpe30scmVhZDpmdW5jdGlvbigpe3JldHVybiBudWxsfSxyZW1vdmU6ZnVuY3Rpb24oKXt9fX0oKTtmdW5jdGlvbiBfQShBKXtyZXR1cm4vXihbYS16XVthLXpcXGQrXFwtLl0qOik/XFwvXFwvL2kudGVzdChBKX1mdW5jdGlvbiBWQShBLGUpe3JldHVybiBlP0EucmVwbGFjZSgvXFwvKyQvLCIiKSsiLyIrZS5yZXBsYWNlKC9eXFwvKy8sIiIpOkF9ZnVuY3Rpb24gckEoQSxlKXtyZXR1cm4gQSYmIV9BKGUpP1ZBKEEsZSk6ZX12YXIgV2U9RC5pc1N0YW5kYXJkQnJvd3NlckVudj9mdW5jdGlvbigpe2xldCBlPS8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJhIiksSTtmdW5jdGlvbiByKGkpe2xldCBnPWk7cmV0dXJuIGUmJih0LnNldEF0dHJpYnV0ZSgiaHJlZiIsZyksZz10LmhyZWYpLHQuc2V0QXR0cmlidXRlKCJocmVmIixnKSx7aHJlZjp0LmhyZWYscHJvdG9jb2w6dC5wcm90b2NvbD90LnByb3RvY29sLnJlcGxhY2UoLzokLywiIik6IiIsaG9zdDp0Lmhvc3Qsc2VhcmNoOnQuc2VhcmNoP3Quc2VhcmNoLnJlcGxhY2UoL15cXD8vLCIiKToiIixoYXNoOnQuaGFzaD90Lmhhc2gucmVwbGFjZSgvXiUyMy8sIiIpOiIiLGhvc3RuYW1lOnQuaG9zdG5hbWUscG9ydDp0LnBvcnQscGF0aG5hbWU6dC5wYXRobmFtZS5jaGFyQXQoMCk9PT0iLyI/dC5wYXRobmFtZToiLyIrdC5wYXRobmFtZX19cmV0dXJuIEk9cih3aW5kb3cubG9jYXRpb24uaHJlZiksZnVuY3Rpb24oZyl7bGV0IG49cy5pc1N0cmluZyhnKT9yKGcpOmc7cmV0dXJuIG4ucHJvdG9jb2w9PT1JLnByb3RvY29sJiZuLmhvc3Q9PT1JLmhvc3R9fSgpOmZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuITB9fSgpO2Z1bmN0aW9uIHpBKEEpe2xldCBlPS9eKFstK1xcd117MSwyNX0pKDo/XFwvXFwvfDopLy5leGVjKEEpO3JldHVybiBlJiZlWzFdfHwiIn1mdW5jdGlvbiBoSShBLGUpe0E9QXx8MTA7bGV0IHQ9bmV3IEFycmF5KEEpLEk9bmV3IEFycmF5KEEpLHI9MCxpPTAsZztyZXR1cm4gZT1lIT09dm9pZCAwP2U6MWUzLGZ1bmN0aW9uKEUpe2xldCBvPURhdGUubm93KCksQj1JW2ldO2d8fChnPW8pLHRbcl09RSxJW3JdPW87bGV0IGM9aSxhPTA7Zm9yKDtjIT09cjspYSs9dFtjKytdLGM9YyVBO2lmKHI9KHIrMSklQSxyPT09aSYmKGk9KGkrMSklQSksby1nPGUpcmV0dXJuO2xldCBDPUImJm8tQjtyZXR1cm4gQz9NYXRoLnJvdW5kKGEqMWUzL0MpOnZvaWQgMH19dmFyIGplPWhJO2Z1bmN0aW9uIFplKEEsZSl7bGV0IHQ9MCxJPWplKDUwLDI1MCk7cmV0dXJuIHI9PntsZXQgaT1yLmxvYWRlZCxnPXIubGVuZ3RoQ29tcHV0YWJsZT9yLnRvdGFsOnZvaWQgMCxuPWktdCxFPUkobiksbz1pPD1nO3Q9aTtsZXQgQj17bG9hZGVkOmksdG90YWw6Zyxwcm9ncmVzczpnP2kvZzp2b2lkIDAsYnl0ZXM6bixyYXRlOkV8fHZvaWQgMCxlc3RpbWF0ZWQ6RSYmZyYmbz8oZy1pKS9FOnZvaWQgMCxldmVudDpyfTtCW2U/ImRvd25sb2FkIjoidXBsb2FkIl09ITAsQShCKX19dmFyIGRJPXR5cGVvZiBYTUxIdHRwUmVxdWVzdDwidSIsX2U9ZEkmJmZ1bmN0aW9uKEEpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbih0LEkpe2xldCByPUEuZGF0YSxpPXAuZnJvbShBLmhlYWRlcnMpLm5vcm1hbGl6ZSgpLGc9QS5yZXNwb25zZVR5cGUsbjtmdW5jdGlvbiBFKCl7QS5jYW5jZWxUb2tlbiYmQS5jYW5jZWxUb2tlbi51bnN1YnNjcmliZShuKSxBLnNpZ25hbCYmQS5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigiYWJvcnQiLG4pfXMuaXNGb3JtRGF0YShyKSYmKEQuaXNTdGFuZGFyZEJyb3dzZXJFbnZ8fEQuaXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnY/aS5zZXRDb250ZW50VHlwZSghMSk6aS5zZXRDb250ZW50VHlwZSgibXVsdGlwYXJ0L2Zvcm0tZGF0YTsiLCExKSk7bGV0IG89bmV3IFhNTEh0dHBSZXF1ZXN0O2lmKEEuYXV0aCl7bGV0IEM9QS5hdXRoLnVzZXJuYW1lfHwiIixRPUEuYXV0aC5wYXNzd29yZD91bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoQS5hdXRoLnBhc3N3b3JkKSk6IiI7aS5zZXQoIkF1dGhvcml6YXRpb24iLCJCYXNpYyAiK2J0b2EoQysiOiIrUSkpfWxldCBCPXJBKEEuYmFzZVVSTCxBLnVybCk7by5vcGVuKEEubWV0aG9kLnRvVXBwZXJDYXNlKCksQUEoQixBLnBhcmFtcyxBLnBhcmFtc1NlcmlhbGl6ZXIpLCEwKSxvLnRpbWVvdXQ9QS50aW1lb3V0O2Z1bmN0aW9uIGMoKXtpZighbylyZXR1cm47bGV0IEM9cC5mcm9tKCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiaW4gbyYmby5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSksZj17ZGF0YTohZ3x8Zz09PSJ0ZXh0Inx8Zz09PSJqc29uIj9vLnJlc3BvbnNlVGV4dDpvLnJlc3BvbnNlLHN0YXR1czpvLnN0YXR1cyxzdGF0dXNUZXh0Om8uc3RhdHVzVGV4dCxoZWFkZXJzOkMsY29uZmlnOkEscmVxdWVzdDpvfTtaQShmdW5jdGlvbih3KXt0KHcpLEUoKX0sZnVuY3Rpb24odyl7SSh3KSxFKCl9LGYpLG89bnVsbH1pZigib25sb2FkZW5kImluIG8/by5vbmxvYWRlbmQ9YzpvLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpeyFvfHxvLnJlYWR5U3RhdGUhPT00fHxvLnN0YXR1cz09PTAmJiEoby5yZXNwb25zZVVSTCYmby5yZXNwb25zZVVSTC5pbmRleE9mKCJmaWxlOiIpPT09MCl8fHNldFRpbWVvdXQoYyl9LG8ub25hYm9ydD1mdW5jdGlvbigpe28mJihJKG5ldyBsKCJSZXF1ZXN0IGFib3J0ZWQiLGwuRUNPTk5BQk9SVEVELEEsbykpLG89bnVsbCl9LG8ub25lcnJvcj1mdW5jdGlvbigpe0kobmV3IGwoIk5ldHdvcmsgRXJyb3IiLGwuRVJSX05FVFdPUkssQSxvKSksbz1udWxsfSxvLm9udGltZW91dD1mdW5jdGlvbigpe2xldCBRPUEudGltZW91dD8idGltZW91dCBvZiAiK0EudGltZW91dCsibXMgZXhjZWVkZWQiOiJ0aW1lb3V0IGV4Y2VlZGVkIixmPUEudHJhbnNpdGlvbmFsfHxtQTtBLnRpbWVvdXRFcnJvck1lc3NhZ2UmJihRPUEudGltZW91dEVycm9yTWVzc2FnZSksSShuZXcgbChRLGYuY2xhcmlmeVRpbWVvdXRFcnJvcj9sLkVUSU1FRE9VVDpsLkVDT05OQUJPUlRFRCxBLG8pKSxvPW51bGx9LEQuaXNTdGFuZGFyZEJyb3dzZXJFbnYpe2xldCBDPShBLndpdGhDcmVkZW50aWFsc3x8V2UoQikpJiZBLnhzcmZDb29raWVOYW1lJiZQZS5yZWFkKEEueHNyZkNvb2tpZU5hbWUpO0MmJmkuc2V0KEEueHNyZkhlYWRlck5hbWUsQyl9cj09PXZvaWQgMCYmaS5zZXRDb250ZW50VHlwZShudWxsKSwic2V0UmVxdWVzdEhlYWRlciJpbiBvJiZzLmZvckVhY2goaS50b0pTT04oKSxmdW5jdGlvbihRLGYpe28uc2V0UmVxdWVzdEhlYWRlcihmLFEpfSkscy5pc1VuZGVmaW5lZChBLndpdGhDcmVkZW50aWFscyl8fChvLndpdGhDcmVkZW50aWFscz0hIUEud2l0aENyZWRlbnRpYWxzKSxnJiZnIT09Impzb24iJiYoby5yZXNwb25zZVR5cGU9QS5yZXNwb25zZVR5cGUpLHR5cGVvZiBBLm9uRG93bmxvYWRQcm9ncmVzcz09ImZ1bmN0aW9uIiYmby5hZGRFdmVudExpc3RlbmVyKCJwcm9ncmVzcyIsWmUoQS5vbkRvd25sb2FkUHJvZ3Jlc3MsITApKSx0eXBlb2YgQS5vblVwbG9hZFByb2dyZXNzPT0iZnVuY3Rpb24iJiZvLnVwbG9hZCYmby51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigicHJvZ3Jlc3MiLFplKEEub25VcGxvYWRQcm9ncmVzcykpLChBLmNhbmNlbFRva2VufHxBLnNpZ25hbCkmJihuPUM9PntvJiYoSSghQ3x8Qy50eXBlP25ldyBNKG51bGwsQSxvKTpDKSxvLmFib3J0KCksbz1udWxsKX0sQS5jYW5jZWxUb2tlbiYmQS5jYW5jZWxUb2tlbi5zdWJzY3JpYmUobiksQS5zaWduYWwmJihBLnNpZ25hbC5hYm9ydGVkP24oKTpBLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCJhYm9ydCIsbikpKTtsZXQgYT16QShCKTtpZihhJiZELnByb3RvY29scy5pbmRleE9mKGEpPT09LTEpe0kobmV3IGwoIlVuc3VwcG9ydGVkIHByb3RvY29sICIrYSsiOiIsbC5FUlJfQkFEX1JFUVVFU1QsQSkpO3JldHVybn1vLnNlbmQocnx8bnVsbCl9KX07dmFyIHBBPXtodHRwOmhBLHhocjpfZX07cy5mb3JFYWNoKHBBLChBLGUpPT57aWYoQSl7dHJ5e09iamVjdC5kZWZpbmVQcm9wZXJ0eShBLCJuYW1lIix7dmFsdWU6ZX0pfWNhdGNoe31PYmplY3QuZGVmaW5lUHJvcGVydHkoQSwiYWRhcHRlck5hbWUiLHt2YWx1ZTplfSl9fSk7dmFyIFZlPXtnZXRBZGFwdGVyOkE9PntBPXMuaXNBcnJheShBKT9BOltBXTtsZXR7bGVuZ3RoOmV9PUEsdCxJO2ZvcihsZXQgcj0wO3I8ZSYmKHQ9QVtyXSwhKEk9cy5pc1N0cmluZyh0KT9wQVt0LnRvTG93ZXJDYXNlKCldOnQpKTtyKyspO2lmKCFJKXRocm93IEk9PT0hMT9uZXcgbChgQWRhcHRlciAke3R9IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGVudmlyb25tZW50YCwiRVJSX05PVF9TVVBQT1JUIik6bmV3IEVycm9yKHMuaGFzT3duUHJvcChwQSx0KT9gQWRhcHRlciBcJyR7dH1cJyBpcyBub3QgYXZhaWxhYmxlIGluIHRoZSBidWlsZGA6YFVua25vd24gYWRhcHRlciBcJyR7dH1cJ2ApO2lmKCFzLmlzRnVuY3Rpb24oSSkpdGhyb3cgbmV3IFR5cGVFcnJvcigiYWRhcHRlciBpcyBub3QgYSBmdW5jdGlvbiIpO3JldHVybiBJfSxhZGFwdGVyczpwQX07ZnVuY3Rpb24gWEEoQSl7aWYoQS5jYW5jZWxUb2tlbiYmQS5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCksQS5zaWduYWwmJkEuc2lnbmFsLmFib3J0ZWQpdGhyb3cgbmV3IE0obnVsbCxBKX1mdW5jdGlvbiBGQShBKXtyZXR1cm4gWEEoQSksQS5oZWFkZXJzPXAuZnJvbShBLmhlYWRlcnMpLEEuZGF0YT10QS5jYWxsKEEsQS50cmFuc2Zvcm1SZXF1ZXN0KSxbInBvc3QiLCJwdXQiLCJwYXRjaCJdLmluZGV4T2YoQS5tZXRob2QpIT09LTEmJkEuaGVhZGVycy5zZXRDb250ZW50VHlwZSgiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIiwhMSksVmUuZ2V0QWRhcHRlcihBLmFkYXB0ZXJ8fGouYWRhcHRlcikoQSkudGhlbihmdW5jdGlvbihJKXtyZXR1cm4gWEEoQSksSS5kYXRhPXRBLmNhbGwoQSxBLnRyYW5zZm9ybVJlc3BvbnNlLEkpLEkuaGVhZGVycz1wLmZyb20oSS5oZWFkZXJzKSxJfSxmdW5jdGlvbihJKXtyZXR1cm4gSUEoSSl8fChYQShBKSxJJiZJLnJlc3BvbnNlJiYoSS5yZXNwb25zZS5kYXRhPXRBLmNhbGwoQSxBLnRyYW5zZm9ybVJlc3BvbnNlLEkucmVzcG9uc2UpLEkucmVzcG9uc2UuaGVhZGVycz1wLmZyb20oSS5yZXNwb25zZS5oZWFkZXJzKSkpLFByb21pc2UucmVqZWN0KEkpfSl9dmFyIHplPUE9PkEgaW5zdGFuY2VvZiBwP0EudG9KU09OKCk6QTtmdW5jdGlvbiBrKEEsZSl7ZT1lfHx7fTtsZXQgdD17fTtmdW5jdGlvbiBJKG8sQixjKXtyZXR1cm4gcy5pc1BsYWluT2JqZWN0KG8pJiZzLmlzUGxhaW5PYmplY3QoQik/cy5tZXJnZS5jYWxsKHtjYXNlbGVzczpjfSxvLEIpOnMuaXNQbGFpbk9iamVjdChCKT9zLm1lcmdlKHt9LEIpOnMuaXNBcnJheShCKT9CLnNsaWNlKCk6Qn1mdW5jdGlvbiByKG8sQixjKXtpZihzLmlzVW5kZWZpbmVkKEIpKXtpZighcy5pc1VuZGVmaW5lZChvKSlyZXR1cm4gSSh2b2lkIDAsbyxjKX1lbHNlIHJldHVybiBJKG8sQixjKX1mdW5jdGlvbiBpKG8sQil7aWYoIXMuaXNVbmRlZmluZWQoQikpcmV0dXJuIEkodm9pZCAwLEIpfWZ1bmN0aW9uIGcobyxCKXtpZihzLmlzVW5kZWZpbmVkKEIpKXtpZighcy5pc1VuZGVmaW5lZChvKSlyZXR1cm4gSSh2b2lkIDAsbyl9ZWxzZSByZXR1cm4gSSh2b2lkIDAsQil9ZnVuY3Rpb24gbihvLEIsYyl7aWYoYyBpbiBlKXJldHVybiBJKG8sQik7aWYoYyBpbiBBKXJldHVybiBJKHZvaWQgMCxvKX1sZXQgRT17dXJsOmksbWV0aG9kOmksZGF0YTppLGJhc2VVUkw6Zyx0cmFuc2Zvcm1SZXF1ZXN0OmcsdHJhbnNmb3JtUmVzcG9uc2U6ZyxwYXJhbXNTZXJpYWxpemVyOmcsdGltZW91dDpnLHRpbWVvdXRNZXNzYWdlOmcsd2l0aENyZWRlbnRpYWxzOmcsYWRhcHRlcjpnLHJlc3BvbnNlVHlwZTpnLHhzcmZDb29raWVOYW1lOmcseHNyZkhlYWRlck5hbWU6ZyxvblVwbG9hZFByb2dyZXNzOmcsb25Eb3dubG9hZFByb2dyZXNzOmcsZGVjb21wcmVzczpnLG1heENvbnRlbnRMZW5ndGg6ZyxtYXhCb2R5TGVuZ3RoOmcsYmVmb3JlUmVkaXJlY3Q6Zyx0cmFuc3BvcnQ6ZyxodHRwQWdlbnQ6ZyxodHRwc0FnZW50OmcsY2FuY2VsVG9rZW46Zyxzb2NrZXRQYXRoOmcscmVzcG9uc2VFbmNvZGluZzpnLHZhbGlkYXRlU3RhdHVzOm4saGVhZGVyczoobyxCKT0+cih6ZShvKSx6ZShCKSwhMCl9O3JldHVybiBzLmZvckVhY2goT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSxBLGUpKSxmdW5jdGlvbihCKXtsZXQgYz1FW0JdfHxyLGE9YyhBW0JdLGVbQl0sQik7cy5pc1VuZGVmaW5lZChhKSYmYyE9PW58fCh0W0JdPWEpfSksdH12YXIgU0E9IjEuNC4wIjt2YXIgdkE9e307WyJvYmplY3QiLCJib29sZWFuIiwibnVtYmVyIiwiZnVuY3Rpb24iLCJzdHJpbmciLCJzeW1ib2wiXS5mb3JFYWNoKChBLGUpPT57dkFbQV09ZnVuY3Rpb24oSSl7cmV0dXJuIHR5cGVvZiBJPT09QXx8ImEiKyhlPDE/Im4gIjoiICIpK0F9fSk7dmFyIFhlPXt9O3ZBLnRyYW5zaXRpb25hbD1mdW5jdGlvbihlLHQsSSl7ZnVuY3Rpb24gcihpLGcpe3JldHVybiJbQXhpb3MgdiIrU0ErIl0gVHJhbnNpdGlvbmFsIG9wdGlvbiBcJyIraSsiXCciK2crKEk/Ii4gIitJOiIiKX1yZXR1cm4oaSxnLG4pPT57aWYoZT09PSExKXRocm93IG5ldyBsKHIoZywiIGhhcyBiZWVuIHJlbW92ZWQiKyh0PyIgaW4gIit0OiIiKSksbC5FUlJfREVQUkVDQVRFRCk7cmV0dXJuIHQmJiFYZVtnXSYmKFhlW2ddPSEwLGNvbnNvbGUud2FybihyKGcsIiBoYXMgYmVlbiBkZXByZWNhdGVkIHNpbmNlIHYiK3QrIiBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZWFyIGZ1dHVyZSIpKSksZT9lKGksZyxuKTohMH19O2Z1bmN0aW9uIG1JKEEsZSx0KXtpZih0eXBlb2YgQSE9Im9iamVjdCIpdGhyb3cgbmV3IGwoIm9wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QiLGwuRVJSX0JBRF9PUFRJT05fVkFMVUUpO2xldCBJPU9iamVjdC5rZXlzKEEpLHI9SS5sZW5ndGg7Zm9yKDtyLS0gPjA7KXtsZXQgaT1JW3JdLGc9ZVtpXTtpZihnKXtsZXQgbj1BW2ldLEU9bj09PXZvaWQgMHx8ZyhuLGksQSk7aWYoRSE9PSEwKXRocm93IG5ldyBsKCJvcHRpb24gIitpKyIgbXVzdCBiZSAiK0UsbC5FUlJfQkFEX09QVElPTl9WQUxVRSk7Y29udGludWV9aWYodCE9PSEwKXRocm93IG5ldyBsKCJVbmtub3duIG9wdGlvbiAiK2ksbC5FUlJfQkFEX09QVElPTil9fXZhciBOQT17YXNzZXJ0T3B0aW9uczptSSx2YWxpZGF0b3JzOnZBfTt2YXIgYj1OQS52YWxpZGF0b3JzLF89Y2xhc3N7Y29uc3RydWN0b3IoZSl7dGhpcy5kZWZhdWx0cz1lLHRoaXMuaW50ZXJjZXB0b3JzPXtyZXF1ZXN0Om5ldyBQQSxyZXNwb25zZTpuZXcgUEF9fXJlcXVlc3QoZSx0KXt0eXBlb2YgZT09InN0cmluZyI/KHQ9dHx8e30sdC51cmw9ZSk6dD1lfHx7fSx0PWsodGhpcy5kZWZhdWx0cyx0KTtsZXR7dHJhbnNpdGlvbmFsOkkscGFyYW1zU2VyaWFsaXplcjpyLGhlYWRlcnM6aX09dDtJIT09dm9pZCAwJiZOQS5hc3NlcnRPcHRpb25zKEkse3NpbGVudEpTT05QYXJzaW5nOmIudHJhbnNpdGlvbmFsKGIuYm9vbGVhbiksZm9yY2VkSlNPTlBhcnNpbmc6Yi50cmFuc2l0aW9uYWwoYi5ib29sZWFuKSxjbGFyaWZ5VGltZW91dEVycm9yOmIudHJhbnNpdGlvbmFsKGIuYm9vbGVhbil9LCExKSxyIT1udWxsJiYocy5pc0Z1bmN0aW9uKHIpP3QucGFyYW1zU2VyaWFsaXplcj17c2VyaWFsaXplOnJ9Ok5BLmFzc2VydE9wdGlvbnMocix7ZW5jb2RlOmIuZnVuY3Rpb24sc2VyaWFsaXplOmIuZnVuY3Rpb259LCEwKSksdC5tZXRob2Q9KHQubWV0aG9kfHx0aGlzLmRlZmF1bHRzLm1ldGhvZHx8ImdldCIpLnRvTG93ZXJDYXNlKCk7bGV0IGc7Zz1pJiZzLm1lcmdlKGkuY29tbW9uLGlbdC5tZXRob2RdKSxnJiZzLmZvckVhY2goWyJkZWxldGUiLCJnZXQiLCJoZWFkIiwicG9zdCIsInB1dCIsInBhdGNoIiwiY29tbW9uIl0sUT0+e2RlbGV0ZSBpW1FdfSksdC5oZWFkZXJzPXAuY29uY2F0KGcsaSk7bGV0IG49W10sRT0hMDt0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24oZil7dHlwZW9mIGYucnVuV2hlbj09ImZ1bmN0aW9uIiYmZi5ydW5XaGVuKHQpPT09ITF8fChFPUUmJmYuc3luY2hyb25vdXMsbi51bnNoaWZ0KGYuZnVsZmlsbGVkLGYucmVqZWN0ZWQpKX0pO2xldCBvPVtdO3RoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24oZil7by5wdXNoKGYuZnVsZmlsbGVkLGYucmVqZWN0ZWQpfSk7bGV0IEIsYz0wLGE7aWYoIUUpe2xldCBRPVtGQS5iaW5kKHRoaXMpLHZvaWQgMF07Zm9yKFEudW5zaGlmdC5hcHBseShRLG4pLFEucHVzaC5hcHBseShRLG8pLGE9US5sZW5ndGgsQj1Qcm9taXNlLnJlc29sdmUodCk7YzxhOylCPUIudGhlbihRW2MrK10sUVtjKytdKTtyZXR1cm4gQn1hPW4ubGVuZ3RoO2xldCBDPXQ7Zm9yKGM9MDtjPGE7KXtsZXQgUT1uW2MrK10sZj1uW2MrK107dHJ5e0M9UShDKX1jYXRjaChtKXtmLmNhbGwodGhpcyxtKTticmVha319dHJ5e0I9RkEuY2FsbCh0aGlzLEMpfWNhdGNoKFEpe3JldHVybiBQcm9taXNlLnJlamVjdChRKX1mb3IoYz0wLGE9by5sZW5ndGg7YzxhOylCPUIudGhlbihvW2MrK10sb1tjKytdKTtyZXR1cm4gQn1nZXRVcmkoZSl7ZT1rKHRoaXMuZGVmYXVsdHMsZSk7bGV0IHQ9ckEoZS5iYXNlVVJMLGUudXJsKTtyZXR1cm4gQUEodCxlLnBhcmFtcyxlLnBhcmFtc1NlcmlhbGl6ZXIpfX07cy5mb3JFYWNoKFsiZGVsZXRlIiwiZ2V0IiwiaGVhZCIsIm9wdGlvbnMiXSxmdW5jdGlvbihlKXtfLnByb3RvdHlwZVtlXT1mdW5jdGlvbih0LEkpe3JldHVybiB0aGlzLnJlcXVlc3QoayhJfHx7fSx7bWV0aG9kOmUsdXJsOnQsZGF0YTooSXx8e30pLmRhdGF9KSl9fSk7cy5mb3JFYWNoKFsicG9zdCIsInB1dCIsInBhdGNoIl0sZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChJKXtyZXR1cm4gZnVuY3Rpb24oaSxnLG4pe3JldHVybiB0aGlzLnJlcXVlc3QoayhufHx7fSx7bWV0aG9kOmUsaGVhZGVyczpJP3siQ29udGVudC1UeXBlIjoibXVsdGlwYXJ0L2Zvcm0tZGF0YSJ9Ont9LHVybDppLGRhdGE6Z30pKX19Xy5wcm90b3R5cGVbZV09dCgpLF8ucHJvdG90eXBlW2UrIkZvcm0iXT10KCEwKX0pO3ZhciBpQT1fO3ZhciAkQT1jbGFzcyBBe2NvbnN0cnVjdG9yKGUpe2lmKHR5cGVvZiBlIT0iZnVuY3Rpb24iKXRocm93IG5ldyBUeXBlRXJyb3IoImV4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4iKTtsZXQgdDt0aGlzLnByb21pc2U9bmV3IFByb21pc2UoZnVuY3Rpb24oaSl7dD1pfSk7bGV0IEk9dGhpczt0aGlzLnByb21pc2UudGhlbihyPT57aWYoIUkuX2xpc3RlbmVycylyZXR1cm47bGV0IGk9SS5fbGlzdGVuZXJzLmxlbmd0aDtmb3IoO2ktLSA+MDspSS5fbGlzdGVuZXJzW2ldKHIpO0kuX2xpc3RlbmVycz1udWxsfSksdGhpcy5wcm9taXNlLnRoZW49cj0+e2xldCBpLGc9bmV3IFByb21pc2Uobj0+e0kuc3Vic2NyaWJlKG4pLGk9bn0pLnRoZW4ocik7cmV0dXJuIGcuY2FuY2VsPWZ1bmN0aW9uKCl7SS51bnN1YnNjcmliZShpKX0sZ30sZShmdW5jdGlvbihpLGcsbil7SS5yZWFzb258fChJLnJlYXNvbj1uZXcgTShpLGcsbiksdChJLnJlYXNvbikpfSl9dGhyb3dJZlJlcXVlc3RlZCgpe2lmKHRoaXMucmVhc29uKXRocm93IHRoaXMucmVhc29ufXN1YnNjcmliZShlKXtpZih0aGlzLnJlYXNvbil7ZSh0aGlzLnJlYXNvbik7cmV0dXJufXRoaXMuX2xpc3RlbmVycz90aGlzLl9saXN0ZW5lcnMucHVzaChlKTp0aGlzLl9saXN0ZW5lcnM9W2VdfXVuc3Vic2NyaWJlKGUpe2lmKCF0aGlzLl9saXN0ZW5lcnMpcmV0dXJuO2xldCB0PXRoaXMuX2xpc3RlbmVycy5pbmRleE9mKGUpO3QhPT0tMSYmdGhpcy5fbGlzdGVuZXJzLnNwbGljZSh0LDEpfXN0YXRpYyBzb3VyY2UoKXtsZXQgZTtyZXR1cm57dG9rZW46bmV3IEEoZnVuY3Rpb24ocil7ZT1yfSksY2FuY2VsOmV9fX0sdmU9JEE7ZnVuY3Rpb24gQWUoQSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBBLmFwcGx5KG51bGwsdCl9fWZ1bmN0aW9uIGVlKEEpe3JldHVybiBzLmlzT2JqZWN0KEEpJiZBLmlzQXhpb3NFcnJvcj09PSEwfXZhciB0ZT17Q29udGludWU6MTAwLFN3aXRjaGluZ1Byb3RvY29sczoxMDEsUHJvY2Vzc2luZzoxMDIsRWFybHlIaW50czoxMDMsT2s6MjAwLENyZWF0ZWQ6MjAxLEFjY2VwdGVkOjIwMixOb25BdXRob3JpdGF0aXZlSW5mb3JtYXRpb246MjAzLE5vQ29udGVudDoyMDQsUmVzZXRDb250ZW50OjIwNSxQYXJ0aWFsQ29udGVudDoyMDYsTXVsdGlTdGF0dXM6MjA3LEFscmVhZHlSZXBvcnRlZDoyMDgsSW1Vc2VkOjIyNixNdWx0aXBsZUNob2ljZXM6MzAwLE1vdmVkUGVybWFuZW50bHk6MzAxLEZvdW5kOjMwMixTZWVPdGhlcjozMDMsTm90TW9kaWZpZWQ6MzA0LFVzZVByb3h5OjMwNSxVbnVzZWQ6MzA2LFRlbXBvcmFyeVJlZGlyZWN0OjMwNyxQZXJtYW5lbnRSZWRpcmVjdDozMDgsQmFkUmVxdWVzdDo0MDAsVW5hdXRob3JpemVkOjQwMSxQYXltZW50UmVxdWlyZWQ6NDAyLEZvcmJpZGRlbjo0MDMsTm90Rm91bmQ6NDA0LE1ldGhvZE5vdEFsbG93ZWQ6NDA1LE5vdEFjY2VwdGFibGU6NDA2LFByb3h5QXV0aGVudGljYXRpb25SZXF1aXJlZDo0MDcsUmVxdWVzdFRpbWVvdXQ6NDA4LENvbmZsaWN0OjQwOSxHb25lOjQxMCxMZW5ndGhSZXF1aXJlZDo0MTEsUHJlY29uZGl0aW9uRmFpbGVkOjQxMixQYXlsb2FkVG9vTGFyZ2U6NDEzLFVyaVRvb0xvbmc6NDE0LFVuc3VwcG9ydGVkTWVkaWFUeXBlOjQxNSxSYW5nZU5vdFNhdGlzZmlhYmxlOjQxNixFeHBlY3RhdGlvbkZhaWxlZDo0MTcsSW1BVGVhcG90OjQxOCxNaXNkaXJlY3RlZFJlcXVlc3Q6NDIxLFVucHJvY2Vzc2FibGVFbnRpdHk6NDIyLExvY2tlZDo0MjMsRmFpbGVkRGVwZW5kZW5jeTo0MjQsVG9vRWFybHk6NDI1LFVwZ3JhZGVSZXF1aXJlZDo0MjYsUHJlY29uZGl0aW9uUmVxdWlyZWQ6NDI4LFRvb01hbnlSZXF1ZXN0czo0MjksUmVxdWVzdEhlYWRlckZpZWxkc1Rvb0xhcmdlOjQzMSxVbmF2YWlsYWJsZUZvckxlZ2FsUmVhc29uczo0NTEsSW50ZXJuYWxTZXJ2ZXJFcnJvcjo1MDAsTm90SW1wbGVtZW50ZWQ6NTAxLEJhZEdhdGV3YXk6NTAyLFNlcnZpY2VVbmF2YWlsYWJsZTo1MDMsR2F0ZXdheVRpbWVvdXQ6NTA0LEh0dHBWZXJzaW9uTm90U3VwcG9ydGVkOjUwNSxWYXJpYW50QWxzb05lZ290aWF0ZXM6NTA2LEluc3VmZmljaWVudFN0b3JhZ2U6NTA3LExvb3BEZXRlY3RlZDo1MDgsTm90RXh0ZW5kZWQ6NTEwLE5ldHdvcmtBdXRoZW50aWNhdGlvblJlcXVpcmVkOjUxMX07T2JqZWN0LmVudHJpZXModGUpLmZvckVhY2goKFtBLGVdKT0+e3RlW2VdPUF9KTt2YXIgJGU9dGU7ZnVuY3Rpb24gQXQoQSl7bGV0IGU9bmV3IGlBKEEpLHQ9WChpQS5wcm90b3R5cGUucmVxdWVzdCxlKTtyZXR1cm4gcy5leHRlbmQodCxpQS5wcm90b3R5cGUsZSx7YWxsT3duS2V5czohMH0pLHMuZXh0ZW5kKHQsZSxudWxsLHthbGxPd25LZXlzOiEwfSksdC5jcmVhdGU9ZnVuY3Rpb24ocil7cmV0dXJuIEF0KGsoQSxyKSl9LHR9dmFyIGg9QXQoaik7aC5BeGlvcz1pQTtoLkNhbmNlbGVkRXJyb3I9TTtoLkNhbmNlbFRva2VuPXZlO2guaXNDYW5jZWw9SUE7aC5WRVJTSU9OPVNBO2gudG9Gb3JtRGF0YT1KO2guQXhpb3NFcnJvcj1sO2guQ2FuY2VsPWguQ2FuY2VsZWRFcnJvcjtoLmFsbD1mdW5jdGlvbihlKXtyZXR1cm4gUHJvbWlzZS5hbGwoZSl9O2guc3ByZWFkPUFlO2guaXNBeGlvc0Vycm9yPWVlO2gubWVyZ2VDb25maWc9aztoLkF4aW9zSGVhZGVycz1wO2guZm9ybVRvSlNPTj1BPT5EQShzLmlzSFRNTEZvcm0oQSk/bmV3IEZvcm1EYXRhKEEpOkEpO2guSHR0cFN0YXR1c0NvZGU9JGU7aC5kZWZhdWx0PWg7dmFyIFJBPWg7dmFye0F4aW9zOlNnLEF4aW9zRXJyb3I6TmcsQ2FuY2VsZWRFcnJvcjpSZyxpc0NhbmNlbDpHZyxDYW5jZWxUb2tlbjpVZyxWRVJTSU9OOmtnLGFsbDpMZyxDYW5jZWw6T2csaXNBeGlvc0Vycm9yOkpnLHNwcmVhZDpNZyx0b0Zvcm1EYXRhOmJnLEF4aW9zSGVhZGVyczpIZyxIdHRwU3RhdHVzQ29kZTpZZyxmb3JtVG9KU09OOnFnLG1lcmdlQ29uZmlnOlRnfT1SQTt2YXIgZ0EsTCxyZSxJZT17ZW52OntlbXNjcmlwdGVuX25vdGlmeV9tZW1vcnlfZ3Jvd3RoOmZ1bmN0aW9uKEEpe3JlPW5ldyBVaW50OEFycmF5KEwuZXhwb3J0cy5tZW1vcnkuYnVmZmVyKX19fSxHQT1jbGFzc3tpbml0KCl7cmV0dXJuIGdBfHwodHlwZW9mIGZldGNoPCJ1Ij9nQT1mZXRjaCgiZGF0YTphcHBsaWNhdGlvbi93YXNtO2Jhc2U2NCwiK2V0KS50aGVuKGU9PmUuYXJyYXlCdWZmZXIoKSkudGhlbihlPT5XZWJBc3NlbWJseS5pbnN0YW50aWF0ZShlLEllKSkudGhlbih0aGlzLl9pbml0KTpnQT1XZWJBc3NlbWJseS5pbnN0YW50aWF0ZShCdWZmZXIuZnJvbShldCwiYmFzZTY0IiksSWUpLnRoZW4odGhpcy5faW5pdCksZ0EpfV9pbml0KGUpe0w9ZS5pbnN0YW5jZSxJZS5lbnYuZW1zY3JpcHRlbl9ub3RpZnlfbWVtb3J5X2dyb3d0aCgwKX1kZWNvZGUoZSx0PTApe2lmKCFMKXRocm93IG5ldyBFcnJvcigiWlNURERlY29kZXI6IEF3YWl0IC5pbml0KCkgYmVmb3JlIGRlY29kaW5nLiIpO2xldCBJPWUuYnl0ZUxlbmd0aCxyPUwuZXhwb3J0cy5tYWxsb2MoSSk7cmUuc2V0KGUsciksdD10fHxOdW1iZXIoTC5leHBvcnRzLlpTVERfZmluZERlY29tcHJlc3NlZFNpemUocixJKSk7bGV0IGk9TC5leHBvcnRzLm1hbGxvYyh0KSxnPUwuZXhwb3J0cy5aU1REX2RlY29tcHJlc3MoaSx0LHIsSSksbj1yZS5zbGljZShpLGkrZyk7cmV0dXJuIEwuZXhwb3J0cy5mcmVlKHIpLEwuZXhwb3J0cy5mcmVlKGkpLG59fSxldD0iQUdGemJRRUFBQUFCYmc1Z0EzOS9md0YvWUFGL0FYOWdBbjkvQUdBQmZ3QmdCWDkvZjM5L0FYOWdBMzkvZndCZ0JIOS9mMzhCZjJBQUFYOWdBbjkvQVg5Z0IzOS9mMzkvZjM4QmYyQUNmMzhCZm1BSWYzOS9mMzkvZjM4QmYyQUZmMzkvZjM4QVlBNS9mMzkvZjM5L2YzOS9mMzkvZndGL0FpY0JBMlZ1ZGg5bGJYTmpjbWx3ZEdWdVgyNXZkR2xtZVY5dFpXMXZjbmxmWjNKdmQzUm9BQU1ESXlJSEFBQUJBUU1IQXdFQUNRUUFCUUVJQ0FFRkJnUUVCQU1HQUFBS0FBVUxEQTBHQkFVQmNBRUJBUVVIQVFHQUFvQ0FBZ1lJQVg4QlFZQ2pCQXNIcmdFTEJtMWxiVzl5ZVFJQUJtMWhiR3h2WXdBRkJHWnlaV1VBQmd4YVUxUkVYMmx6UlhKeWIzSUFFaGxhVTFSRVgyWnBibVJFWldOdmJYQnlaWE56WldSVGFYcGxBQndQV2xOVVJGOWtaV052YlhCeVpYTnpBQ0laWDE5cGJtUnBjbVZqZEY5bWRXNWpkR2x2Ymw5MFlXSnNaUUVBRUY5ZlpYSnlibTlmYkc5allYUnBiMjRBQVFsemRHRmphMU5oZG1VQUJ3eHpkR0ZqYTFKbGMzUnZjbVVBQ0FwemRHRmphMEZzYkc5akFBa0tpL0lCSWdVQVFZUWZDek1CQVg4Z0FnUkFJQUFoQXdOQUlBTWdBUzBBQURvQUFDQURRUUZxSVFNZ0FVRUJhaUVCSUFKQkFXc2lBZzBBQ3dzZ0FBc3BBUUYvSUFJRVFDQUFJUU1EUUNBRElBRTZBQUFnQTBFQmFpRURJQUpCQVdzaUFnMEFDd3NnQUF0c0FRSi9RWUFmS0FJQUlnRWdBRUVIYWtGNGNTSUNhaUVBQWtBZ0FrRUFJQUFnQVUwYkRRQWdBRDhBUVJCMFN3UkFJQUEvQUVFUWRHdEIvLzhEYWtFUWRrQUFRWDlHQkg5QkFBVkJBQkFBUVFFTFJRMEJDMEdBSHlBQU5nSUFJQUVQQzBHRUgwRXdOZ0lBUVg4THVTY0JDMzhqQUVFUWF5SUtKQUFDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBSUFCQjlBRk5CRUJCaUI4b0FnQWlCa0VRSUFCQkMycEJlSEVnQUVFTFNSc2lCVUVEZGlJQWRpSUJRUU54QkVBQ1FDQUJRWDl6UVFGeElBQnFJZ0pCQTNRaUFVR3dIMm9pQUNBQlFiZ2ZhaWdDQUNJQktBSUlJZ1JHQkVCQmlCOGdCa0YrSUFKM2NUWUNBQXdCQ3lBRUlBQTJBZ3dnQUNBRU5nSUlDeUFCUVFocUlRQWdBU0FDUVFOMElnSkJBM0kyQWdRZ0FTQUNhaUlCSUFFb0FnUkJBWEkyQWdRTUR3c2dCVUdRSHlnQ0FDSUhUUTBCSUFFRVFBSkFRUUlnQUhRaUFrRUFJQUpyY2lBQklBQjBjV2dpQVVFRGRDSUFRYkFmYWlJQ0lBQkJ1QjlxS0FJQUlnQW9BZ2dpQkVZRVFFR0lIeUFHUVg0Z0FYZHhJZ1kyQWdBTUFRc2dCQ0FDTmdJTUlBSWdCRFlDQ0FzZ0FDQUZRUU55TmdJRUlBQWdCV29pQ0NBQlFRTjBJZ0VnQldzaUJFRUJjallDQkNBQUlBRnFJQVEyQWdBZ0J3UkFJQWRCZUhGQnNCOXFJUUZCbkI4b0FnQWhBZ0ovSUFaQkFTQUhRUU4yZENJRGNVVUVRRUdJSHlBRElBWnlOZ0lBSUFFTUFRc2dBU2dDQ0FzaEF5QUJJQUkyQWdnZ0F5QUNOZ0lNSUFJZ0FUWUNEQ0FDSUFNMkFnZ0xJQUJCQ0dvaEFFR2NIeUFJTmdJQVFaQWZJQVEyQWdBTUR3dEJqQjhvQWdBaUMwVU5BU0FMYUVFQ2RFRzRJV29vQWdBaUFpZ0NCRUY0Y1NBRmF5RURJQUloQVFOQUFrQWdBU2dDRUNJQVJRUkFJQUVvQWhRaUFFVU5BUXNnQUNnQ0JFRjRjU0FGYXlJQklBTWdBU0FEU1NJQkd5RURJQUFnQWlBQkd5RUNJQUFoQVF3QkN3c2dBaWdDR0NFSklBSWdBaWdDRENJRVJ3UkFRWmdmS0FJQUdpQUNLQUlJSWdBZ0JEWUNEQ0FFSUFBMkFnZ01EZ3NnQWtFVWFpSUJLQUlBSWdCRkJFQWdBaWdDRUNJQVJRMERJQUpCRUdvaEFRc0RRQ0FCSVFnZ0FDSUVRUlJxSWdFb0FnQWlBQTBBSUFSQkVHb2hBU0FFS0FJUUlnQU5BQXNnQ0VFQU5nSUFEQTBMUVg4aEJTQUFRYjkvU3cwQUlBQkJDMm9pQUVGNGNTRUZRWXdmS0FJQUlnaEZEUUJCQUNBRmF5RURBa0FDUUFKQUFuOUJBQ0FGUVlBQ1NRMEFHa0VmSUFWQi8vLy9CMHNOQUJvZ0JVRW1JQUJCQ0habklnQnJka0VCY1NBQVFRRjBhMEUrYWdzaUIwRUNkRUc0SVdvb0FnQWlBVVVFUUVFQUlRQU1BUXRCQUNFQUlBVkJHU0FIUVFGMmEwRUFJQWRCSDBjYmRDRUNBMEFDUUNBQktBSUVRWGh4SUFWcklnWWdBMDhOQUNBQklRUWdCaUlERFFCQkFDRURJQUVoQUF3REN5QUFJQUVvQWhRaUJpQUdJQUVnQWtFZGRrRUVjV29vQWhBaUFVWWJJQUFnQmhzaEFDQUNRUUYwSVFJZ0FRMEFDd3NnQUNBRWNrVUVRRUVBSVFSQkFpQUhkQ0lBUVFBZ0FHdHlJQWh4SWdCRkRRTWdBR2hCQW5SQnVDRnFLQUlBSVFBTElBQkZEUUVMQTBBZ0FDZ0NCRUY0Y1NBRmF5SUNJQU5KSVFFZ0FpQURJQUViSVFNZ0FDQUVJQUViSVFRZ0FDZ0NFQ0lCQkg4Z0FRVWdBQ2dDRkFzaUFBMEFDd3NnQkVVTkFDQURRWkFmS0FJQUlBVnJUdzBBSUFRb0FoZ2hCeUFFSUFRb0Fnd2lBa2NFUUVHWUh5Z0NBQm9nQkNnQ0NDSUFJQUkyQWd3Z0FpQUFOZ0lJREF3TElBUkJGR29pQVNnQ0FDSUFSUVJBSUFRb0FoQWlBRVVOQXlBRVFSQnFJUUVMQTBBZ0FTRUdJQUFpQWtFVWFpSUJLQUlBSWdBTkFDQUNRUkJxSVFFZ0FpZ0NFQ0lBRFFBTElBWkJBRFlDQUF3TEN5QUZRWkFmS0FJQUlnUk5CRUJCbkI4b0FnQWhBQUpBSUFRZ0JXc2lBVUVRVHdSQUlBQWdCV29pQWlBQlFRRnlOZ0lFSUFBZ0JHb2dBVFlDQUNBQUlBVkJBM0kyQWdRTUFRc2dBQ0FFUVFOeU5nSUVJQUFnQkdvaUFTQUJLQUlFUVFGeU5nSUVRUUFoQWtFQUlRRUxRWkFmSUFFMkFnQkJuQjhnQWpZQ0FDQUFRUWhxSVFBTURRc2dCVUdVSHlnQ0FDSUNTUVJBUVpRZklBSWdCV3NpQVRZQ0FFR2dIMEdnSHlnQ0FDSUFJQVZxSWdJMkFnQWdBaUFCUVFGeU5nSUVJQUFnQlVFRGNqWUNCQ0FBUVFocUlRQU1EUXRCQUNFQUlBVkJMMm9pQXdKL1FlQWlLQUlBQkVCQjZDSW9BZ0FNQVF0QjdDSkNmemNDQUVIa0lrS0FvSUNBZ0lBRU53SUFRZUFpSUFwQkRHcEJjSEZCMktyVnFnVnpOZ0lBUWZRaVFRQTJBZ0JCeENKQkFEWUNBRUdBSUFzaUFXb2lCa0VBSUFGcklnaHhJZ0VnQlUwTkRFSEFJaWdDQUNJRUJFQkJ1Q0lvQWdBaUJ5QUJhaUlKSUFkTklBUWdDVWx5RFEwTEFrQkJ4Q0l0QUFCQkJIRkZCRUFDUUFKQUFrQUNRRUdnSHlnQ0FDSUVCRUJCeUNJaEFBTkFJQVFnQUNnQ0FDSUhUd1JBSUFjZ0FDZ0NCR29nQkVzTkF3c2dBQ2dDQ0NJQURRQUxDMEVBRUFRaUFrRi9SZzBESUFFaEJrSGtJaWdDQUNJQVFRRnJJZ1FnQW5FRVFDQUJJQUpySUFJZ0JHcEJBQ0FBYTNGcUlRWUxJQVVnQms4TkEwSEFJaWdDQUNJQUJFQkJ1Q0lvQWdBaUJDQUdhaUlJSUFSTklBQWdDRWx5RFFRTElBWVFCQ0lBSUFKSERRRU1CUXNnQmlBQ2F5QUljU0lHRUFRaUFpQUFLQUlBSUFBb0FnUnFSZzBCSUFJaEFBc2dBRUYvUmcwQklBVkJNR29nQmswRVFDQUFJUUlNQkF0QjZDSW9BZ0FpQWlBRElBWnJha0VBSUFKcmNTSUNFQVJCZjBZTkFTQUNJQVpxSVFZZ0FDRUNEQU1MSUFKQmYwY05BZ3RCeENKQnhDSW9BZ0JCQkhJMkFnQUxJQUVRQkNJQ1FYOUdRUUFRQkNJQVFYOUdjaUFBSUFKTmNnMEZJQUFnQW1zaUJpQUZRU2hxVFEwRkMwRzRJa0c0SWlnQ0FDQUdhaUlBTmdJQVFid2lLQUlBSUFCSkJFQkJ2Q0lnQURZQ0FBc0NRRUdnSHlnQ0FDSURCRUJCeUNJaEFBTkFJQUlnQUNnQ0FDSUJJQUFvQWdRaUJHcEdEUUlnQUNnQ0NDSUFEUUFMREFRTFFaZ2ZLQUlBSWdCQkFDQUFJQUpORzBVRVFFR1lIeUFDTmdJQUMwRUFJUUJCekNJZ0JqWUNBRUhJSWlBQ05nSUFRYWdmUVg4MkFnQkJyQjlCNENJb0FnQTJBZ0JCMUNKQkFEWUNBQU5BSUFCQkEzUWlBVUc0SDJvZ0FVR3dIMm9pQkRZQ0FDQUJRYndmYWlBRU5nSUFJQUJCQVdvaUFFRWdSdzBBQzBHVUh5QUdRU2hySWdCQmVDQUNhMEVIY1NJQmF5SUVOZ0lBUWFBZklBRWdBbW9pQVRZQ0FDQUJJQVJCQVhJMkFnUWdBQ0FDYWtFb05nSUVRYVFmUWZBaUtBSUFOZ0lBREFRTElBSWdBMDBnQVNBRFMzSU5BaUFBS0FJTVFRaHhEUUlnQUNBRUlBWnFOZ0lFUWFBZklBTkJlQ0FEYTBFSGNTSUFhaUlCTmdJQVFaUWZRWlFmS0FJQUlBWnFJZ0lnQUdzaUFEWUNBQ0FCSUFCQkFYSTJBZ1FnQWlBRGFrRW9OZ0lFUWFRZlFmQWlLQUlBTmdJQURBTUxRUUFoQkF3S0MwRUFJUUlNQ0F0Qm1COG9BZ0FnQWtzRVFFR1lIeUFDTmdJQUN5QUNJQVpxSVFGQnlDSWhBQUpBQWtBQ1FBTkFJQUVnQUNnQ0FFY0VRQ0FBS0FJSUlnQU5BUXdDQ3dzZ0FDMEFERUVJY1VVTkFRdEJ5Q0loQUFOQUlBTWdBQ2dDQUNJQlR3UkFJQUVnQUNnQ0JHb2lCQ0FEU3cwREN5QUFLQUlJSVFBTUFBc0FDeUFBSUFJMkFnQWdBQ0FBS0FJRUlBWnFOZ0lFSUFKQmVDQUNhMEVIY1dvaUJ5QUZRUU55TmdJRUlBRkJlQ0FCYTBFSGNXb2lCaUFGSUFkcUlnVnJJUUFnQXlBR1JnUkFRYUFmSUFVMkFnQkJsQjlCbEI4b0FnQWdBR29pQURZQ0FDQUZJQUJCQVhJMkFnUU1DQXRCbkI4b0FnQWdCa1lFUUVHY0h5QUZOZ0lBUVpBZlFaQWZLQUlBSUFCcUlnQTJBZ0FnQlNBQVFRRnlOZ0lFSUFBZ0JXb2dBRFlDQUF3SUN5QUdLQUlFSWdOQkEzRkJBVWNOQmlBRFFYaHhJUWtnQTBIL0FVMEVRQ0FHS0FJTUlnRWdCaWdDQ0NJQ1JnUkFRWWdmUVlnZktBSUFRWDRnQTBFRGRuZHhOZ0lBREFjTElBSWdBVFlDRENBQklBSTJBZ2dNQmdzZ0JpZ0NHQ0VJSUFZZ0JpZ0NEQ0lDUndSQUlBWW9BZ2dpQVNBQ05nSU1JQUlnQVRZQ0NBd0ZDeUFHUVJScUlnRW9BZ0FpQTBVRVFDQUdLQUlRSWdORkRRUWdCa0VRYWlFQkN3TkFJQUVoQkNBRElnSkJGR29pQVNnQ0FDSUREUUFnQWtFUWFpRUJJQUlvQWhBaUF3MEFDeUFFUVFBMkFnQU1CQXRCbEI4Z0JrRW9heUlBUVhnZ0FtdEJCM0VpQVdzaUNEWUNBRUdnSHlBQklBSnFJZ0UyQWdBZ0FTQUlRUUZ5TmdJRUlBQWdBbXBCS0RZQ0JFR2tIMEh3SWlnQ0FEWUNBQ0FESUFSQkp5QUVhMEVIY1dwQkwyc2lBQ0FBSUFOQkVHcEpHeUlCUVJzMkFnUWdBVUhRSWlrQ0FEY0NFQ0FCUWNnaUtRSUFOd0lJUWRBaUlBRkJDR28yQWdCQnpDSWdCallDQUVISUlpQUNOZ0lBUWRRaVFRQTJBZ0FnQVVFWWFpRUFBMEFnQUVFSE5nSUVJQUJCQ0dvZ0FFRUVhaUVBSUFSSkRRQUxJQUVnQTBZTkFDQUJJQUVvQWdSQmZuRTJBZ1FnQXlBQklBTnJJZ0pCQVhJMkFnUWdBU0FDTmdJQUlBSkIvd0ZOQkVBZ0FrRjRjVUd3SDJvaEFBSi9RWWdmS0FJQUlnRkJBU0FDUVFOMmRDSUNjVVVFUUVHSUh5QUJJQUp5TmdJQUlBQU1BUXNnQUNnQ0NBc2hBU0FBSUFNMkFnZ2dBU0FETmdJTUlBTWdBRFlDRENBRElBRTJBZ2dNQVF0Qkh5RUFJQUpCLy8vL0IwMEVRQ0FDUVNZZ0FrRUlkbWNpQUd0MlFRRnhJQUJCQVhSclFUNXFJUUFMSUFNZ0FEWUNIQ0FEUWdBM0FoQWdBRUVDZEVHNElXb2hBUUpBQWtCQmpCOG9BZ0FpQkVFQklBQjBJZ1p4UlFSQVFZd2ZJQVFnQm5JMkFnQWdBU0FETmdJQURBRUxJQUpCR1NBQVFRRjJhMEVBSUFCQkgwY2JkQ0VBSUFFb0FnQWhCQU5BSUFRaUFTZ0NCRUY0Y1NBQ1JnMENJQUJCSFhZaEJDQUFRUUYwSVFBZ0FTQUVRUVJ4YWlJR0tBSVFJZ1FOQUFzZ0JpQUROZ0lRQ3lBRElBRTJBaGdnQXlBRE5nSU1JQU1nQXpZQ0NBd0JDeUFCS0FJSUlnQWdBellDRENBQklBTTJBZ2dnQTBFQU5nSVlJQU1nQVRZQ0RDQURJQUEyQWdnTFFaUWZLQUlBSWdBZ0JVME5BRUdVSHlBQUlBVnJJZ0UyQWdCQm9COUJvQjhvQWdBaUFDQUZhaUlDTmdJQUlBSWdBVUVCY2pZQ0JDQUFJQVZCQTNJMkFnUWdBRUVJYWlFQURBZ0xRWVFmUVRBMkFnQkJBQ0VBREFjTFFRQWhBZ3NnQ0VVTkFBSkFJQVlvQWh3aUFVRUNkRUc0SVdvaUJDZ0NBQ0FHUmdSQUlBUWdBallDQUNBQ0RRRkJqQjlCakI4b0FnQkJmaUFCZDNFMkFnQU1BZ3NnQ0VFUVFSUWdDQ2dDRUNBR1JodHFJQUkyQWdBZ0FrVU5BUXNnQWlBSU5nSVlJQVlvQWhBaUFRUkFJQUlnQVRZQ0VDQUJJQUkyQWhnTElBWW9BaFFpQVVVTkFDQUNJQUUyQWhRZ0FTQUNOZ0lZQ3lBQUlBbHFJUUFnQmlBSmFpSUdLQUlFSVFNTElBWWdBMEYrY1RZQ0JDQUZJQUJCQVhJMkFnUWdBQ0FGYWlBQU5nSUFJQUJCL3dGTkJFQWdBRUY0Y1VHd0gyb2hBUUovUVlnZktBSUFJZ0pCQVNBQVFRTjJkQ0lBY1VVRVFFR0lIeUFBSUFKeU5nSUFJQUVNQVFzZ0FTZ0NDQXNoQUNBQklBVTJBZ2dnQUNBRk5nSU1JQVVnQVRZQ0RDQUZJQUEyQWdnTUFRdEJIeUVESUFCQi8vLy9CMDBFUUNBQVFTWWdBRUVJZG1jaUFXdDJRUUZ4SUFGQkFYUnJRVDVxSVFNTElBVWdBellDSENBRlFnQTNBaEFnQTBFQ2RFRzRJV29oQVFKQUFrQkJqQjhvQWdBaUFrRUJJQU4wSWdSeFJRUkFRWXdmSUFJZ0JISTJBZ0FnQVNBRk5nSUFEQUVMSUFCQkdTQURRUUYyYTBFQUlBTkJIMGNiZENFRElBRW9BZ0FoQWdOQUlBSWlBU2dDQkVGNGNTQUFSZzBDSUFOQkhYWWhBaUFEUVFGMElRTWdBU0FDUVFSeGFpSUVLQUlRSWdJTkFBc2dCQ0FGTmdJUUN5QUZJQUUyQWhnZ0JTQUZOZ0lNSUFVZ0JUWUNDQXdCQ3lBQktBSUlJZ0FnQlRZQ0RDQUJJQVUyQWdnZ0JVRUFOZ0lZSUFVZ0FUWUNEQ0FGSUFBMkFnZ0xJQWRCQ0dvaEFBd0NDd0pBSUFkRkRRQUNRQ0FFS0FJY0lnQkJBblJCdUNGcUlnRW9BZ0FnQkVZRVFDQUJJQUkyQWdBZ0FnMEJRWXdmSUFoQmZpQUFkM0VpQ0RZQ0FBd0NDeUFIUVJCQkZDQUhLQUlRSUFSR0cyb2dBallDQUNBQ1JRMEJDeUFDSUFjMkFoZ2dCQ2dDRUNJQUJFQWdBaUFBTmdJUUlBQWdBallDR0FzZ0JDZ0NGQ0lBUlEwQUlBSWdBRFlDRkNBQUlBSTJBaGdMQWtBZ0EwRVBUUVJBSUFRZ0F5QUZhaUlBUVFOeU5nSUVJQUFnQkdvaUFDQUFLQUlFUVFGeU5nSUVEQUVMSUFRZ0JVRURjallDQkNBRUlBVnFJZ0lnQTBFQmNqWUNCQ0FDSUFOcUlBTTJBZ0FnQTBIL0FVMEVRQ0FEUVhoeFFiQWZhaUVBQW45QmlCOG9BZ0FpQVVFQklBTkJBM1owSWdOeFJRUkFRWWdmSUFFZ0EzSTJBZ0FnQUF3QkN5QUFLQUlJQ3lFQklBQWdBallDQ0NBQklBSTJBZ3dnQWlBQU5nSU1JQUlnQVRZQ0NBd0JDMEVmSVFBZ0EwSC8vLzhIVFFSQUlBTkJKaUFEUVFoMlp5SUFhM1pCQVhFZ0FFRUJkR3RCUG1vaEFBc2dBaUFBTmdJY0lBSkNBRGNDRUNBQVFRSjBRYmdoYWlFQkFrQUNRQ0FJUVFFZ0FIUWlCbkZGQkVCQmpCOGdCaUFJY2pZQ0FDQUJJQUkyQWdBTUFRc2dBMEVaSUFCQkFYWnJRUUFnQUVFZlJ4dDBJUUFnQVNnQ0FDRUZBMEFnQlNJQktBSUVRWGh4SUFOR0RRSWdBRUVkZGlFR0lBQkJBWFFoQUNBQklBWkJCSEZxSWdZb0FoQWlCUTBBQ3lBR0lBSTJBaEFMSUFJZ0FUWUNHQ0FDSUFJMkFnd2dBaUFDTmdJSURBRUxJQUVvQWdnaUFDQUNOZ0lNSUFFZ0FqWUNDQ0FDUVFBMkFoZ2dBaUFCTmdJTUlBSWdBRFlDQ0FzZ0JFRUlhaUVBREFFTEFrQWdDVVVOQUFKQUlBSW9BaHdpQUVFQ2RFRzRJV29pQVNnQ0FDQUNSZ1JBSUFFZ0JEWUNBQ0FFRFFGQmpCOGdDMEYrSUFCM2NUWUNBQXdDQ3lBSlFSQkJGQ0FKS0FJUUlBSkdHMm9nQkRZQ0FDQUVSUTBCQ3lBRUlBazJBaGdnQWlnQ0VDSUFCRUFnQkNBQU5nSVFJQUFnQkRZQ0dBc2dBaWdDRkNJQVJRMEFJQVFnQURZQ0ZDQUFJQVEyQWhnTEFrQWdBMEVQVFFSQUlBSWdBeUFGYWlJQVFRTnlOZ0lFSUFBZ0Ftb2lBQ0FBS0FJRVFRRnlOZ0lFREFFTElBSWdCVUVEY2pZQ0JDQUNJQVZxSWdRZ0EwRUJjallDQkNBRElBUnFJQU0yQWdBZ0J3UkFJQWRCZUhGQnNCOXFJUUJCbkI4b0FnQWhBUUovUVFFZ0IwRURkblFpQlNBR2NVVUVRRUdJSHlBRklBWnlOZ0lBSUFBTUFRc2dBQ2dDQ0FzaEJpQUFJQUUyQWdnZ0JpQUJOZ0lNSUFFZ0FEWUNEQ0FCSUFZMkFnZ0xRWndmSUFRMkFnQkJrQjhnQXpZQ0FBc2dBa0VJYWlFQUN5QUtRUkJxSkFBZ0FBdlNDd0VIZndKQUlBQkZEUUFnQUVFSWF5SUNJQUJCQkdzb0FnQWlBVUY0Y1NJQWFpRUZBa0FnQVVFQmNRMEFJQUZCQTNGRkRRRWdBaUFDS0FJQUlnRnJJZ0pCbUI4b0FnQkpEUUVnQUNBQmFpRUFBa0FDUUVHY0h5Z0NBQ0FDUndSQUlBRkIvd0ZOQkVBZ0FVRURkaUVFSUFJb0Fnd2lBU0FDS0FJSUlnTkdCRUJCaUI5QmlCOG9BZ0JCZmlBRWQzRTJBZ0FNQlFzZ0F5QUJOZ0lNSUFFZ0F6WUNDQXdFQ3lBQ0tBSVlJUVlnQWlBQ0tBSU1JZ0ZIQkVBZ0FpZ0NDQ0lESUFFMkFnd2dBU0FETmdJSURBTUxJQUpCRkdvaUJDZ0NBQ0lEUlFSQUlBSW9BaEFpQTBVTkFpQUNRUkJxSVFRTEEwQWdCQ0VISUFNaUFVRVVhaUlFS0FJQUlnTU5BQ0FCUVJCcUlRUWdBU2dDRUNJRERRQUxJQWRCQURZQ0FBd0NDeUFGS0FJRUlnRkJBM0ZCQTBjTkFrR1FIeUFBTmdJQUlBVWdBVUYrY1RZQ0JDQUNJQUJCQVhJMkFnUWdCU0FBTmdJQUR3dEJBQ0VCQ3lBR1JRMEFBa0FnQWlnQ0hDSURRUUowUWJnaGFpSUVLQUlBSUFKR0JFQWdCQ0FCTmdJQUlBRU5BVUdNSDBHTUh5Z0NBRUYrSUFOM2NUWUNBQXdDQ3lBR1FSQkJGQ0FHS0FJUUlBSkdHMm9nQVRZQ0FDQUJSUTBCQ3lBQklBWTJBaGdnQWlnQ0VDSURCRUFnQVNBRE5nSVFJQU1nQVRZQ0dBc2dBaWdDRkNJRFJRMEFJQUVnQXpZQ0ZDQURJQUUyQWhnTElBSWdCVThOQUNBRktBSUVJZ0ZCQVhGRkRRQUNRQUpBQWtBQ1FDQUJRUUp4UlFSQVFhQWZLQUlBSUFWR0JFQkJvQjhnQWpZQ0FFR1VIMEdVSHlnQ0FDQUFhaUlBTmdJQUlBSWdBRUVCY2pZQ0JDQUNRWndmS0FJQVJ3MEdRWkFmUVFBMkFnQkJuQjlCQURZQ0FBOExRWndmS0FJQUlBVkdCRUJCbkI4Z0FqWUNBRUdRSDBHUUh5Z0NBQ0FBYWlJQU5nSUFJQUlnQUVFQmNqWUNCQ0FBSUFKcUlBQTJBZ0FQQ3lBQlFYaHhJQUJxSVFBZ0FVSC9BVTBFUUNBQlFRTjJJUVFnQlNnQ0RDSUJJQVVvQWdnaUEwWUVRRUdJSDBHSUh5Z0NBRUYrSUFSM2NUWUNBQXdGQ3lBRElBRTJBZ3dnQVNBRE5nSUlEQVFMSUFVb0FoZ2hCaUFGSUFVb0Fnd2lBVWNFUUVHWUh5Z0NBQm9nQlNnQ0NDSURJQUUyQWd3Z0FTQUROZ0lJREFNTElBVkJGR29pQkNnQ0FDSURSUVJBSUFVb0FoQWlBMFVOQWlBRlFSQnFJUVFMQTBBZ0JDRUhJQU1pQVVFVWFpSUVLQUlBSWdNTkFDQUJRUkJxSVFRZ0FTZ0NFQ0lERFFBTElBZEJBRFlDQUF3Q0N5QUZJQUZCZm5FMkFnUWdBaUFBUVFGeU5nSUVJQUFnQW1vZ0FEWUNBQXdEQzBFQUlRRUxJQVpGRFFBQ1FDQUZLQUljSWdOQkFuUkJ1Q0ZxSWdRb0FnQWdCVVlFUUNBRUlBRTJBZ0FnQVEwQlFZd2ZRWXdmS0FJQVFYNGdBM2R4TmdJQURBSUxJQVpCRUVFVUlBWW9BaEFnQlVZYmFpQUJOZ0lBSUFGRkRRRUxJQUVnQmpZQ0dDQUZLQUlRSWdNRVFDQUJJQU0yQWhBZ0F5QUJOZ0lZQ3lBRktBSVVJZ05GRFFBZ0FTQUROZ0lVSUFNZ0FUWUNHQXNnQWlBQVFRRnlOZ0lFSUFBZ0Ftb2dBRFlDQUNBQ1Fad2ZLQUlBUncwQVFaQWZJQUEyQWdBUEN5QUFRZjhCVFFSQUlBQkJlSEZCc0I5cUlRRUNmMEdJSHlnQ0FDSURRUUVnQUVFRGRuUWlBSEZGQkVCQmlCOGdBQ0FEY2pZQ0FDQUJEQUVMSUFFb0FnZ0xJUUFnQVNBQ05nSUlJQUFnQWpZQ0RDQUNJQUUyQWd3Z0FpQUFOZ0lJRHd0Qkh5RURJQUJCLy8vL0IwMEVRQ0FBUVNZZ0FFRUlkbWNpQVd0MlFRRnhJQUZCQVhSclFUNXFJUU1MSUFJZ0F6WUNIQ0FDUWdBM0FoQWdBMEVDZEVHNElXb2hBUUpBQWtBQ1FFR01IeWdDQUNJRVFRRWdBM1FpQjNGRkJFQkJqQjhnQkNBSGNqWUNBQ0FCSUFJMkFnQWdBaUFCTmdJWURBRUxJQUJCR1NBRFFRRjJhMEVBSUFOQkgwY2JkQ0VESUFFb0FnQWhBUU5BSUFFaUJDZ0NCRUY0Y1NBQVJnMENJQU5CSFhZaEFTQURRUUYwSVFNZ0JDQUJRUVJ4YWlJSFFSQnFLQUlBSWdFTkFBc2dCeUFDTmdJUUlBSWdCRFlDR0FzZ0FpQUNOZ0lNSUFJZ0FqWUNDQXdCQ3lBRUtBSUlJZ0FnQWpZQ0RDQUVJQUkyQWdnZ0FrRUFOZ0lZSUFJZ0JEWUNEQ0FDSUFBMkFnZ0xRYWdmUWFnZktBSUFRUUZySWdCQmZ5QUFHellDQUFzTEJBQWpBQXNHQUNBQUpBQUxFQUFqQUNBQWEwRndjU0lBSkFBZ0FBdEtBUUYvSUFBZ0FVa0VRQ0FBSUFFZ0FoQUNEd3NnQWdSQUlBQWdBbW9oQXlBQklBSnFJUUVEUUNBRFFRRnJJZ01nQVVFQmF5SUJMUUFBT2dBQUlBSkJBV3NpQWcwQUN3c2dBQXY5RGdJUmZ3RitJd0JCTUdzaUJ5UUFRYmgvSVFnQ1FDQUZSUTBBSUFRc0FBQWlDVUgvQVhFaEN3SkFJQWxCQUVnRVFDQUxRZjRBYTBFQmRpSUdJQVZQRFFKQmJDRUlJQXRCL3dCcklndEIvd0ZMRFFJZ0JFRUJhaUVJUVFBaEJRTkFJQVVnQzA4RVFDQUxJUWdnQmlFTERBTUZJQUFnQldvZ0NDQUZRUUYyYWlJRUxRQUFRUVIyT2dBQUlBQWdCVUVCY21vZ0JDMEFBRUVQY1RvQUFDQUZRUUpxSVFVTUFRc0FDd0FMSUFVZ0MwME5BU0FIUWY4Qk5nSUVJQVlnQjBFRWFpQUhRUWhxSUFSQkFXb2lEaUFMRUF3aUJFR0lmMHNFUUNBRUlRZ01BZ3RCVkNFSUlBY29BZ2dpRUVFR1N3MEJJQWNvQWdRaUVVRUJkQ0lKUVFKcXJVSUJJQkN0aGlJWVFRRWdFSFFpRFVFQmFpSUZyVUlDaG54OFFndDhRdnovLy8vLy8vLy8vd0NEUXVRQ1ZnMEJRVkloQ0NBUlFmOEJTdzBCSUExQmYzTkJBblJCNUFKcXJTQVJRUUZxSWhWQkFYU3RJQmg4UWdoOFZBMEJJQXNnQkdzaEZpQUVJQTVxSVJjZ0JrR0FCR29pRWlBRlFRSjBhaUlSSUFscVFRSnFJUTRnQmtHRUJHb2hFMEdBZ0FJZ0VIUkJFSFloQ1VFQUlRVkJBU0VQSUExQkFXc2lGQ0VLQTBBZ0JTQVZSa1VFUUFKQUlBWWdCVUVCZENJSWFpOEJBQ0lFUWYvL0EwWUVRQ0FUSUFwQkFuUnFJQVU2QUFJZ0NrRUJheUVLUVFFaEJBd0JDeUFQUVFBZ0NTQUV3VW9iSVE4TElBZ2dFV29nQkRzQkFDQUZRUUZxSVFVTUFRc0xJQVlnRHpzQmdnUWdCaUFRT3dHQUJBSkFJQW9nRkVZRVFDQU5RUU4ySVFoQ0FDRVlRUUFoRHdOQUlBd2dGVVlFUUNBSUlBMUJBWFpxUVFOcUlnbEJBWFFoQ0VFQUlRUkJBQ0VLQTBCQkFDRUZJQW9nRFU4TkJBTkFJQVZCQWtaRkJFQWdFeUFGSUFsc0lBUnFJQlJ4UVFKMGFpQU9JQVVnQ21wcUxRQUFPZ0FDSUFWQkFXb2hCUXdCQ3dzZ0NrRUNhaUVLSUFRZ0NHb2dGSEVoQkF3QUN3QUZJQVlnREVFQmRHb3VBUUFoQ1NBT0lBOXFJZ1FnR0RjQUFFRUlJUVVEUUNBRklBbE9SUVJBSUFRZ0JXb2dHRGNBQUNBRlFRaHFJUVVNQVFzTElCaENnWUtFaUpDZ3dJQUJmQ0VZSUF4QkFXb2hEQ0FKSUE5cUlROE1BUXNBQ3dBTElBMUJBM1lnRFVFQmRtcEJBMm9oQ0VFQUlRVURRQ0FNSUJWR1JRUkFRUUFoQ1NBR0lBeEJBWFJxTGdFQUlnUkJBQ0FFUVFCS0d5RUVBMEFnQkNBSlJrVUVRQ0FUSUFWQkFuUnFJQXc2QUFJRFFDQUZJQWhxSUJSeElnVWdDa3NOQUFzZ0NVRUJhaUVKREFFTEN5QU1RUUZxSVF3TUFRc0xRWDhoQ0NBRkRRSUxJQkJCQVdvaENFRUFJUVVEUUNBRklBMUdSUVJBSUJFZ0V5QUZRUUowYWlJT0xRQUNRUUYwYWlJRUlBUXZBUUFpQ1VFQmFqc0JBQ0FPSUFnZ0NXZEJZSE5xSWdRNkFBTWdEaUFKSUFSMElBMXJPd0VBSUFWQkFXb2hCUXdCQ3dzQ1FBSkFJQVl2QVlJRUJFQWdCMEVjYWlJRUlCY2dGaEFOSWdoQmlIOUxEUUlnQjBFVWFpQUVJQklRRGlBSFFReHFJQVFnRWhBT1FRQWhCUU5BSUFkQkhHb2lCQkFQSUFWQit3RkxjZzBDSUFBZ0JXb2lCaUFIUVJScUlBUVFFRG9BQUNBR0lBZEJER29nQkJBUU9nQUJJQVZCQW5JaEJDQUhRUnhxRUE4RVFDQUVJUVVNQXdVZ0FDQUVhaUFIUVJScUlBZEJIR29pQkJBUU9nQUFJQVlnQjBFTWFpQUVFQkE2QUFNZ0JVRUVhaUVGREFFTEFBc0FDeUFIUVJ4cUlnUWdGeUFXRUEwaUNFR0lmMHNOQVNBSFFSUnFJQVFnRWhBT0lBZEJER29nQkNBU0VBNUJBQ0VGQTBBZ0IwRWNhaUlFRUE4Z0JVSDdBVXR5UlFSQUlBQWdCV29pQmlBSFFSUnFJQVFRRVRvQUFDQUdJQWRCREdvZ0JCQVJPZ0FCSUFWQkFuSWhCQ0FIUVJ4cUVBOEVRQ0FFSVFVRklBQWdCR29nQjBFVWFpQUhRUnhxSWdRUUVUb0FBQ0FHSUFkQkRHb2dCQkFST2dBRElBVkJCR29oQlF3Q0N3c0xBbjhEUUVHNmZ5RUlJQVZCL1FGTERRTWdBQ0FGYWlJR0lBZEJGR29nQjBFY2FpSUpFQkU2QUFBZ0JrRUJhaUVFSUFrUUQwRURSZ1JBSUFkQkRHb2hDRUVDREFJTElBVkIvQUZMRFFNZ0JpQUhRUXhxSUFkQkhHb2lCQkFST2dBQklBVkJBbW9oQlNBRUVBOUJBMGNOQUFzZ0FDQUZhaUVFSUFkQkZHb2hDRUVEQ3lBRUlBZ2dCMEVjYWhBUk9nQUFJQVpxSUFCcklRZ01BUXNDZndOQVFicC9JUWdnQlVIOUFVc05BaUFBSUFWcUlnWWdCMEVVYWlBSFFSeHFJZ2tRRURvQUFDQUdRUUZxSVFRZ0NSQVBRUU5HQkVBZ0IwRU1haUVJUVFJTUFnc2dCVUg4QVVzTkFpQUdJQWRCREdvZ0IwRWNhaUlFRUJBNkFBRWdCVUVDYWlFRklBUVFEMEVEUncwQUN5QUFJQVZxSVFRZ0IwRVVhaUVJUVFNTElBUWdDQ0FIUVJ4cUVCQTZBQUFnQm1vZ0FHc2hDQXNnQ0VHSWYwc05BUXNnQ0NFRVFRQWhCU0FCUVFCQk5CQURJUWxCQUNFS0EwQWdCQ0FGUndSQUlBQWdCV29pQmkwQUFDSUJRUXRMQkVCQmJDRUlEQU1GSUFrZ0FVRUNkR29pQVNBQktBSUFRUUZxTmdJQUlBVkJBV29oQlVFQklBWXRBQUIwUVFGMUlBcHFJUW9NQWdzQUN3dEJiQ0VJSUFwRkRRQWdDbWNpQlVFZmN5SUJRUXRMRFFBZ0EwRWdJQVZyTmdJQVFRRkJBaUFCZENBS2F5SURaMEVmY3lJQmRDQURSdzBBSUFBZ0JHb2dBVUVCYWlJQU9nQUFJQWtnQUVFQ2RHb2lBQ0FBS0FJQVFRRnFOZ0lBSUFrb0FnUWlBRUVDU1NBQVFRRnhjZzBBSUFJZ0JFRUJhallDQUNBTFFRRnFJUWdMSUFkQk1Hb2tBQ0FJQzZBRkFReC9Jd0JCRUdzaURDUUFBbjhnQkVFSFRRUkFJQXhDQURjRENDQU1RUWhxSWdVZ0F5QUVFQUlhUVd3Z0FDQUJJQUlnQlVFSUVBd2lBQ0FBSUFSTEd5QUFJQUJCaVg5Skd3d0JDeUFBUVFBZ0FTZ0NBRUVCYWlJTlFRRjBFQU1oRDBGVUlBTW9BQUFpQmtFUGNTSUFRUXBMRFFBYUlBSWdBRUVGYWpZQ0FDQURJQVJxSWdKQkJHc2hCeUFDUVFkcklRc2dBRUVHYWlFT1FRUWhBaUFHUVFSMklRVkJJQ0FBZENJSVFRRnlJUWxCQUNFQVFRRWhCaUFESVFRRFFBSkFJQVpCQVhGRkJFQURRQ0FGUVg5elFZQ0FnSUI0Y21naUJrRVlTVVVFUUNBQVFTUnFJUUFnQkNBTFRRUi9JQVJCQTJvRklBUWdDMnRCQTNRZ0FtcEJIM0VoQWlBSEN5SUVLQUFBSUFKMklRVU1BUXNMSUFJZ0JrRWVjU0lLYWtFQ2FpRUNJQVpCQVhaQkEyd2dBR29nQlNBS2RrRURjV29pQUNBTlR3MEJBbjhnQkNBTFN5QUNRUU4ySUFScUlnVWdCMHR4UlFSQUlBSkJCM0VoQWlBRkRBRUxJQVFnQjJ0QkEzUWdBbXBCSDNFaEFpQUhDeUlFS0FBQUlBSjJJUVVMSUFVZ0NFRUJhM0VpQmlBSVFRRjBRUUZySWdvZ0NXc2lFRWtFZnlBT1FRRnJCU0FGSUFweElnVWdFRUVBSUFVZ0NFNGJheUVHSUE0TElRVWdEeUFBUVFGMGFpQUdRUUZySWdvN0FRQWdBRUVCYWlFQUlBSWdCV29oQWlBSVFRRWdCbXNnQ2lBR1FRQktHeUFKYWlJSlNnUkFJQWxCQWtnTkFVRWdJQWxuSWdWcklRNUJBU0FGUVI5emRDRUlDeUFBSUExUERRQWdDa0VBUnlFR0FuOGdCQ0FMU3lBQ1FRTjFJQVJxSWdVZ0IwdHhSUVJBSUFKQkIzRWhBaUFGREFFTElBSWdCQ0FIYTBFRGRHcEJIM0VoQWlBSEN5SUVLQUFBSUFKMklRVU1BUXNMUVd3Z0NVRUJSdzBBR2tGUUlBQWdEVXNOQUJwQmJDQUNRU0JLRFFBYUlBRWdBRUVCYXpZQ0FDQUVJQUpCQjJwQkEzVnFJQU5yQ3lBTVFSQnFKQUFMOGdFQkFYOGdBa1VFUUNBQVFnQTNBZ0FnQUVFQU5nSVFJQUJDQURjQ0NFRzRmdzhMSUFBZ0FUWUNEQ0FBSUFGQkJHbzJBaEFnQWtFRVR3UkFJQUFnQVNBQ2FpSUJRUVJySWdNMkFnZ2dBQ0FES0FBQU5nSUFJQUZCQVdzdEFBQWlBUVJBSUFBZ0FXZEJGMnMyQWdRZ0FnOExJQUJCQURZQ0JFRi9Ed3NnQUNBQk5nSUlJQUFnQVMwQUFDSUROZ0lBQWtBQ1FBSkFJQUpCQW1zT0FnRUFBZ3NnQUNBQkxRQUNRUkIwSUFOeUlnTTJBZ0FMSUFBZ0FTMEFBVUVJZENBRGFqWUNBQXNnQVNBQ2FrRUJheTBBQUNJQlJRUkFJQUJCQURZQ0JFRnNEd3NnQUNBQlp5QUNRUU4wYTBFSmFqWUNCQ0FDQzBRQkFuOGdBU0FDTHdFQUlnTWdBU2dDQkdvaUJEWUNCQ0FBSUFOQkFuUkJvQjFxS0FJQUlBRW9BZ0JCQUNBRWEzWnhOZ0lBSUFFUUR4b2dBQ0FDUVFScU5nSUVDNThCQVFSL1FRTWhBU0FBS0FJRUlnSkJJRTBFUUNBQUtBSUlJZ0VnQUNnQ0VFOEVRQ0FBSUFKQkIzRTJBZ1FnQUNBQklBSkJBM1pySWdJMkFnZ2dBQ0FDS0FBQU5nSUFRUUFQQ3lBQUtBSU1JZ01nQVVZRVFFRUJRUUlnQWtFZ1NSc1BDeUFBSUFFZ0FTQURheUFDUVFOMklnUWdBU0FFYXlBRFNTSUJHeUlEYXlJRU5nSUlJQUFnQWlBRFFRTjBhellDQkNBQUlBUW9BQUEyQWdBTElBRUxTQUVFZnlBQUtBSUVJQUFvQWdCQkFuUnFJZ0l0QUFJZ0FpOEJBQ0VFSUFFZ0FTZ0NCQ0lGSUFJdEFBTWlBbW8yQWdRZ0FDQUVJQUVvQWdBZ0JYUkJBQ0FDYTNacU5nSUFDMUlCQkg4Z0FDZ0NCQ0FBS0FJQVFRSjBhaUlDTFFBQ0lBSXZBUUFoQkNBQklBSXRBQU1pQWlBQktBSUVhaUlGTmdJRUlBQWdCQ0FDUVFKMFFhQWRhaWdDQUNBQktBSUFRUUFnQld0MmNXbzJBZ0FMQ0FBZ0FFR0lmMHNMR2dBZ0FBUkFJQUVFUUNBQ0lBQWdBUkVDQUE4TElBQVFCZ3NMcGdnQ0RYOEJmaU1BUVJCcklna2tBQ0FKUVFBMkFnd2dDVUVBTmdJSUFuOENRQ0FEUWVnSmFpQURJQWxCQ0dvZ0NVRU1haUFCSUFJZ0EwR0FBV29RQ3lJUFFZaC9TdzBBUVZRZ0NTZ0NEQ0lFSUFBb0FnQWlBVUgvQVhGQkFXcExEUUVhSUFCQkJHb2hDeUFBSUFGQi80R0FlSEVnQkVFUWRFR0FnUHdIY1hJMkFnQkJmeUFFSUFSQkFFZ2JRUUZxSVFCQkFDRUJJQWtvQWdnaEJVRUFJUUlEUUNBQUlBSkdCRUFnQlVFRGF5RUJRUUFoQUFOQUFrQkJBQ0VDSUFBZ0FVNEVRQU5BSUFBZ0JVNE5BaUFESUFBZ0EycEI2QWxxTFFBQVFRSjBha0ZBYXlJQklBRW9BZ0FpQVVFQmFqWUNBQ0FCSUFOcUlBQTZBT2dISUFCQkFXb2hBQXdBQ3dBRkEwQWdBa0VFUmtVRVFDQURJQU1nQUNBQ2FpSUhha0hvQ1dvdEFBQkJBblJxUVVCcklnZ2dDQ2dDQUNJSVFRRnFOZ0lBSUFNZ0NHb2dCem9BNkFjZ0FrRUJhaUVDREFFTEN5QUFRUVJxSVFBTUFnc0FDd3NnQkVFQmFpRU9JQU1vQWdBaEIwRUFJUUJCQVNFSUEwQWdDQ0FPUmcwRElBNGdDR3NoQkNBRElBaEJBblJxS0FJQUlRVUNRQUpBQWtBQ1FBSkFBa0JCQVNBSWRFRUJkU0lOUVFGckRnZ0FBUVFDQkFRRUF3UUxRUUFoQWlBRlFRQWdCVUVBU2hzaEJpQUFJUUVEUUNBQ0lBWkdEUVVnQXlBQ0lBZHFhaTBBNkFjaENpQUxJQUZCQVhScUlnd2dCRG9BQVNBTUlBbzZBQUFnQWtFQmFpRUNJQUZCQVdvaEFRd0FDd0FMUVFBaEFpQUZRUUFnQlVFQVNoc2hDaUFBSVFFRFFDQUNJQXBHRFFRZ0N5QUJRUUYwYWlJR0lBTWdBaUFIYW1vdEFPZ0hJZ3c2QUFJZ0JpQUVPZ0FCSUFZZ0REb0FBQ0FHSUFRNkFBTWdBa0VCYWlFQ0lBRkJBbW9oQVF3QUN3QUxRUUFoQWlBRlFRQWdCVUVBU2hzaEJpQUVRUWgwUVlEK0EzRWhCQ0FBSVFFRFFDQUNJQVpHRFFNZ0N5QUJRUUYwYWlBRUlBTWdBaUFIYW1vdEFPZ0hjcTFDZ1lDRWdKQ0F3QUIrTndBQUlBSkJBV29oQWlBQlFRUnFJUUVNQUFzQUMwRUFJUUlnQlVFQUlBVkJBRW9iSVFZZ0JFRUlkRUdBL2dOeElRUWdBQ0VCQTBBZ0FpQUdSZzBDSUFzZ0FVRUJkR29pQ2lBRUlBTWdBaUFIYW1vdEFPZ0hjcTFDZ1lDRWdKQ0F3QUIrSWhFM0FBZ2dDaUFSTndBQUlBSkJBV29oQWlBQlFRaHFJUUVNQUFzQUMwRUFJUUVnQlVFQUlBVkJBRW9iSVFvZ0JFRUlkRUdBL2dOeElRd2dBQ0VFQTBBZ0FTQUtSZzBCSUFzZ0JFRUJkR29oRUNBTUlBTWdBU0FIYW1vdEFPZ0hjcTFDZ1lDRWdKQ0F3QUIrSVJGQkFDRUNBMEFnQWlBTlRrVUVRQ0FRSUFKQkFYUnFJZ1lnRVRjQUdDQUdJQkUzQUJBZ0JpQVJOd0FJSUFZZ0VUY0FBQ0FDUVJCcUlRSU1BUXNMSUFGQkFXb2hBU0FFSUExcUlRUU1BQXNBQ3lBSVFRRnFJUWdnQlNBSGFpRUhJQVVnRFd3Z0FHb2hBQXdBQ3dBRklBTWdBa0VDZEdvaUIwRkFheUFCTmdJQUlBSkJBV29oQWlBSEtBSUFJQUZxSVFFTUFRc0FDd0FMSUE4TElBbEJFR29rQUF2eUFnRUdmeU1BUVNCcklnVWtBQ0FFS0FJQUlRWWdCVUVNYWlBQ0lBTVFEU0lEUVloL1RRUkFJQVJCQkdvaEFpQUFJQUZxSWdsQkEyc2hCRUVBSUFaQkVIWnJRUjl4SVFNRFFDQUZRUXhxRUE4Z0FDQUVUM0pGQkVBZ0FpQUZLQUlNSWdZZ0JTZ0NFQ0lIZENBRGRrRUJkR29pQ0MwQUFTRUtJQUFnQ0MwQUFEb0FBQ0FDSUFZZ0J5QUthaUlHZENBRGRrRUJkR29pQnkwQUFDRUlJQVVnQmlBSExRQUJhallDRUNBQUlBZzZBQUVnQUVFQ2FpRUFEQUVMQ3dOQUlBVkJER29RRHlFSElBVW9BZ3doQmlBRktBSVFJUVFnQUNBSlR5QUhja1VFUUNBQ0lBWWdCSFFnQTNaQkFYUnFJZ1l0QUFBaEJ5QUZJQVFnQmkwQUFXbzJBaEFnQUNBSE9nQUFJQUJCQVdvaEFBd0JDd3NEUUNBQUlBbFBSUVJBSUFJZ0JpQUVkQ0FEZGtFQmRHb2lCeTBBQVNFSUlBQWdCeTBBQURvQUFDQUFRUUZxSVFBZ0JDQUlhaUVFREFFTEMwRnNRV3dnQVNBRktBSVVJQVVvQWhoSEd5QUVRU0JIR3lFREN5QUZRU0JxSkFBZ0F3dlBGQUVqZnlNQVFkQUFheUlGSkFCQmJDRUpBa0FnQTBFS1NRMEFBa0FnQXlBQ0x3QUVJZ2NnQWk4QUFDSUlJQUl2QUFJaURXcHFRUVpxSWd4SkRRQWdCQzhCQWlFR0lBVkJQR29nQWtFR2FpSUNJQWdRRFNJSlFZaC9TdzBCSUFWQktHb2dBaUFJYWlJQ0lBMFFEU0lKUVloL1N3MEJJQVZCRkdvZ0FpQU5haUlDSUFjUURTSUpRWWgvU3cwQklBVWdBaUFIYWlBRElBeHJFQTBpQ1VHSWYwc05BU0FFUVFScUlRb2dBQ0FCYWlJZlFRTnJJU0JCQUNBR2EwRWZjU0VMSUFVb0FnZ2hFU0FGS0FJY0lSSWdCU2dDTUNFVElBVW9Ba1FoRkNBRktBSUVJUWtnQlNnQ0dDRU5JQVVvQWl3aERDQUZLQUpBSVFZZ0JTZ0NFQ0VoSUFVb0FpUWhJaUFGS0FJNElTTWdCU2dDVENFa0lBVW9BZ0FoRlNBRktBSVVJUllnQlNnQ0tDRVhJQVVvQWp3aEdFRUJJUThnQUNBQlFRTnFRUUoySWdScUlnTWdCR29pQWlBRWFpSVpJUVFnQWlFSUlBTWhCd05BSUE5QkFYRkZJQVFnSUU5eVJRUkFJQUFnQ2lBWUlBWjBJQXQyUVFKMGFpSU9Md0VBT3dBQUlBNHRBQUloR2lBT0xRQURJUkFnQnlBS0lCY2dESFFnQzNaQkFuUnFJZzR2QVFBN0FBQWdEaTBBQWlFYklBNHRBQU1oRHlBSUlBb2dGaUFOZENBTGRrRUNkR29pRGk4QkFEc0FBQ0FPTFFBQ0lSd2dEaTBBQXlFZElBUWdDaUFWSUFsMElBdDJRUUowYWlJT0x3RUFPd0FBSUE0dEFBSWhIaUFPTFFBRElRNGdBQ0FRYWlJbElBb2dHQ0FHSUJwcUlnWjBJQXQyUVFKMGFpSVFMd0VBT3dBQUlCQXRBQUlnRUMwQUF5RW1JQWNnRDJvaUp5QUtJQmNnRENBYmFpSWFkQ0FMZGtFQ2RHb2lCeThCQURzQUFDQUhMUUFDSVF3Z0J5MEFBeUVRSUFnZ0hXb2lHeUFLSUJZZ0RTQWNhaUlQZENBTGRrRUNkR29pQ0M4QkFEc0FBQ0FJTFFBQ0lRMGdDQzBBQXlFY0lBUWdEbW9pSFNBS0lCVWdDU0FlYWlJT2RDQUxka0VDZEdvaUNTOEJBRHNBQUNBR2FpRUFRUU1oQndKL0lCUWdKRWtFUUNBQUlRWkJBd3dCQ3lBQVFRZHhJUVlnRkNBQVFRTjJheUlVS0FBQUlSaEJBQXNnQ1MwQUF5RWVJQWt0QUFJaENDQU1JQnBxSVFBZ0V5QWpTUVIvSUFBRklCTWdBRUVEZG1zaUV5Z0FBQ0VYUVFBaEJ5QUFRUWR4Q3lFTUlBMGdEMm9oQUNBSGNpRUpRUU1oRHdKL0lCSWdJa2tFUUNBQUlRMUJBd3dCQ3lBQVFRZHhJUTBnRWlBQVFRTjJheUlTS0FBQUlSWkJBQXNnQ0NBT2FpRUFJQWx5SUJFZ0lVa0VmeUFBQlNBUklBQkJBM1pySWhFb0FBQWhGVUVBSVE4Z0FFRUhjUXNoQ1NBbElDWnFJUUFnRUNBbmFpRUhJQnNnSEdvaENDQWRJQjVxSVFRZ0QzSkZJUThNQVFzTElBVWdERFlDTENBRklBWTJBa0FnQlNBTk5nSVlJQVVnQ1RZQ0JDQUZJQlEyQWtRZ0JTQVROZ0l3SUFVZ0VqWUNIQ0FGSUJFMkFnZ2dCU0FZTmdJOElBVWdGellDS0NBRklCWTJBaFFnQlNBVk5nSUFJQUlnQjBrZ0FDQURTM0lOQUVGc0lRa2dDQ0FaU3cwQklBTkJBMnNoQ1FOQUlBVkJQR29RRDBVZ0FDQUpTWEVFUUNBQUlBb2dCU2dDUENJTklBVW9Ba0FpREhRZ0MzWkJBblJxSWc0dkFRQTdBQUFnQUNBT0xRQURhaUlHSUFvZ0RTQU1JQTR0QUFKcUlnQjBJQXQyUVFKMGFpSU1Md0VBT3dBQUlBVWdBQ0FNTFFBQ2FqWUNRQ0FHSUF3dEFBTnFJUUFNQVFVZ0EwRUNheUVNQTBBZ0JVRThhaEFQSVFZZ0JTZ0NQQ0VOSUFVb0FrQWhDU0FBSUF4TElBWnlSUVJBSUFBZ0NpQU5JQWwwSUF0MlFRSjBhaUlHTHdFQU93QUFJQVVnQ1NBR0xRQUNhallDUUNBQUlBWXRBQU5xSVFBTUFRc0xBMEFnQUNBTVMwVUVRQ0FBSUFvZ0RTQUpkQ0FMZGtFQ2RHb2lCaThCQURzQUFDQUFJQVl0QUFOcUlRQWdDU0FHTFFBQ2FpRUpEQUVMQ3dKQUlBQWdBMDhOQUNBQUlBb2dEU0FKZENBTGRpSUFRUUowYWlJRExRQUFPZ0FBSUFNdEFBTkJBVVlFUUNBSklBTXRBQUpxSVFrTUFRc2dDVUVmU3cwQVFTQWdDU0FLSUFCQkFuUnFMUUFDYWlJQUlBQkJJRThiSVFrTElBSkJBMnNoREFOQUlBVkJLR29RRDBVZ0J5QU1TWEVFUUNBSElBb2dCU2dDS0NJR0lBVW9BaXdpQUhRZ0MzWkJBblJxSWcwdkFRQTdBQUFnQnlBTkxRQURhaUlESUFvZ0JpQUFJQTB0QUFKcUlnQjBJQXQyUVFKMGFpSUdMd0VBT3dBQUlBVWdBQ0FHTFFBQ2FqWUNMQ0FESUFZdEFBTnFJUWNNQVFVZ0FrRUNheUVHQTBBZ0JVRW9haEFQSVFNZ0JTZ0NLQ0VNSUFVb0Fpd2hBQ0FHSUFkSklBTnlSUVJBSUFjZ0NpQU1JQUIwSUF0MlFRSjBhaUlETHdFQU93QUFJQVVnQUNBRExRQUNhallDTENBSElBTXRBQU5xSVFjTUFRc0xBMEFnQmlBSFNVVUVRQ0FISUFvZ0RDQUFkQ0FMZGtFQ2RHb2lBeThCQURzQUFDQUhJQU10QUFOcUlRY2dBQ0FETFFBQ2FpRUFEQUVMQ3dKQUlBSWdCMDBOQUNBSElBb2dEQ0FBZENBTGRpSUNRUUowYWlJRExRQUFPZ0FBSUFNdEFBTkJBVVlFUUNBQUlBTXRBQUpxSVFBTUFRc2dBRUVmU3cwQVFTQWdBQ0FLSUFKQkFuUnFMUUFDYWlJQUlBQkJJRThiSVFBTElCbEJBMnNoREFOQUlBVkJGR29RRDBVZ0NDQU1TWEVFUUNBSUlBb2dCU2dDRkNJR0lBVW9BaGdpQW5RZ0MzWkJBblJxSWcwdkFRQTdBQUFnQ0NBTkxRQURhaUlESUFvZ0JpQUNJQTB0QUFKcUlnSjBJQXQyUVFKMGFpSUdMd0VBT3dBQUlBVWdBaUFHTFFBQ2FqWUNHQ0FESUFZdEFBTnFJUWdNQVFVZ0dVRUNheUVEQTBBZ0JVRVVhaEFQSVFJZ0JTZ0NGQ0VHSUFVb0FoZ2hCeUFESUFoSklBSnlSUVJBSUFnZ0NpQUdJQWQwSUF0MlFRSjBhaUlDTHdFQU93QUFJQVVnQnlBQ0xRQUNhallDR0NBSUlBSXRBQU5xSVFnTUFRc0xBMEFnQXlBSVNVVUVRQ0FJSUFvZ0JpQUhkQ0FMZGtFQ2RHb2lBaThCQURzQUFDQUlJQUl0QUFOcUlRZ2dCeUFDTFFBQ2FpRUhEQUVMQ3dKQUlBZ2dHVThOQUNBSUlBb2dCaUFIZENBTGRpSUNRUUowYWlJRExRQUFPZ0FBSUFNdEFBTkJBVVlFUUNBSElBTXRBQUpxSVFjTUFRc2dCMEVmU3cwQVFTQWdCeUFLSUFKQkFuUnFMUUFDYWlJQ0lBSkJJRThiSVFjTEEwQWdCUkFQUlNBRUlDQkpjUVJBSUFRZ0NpQUZLQUlBSWdZZ0JTZ0NCQ0lDZENBTGRrRUNkR29pREM4QkFEc0FBQ0FFSUF3dEFBTnFJZ01nQ2lBR0lBSWdEQzBBQW1vaUFuUWdDM1pCQW5ScUlnUXZBUUE3QUFBZ0JTQUNJQVF0QUFKcU5nSUVJQU1nQkMwQUEyb2hCQXdCQlNBZlFRSnJJUU1EUUNBRkVBOGhBaUFGS0FJQUlRWWdCU2dDQkNFSUlBTWdCRWtnQW5KRkJFQWdCQ0FLSUFZZ0NIUWdDM1pCQW5ScUlnSXZBUUE3QUFBZ0JTQUlJQUl0QUFKcU5nSUVJQVFnQWkwQUEyb2hCQXdCQ3dzRFFDQURJQVJKUlFSQUlBUWdDaUFHSUFoMElBdDJRUUowYWlJQ0x3RUFPd0FBSUFRZ0FpMEFBMm9oQkNBSUlBSXRBQUpxSVFnTUFRc0xBa0FnQkNBZlR3MEFJQVFnQ2lBR0lBaDBJQXQySWdKQkFuUnFJZ010QUFBNkFBQWdBeTBBQTBFQlJnUkFJQWdnQXkwQUFtb2hDQXdCQ3lBSVFSOUxEUUJCSUNBSUlBb2dBa0VDZEdvdEFBSnFJZ0lnQWtFZ1R4c2hDQXRCYkVGc1FXeEJiRUZzUVd4QmJFRnNJQUVnQ0VFZ1J4c2dCU2dDQ0NBRktBSU1SeHNnQjBFZ1J4c2dCU2dDSENBRktBSWdSeHNnQUVFZ1J4c2dCU2dDTUNBRktBSTBSeHNnQ1VFZ1J4c2dCU2dDUkNBRktBSklSeHNoQ1F3SkN3QUxBQXNBQ3dBTEFBc0FDd0FMQUF0QmJDRUpDeUFGUWRBQWFpUUFJQWtMN0JBQkhuOGpBRUhRQUdzaUJTUUFRV3doQ1FKQUlBTkJDa2tOQUFKQUlBTWdBaThBQkNJR0lBSXZBQUFpQnlBQ0x3QUNJZ2hxYWtFR2FpSU9TUTBBSUFRdkFRSWhEeUFGUVR4cUlBSkJCbW9pQWlBSEVBMGlDVUdJZjBzTkFTQUZRU2hxSUFJZ0Iyb2lBaUFJRUEwaUNVR0lmMHNOQVNBRlFSUnFJQUlnQ0dvaUFpQUdFQTBpQ1VHSWYwc05BU0FGSUFJZ0Jtb2dBeUFPYXhBTklnbEJpSDlMRFFFZ0JFRUVhaUVLSUFBZ0FXb2lIRUVEYXlFZFFRQWdEMnRCSDNFaEN5QUZLQUlJSVJFZ0JTZ0NIQ0VTSUFVb0FqQWhFeUFGS0FKRUlSUWdCU2dDQkNFSklBVW9BaGdoQmlBRktBSXNJUWNnQlNnQ1FDRUlJQVVvQWhBaEhpQUZLQUlrSVI4Z0JTZ0NPQ0VnSUFVb0Frd2hJU0FGS0FJQUlSVWdCU2dDRkNFV0lBVW9BaWdoRnlBRktBSThJUmhCQVNFTklBQWdBVUVEYWtFQ2RpSUNhaUlPSUFKcUlnOGdBbW9pR1NFRUlBOGhBaUFPSVFNRFFDQU5SU0FFSUIxUGNrVUVRQ0FLSUJnZ0NIUWdDM1pCQVhScUlnd3RBQUVoRFNBQUlBd3RBQUE2QUFBZ0NpQVhJQWQwSUF0MlFRRjBhaUlNTFFBQklSQWdBeUFNTFFBQU9nQUFJQW9nRmlBR2RDQUxka0VCZEdvaURDMEFBU0VhSUFJZ0RDMEFBRG9BQUNBS0lCVWdDWFFnQzNaQkFYUnFJZ3d0QUFFaEd5QUVJQXd0QUFBNkFBQWdDaUFZSUFnZ0RXb2lDSFFnQzNaQkFYUnFJZ3d0QUFFaERTQUFJQXd0QUFBNkFBRWdDaUFYSUFjZ0VHb2lCM1FnQzNaQkFYUnFJZ3d0QUFFaEVDQURJQXd0QUFBNkFBRWdDaUFXSUFZZ0dtb2lESFFnQzNaQkFYUnFJZ1l0QUFFaEdpQUNJQVl0QUFBNkFBRWdDaUFWSUFrZ0cyb2lHM1FnQzNaQkFYUnFJZ2t0QUFFaElpQUVJQWt0QUFBNkFBRWdDQ0FOYWlFR1FRTWhDUUovSUJRZ0lVa0VRRUVESVEwZ0Jnd0JDeUFVSUFaQkEzWnJJaFFvQUFBaEdFRUFJUTBnQmtFSGNRc2hDQ0FISUJCcUlRWWdFeUFnU1FSL0lBWUZJQk1nQmtFRGRtc2lFeWdBQUNFWFFRQWhDU0FHUVFkeEN5RUhJQXdnR21vaERDQUpJQTF5SVJCQkF5RU5BbjhnRWlBZlNRUkFJQXdoQmtFRERBRUxJQXhCQjNFaEJpQVNJQXhCQTNackloSW9BQUFoRmtFQUN5QWJJQ0pxSVF3Z0VISWhFQ0FSSUI1SkJIOGdEQVVnRVNBTVFRTjJheUlSS0FBQUlSVkJBQ0VOSUF4QkIzRUxJUWtnQkVFQ2FpRUVJQUpCQW1vaEFpQURRUUpxSVFNZ0FFRUNhaUVBSUEwZ0VISkZJUTBNQVFzTElBVWdCellDTENBRklBZzJBa0FnQlNBR05nSVlJQVVnQ1RZQ0JDQUZJQlEyQWtRZ0JTQVROZ0l3SUFVZ0VqWUNIQ0FGSUJFMkFnZ2dCU0FZTmdJOElBVWdGellDS0NBRklCWTJBaFFnQlNBVk5nSUFJQUFnRGtzZ0F5QVBTM0lOQUVGc0lRa2dBaUFaU3cwQklBNUJBMnNoQ1FOQUlBVkJQR29RRHlBQUlBbFBja1VFUUNBS0lBVW9BandpQmlBRktBSkFJZ2QwSUF0MlFRRjBhaUlJTFFBQklRd2dBQ0FJTFFBQU9nQUFJQW9nQmlBSElBeHFJZ1owSUF0MlFRRjBhaUlITFFBQUlRZ2dCU0FHSUFjdEFBRnFOZ0pBSUFBZ0NEb0FBU0FBUVFKcUlRQU1BUXNMQTBBZ0JVRThhaEFQSVFjZ0JTZ0NQQ0VHSUFVb0FrQWhDU0FBSUE1UElBZHlSUVJBSUFvZ0JpQUpkQ0FMZGtFQmRHb2lCaTBBQUNFSElBVWdDU0FHTFFBQmFqWUNRQ0FBSUFjNkFBQWdBRUVCYWlFQURBRUxDd05BSUFBZ0RrOUZCRUFnQ2lBR0lBbDBJQXQyUVFGMGFpSUhMUUFCSUFBZ0J5MEFBRG9BQUNBQVFRRnFJUUFnQ1dvaENRd0JDd3NnRDBFRGF5RUFBMEFnQlVFb2FoQVBJQUFnQTAxeVJRUkFJQW9nQlNnQ0tDSUdJQVVvQWl3aUIzUWdDM1pCQVhScUlnZ3RBQUVoRGlBRElBZ3RBQUE2QUFBZ0NpQUdJQWNnRG1vaUJuUWdDM1pCQVhScUlnY3RBQUFoQ0NBRklBWWdCeTBBQVdvMkFpd2dBeUFJT2dBQklBTkJBbW9oQXd3QkN3c0RRQ0FGUVNocUVBOGhCeUFGS0FJb0lRWWdCU2dDTENFQUlBTWdEMDhnQjNKRkJFQWdDaUFHSUFCMElBdDJRUUYwYWlJR0xRQUFJUWNnQlNBQUlBWXRBQUZxTmdJc0lBTWdCem9BQUNBRFFRRnFJUU1NQVFzTEEwQWdBeUFQVDBVRVFDQUtJQVlnQUhRZ0MzWkJBWFJxSWdjdEFBRWhDQ0FESUFjdEFBQTZBQUFnQTBFQmFpRURJQUFnQ0dvaEFBd0JDd3NnR1VFRGF5RURBMEFnQlVFVWFoQVBJQUlnQTA5eVJRUkFJQW9nQlNnQ0ZDSUdJQVVvQWhnaUIzUWdDM1pCQVhScUlnZ3RBQUVoRGlBQ0lBZ3RBQUE2QUFBZ0NpQUdJQWNnRG1vaUJuUWdDM1pCQVhScUlnY3RBQUFoQ0NBRklBWWdCeTBBQVdvMkFoZ2dBaUFJT2dBQklBSkJBbW9oQWd3QkN3c0RRQ0FGUVJScUVBOGhCeUFGS0FJVUlRWWdCU2dDR0NFRElBSWdHVThnQjNKRkJFQWdDaUFHSUFOMElBdDJRUUYwYWlJR0xRQUFJUWNnQlNBRElBWXRBQUZxTmdJWUlBSWdCem9BQUNBQ1FRRnFJUUlNQVFzTEEwQWdBaUFaVDBVRVFDQUtJQVlnQTNRZ0MzWkJBWFJxSWdjdEFBRWhDQ0FDSUFjdEFBQTZBQUFnQWtFQmFpRUNJQU1nQ0dvaEF3d0JDd3NEUUNBRkVBOGdCQ0FkVDNKRkJFQWdDaUFGS0FJQUlnSWdCU2dDQkNJR2RDQUxka0VCZEdvaUJ5MEFBU0VJSUFRZ0J5MEFBRG9BQUNBS0lBSWdCaUFJYWlJQ2RDQUxka0VCZEdvaUJpMEFBQ0VISUFVZ0FpQUdMUUFCYWpZQ0JDQUVJQWM2QUFFZ0JFRUNhaUVFREFFTEN3TkFJQVVRRHlFSElBVW9BZ0FoQmlBRktBSUVJUUlnQkNBY1R5QUhja1VFUUNBS0lBWWdBblFnQzNaQkFYUnFJZ1l0QUFBaEJ5QUZJQUlnQmkwQUFXbzJBZ1FnQkNBSE9nQUFJQVJCQVdvaEJBd0JDd3NEUUNBRUlCeFBSUVJBSUFvZ0JpQUNkQ0FMZGtFQmRHb2lCeTBBQVNFSUlBUWdCeTBBQURvQUFDQUVRUUZxSVFRZ0FpQUlhaUVDREFFTEMwRnNRV3hCYkVGc1FXeEJiRUZzUVd3Z0FTQUNRU0JIR3lBRktBSUlJQVVvQWd4SEd5QURRU0JIR3lBRktBSWNJQVVvQWlCSEd5QUFRU0JIR3lBRktBSXdJQVVvQWpSSEd5QUpRU0JIR3lBRktBSkVJQVVvQWtoSEd5RUpEQUVMUVd3aENRc2dCVUhRQUdva0FDQUpDMWdCQTM4Q1FDQUFLQUtRNndFaUFVVU5BQ0FCS0FJQUlBRkJ0TlVCYWlnQ0FDSUNJQUZCdU5VQmFpZ0NBQ0lERUJNZ0FnUkFJQU1nQVNBQ0VRSUFEQUVMSUFFUUJnc2dBRUVBTmdLZzZ3RWdBRUlBTndPUTZ3RUw2UU1DQkg4Q2ZpQUFRUUJCS0JBRElRUWdBa0VCUVFVZ0F4c2lBRWtFUUNBQUR3c2dBVVVFUUVGL0R3dEJBU0VHQWtBQ1FDQURRUUZHRFFBZ0F5RUdJQUVvQUFBaUJVR282cjVwUmcwQVFYWWhBeUFGUVhCeFFkRFV0TUlCUncwQlFRZ2hBeUFDUVFoSkRRRWdBVFVBQkNFSUlBUkJBVFlDRkNBRUlBZzNBd0JCQUE4TElBRWdBaUFHRUJvaUF5QUNTdzBBSUFRZ0F6WUNHRUZ5SVFNZ0FDQUJhaUlGUVFGckxRQUFJZ0pCQ0hFTkFDQUNRU0J4SWdaRkJFQkJjQ0VESUFVdEFBQWlCVUduQVVzTkFTQUZRUWR4clVJQklBVkJBM1pCQ21xdGhpSUlRZ09JZmlBSWZDRUpJQUJCQVdvaEFBc2dBa0VHZGlFRklBSkJBblpCQUNFREFrQUNRQUpBQWtBZ0FrRURjVUVCYXc0REFBRUNBd3NnQUNBQmFpMEFBQ0VESUFCQkFXb2hBQXdDQ3lBQUlBRnFMd0FBSVFNZ0FFRUNhaUVBREFFTElBQWdBV29vQUFBaEF5QUFRUVJxSVFBTFFRRnhJUUlDZmdKQUFrQUNRQUpBSUFWQkFXc09Bd0VDQXdBTFFuOGdCa1VOQXhvZ0FDQUJhakVBQUF3REN5QUFJQUZxTXdBQVFvQUNmQXdDQ3lBQUlBRnFOUUFBREFFTElBQWdBV29wQUFBTElRZ2dCQ0FDTmdJZ0lBUWdBellDSENBRUlBZzNBd0JCQUNFRElBUkJBRFlDRkNBRUlBZ2dDU0FHR3lJSU53TUlJQVJDZ0lBSUlBZ2dDRUtBZ0FoYUd6NENFQXNnQXd0ZkFRRi9RYmgvSVFNZ0FVRUJRUVVnQWhzaUFrOEVmeUFBSUFKcVFRRnJMUUFBSWdCQkEzRkJBblJCb0I1cUtBSUFJQUpxSUFCQkJIWkJESEZCc0I1cUtBSUFhaUFBUVNCeElnRkZhaUFCUVFWMklBQkJ3QUJKY1dvRlFiaC9Dd3NNQUNBQUlBRWdBa0VBRUJrTGx3TUNCWDhDZmlNQVFVQnFJZ1FrQUFKQUEwQWdBVUVGVHdSQUFrQWdBQ2dBQUVGd2NVSFExTFRDQVVZRVFFSitJUWNnQVVFSVNRMEVJQUFvQUFRaUFrRjNTdzBFSUFKQkNHb2lBeUFCU3cwRUlBSkJnWDlKRFFFTUJBc2dCRUVZYWlBQUlBRVFHeUVDUW40Z0JDa0RHRUlBSUFRb0FpeEJBVWNiSUFJYklnZENmVllOQXlBSElBaDhJZ2dnQjFSQ2ZpRUhEUU1DUUFKQUlBRkJDRWtOQUNBQUtBQUFRWEJ4UWREVXRNSUJSdzBBSUFBb0FBUWlBa0YzU3cwRlFiaC9JQUpCQ0dvaUFpQUJJQUpKR3lFRERBRUxJQVJCR0dvZ0FDQUJFQnNpQWtHSWYwc0VRQ0FDSVFNTUFRdEJ1SDhoQXlBQ0RRQWdBU0FFS0FJd0lnSnJJUVVnQUNBQ2FpRUdBMEFnQmlBRklBUkJER29RSFNJRFFZaC9TdzBCSUFOQkEyb2lBaUFGU3dSQVFiaC9JUU1NQWdzZ0JTQUNheUVGSUFJZ0Jtb2hCaUFFS0FJUVJRMEFDeUFFS0FJNEJIOUJ1SDhoQXlBRlFRUkpEUUVnQmtFRWFnVWdCZ3NnQUdzaEF3c2dBMEdJZjBzTkF3c2dBU0FEYXlFQklBQWdBMm9oQUF3QkN3dENmaUFJSUFFYklRY0xJQVJCUUdza0FDQUhDMlFCQVg5QnVIOGhBd0pBSUFGQkEwa05BQ0FBTFFBQ0lRRWdBaUFBTHdBQUlnQkJBWEUyQWdRZ0FpQUFRUUYyUVFOeElnTTJBZ0FnQWlBQUlBRkJFSFJ5UVFOMklnQTJBZ2dDUUFKQUlBTkJBV3NPQXdJQkFBRUxRV3dQQ3lBQUlRTUxJQU1MUkFFQ2Z5QUJJQUlvQWdRaUF5QUJLQUlFYWlJRU5nSUVJQUFnQTBFQ2RFR2dIV29vQWdBZ0FTZ0NBRUVBSUFScmRuRTJBZ0FnQVJBUEdpQUFJQUpCQ0dvMkFnUUx6Z0VCQm45QnVuOGhDZ0pBSUFJb0FnUWlDQ0FDS0FJQUlnbHFJZzBnQVNBQWEwc05BRUZzSVFvZ0NTQUVJQU1vQWdBaUMydExEUUFnQUNBSmFpSUVJQUlvQWdnaURHc2hBaUFBSUFGQklHc2lBQ0FMSUFsQkFCQWdJQU1nQ1NBTGFqWUNBQUpBQWtBZ0JDQUZheUFNVHdSQUlBSWhCUXdCQ3lBTUlBUWdCbXRMRFFJZ0J5QUhJQUlnQldzaUFtb2lBU0FJYWs4RVFDQUVJQUVnQ0JBS0dnd0NDeUFDSUFocUlRZ2dCQ0FCUVFBZ0Ftc1FDaUFDYXlFRUN5QUVJQUFnQlNBSVFRRVFJQXNnRFNFS0N5QUtDOGNFQVFKL0lBQWdBMm9oQmdKQUlBTkJCMHdFUUFOQUlBQWdCazhOQWlBQUlBSXRBQUE2QUFBZ0FFRUJhaUVBSUFKQkFXb2hBZ3dBQ3dBTElBUkJBVVlFUUFKQUlBQWdBbXNpQlVFSFRRUkFJQUFnQWkwQUFEb0FBQ0FBSUFJdEFBRTZBQUVnQUNBQ0xRQUNPZ0FDSUFBZ0FpMEFBem9BQXlBQUlBSWdCVUVDZENJRlFjQWVhaWdDQUdvaUFpZ0FBRFlBQkNBQ0lBVkI0QjVxS0FJQWF5RUNEQUVMSUFBZ0Fpa0FBRGNBQUFzZ0FrRUlhaUVDSUFCQkNHb2hBQXNnQVNBR1R3UkFJQUFnQTJvaEFTQUVRUUZISUFBZ0FtdEJEMHB5UlFSQUEwQWdBQ0FDS1FBQU53QUFJQUpCQ0dvaEFpQUFRUWhxSWdBZ0FVa05BQXdEQ3dBTElBQWdBaWtBQURjQUFDQUFJQUlwQUFnM0FBZ2dBMEVSU1EwQklBQkJFR29oQUFOQUlBQWdBaWtBRURjQUFDQUFJQUlwQUJnM0FBZ2dBQ0FDS1FBZ053QVFJQUFnQWlrQUtEY0FHQ0FDUVNCcUlRSWdBRUVnYWlJQUlBRkpEUUFMREFFTEFrQWdBQ0FCU3dSQUlBQWhBUXdCQ3lBQklBQnJJUVVDUUNBRVFRRkhJQUFnQW10QkQwcHlSUVJBSUFJaEF3TkFJQUFnQXlrQUFEY0FBQ0FEUVFocUlRTWdBRUVJYWlJQUlBRkpEUUFMREFFTElBQWdBaWtBQURjQUFDQUFJQUlwQUFnM0FBZ2dCVUVSU0EwQUlBQkJFR29oQUNBQ0lRTURRQ0FBSUFNcEFCQTNBQUFnQUNBREtRQVlOd0FJSUFBZ0F5a0FJRGNBRUNBQUlBTXBBQ2czQUJnZ0EwRWdhaUVESUFCQklHb2lBQ0FCU1EwQUN3c2dBaUFGYWlFQ0N3TkFJQUVnQms4TkFTQUJJQUl0QUFBNkFBQWdBVUVCYWlFQklBSkJBV29oQWd3QUN3QUxDNjRIQWdWL0FYNGpBRUdBQVdzaUVTUUFJQkVnQXpZQ2ZFRi9JUThDUUFKQUFrQUNRQUpBSUFJT0JBRUFBd0lFQ3lBR1JRUkFRYmgvSVE4TUJBdEJiQ0VQSUFVdEFBQWlBaUFEU3cwRElBZ2dBa0VDZENJQ2FpZ0NBQ0VESUFJZ0Iyb29BZ0FoQWlBQVFRQTZBQXNnQUVJQU53SUFJQUFnQWpZQ0RDQUFJQU02QUFvZ0FFRUFPd0VJSUFFZ0FEWUNBRUVCSVE4TUF3c2dBU0FKTmdJQVFRQWhEd3dDQ3lBS1JRUkFRV3doRHd3Q0MwRUFJUThnQzBVZ0RFRVpTSElOQVVFSUlBUjBRUWhxSVFCQkFDRURBMEFnQUNBRFRRMENJQU5CUUdzaEF3d0FDd0FMUVd3aER5QVJJQkZCL0FCcUlCRkIrQUJxSUFVZ0JoQU1JZ05CaUg5TERRQWdFU2dDZUNJQ0lBUkxEUUFnRVNnQ2ZFRUJhaUVKSUFCQkNHb2hDMEdBZ0FJZ0FuUkJFSFVoQlVFQklSQkJBU0FDZENJUFFRRnJJZ29oRWdOQUlBa2dEa2NFUUFKQUlCRWdEa0VCZENJRWFpOEJBQ0lNUWYvL0EwWUVRQ0FMSUJKQkEzUnFJQTQyQWdRZ0VrRUJheUVTUVFFaERBd0JDeUFRUVFBZ0JTQU13VW9iSVJBTElBUWdEV29nRERzQkFDQU9RUUZxSVE0TUFRc0xJQUFnQWpZQ0JDQUFJQkEyQWdBQ1FDQUtJQkpHQkVBZ0RVSHFBR29oQmtFQUlSQkJBQ0VNQTBBZ0NTQVFSZ1JBSUE5QkEzWWdEMEVCZG1wQkEyb2lCVUVCZENFRVFRQWhERUVBSVJJRFFFRUFJUTRnRHlBU1RRMEVBMEFnRGtFQ1J3UkFJQXNnQlNBT2JDQU1haUFLY1VFRGRHb2dCaUFPSUJKcWFpMEFBRFlDQkNBT1FRRnFJUTRNQVFzTElCSkJBbW9oRWlBRUlBeHFJQXB4SVF3TUFBc0FCU0FSSUJCQkFYUnFMZ0VBSVFVZ0JpQU1haUlFSUJNM0FBQkJDQ0VPQTBBZ0JTQU9TZ1JBSUFRZ0Rtb2dFemNBQUNBT1FRaHFJUTRNQVFzTElCTkNnWUtFaUpDZ3dJQUJmQ0VUSUJCQkFXb2hFQ0FGSUF4cUlRd01BUXNBQ3dBTElBOUJBM1lnRDBFQmRtcEJBMm9oQlVFQUlSQkJBQ0VPQTBBZ0NTQVFSZzBCUVFBaERDQVJJQkJCQVhScUxnRUFJZ1JCQUNBRVFRQktHeUVFQTBBZ0JDQU1Sd1JBSUFzZ0RrRURkR29nRURZQ0JBTkFJQVVnRG1vZ0NuRWlEaUFTU3cwQUN5QU1RUUZxSVF3TUFRc0xJQkJCQVdvaEVBd0FDd0FMSUFKQkFXb2hCVUVBSVF3RFFDQU1JQTlIQkVBZ0RTQUxJQXhCQTNScUlna29BZ1FpQkVFQmRHb2lBaUFDTHdFQUlnWkJBV283QVFBZ0NTQUZJQVpuUVdCemFpSUNPZ0FESUFrZ0JpQUNkQ0FQYXpzQkFDQUpJQWdnQkVFQ2RDSUNhaWdDQURvQUFpQUpJQUlnQjJvb0FnQTJBZ1FnREVFQmFpRU1EQUVMQ3lBQklBQTJBZ0FnQXlFUEN5QVJRWUFCYWlRQUlBOEw3Vm9DTzM4R2ZpTUFRZUFCYXlJRUpBQUNRRUd3N0FrUUJTSUZSUVJBUVVBaEJ3d0JDeUFGUWdBM0F2VHFBU0FGUVFBMkFzVHJBU0FGUVFBMkFyVHJBU0FGUWdBM0FwenJBU0FGUVFBMkFyanBBU0FGUVFBMkFxenNDU0FGUWdBM0F0VHJBU0FGUWdBM0FxenJBU0FGUWdBM0E0anJBU0FGUWdBM0F1VHFBU0FGUWdBM0F1VHJBU0FGUVlHQWdNQUFOZ0s4NndFZ0JVSUFOd0trNndFZ0JVSDg2Z0ZxUVFBMkFnQWdCVUdRNndGcVFnQTNBd0FnQlJBWUlBVkJyTlVCYWlFVUlBVkIrT3NCYWlFY0lBVkJzT29CYWlFaUlBVkJvREJxSVNvZ0JVR1lJR29oS3lBRlFhalFBR29oSGlBRlFSQnFJU3dnQlVFSWFpRW9JQVZCQkdvaExTQUZRY0RwQVdvaEtTQUZRWWpyQVdvZ0JFR1VBV29oTHlBRVFZd0JhaUV3SUFSQmhBRnFJVEVnQkVIY0FHb2hNaUFFUWRRQWFpRXpJQVJCekFCcUlUUWdBQ0VkQWtBQ1FBSkFBa0FDUUFOQVFRRkJCU0FGS0FMazZnRWJJUVlDUUFOQUlBTWdCa2tOQVNBQ0tBQUFRWEJ4UWREVXRNSUJSZ1JBUWJoL0lRY2dBMEVJU1EwSUlBSW9BQVFpRGtGM1N3UkFRWEloQnd3SkN5QURJQTVCQ0dvaUNVa05DQ0FPUVlCL1N3UkFJQWtoQnd3SkN5QURJQWxySVFNZ0FpQUphaUVDREFFTEN5QUZRZ0EzQXF6cEFTQUZRZ0EzQStqcEFTQUZRUUEyQXBqckFTQUZRZ0EzQTREcUFTQUZRZ00zQS9qcEFTQUZRYlRwQVdwQ0FEY0NBQ0FGUWZEcEFXcENBRGNEQUNBRlFhalFBR29pQ1VHTWdJRGdBRFlDQUNBRlFhelFBV3BCNEJJcEFnQTNBZ0FnQlVHMDBBRnFRZWdTS0FJQU5nSUFJQVVnQlVFUWFqWUNBQ0FGSUFWQm9EQnFOZ0lFSUFVZ0JVR1lJR28yQWdnZ0JTQUpOZ0lNSUFWQkFVRUZJQVVvQXVUcUFSczJBcnpwQVFKQUlBRkZEUUFnQlNnQ3JPa0JJZ2tnSFVZTkFDQUZJQWsyQXJqcEFTQUZJQjAyQXF6cEFTQUZLQUt3NlFFaERpQUZJQjAyQXJEcEFTQUZJQjBnRGlBSmEybzJBclRwQVF0QnVIOGhDU0FEUVFWQkNTQUZLQUxrNmdFaUJodEpEUVVnQWtFQlFRVWdCaHNnQmhBYUlnNUJpSDlMQkVBZ0RpRUpEQVVMSUFNZ0RrRURha2tOQlNBcElBSWdEaUFHRUJraUJrR0lmMHNFUUNBR0lRa01CUXNnQmcwRkFrQUNRQ0FGS0FLbzZ3RkJBVWNOQUNBRktBS2s2d0VpQ1VVTkFDQUZLQUtVNndGRkRRQWdDU2dDQkVFQmF5SUhJQVVvQXR6cEFTSUtyVUtIbGErdm1MYmVtNTUvZmtMSno5bXk4ZVc2NmllRlFoZUpRcy9XMDc3U3g2dlpRbjVDK2ZQZDhabjJtYXNXZkNJL1FpR0lJRCtGUXMvVzA3N1N4NnZaUW40aVAwSWRpQ0EvaFVMNTg5M3htZmFacXhaK0lqOUNJSWdnUDRXbmNTRUdJQWtvQWdBaEZRTkFRUUFoQ0FKQUlCVWdCa0VDZEdvb0FnQWlDVVVOQUNBSktBSUlRUWhKRFFBZ0NTZ0NCQ0lTS0FBQVFiZkl3dUYrUncwQUlCSW9BQVFoQ0FzZ0NDQUtSd1JBSUFZZ0IzRkJBV29oQmlBSURRRUxDeUFKUlEwQUlBVVFHQ0FGUVg4MkFxRHJBU0FGSUFrMkFwVHJBU0FGSUFVb0F0enBBU0lJTmdLWTZ3RU1BUXNnQlNnQzNPa0JJUWdMQWtBZ0NFVU5BQ0FGS0FLWTZ3RWdDRVlOQUVGZ0lRa01CZ3NDUUNBRktBTGc2UUVFUUNBRklBVW9BdWpxQVNJSlJUWUM3T29CSUFrTkFTQUZRdm5xME5EbnlhSGs0UUEzQTZqcUFTQUZRZ0EzQTZEcUFTQUZRcy9XMDc3U3g2dlpRamNEbU9vQklBVkMxdXVDN3VyOWlmWGdBRGNEa09vQklBVkNBRGNEaU9vQklDSkJBRUVvRUFNYURBRUxJQVZCQURZQzdPb0JDeUFCSUIxcUlTVWdCU0FGS1FQbzZRRWdEcTE4TndQbzZRRWdBeUFPYXlFRElBSWdEbW9oQWlBZElRNERRQ0FDSUFNZ0JFRXNhaEFkSWhWQmlIOUxCRUFnRlNFSkRBWUxJQU5CQTJzaU5TQVZTUTBFSUFKQkEyb2hHMEZzSVFrQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQ0FFS0FJc0RnTUNBUUFWQ3lBVlFmLy9CMHNORXlBVlFRTkpEUklnQlNrRHlPa0JJVDhDUUFKQUlCc3RBQUFpQ1VFRGNTSWFRUUZyRGdNR0FRQUhDeUFGS0FLQTZnRU5BRUZpSVFrTUZRc2dGVUVGU1EwU0lCc29BQUFoQXdKL0FrQUNRQUpBSUFsQkFuWkJBM0VpQ1VFQ2F3NENBUUlBQ3lBSlFRQkhJUWNnQTBFRWRrSC9CM0VoQzBFRElRWWdBMEVPZGtIL0IzRU1BZ3RCQkNFR0lBTkJCSFpCLy84QWNTRUxRUUVoQnlBRFFSSjJEQUVMSUFOQkJIWkIvLzhQY1NJTFFZQ0FDRXNORTBFQklRZEJCU0VHSUFJdEFBZEJDblFnQTBFV2RuSUxJZ2dnQm1vaUNTQVZTdzBTQWtBZ0MwR0JCa2tOQUNBRktBS2M2d0ZGRFFCQkFDRURBMEFnQTBHRGdBRkxEUUVnQTBGQWF5RUREQUFMQUFzZ0JpQWJhaUVQSUJwQkEwY05CaUFGS0FJTUlnSXRBQUZCQ0hRaEF5QUhEUWNnQTBVTkNDQUVRZkFBYWlBUElBZ1FEU0lEUVloL1N3MEpJQUpCQkdvaEJpQUxJQnhxSWhKQkEyc2hDa0VBSUFJdkFRSnJRUjl4SVFjZ0hDRURBMEFnQkVId0FHb1FEMFVnQXlBS1NYRUVRQ0FESUFZZ0JDZ0NjQ0lJSUFRb0FuUWlEM1FnQjNaQkFuUnFJZ0l2QVFBN0FBQWdBeUFDTFFBRGFpSURJQVlnQ0NBUElBSXRBQUpxSWdoMElBZDJRUUowYWlJQ0x3RUFPd0FBSUFRZ0NDQUNMUUFDYWpZQ2RDQURJQUl0QUFOcUlRTU1BUVVnRWtFQ2F5RUlBMEFnQkVId0FHb1FEeUVQSUFRb0FuQWhDaUFFS0FKMElRSWdBeUFJU3lBUGNrVUVRQ0FESUFZZ0NpQUNkQ0FIZGtFQ2RHb2lDaThCQURzQUFDQUVJQUlnQ2kwQUFtbzJBblFnQXlBS0xRQURhaUVEREFFTEN3TkFJQU1nQ0UwRVFDQURJQVlnQ2lBQ2RDQUhka0VDZEdvaUR5OEJBRHNBQUNBRElBOHRBQU5xSVFNZ0FpQVBMUUFDYWlFQ0RBRUxDd0pBSUFNZ0VrOE5BQ0FESUFZZ0NpQUNkQ0FIZGtFQ2RHb2lBeTBBQURvQUFDQURMUUFEUVFGR0JFQWdBaUFETFFBQ2FpRUNEQUVMSUFKQkgwc05BRUVnSUFJZ0F5MEFBbW9pQWlBQ1FTQlBHeUVDQzBGc1FXd2dDeUFFS0FKNElBUW9BbnhIR3lBQ1FTQkhHeUVEREFzTEFBc0FDeUFFS0FJMElnSWdKU0FPYTBzTkNpQU9SUVJBUVFBaENTQUNEUUlNRGdzZ0RpQWJMUUFBSUFJUUF4b2dBaUVKREF3TElCVWdKU0FPYTBzTkNTQU9EUUZCQUNFSklCVkZEUXdMUWJaL0lRa01FUXNnRGlBYklCVVFBaG9nRlNFSkRBb0xJQndnR3dKL0FrQUNRQUpBSUFsQkFuWkJBM0ZCQVdzT0F3RUFBZ0FMSUFsQkEzWWhBMEVCREFJTElCc3ZBQUJCQkhZaEEwRUNEQUVMSUJWQkJFa05EaUFDTHdBRElBSXRBQVZCRUhSeUlnSkJqNENBQVVzTkRpQUNRUVIySVFOQkF3c2lBbW90QUFBZ0EwRWdhaEFESVFrZ0JTQUROZ0tBNndFZ0JTQUpOZ0x3NmdFZ0FrRUJhaUVKREFVTElCVUNmd0pBQWtBQ1FDQUpRUUoyUVFOeFFRRnJEZ01CQUFJQUN5QUpRUU4ySVFOQkFRd0NDeUFiTHdBQVFRUjJJUU5CQWd3QkN5QUNMd0FESUFJdEFBVkJFSFJ5UVFSMklRTkJBd3NpQWlBRGFpSUpRU0JxU1FSQUlBa2dGVXNORFNBY0lBSWdHMm9nQXhBQ0lRSWdCU0FETmdLQTZ3RWdCU0FDTmdMdzZnRWdBaUFEYWlJQ1FnQTNBQmdnQWtJQU53QVFJQUpDQURjQUNDQUNRZ0EzQUFBTUJRc2dCU0FETmdLQTZ3RWdCU0FDSUJ0cU5nTHc2Z0VNQkFzZ0IwVUVRQ0FlSUE4Z0NDQVVFQlFpQWtHSWYwc2dBaUFJVDNJTkRDQWNJQXNnQWlBUGFpQUlJQUpySUI0UUZTRUREQU1MSUF0RklBaEZjZzBMSUF0QkNIWWlBeUFJSUF0SkJIOGdDRUVFZENBTGJnVkJEd3RCR0d3aUFrR01DR29vQWdCc0lBSkJpQWhxS0FJQWFpSUdRUU4ySUFacUlBSkJnQWhxS0FJQUlBSkJoQWhxS0FJQUlBTnNha2tFUUNNQVFSQnJJaEFrQUNBZUtBSUFJUU1nRkVId0JHcEJBRUhzQUJBRElRWkJWQ0VDQWtBZ0EwSC9BWEVpREVFTVN3MEFBa0FnRkVIY0NXb2dCaUFRUVFocUlCQkJER29nRHlBSUlCUkIzQXRxSWhjUUN5SVNRWWgvU3cwQUlCQW9BZ3dpQmlBTVN3MEJJQlJCcUFWcUlRMGdGRUdrQldvaE5pQWVRUVJxSVJFZ0EwR0FnSUI0Y1NFM0lBWkJBV29pRXlFQ0lBWWhBd05BSUFJaUIwRUJheUVDSUFNaUNrRUJheUVESUJRZ0NrRUNkR29vQXZBRVJRMEFDMEVCSUFjZ0IwRUJUUnNoRmtFQUlRZEJBU0VDQTBBZ0FpQVdSd1JBSUJRZ0FrRUNkQ0lEYWlnQzhBUWhHQ0FESUExcUlBYzJBZ0FnQWtFQmFpRUNJQWNnR0dvaEJ3d0JDd3NnRFNBSE5nSUFRUUFoQWlBUUtBSUlJUU1EUUNBQ0lBTkhCRUFnRFNBQ0lCUnFRZHdKYWkwQUFDSVlRUUowYWlJWklCa29BZ0FpR1VFQmFqWUNBQ0FVSUJsQkFYUnFJaGtnR0RvQTNRVWdHU0FDT2dEY0JTQUNRUUZxSVFJTUFRc0xRUUFoQXlBTlFRQTJBZ0FnRENBR1FYOXphaUVHUVFFaEFnTkFJQUlnRmtjRVFDQVVJQUpCQW5ScUlnMGdBellDQUNBTktBTHdCQ0FDSUFacWRDQURhaUVESUFKQkFXb2hBZ3dCQ3dzZ0RDQVRJQXBySWdaclFRRnFJUW9nQmlFREEwQWdBeUFLU1FSQUlCUWdBMEUwYkdvaERVRUJJUUlEUUNBQ0lCWkhCRUFnRFNBQ1FRSjBJaGhxSUJRZ0dHb29BZ0FnQTNZMkFnQWdBa0VCYWlFQ0RBRUxDeUFEUVFGcUlRTU1BUXNMSUJjZ0ZFRTBFQUloT0NBVVFaQU1haUU1SUJNZ0RHc2hPaUFVUWR3RmFpRVhRUUFoQ2dOQUFrQUNRQ0FISUFwSEJFQkJBU0FNSUJNZ0Z5QUtRUUYwYWlJQ0xRQUJJZzFySWdOckloaDBJUmtnQWkwQUFDRVdJRGdnRFVFQ2RHb2lIeWdDQUNFQ0lBWWdHRTBFUUNBMlFRRWdBeUE2YWlJTklBMUJBVXdiSWlCQkFuUWlKR29vQWdBaERTQTVJQlFnQTBFMGJHcEJOQkFDSVNFZ0RVRUJkQ0VtSUJFZ0FrRUNkR29oSXlBZ1FRRk5EUUlnQTBFUWRFR0FnUHdIY1NBV2NrR0FnSUFJY2lFZ0lDRWdKR29vQWdBaEpFRUFJUUlEUUNBQ0lDUkdEUU1nSXlBQ1FRSjBhaUFnTmdFQUlBSkJBV29oQWd3QUN3QUxJQUlnQWlBWmFpSU5JQUlnRFVzYklRMGdBMEVRZEVHQWdQd0hjU0FXY2tHQWdJQUljaUVEQTBBZ0FpQU5SZzBESUJFZ0FrRUNkR29nQXpZQkFDQUNRUUZxSVFJTUFBc0FDeUFlSUF4QkVIUWdOM0lnREhKQmdBSnlOZ0lBREFNTElBY2dEV3NoSkNBWElDWnFJU1pCQUNFTkEwQWdEU0FrUmcwQlFRRWdHQ0FUSUNZZ0RVRUJkR29pSnkwQUFTSUNheUk3YTNRaVBDQWhJQUpCQW5ScUlpQW9BZ0FpQW1vaFBTQURJRHRxUVJCMFFZQ0EvQWR4SUNjdEFBQkJDSFJ5SUJaeVFZQ0FnQkJ5SVNjRFFDQWpJQUpCQW5ScUlDYzJBUUFnQWtFQmFpSUNJRDFKRFFBTElDQWdJQ2dDQUNBOGFqWUNBQ0FOUVFGcUlRME1BQXNBQ3lBZklCOG9BZ0FnR1dvMkFnQWdDa0VCYWlFS0RBQUxBQXNnRWlFQ0N5QVFRUkJxSkFBZ0FrR0lmMHNnQWlBSVQzSU5EQ0FjSUFzZ0FpQVBhaUFJSUFKcklCNFFGaUVEREFNTElCNGdEeUFJSUJRUUZDSUNRWWgvU3lBQ0lBaFBjZzBMSUJ3Z0N5QUNJQTlxSUFnZ0Ftc2dIaEFYSVFNTUFnc2dBd1JBSUJ3Z0N5QVBJQWdnQWhBV0lRTU1BZ3NnSENBTElBOGdDQ0FDRUJjaEF3d0JDeUFjSUFzZ0R5QUlJQUlRRlNFREN5QURRWWgvU3cwSUlBVWdDellDZ09zQklBVWdIRFlDOE9vQklBVkJBVFlDZ09vQklCcEJBa1lFUUNBRklCNDJBZ3dMSUFzZ0hHb2lBa0lBTndBQUlBSkNBRGNBR0NBQ1FnQTNBQkFnQWtJQU53QUlJQWxCaUg5TERRb0xJQWtnRlVZTkNDQVZJQWxySVFZZ0JTZ0NuT3NCSVFvQ1FDQUpJQnRxSWdNdEFBQWlEMFVFUUVFQklRSkJBQ0VQUWJoL0lRa2dCa0VCUmcwQkRBc0xBbjhnQTBFQmFpQVB3Q0lDUVFCT0RRQWFJQUpCZjBZRVFDQUdRUU5JRFFzZ0F5OEFBVUdBL2dGcUlROGdBMEVEYWd3QkN5QUdRUUpJRFFvZ0F5MEFBU0FQUVFoMGNrR0FnQUpySVE4Z0EwRUNhZ3NoRWtHNGZ5RUpJQkpCQVdvaUFpQVZJQnRxSWdkTERRb2dMQ0FGSUJJdEFBQWlFa0VHZGtFalFRa2dBaUFISUFKclFjQVFRZEFSUWZBU0lBVW9Bb1RxQVNBS0lBOGdGQkFoSWdsQmlIOUxEUWdnS3lBb0lCSkJCSFpCQTNGQkgwRUlJQUlnQ1dvaUFpQUhJQUpyUVlBTFFZQU1RWUFYSUFVb0FvVHFBU0FGS0FLYzZ3RWdEeUFVRUNFaUNFR0lmMHNOQ0VGc0lRa2dLaUF0SUJKQkFuWkJBM0ZCTkVFSklBSWdDR29pQWlBSElBSnJRWUFOUWVBT1FaQVpJQVVvQW9UcUFTQUZLQUtjNndFZ0R5QVVFQ0VpQjBHSWYwc05DaUFDSUFkcUlBTnJJZ0loQ1NBQ1FZaC9TdzBLQ3lBT0lBOUJBRXh5RFFFTFFicC9JUWtNQ0FzZ0pTQU9heUVKSUFZZ0Ftc2hCaUFDSUFOcUlRY0NRQUpBQWtBZ0NrVUVRQ0FQUVFsSUlBVXBBOGpwQVVLQmdJQUlWSElOQWlBb0tBSUFJZ0pCQ0dvaEVpQUNLQUlFSVFwQkFDRURRUUFoQWdOQUlBTWdDblpGQkVBZ0FpQVNJQU5CQTNScUxRQUNRUlpMYWlFQ0lBTkJBV29oQXd3QkN3c2dCVUVBTmdLYzZ3RWdBa0VJSUFwcmRFRVVUdzBCREFNTElBVkJBRFlDbk9zQkN5QUVJQVVvQXZEcUFTSUROZ0xjQVNBSklBNXFJUllnQXlBRktBS0E2d0ZxSVJjQ1FDQVBSUVJBSUE0aEJ3d0JDeUFGS0FLNDZRRWhHaUFGS0FLMDZRRWhHQ0FGS0FLdzZRRWhFaUFGUVFFMkFvVHFBVUVBSVFNRFFDQURRUU5IQkVBZ0JDQURRUUowSWdKcUlBSWdCV3BCck5BQmFpZ0NBRFlDWkNBRFFRRnFJUU1NQVFzTFFXd2hDU0FFUVRocUlnSWdCeUFHRUExQmlIOUxEUU5CQ0NBUElBOUJDRTRiSVI4Z05DQUNJQVVvQWdBUUhpQXpJQUlnQlNnQ0NCQWVJRElnQWlBRktBSUVFQjRnRGlBU2F5RVpRUUFoQ0FOQUlBUkJPR29RRDBFRFJpQUlJQjlPY2tVRVFDQUVLQUpRSUFRb0FreEJBM1JxS1FJQUlrQ25JZ2RCRUhZaUVVSC9BWEVoQ3lBRUtBSmdJQVFvQWx4QkEzUnFLUUlBSWtHbklneEJFSFlpSVVIL0FYRWhFQ0FFS0FKWUlBUW9BbFJCQTNScUtRSUFJa0pDSUlpbklRWWdRVUlnaUNCQVFpQ0lweUVEQWtBZ1FrSVFpS2NpQ2tIL0FYRWlBa0VDVHdSQUFrQWdBa0VaU1NBL1FvR0FnQkJVY2tVRVFDQUVRU0FnQkNnQ1BDSUtheUlOSUFJZ0FpQU5TeHNpRXlBS2FqWUNQQ0FHSUFRb0FqZ2dDblJCQUNBVGEzWWdBaUFUYXlJVGRHb2hDaUFFUVRocUVBOGFJQUlnRFUwTkFTQUVJQVFvQWp3aUFpQVRhallDUENBRUtBSTRJQUowUVFBZ0UydDJJQXBxSVFvTUFRc2dCQ0FDSUFRb0Fqd2lEV28yQWp3Z0JDZ0NPQ0FOZEVFQUlBcHJkaUFHYWlFS0lBUkJPR29RRHhvTElBUXBBbVFoUkNBRUlBbzJBbVFnQkNCRU53Sm9EQUVMQWtBZ0FrVUVRQ0FEQkVBZ0JDZ0NaQ0VLREFNTElBUW9BbWdoQ2d3QkN5QUVJQVFvQWp3aUFrRUJhallDUEFKL0lBWWdBMFZxSUFRb0FqZ2dBblJCSDNacUlnSkJBMFlFUUNBRUtBSmtRUUZyREFFTElBSkJBblFnQkdvb0FtUUxJZ1pGSUFacUlRb2dBa0VCUndSQUlBUWdCQ2dDYURZQ2JBc0xJQVFnQkNnQ1pEWUNhQ0FFSUFvMkFtUUxweUVDSUVGQ2dJRDhCNE5RUlFSQUlBUWdCQ2dDUENJR0lCQnFOZ0k4SUFRb0FqZ2dCblJCQUNBaGEzWWdBbW9oQWdzZ0N5QVFha0VVVHdSQUlBUkJPR29RRHhvTElFQkNnSUQ4QjROUVJRUkFJQVFnQkNnQ1BDSUdJQXRxTmdJOElBUW9BamdnQm5SQkFDQVJhM1lnQTJvaEF3c2dCRUU0YWhBUEdpQUVJQVFvQWpnaUJrRUFJQWRCR0hZaUN5QUVLQUk4YWlJUWEzWWdDMEVDZEVHZ0hXb29BZ0J4SUFkQi8vOERjV28yQWt3Z0JDQVFJQXhCR0hZaUIyb2lDellDUENBRUlBZEJBblJCb0IxcUtBSUFJQVpCQUNBTGEzWnhJQXhCLy84RGNXbzJBbHdnQkVFNGFoQVBHaUFFSUVLbklnWkJHSFlpQnlBRUtBSThhaUlMTmdJOElBUWdCMEVDZEVHZ0hXb29BZ0FnQkNnQ09FRUFJQXRyZG5FZ0JrSC8vd054YWpZQ1ZDQUVRZkFBYWlBSVFReHNhaUlHSUFvMkFnZ2dCaUFDTmdJRUlBWWdBellDQUNBSVFRRnFJUWdnQXlBWmFpQUNhaUVaREFFTEN5QUlJQjlJRFFNZ0ZrRWdheUVoSUE0aEJ3TkFJQVJCT0dvUUQwRURSaUFJSUE5T2NrVUVRQ0FFS0FKUUlBUW9Ba3hCQTNScUtRSUFJa0NuSWdaQkVIWWlJMEgvQVhFaENpQUVLQUpnSUFRb0FseEJBM1JxS1FJQUlrR25JZzFCRUhZaUlFSC9BWEVoRXlBRUtBSllJQVFvQWxSQkEzUnFLUUlBSWtKQ0lJaW5JUU1nUVVJZ2lDQkFRaUNJcHlFTEFrQWdRa0lRaUtjaURFSC9BWEVpQWtFQ1R3UkFBa0FnQWtFWlNTQS9Rb0dBZ0JCVWNrVUVRQ0FFUVNBZ0JDZ0NQQ0lNYXlJUklBSWdBaUFSU3hzaUVDQU1hallDUENBRElBUW9BamdnREhSQkFDQVFhM1lnQWlBUWF5SU1kR29oRUNBRVFUaHFFQThhSUFJZ0VVME5BU0FFSUFRb0Fqd2lBaUFNYWpZQ1BDQUVLQUk0SUFKMFFRQWdER3QySUJCcUlSQU1BUXNnQkNBQ0lBUW9BandpRUdvMkFqd2dCQ2dDT0NBUWRFRUFJQXhyZGlBRGFpRVFJQVJCT0dvUUR4b0xJQVFwQW1RaFJDQUVJQkEyQW1RZ0JDQkVOd0pvREFFTEFrQWdBa1VFUUNBTEJFQWdCQ2dDWkNFUURBTUxJQVFvQW1naEVBd0JDeUFFSUFRb0Fqd2lBa0VCYWpZQ1BBSi9JQU1nQzBWcUlBUW9BamdnQW5SQkgzWnFJZ0pCQTBZRVFDQUVLQUprUVFGckRBRUxJQUpCQW5RZ0JHb29BbVFMSWdORklBTnFJUkFnQWtFQlJ3UkFJQVFnQkNnQ2FEWUNiQXNMSUFRZ0JDZ0NaRFlDYUNBRUlCQTJBbVFMcHlFTUlFRkNnSUQ4QjROUVJRUkFJQVFnQkNnQ1BDSUNJQk5xTmdJOElBUW9BamdnQW5SQkFDQWdhM1lnREdvaERBc2dDaUFUYWtFVVR3UkFJQVJCT0dvUUR4b0xJRUJDZ0lEOEI0TlFSUVJBSUFRZ0JDZ0NQQ0lDSUFwcU5nSThJQVFvQWpnZ0FuUkJBQ0FqYTNZZ0Myb2hDd3NnQkVFNGFoQVBHaUFFSUFRb0FqZ2lBa0VBSUFaQkdIWWlBeUFFS0FJOGFpSUthM1lnQTBFQ2RFR2dIV29vQWdCeElBWkIvLzhEY1dvMkFrd2dCQ0FLSUExQkdIWWlBMm9pQmpZQ1BDQUVJQU5CQW5SQm9CMXFLQUlBSUFKQkFDQUdhM1p4SUExQi8vOERjV28yQWx3Z0JFRTRhaEFQR2lBRUlFS25JZ0pCR0hZaUF5QUVLQUk4YWlJR05nSThJQVFnQTBFQ2RFR2dIV29vQWdBZ0JDZ0NPRUVBSUFacmRuRWdBa0gvL3dOeGFqWUNWQUpBQWtBQ1FDQUVLQUxjQVNJRElBUkI4QUJxSUFoQkIzRkJER3hxSWhNb0FnQWlFV29pSXlBWFN3MEFJQWNnRXlnQ0JDSU5JQkZxSWdwcUlDRkxEUUFnQ2tFZ2FpQVdJQWRyVFEwQkN5QUVJQk1vQWdnMkFoZ2dCQ0FUS1FJQU53TVFJQWNnRmlBRVFSQnFJQVJCM0FGcUlCY2dFaUFZSUJvUUh5RUtEQUVMSUFjZ0VXb2hBaUFUS0FJSUlRWWdCeUFES1FBQU53QUFJQWNnQXlrQUNEY0FDQUpBSUJGQkVVa05BQ0FISUFNcEFCQTNBQkFnQnlBREtRQVlOd0FZSUJGQkVHdEJFVWdOQUNBRFFSQnFJUU1nQjBFZ2FpRVJBMEFnRVNBREtRQVFOd0FBSUJFZ0F5a0FHRGNBQ0NBUklBTXBBQ0EzQUJBZ0VTQURLUUFvTndBWUlBTkJJR29oQXlBUlFTQnFJaEVnQWtrTkFBc0xJQUlnQm1zaEF5QUVJQ00yQXR3QklBSWdFbXNnQmtrRVFDQUdJQUlnR0d0TERRY2dHaUFhSUFNZ0Vtc2lBMm9pRVNBTmFrOEVRQ0FDSUJFZ0RSQUtHZ3dDQ3lBRElBMXFJUTBnQWlBUlFRQWdBMnNRQ2lBRGF5RUNJQkloQXdzZ0JrRVFUd1JBSUFJZ0F5a0FBRGNBQUNBQ0lBTXBBQWczQUFnZ0RVRVJTQTBCSUFJZ0RXb2hCaUFDUVJCcUlRSURRQ0FDSUFNcEFCQTNBQUFnQWlBREtRQVlOd0FJSUFJZ0F5a0FJRGNBRUNBQ0lBTXBBQ2czQUJnZ0EwRWdhaUVESUFKQklHb2lBaUFHU1EwQUN3d0JDd0pBSUFaQkIwMEVRQ0FDSUFNdEFBQTZBQUFnQWlBRExRQUJPZ0FCSUFJZ0F5MEFBam9BQWlBQ0lBTXRBQU02QUFNZ0FpQURJQVpCQW5RaUJrSEFIbW9vQWdCcUlnTW9BQUEyQUFRZ0F5QUdRZUFlYWlnQ0FHc2hBd3dCQ3lBQ0lBTXBBQUEzQUFBTElBMUJDVWtOQUNBQ0lBMXFJUkVnQWtFSWFpSUdJQU5CQ0dvaUEydEJEMHdFUUFOQUlBWWdBeWtBQURjQUFDQURRUWhxSVFNZ0JrRUlhaUlHSUJGSkRRQU1BZ3NBQ3lBR0lBTXBBQUEzQUFBZ0JpQURLUUFJTndBSUlBMUJHVWdOQUNBQ1FSaHFJUUlEUUNBQ0lBTXBBQkEzQUFBZ0FpQURLUUFZTndBSUlBSWdBeWtBSURjQUVDQUNJQU1wQUNnM0FCZ2dBMEVnYWlFRElBSkJJR29pQWlBUlNRMEFDd3NnQ2tHSWYwc0VRQ0FLSVFrTUJnVWdFeUFRTmdJSUlCTWdERFlDQkNBVElBczJBZ0FnQ0VFQmFpRUlJQWNnQ21vaEJ5QUxJQmxxSUF4cUlSa01BZ3NBQ3dzZ0NDQVBTQTBESUFnZ0gyc2hCZ05BQWtBZ0JpQVBUZ1JBUVFBaEF3TkFJQU5CQTBZTkFpQUZJQU5CQW5RaUFtcEJyTkFCYWlBQ0lBUnFLQUprTmdJQUlBTkJBV29oQXd3QUN3QUxBa0FDUUFKQUlBUW9BdHdCSWdNZ0JFSHdBR29nQmtFSGNVRU1iR29pQ0NnQ0FDSU1haUlRSUJkTERRQWdCeUFJS0FJRUlnc2dER29pQ21vZ0lVc05BQ0FLUVNCcUlCWWdCMnRORFFFTElBUWdDQ2dDQ0RZQ0tDQUVJQWdwQWdBM0F5QWdCeUFXSUFSQklHb2dCRUhjQVdvZ0Z5QVNJQmdnR2hBZklRb01BUXNnQnlBTWFpRUNJQWdvQWdnaENDQUhJQU1wQUFBM0FBQWdCeUFES1FBSU53QUlBa0FnREVFUlNRMEFJQWNnQXlrQUVEY0FFQ0FISUFNcEFCZzNBQmdnREVFUWEwRVJTQTBBSUFOQkVHb2hBeUFIUVNCcUlRd0RRQ0FNSUFNcEFCQTNBQUFnRENBREtRQVlOd0FJSUF3Z0F5a0FJRGNBRUNBTUlBTXBBQ2czQUJnZ0EwRWdhaUVESUF4QklHb2lEQ0FDU1EwQUN3c2dBaUFJYXlFRElBUWdFRFlDM0FFZ0FpQVNheUFJU1FSQUlBZ2dBaUFZYTBzTkJ5QWFJQm9nQXlBU2F5SURhaUlNSUF0cVR3UkFJQUlnRENBTEVBb2FEQUlMSUFNZ0Myb2hDeUFDSUF4QkFDQURheEFLSUFOcklRSWdFaUVEQ3lBSVFSQlBCRUFnQWlBREtRQUFOd0FBSUFJZ0F5a0FDRGNBQ0NBTFFSRklEUUVnQWlBTGFpRUlJQUpCRUdvaEFnTkFJQUlnQXlrQUVEY0FBQ0FDSUFNcEFCZzNBQWdnQWlBREtRQWdOd0FRSUFJZ0F5a0FLRGNBR0NBRFFTQnFJUU1nQWtFZ2FpSUNJQWhKRFFBTERBRUxBa0FnQ0VFSFRRUkFJQUlnQXkwQUFEb0FBQ0FDSUFNdEFBRTZBQUVnQWlBRExRQUNPZ0FDSUFJZ0F5MEFBem9BQXlBQ0lBTWdDRUVDZENJSVFjQWVhaWdDQUdvaUF5Z0FBRFlBQkNBRElBaEI0QjVxS0FJQWF5RUREQUVMSUFJZ0F5a0FBRGNBQUFzZ0MwRUpTUTBBSUFJZ0Myb2hEQ0FDUVFocUlnZ2dBMEVJYWlJRGEwRVBUQVJBQTBBZ0NDQURLUUFBTndBQUlBTkJDR29oQXlBSVFRaHFJZ2dnREVrTkFBd0NDd0FMSUFnZ0F5a0FBRGNBQUNBSUlBTXBBQWczQUFnZ0MwRVpTQTBBSUFKQkdHb2hBZ05BSUFJZ0F5a0FFRGNBQUNBQ0lBTXBBQmczQUFnZ0FpQURLUUFnTndBUUlBSWdBeWtBS0RjQUdDQURRU0JxSVFNZ0FrRWdhaUlDSUF4SkRRQUxDeUFLUVloL1N3UkFJQW9oQ1F3R0JTQUdRUUZxSVFZZ0J5QUthaUVIREFJTEFBc0xJQVFvQXR3QklRTUxRYnAvSVFrZ0Z5QURheUlDSUJZZ0IydExEUUlnQndSL0lBY2dBeUFDRUFJZ0Ftb0ZRUUFMSUE1cklRa01BZ3NnQlVFQU5nS2M2d0VMSUFRZ0JTZ0M4T29CSWdNMkF0d0JJQWtnRG1vaERDQURJQVVvQW9EckFXb2hFQUpBSUE5RkJFQWdEaUVHREFFTElBVW9BcmpwQVNFTklBVW9BclRwQVNFVElBVW9BckRwQVNFU0lBVkJBVFlDaE9vQlFRQWhBd05BSUFOQkEwY0VRQ0FFSUFOQkFuUWlBbW9nQWlBRmFrR3MwQUZxS0FJQU5nS2NBU0FEUVFGcUlRTU1BUXNMUVd3aENTQUVRZkFBYWlJQ0lBY2dCaEFOUVloL1N3MEJJREVnQWlBRktBSUFFQjRnTUNBQ0lBVW9BZ2dRSGlBdklBSWdCU2dDQkJBZUlBeEJJR3NoR0NBT0lRWURRQ0FFS0FLSUFTQUVLQUtFQVVFRGRHb3BBZ0FpUUtjaUNrRVFkaUlaUWY4QmNTRUxJQVFvQXBnQklBUW9BcFFCUVFOMGFpa0NBQ0pCcHlJV1FSQjJJaDlCL3dGeElSb2dCQ2dDa0FFZ0JDZ0NqQUZCQTNScUtRSUFJa0pDSUlpbklRY2dRVUlnaUNCQVFpQ0lweUVEQWtBZ1FrSVFpS2NpQ0VIL0FYRWlBa0VDVHdSQUFrQWdBa0VaU1NBL1FvR0FnQkJVY2tVRVFDQUVRU0FnQkNnQ2RDSUlheUlSSUFJZ0FpQVJTeHNpRnlBSWFqWUNkQ0FISUFRb0FuQWdDSFJCQUNBWGEzWWdBaUFYYXlJWGRHb2hDQ0FFUWZBQWFoQVBHaUFDSUJGTkRRRWdCQ0FFS0FKMElnSWdGMm8yQW5RZ0JDZ0NjQ0FDZEVFQUlCZHJkaUFJYWlFSURBRUxJQVFnQWlBRUtBSjBJaEZxTmdKMElBUW9BbkFnRVhSQkFDQUlhM1lnQjJvaENDQUVRZkFBYWhBUEdnc2dCQ2tDbkFFaFJDQUVJQWcyQXB3QklBUWdSRGNDb0FFTUFRc0NRQ0FDUlFSQUlBTUVRQ0FFS0FLY0FTRUlEQU1MSUFRb0FxQUJJUWdNQVFzZ0JDQUVLQUowSWdKQkFXbzJBblFDZnlBSElBTkZhaUFFS0FKd0lBSjBRUjkyYWlJQ1FRTkdCRUFnQkNnQ25BRkJBV3NNQVFzZ0FrRUNkQ0FFYWlnQ25BRUxJZ2RGSUFkcUlRZ2dBa0VCUndSQUlBUWdCQ2dDb0FFMkFxUUJDd3NnQkNBRUtBS2NBVFlDb0FFZ0JDQUlOZ0tjQVF1bklRSWdRVUtBZ1B3SGcxQkZCRUFnQkNBRUtBSjBJZ2NnR21vMkFuUWdCQ2dDY0NBSGRFRUFJQjlyZGlBQ2FpRUNDeUFMSUJwcVFSUlBCRUFnQkVId0FHb1FEeG9MSUVCQ2dJRDhCNE5RUlFSQUlBUWdCQ2dDZENJSElBdHFOZ0owSUFRb0FuQWdCM1JCQUNBWmEzWWdBMm9oQXdzZ0JFSHdBR29RRHhvZ0JDQUVLQUp3SWdkQkFDQUtRUmgySWdzZ0JDZ0NkR29pR210MklBdEJBblJCb0IxcUtBSUFjU0FLUWYvL0EzRnFOZ0tFQVNBRUlCb2dGa0VZZGlJS2FpSUxOZ0owSUFRZ0NrRUNkRUdnSFdvb0FnQWdCMEVBSUF0cmRuRWdGa0gvL3dOeGFqWUNsQUVnQkVId0FHb1FEeG9nQkNCQ3B5SUhRUmgySWdvZ0JDZ0NkR29pQ3pZQ2RDQUVJQXBCQW5SQm9CMXFLQUlBSUFRb0FuQkJBQ0FMYTNaeElBZEIvLzhEY1dvMkFvd0JJQVFnQXpZQ09DQUVJQUkyQWp3Z0JDQUlOZ0pBQWtBQ1FBSkFJQVFvQXR3Qklnc2dBMm9pRmlBUVN3MEFJQVlnQWlBRGFpSUthaUFZU3cwQUlBcEJJR29nRENBR2EwME5BUXNnQkNBRVFVQnJLQUlBTmdJSUlBUWdCQ2tET0RjREFDQUdJQXdnQkNBRVFkd0JhaUFRSUJJZ0V5QU5FQjhoQ2d3QkN5QURJQVpxSVFjZ0JpQUxLUUFBTndBQUlBWWdDeWtBQ0RjQUNBSkFJQU5CRVVrTkFDQUdJQXNwQUJBM0FCQWdCaUFMS1FBWU53QVlJQU5CRUd0QkVVZ05BQ0FMUVJCcUlRTWdCa0VnYWlFTEEwQWdDeUFES1FBUU53QUFJQXNnQXlrQUdEY0FDQ0FMSUFNcEFDQTNBQkFnQ3lBREtRQW9Od0FZSUFOQklHb2hBeUFMUVNCcUlnc2dCMGtOQUFzTElBY2dDR3NoQXlBRUlCWTJBdHdCSUFjZ0Vtc2dDRWtFUUNBSUlBY2dFMnRMRFFRZ0RTQU5JQU1nRW1zaUEyb2lDeUFDYWs4RVFDQUhJQXNnQWhBS0dnd0NDeUFISUF0QkFDQURheEFLSUFRZ0FpQURhaUlDTmdJOElBTnJJUWNnRWlFREN5QUlRUkJQQkVBZ0J5QURLUUFBTndBQUlBY2dBeWtBQ0RjQUNDQUNRUkZJRFFFZ0FpQUhhaUVJSUFkQkVHb2hBZ05BSUFJZ0F5a0FFRGNBQUNBQ0lBTXBBQmczQUFnZ0FpQURLUUFnTndBUUlBSWdBeWtBS0RjQUdDQURRU0JxSVFNZ0FrRWdhaUlDSUFoSkRRQUxEQUVMQWtBZ0NFRUhUUVJBSUFjZ0F5MEFBRG9BQUNBSElBTXRBQUU2QUFFZ0J5QURMUUFDT2dBQ0lBY2dBeTBBQXpvQUF5QUhJQU1nQ0VFQ2RDSUlRY0FlYWlnQ0FHb2lBeWdBQURZQUJDQURJQWhCNEI1cUtBSUFheUVEREFFTElBY2dBeWtBQURjQUFBc2dBa0VKU1EwQUlBSWdCMm9oQ3lBSFFRaHFJZ2dnQTBFSWFpSURhMEVQVEFSQUEwQWdDQ0FES1FBQU53QUFJQU5CQ0dvaEF5QUlRUWhxSWdnZ0Mwa05BQXdDQ3dBTElBZ2dBeWtBQURjQUFDQUlJQU1wQUFnM0FBZ2dBa0VaU0EwQUlBZEJHR29oQWdOQUlBSWdBeWtBRURjQUFDQUNJQU1wQUJnM0FBZ2dBaUFES1FBZ053QVFJQUlnQXlrQUtEY0FHQ0FEUVNCcUlRTWdBa0VnYWlJQ0lBdEpEUUFMQ3lBS1FZaC9Td1JBSUFvaENRd0RDeUFHSUFwcUlRWWdCRUh3QUdvUUR5RURJQTlCQVdzaUR3MEFDMEVBSVFJZ0EwRUNTUTBCQTBBZ0FrRURSd1JBSUFVZ0FrRUNkQ0lEYWtHczBBRnFJQU1nQkdvb0Fwd0JOZ0lBSUFKQkFXb2hBZ3dCQ3dzZ0JDZ0MzQUVoQXd0QnVuOGhDU0FRSUFOcklnSWdEQ0FHYTBzTkFDQUdCSDhnQmlBRElBSVFBaUFDYWdWQkFBc2dEbXNoQ1FzZ0NVR0lmMHNOQmdzQ1FDQUZLQUxzNmdGRkRRQWdCU0FGS1FPSTZnRWdDYTE4TndPSTZnRUNRQ0FGS0FMUTZnRWlBaUFKYWlJSVFSOU5CRUFnRGtVTkFTQUNJQ0pxSUE0Z0NSQUNHaUFGS0FMUTZnRWdDV29oQ0F3QkN5QU9JUU1nQWdSQUlBSWdJbW9nQTBFZ0lBSnJFQUlhSUFVb0F0RHFBU0VDSUFWQkFEWUMwT29CSUFVZ0JTa0RrT29CSUFVcEFMRHFBVUxQMXRPKzBzZXIyVUorZkVJZmlVS0hsYSt2bUxiZW01NS9mamNEa09vQklBVWdCU2tEbU9vQklBVXBBTGpxQVVMUDF0Tyswc2VyMlVKK2ZFSWZpVUtIbGErdm1MYmVtNTUvZmpjRG1Pb0JJQVVnQlNrRG9Pb0JJQVVwQU1EcUFVTFAxdE8rMHNlcjJVSitmRUlmaVVLSGxhK3ZtTGJlbTU1L2ZqY0RvT29CSUFVZ0JTa0RxT29CSUFVcEFNanFBVUxQMXRPKzBzZXIyVUorZkVJZmlVS0hsYSt2bUxiZW01NS9mamNEcU9vQklBTWdBbXRCSUdvaEF3c2dDU0FPYWlJQ0lBTkJJR3BQQkVBZ0FrRWdheUVHSUFVcEE2anFBU0UvSUFVcEE2RHFBU0ZBSUFVcEE1anFBU0ZCSUFVcEE1RHFBU0ZDQTBBZ0F5a0FHRUxQMXRPKzBzZXIyVUorSUQ5OFFoK0pRb2VWcjYrWXR0NmJubjkrSVQ4Z0F5a0FFRUxQMXRPKzBzZXIyVUorSUVCOFFoK0pRb2VWcjYrWXR0NmJubjkrSVVBZ0F5a0FDRUxQMXRPKzBzZXIyVUorSUVGOFFoK0pRb2VWcjYrWXR0NmJubjkrSVVFZ0F5a0FBRUxQMXRPKzBzZXIyVUorSUVKOFFoK0pRb2VWcjYrWXR0NmJubjkrSVVJZ0EwRWdhaUlESUFaTkRRQUxJQVVnUHpjRHFPb0JJQVVnUURjRG9Pb0JJQVVnUVRjRG1Pb0JJQVVnUWpjRGtPb0JDeUFDSUFOTkRRRWdJaUFESUFJZ0Eyc2lDQkFDR2dzZ0JTQUlOZ0xRNmdFTElEVWdGV3NoQXlBVklCdHFJUUlnQ1NBT2FpRU9JQVFvQWpCRkRRQUxJQ2twQXdBaVAwSi9VU0EvSUE0Z0hXdXNVWEpGQkVCQmJDRUpEQVlMSUFVb0F1RHBBUVJBUVdvaENTQURRUVJKRFFZZ0JTZ0M2T29CUlFSQUlDSWdCU2dDME9vQmFpRUtBbjRnQlNrRGlPb0JJajlDSUZvRVFDQUZLUU9ZNmdFaVFFSUhpU0FGS1FPUTZnRWlRVUlCaVh3Z0JTa0RvT29CSWtKQ0RJbDhJQVVwQTZqcUFTSkRRaEtKZkNCQlFzL1cwNzdTeDZ2WlFuNUNINGxDaDVXdnI1aTIzcHVlZjM2RlFvZVZyNitZdHQ2Ym5uOStRcDJqdGVxRHNZMksrZ0I5SUVCQ3o5YlR2dExIcTlsQ2ZrSWZpVUtIbGErdm1MYmVtNTUvZm9WQ2g1V3ZyNWkyM3B1ZWYzNUNuYU8xNm9PeGpZcjZBSDBnUWtMUDF0Tyswc2VyMlVKK1FoK0pRb2VWcjYrWXR0NmJubjkraFVLSGxhK3ZtTGJlbTU1L2ZrS2RvN1hxZzdHTml2b0FmU0JEUXMvVzA3N1N4NnZaUW41Q0g0bENoNVd2cjVpMjNwdWVmMzZGUW9lVnI2K1l0dDZibm45K1FwMmp0ZXFEc1kySytnQjlEQUVMSUFVcEE2RHFBVUxGejlteThlVzY2aWQ4Q3lBL2ZDRS9JQ0loQmdOQUlBb2dCa0VJYWlJSFR3UkFJQVlwQUFCQ3o5YlR2dExIcTlsQ2ZrSWZpVUtIbGErdm1MYmVtNTUvZmlBL2hVSWJpVUtIbGErdm1MYmVtNTUvZmtLZG83WHFnN0dOaXZvQWZTRS9JQWNoQmd3QkN3c0NRQ0FLSUFaQkJHb2lDRWtFUUNBR0lRZ01BUXNnQmpVQUFFS0hsYSt2bUxiZW01NS9maUEvaFVJWGlVTFAxdE8rMHNlcjJVSitRdm56M2ZHWjlwbXJGbndoUHdzRFFDQUlJQXBKQkVBZ0NERUFBRUxGejlteThlVzY2aWQrSUQrRlFndUpRb2VWcjYrWXR0NmJubjkrSVQ4Z0NFRUJhaUVJREFFTEN5QUNLQUFBSUQ5Q0lZZ2dQNFZDejliVHZ0TEhxOWxDZmlJL1FoMklJRCtGUXZuejNmR1o5cG1yRm40aVAwSWdpQ0EvaGFkSERRY0xJQU5CQkdzaEF5QUNRUVJxSVFJTElBNGdIV3NpQ1VHSmYwOE5CQ0FCSUFscklRRWdDU0FkYWlFZFFRRWhQZ3dCQ3d0QnVIOGhCeUFERFFRZ0hTQUFheUVIREFRTFFXd2hDUXdCQzBHNGZ5RUpDMEc0ZnlFSElBbEJka1lnUG5FTkFRc2dDU0VIQ3lnQ0FBMEFJQVZCL09vQmFpZ0NBQ0VCSUFWQitPb0JhaWdDQUNFQUlBVVFHQ0FGS0FLdzZ3RWdBQ0FCRUJNZ0JVRUFOZ0t3NndFZ0JTZ0NwT3NCSWdJRVFBSkFBa0FDUUFKQUlBSW9BZ0FpQXdSQUlBQkZEUUlnQVNBRElBQVJBZ0FNQVFzZ0FFVU5BZ3NnQVNBQ0lBQVJBZ0FNQWdzZ0F4QUdDeUFDRUFZTElBVkJBRFlDcE9zQkN5QUFCRUFnQVNBRklBQVJBZ0FNQVFzZ0JSQUdDeUFFUWVBQmFpUUFJQWNMQzZnVkNRQkJpQWdMRFFFQUFBQUJBQUFBQWdBQUFBSUFRYUFJQzdNR0FRQUFBQUVBQUFBQ0FBQUFBZ0FBQUNZQUFBQ0NBQUFBSVFVQUFFb0FBQUJuQ0FBQUpnQUFBTUFCQUFDQUFBQUFTUVVBQUVvQUFBQytDQUFBS1FBQUFDd0NBQUNBQUFBQVNRVUFBRW9BQUFDK0NBQUFMd0FBQU1vQ0FBQ0FBQUFBaWdVQUFFb0FBQUNFQ1FBQU5RQUFBSE1EQUFDQUFBQUFuUVVBQUVvQUFBQ2dDUUFBUFFBQUFJRURBQUNBQUFBQTZ3VUFBRXNBQUFBK0NnQUFSQUFBQUo0REFBQ0FBQUFBVFFZQUFFc0FBQUNxQ2dBQVN3QUFBTE1EQUFDQUFBQUF3UVlBQUUwQUFBQWZEUUFBVFFBQUFGTUVBQUNBQUFBQUl3Z0FBRkVBQUFDbUR3QUFWQUFBQUprRUFBQ0FBQUFBU3drQUFGY0FBQUN4RWdBQVdBQUFBTm9FQUFDQUFBQUFid2tBQUYwQUFBQWpGQUFBVkFBQUFFVUZBQUNBQUFBQVZBb0FBR29BQUFDTUZBQUFhZ0FBQUs4RkFBQ0FBQUFBZGdrQUFId0FBQUJPRUFBQWZBQUFBTklDQUFDQUFBQUFZd2NBQUpFQUFBQ1FCd0FBa2dBQUFBQUFBQUFCQUFBQUFRQUFBQVVBQUFBTkFBQUFIUUFBQUQwQUFBQjlBQUFBL1FBQUFQMEJBQUQ5QXdBQS9RY0FBUDBQQUFEOUh3QUEvVDhBQVAxL0FBRDkvd0FBL2Y4QkFQMy9Bd0Q5L3djQS9mOFBBUDMvSHdEOS96OEEvZjkvQVAzLy93RDkvLzhCL2YvL0EvMy8vd2Y5Ly84UC9mLy9ILzMvL3ovOS8vOS9BQUFBQUFFQUFBQUNBQUFBQXdBQUFBUUFBQUFGQUFBQUJnQUFBQWNBQUFBSUFBQUFDUUFBQUFvQUFBQUxBQUFBREFBQUFBMEFBQUFPQUFBQUR3QUFBQkFBQUFBUkFBQUFFZ0FBQUJNQUFBQVVBQUFBRlFBQUFCWUFBQUFYQUFBQUdBQUFBQmtBQUFBYUFBQUFHd0FBQUJ3QUFBQWRBQUFBSGdBQUFCOEFBQUFEQUFBQUJBQUFBQVVBQUFBR0FBQUFCd0FBQUFnQUFBQUpBQUFBQ2dBQUFBc0FBQUFNQUFBQURRQUFBQTRBQUFBUEFBQUFFQUFBQUJFQUFBQVNBQUFBRXdBQUFCUUFBQUFWQUFBQUZnQUFBQmNBQUFBWUFBQUFHUUFBQUJvQUFBQWJBQUFBSEFBQUFCMEFBQUFlQUFBQUh3QUFBQ0FBQUFBaEFBQUFJZ0FBQUNNQUFBQWxBQUFBSndBQUFDa0FBQUFyQUFBQUx3QUFBRE1BQUFBN0FBQUFRd0FBQUZNQUFBQmpBQUFBZ3dBQUFBTUJBQUFEQWdBQUF3UUFBQU1JQUFBREVBQUFBeUFBQUFOQUFBQURnQUFBQXdBQkFFSGdEd3RSQVFBQUFBRUFBQUFCQUFBQUFRQUFBQUlBQUFBQ0FBQUFBd0FBQUFNQUFBQUVBQUFBQkFBQUFBVUFBQUFIQUFBQUNBQUFBQWtBQUFBS0FBQUFDd0FBQUF3QUFBQU5BQUFBRGdBQUFBOEFBQUFRQUVIRUVBdUxBUUVBQUFBQ0FBQUFBd0FBQUFRQUFBQUZBQUFBQmdBQUFBY0FBQUFJQUFBQUNRQUFBQW9BQUFBTEFBQUFEQUFBQUEwQUFBQU9BQUFBRHdBQUFCQUFBQUFTQUFBQUZBQUFBQllBQUFBWUFBQUFIQUFBQUNBQUFBQW9BQUFBTUFBQUFFQUFBQUNBQUFBQUFBRUFBQUFDQUFBQUJBQUFBQWdBQUFBUUFBQUFJQUFBQUVBQUFBQ0FBQUFBQUFFQVFaQVNDK1lFQVFBQUFBRUFBQUFCQUFBQUFRQUFBQUlBQUFBQ0FBQUFBd0FBQUFNQUFBQUVBQUFBQmdBQUFBY0FBQUFJQUFBQUNRQUFBQW9BQUFBTEFBQUFEQUFBQUEwQUFBQU9BQUFBRHdBQUFCQUFBQUFCQUFBQUJBQUFBQWdBQUFBQUFBQUFBUUFCQVFZQUFBQUFBQUFFQUFBQUFCQUFBQVFBQUFBQUlBQUFCUUVBQUFBQUFBQUZBd0FBQUFBQUFBVUVBQUFBQUFBQUJRWUFBQUFBQUFBRkJ3QUFBQUFBQUFVSkFBQUFBQUFBQlFvQUFBQUFBQUFGREFBQUFBQUFBQVlPQUFBQUFBQUJCUkFBQUFBQUFBRUZGQUFBQUFBQUFRVVdBQUFBQUFBQ0JSd0FBQUFBQUFNRklBQUFBQUFBQkFVd0FBQUFJQUFHQlVBQUFBQUFBQWNGZ0FBQUFBQUFDQVlBQVFBQUFBQUtCZ0FFQUFBQUFBd0dBQkFBQUNBQUFBUUFBQUFBQUFBQUJBRUFBQUFBQUFBRkFnQUFBQ0FBQUFVRUFBQUFBQUFBQlFVQUFBQWdBQUFGQndBQUFBQUFBQVVJQUFBQUlBQUFCUW9BQUFBQUFBQUZDd0FBQUFBQUFBWU5BQUFBSUFBQkJSQUFBQUFBQUFFRkVnQUFBQ0FBQVFVV0FBQUFBQUFDQlJnQUFBQWdBQU1GSUFBQUFBQUFBd1VvQUFBQUFBQUdCRUFBQUFBUUFBWUVRQUFBQUNBQUJ3V0FBQUFBQUFBSkJnQUNBQUFBQUFzR0FBZ0FBREFBQUFRQUFBQUFFQUFBQkFFQUFBQWdBQUFGQWdBQUFDQUFBQVVEQUFBQUlBQUFCUVVBQUFBZ0FBQUZCZ0FBQUNBQUFBVUlBQUFBSUFBQUJRa0FBQUFnQUFBRkN3QUFBQ0FBQUFVTUFBQUFBQUFBQmc4QUFBQWdBQUVGRWdBQUFDQUFBUVVVQUFBQUlBQUNCUmdBQUFBZ0FBSUZIQUFBQUNBQUF3VW9BQUFBSUFBRUJUQUFBQUFBQUJBR0FBQUJBQUFBRHdZQWdBQUFBQUFPQmdCQUFBQUFBQTBHQUNBQVFZQVhDNGNDQVFBQkFRVUFBQUFBQUFBRkFBQUFBQUFBQmdROUFBQUFBQUFKQmYwQkFBQUFBQThGL1g4QUFBQUFGUVg5L3g4QUFBQURCUVVBQUFBQUFBY0VmUUFBQUFBQURBWDlEd0FBQUFBU0JmMy9Bd0FBQUJjRi9mOS9BQUFBQlFVZEFBQUFBQUFJQlAwQUFBQUFBQTRGL1Q4QUFBQUFGQVg5L3c4QUFBQUNCUUVBQUFBUUFBY0VmUUFBQUFBQUN3WDlCd0FBQUFBUkJmMy9BUUFBQUJZRi9mOC9BQUFBQkFVTkFBQUFFQUFJQlAwQUFBQUFBQTBGL1I4QUFBQUFFd1g5L3djQUFBQUJCUUVBQUFBUUFBWUVQUUFBQUFBQUNnWDlBd0FBQUFBUUJmMy9BQUFBQUJ3Ri9mLy9Ed0FBR3dYOS8vOEhBQUFhQmYzLy93TUFBQmtGL2YvL0FRQUFHQVg5Ly84QVFaQVpDNFlFQVFBQkFRWUFBQUFBQUFBR0F3QUFBQUFBQUFRRUFBQUFJQUFBQlFVQUFBQUFBQUFGQmdBQUFBQUFBQVVJQUFBQUFBQUFCUWtBQUFBQUFBQUZDd0FBQUFBQUFBWU5BQUFBQUFBQUJoQUFBQUFBQUFBR0V3QUFBQUFBQUFZV0FBQUFBQUFBQmhrQUFBQUFBQUFHSEFBQUFBQUFBQVlmQUFBQUFBQUFCaUlBQUFBQUFBRUdKUUFBQUFBQUFRWXBBQUFBQUFBQ0JpOEFBQUFBQUFNR093QUFBQUFBQkFaVEFBQUFBQUFIQm9NQUFBQUFBQWtHQXdJQUFCQUFBQVFFQUFBQUFBQUFCQVVBQUFBZ0FBQUZCZ0FBQUFBQUFBVUhBQUFBSUFBQUJRa0FBQUFBQUFBRkNnQUFBQUFBQUFZTUFBQUFBQUFBQmc4QUFBQUFBQUFHRWdBQUFBQUFBQVlWQUFBQUFBQUFCaGdBQUFBQUFBQUdHd0FBQUFBQUFBWWVBQUFBQUFBQUJpRUFBQUFBQUFFR0l3QUFBQUFBQVFZbkFBQUFBQUFDQmlzQUFBQUFBQU1HTXdBQUFBQUFCQVpEQUFBQUFBQUZCbU1BQUFBQUFBZ0dBd0VBQUNBQUFBUUVBQUFBTUFBQUJBUUFBQUFRQUFBRUJRQUFBQ0FBQUFVSEFBQUFJQUFBQlFnQUFBQWdBQUFGQ2dBQUFDQUFBQVVMQUFBQUFBQUFCZzRBQUFBQUFBQUdFUUFBQUFBQUFBWVVBQUFBQUFBQUJoY0FBQUFBQUFBR0dnQUFBQUFBQUFZZEFBQUFBQUFBQmlBQUFBQUFBQkFHQXdBQkFBQUFEd1lEZ0FBQUFBQU9CZ05BQUFBQUFBMEdBeUFBQUFBQURBWURFQUFBQUFBTEJnTUlBQUFBQUFvR0F3UUFRYVFkQzlrQkFRQUFBQU1BQUFBSEFBQUFEd0FBQUI4QUFBQS9BQUFBZndBQUFQOEFBQUQvQVFBQS93TUFBUDhIQUFEL0R3QUEveDhBQVA4L0FBRC9md0FBLy84QUFQLy9BUUQvL3dNQS8vOEhBUC8vRHdELy94OEEvLzgvQVAvL2Z3RC8vLzhBLy8vL0FmLy8vd1AvLy84SC8vLy9ELy8vL3gvLy8vOC8vLy8vZndBQUFBQUJBQUFBQWdBQUFBUUFBQUFBQUFBQUFnQUFBQVFBQUFBSUFBQUFBQUFBQUFFQUFBQUNBQUFBQVFBQUFBUUFBQUFFQUFBQUJBQUFBQVFBQUFBSUFBQUFDQUFBQUFnQUFBQUhBQUFBQ0FBQUFBa0FBQUFLQUFBQUN3QkJnQjhMQTRBUkFRPT0iO3ZhciB0dD1uZXcgR0EsSXQ9ITE7YXN5bmMgZnVuY3Rpb24gREkoQSxlKXtsZXQgdD1udWxsO3R5cGVvZiBBIT0ic3RyaW5nIj90PUEuaHJlZjpBLnN0YXJ0c1dpdGgoImh0dHAiKT90PUE6dD1gJHtlfS8ke0F9YCx0LmVuZHNXaXRoKCIuanMiKSYmKHQ9dC5zdWJzdHJpbmcoMCx0Lmxlbmd0aC0zKSksdC5lbmRzV2l0aCgiLndhc20iKSYmKHQ9dC5zdWJzdHJpbmcoMCx0Lmxlbmd0aC01KSk7bGV0IEk9YCR7dH0ud2FzbWAscj1hd2FpdCBSQS5nZXQoYCR7SX0uenN0YCx7cmVzcG9uc2VUeXBlOiJhcnJheWJ1ZmZlciJ9KTtJdHx8KGF3YWl0IHR0LmluaXQoKSxJdD0hMCk7bGV0IGc9dHQuZGVjb2RlKG5ldyBVaW50OEFycmF5KHIuZGF0YSkpLmJ1ZmZlcjtyZXR1cm4oYXdhaXQgaW1wb3J0KGAke3R9LmpzYCkpLmRlZmF1bHQoe3dhc21CaW5hcnk6Z30pfXZhciBydD1ESTt2YXIgVUE9bmV3IE1hcDthc3luYyBmdW5jdGlvbiB5SShBLGUpe2xldCB0PUEsST1BLHI9bnVsbDtyZXR1cm4gdHlwZW9mIEEhPSJzdHJpbmciJiYodD1uZXcgVVJMKEEuaHJlZiksST10LmhyZWYpLFVBLmhhcyhJKXx8VUEuc2V0KEksYXdhaXQgcnQodCxlKSkscj1VQS5nZXQoSSkscn12YXIgRz15STt2YXIgd0k9bmV3IE1hcChbWyJpbWFnZS9qcGVnIiwiSlBFR0ltYWdlSU8iXSxbImltYWdlL3BuZyIsIlBOR0ltYWdlSU8iXSxbImltYWdlL3RpZmYiLCJUSUZGSW1hZ2VJTyJdLFsiaW1hZ2UveC1tcy1ibXAiLCJCTVBJbWFnZUlPIl0sWyJpbWFnZS94LWJtcCIsIkJNUEltYWdlSU8iXSxbImltYWdlL2JtcCIsIkJNUEltYWdlSU8iXSxbImFwcGxpY2F0aW9uL2RpY29tIiwiR0RDTUltYWdlSU8iXV0pLGllPXdJO3ZhciBwST1uZXcgTWFwKFtbImJtcCIsIkJNUEltYWdlSU8iXSxbIkJNUCIsIkJNUEltYWdlSU8iXSxbImRjbSIsIkdEQ01JbWFnZUlPIl0sWyJEQ00iLCJHRENNSW1hZ2VJTyJdLFsiZ2lwbCIsIkdpcGxJbWFnZUlPIl0sWyJnaXBsLmd6IiwiR2lwbEltYWdlSU8iXSxbImhkZjUiLCJIREY1SW1hZ2VJTyJdLFsianBnIiwiSlBFR0ltYWdlSU8iXSxbIkpQRyIsIkpQRUdJbWFnZUlPIl0sWyJqcGVnIiwiSlBFR0ltYWdlSU8iXSxbIkpQRUciLCJKUEVHSW1hZ2VJTyJdLFsiaXdpIiwiV2FzbUltYWdlSU8iXSxbIml3aS5jYm9yIiwiV2FzbUltYWdlSU8iXSxbIml3aS5jYm9yLnpzdCIsIldhc21ac3RkSW1hZ2VJTyJdLFsibHNtIiwiTFNNSW1hZ2VJTyJdLFsibW5jIiwiTUlOQ0ltYWdlSU8iXSxbIk1OQyIsIk1JTkNJbWFnZUlPIl0sWyJtbmMuZ3oiLCJNSU5DSW1hZ2VJTyJdLFsiTU5DLkdaIiwiTUlOQ0ltYWdlSU8iXSxbIm1uYzIiLCJNSU5DSW1hZ2VJTyJdLFsiTU5DMiIsIk1JTkNJbWFnZUlPIl0sWyJtZ2giLCJNR0hJbWFnZUlPIl0sWyJtZ3oiLCJNR0hJbWFnZUlPIl0sWyJtZ2guZ3oiLCJNR0hJbWFnZUlPIl0sWyJtaGEiLCJNZXRhSW1hZ2VJTyJdLFsibWhkIiwiTWV0YUltYWdlSU8iXSxbIm1yYyIsIk1SQ0ltYWdlSU8iXSxbIm5pYSIsIk5pZnRpSW1hZ2VJTyJdLFsibmlpIiwiTmlmdGlJbWFnZUlPIl0sWyJuaWkuZ3oiLCJOaWZ0aUltYWdlSU8iXSxbImhkciIsIk5pZnRpSW1hZ2VJTyJdLFsibnJyZCIsIk5ycmRJbWFnZUlPIl0sWyJOUlJEIiwiTnJyZEltYWdlSU8iXSxbIm5oZHIiLCJOcnJkSW1hZ2VJTyJdLFsiTkhEUiIsIk5ycmRJbWFnZUlPIl0sWyJwbmciLCJQTkdJbWFnZUlPIl0sWyJQTkciLCJQTkdJbWFnZUlPIl0sWyJwaWMiLCJCaW9SYWRJbWFnZUlPIl0sWyJQSUMiLCJCaW9SYWRJbWFnZUlPIl0sWyJ0aWYiLCJUSUZGSW1hZ2VJTyJdLFsiVElGIiwiVElGRkltYWdlSU8iXSxbInRpZmYiLCJUSUZGSW1hZ2VJTyJdLFsiVElGRiIsIlRJRkZJbWFnZUlPIl0sWyJ2dGsiLCJWVEtJbWFnZUlPIl0sWyJWVEsiLCJWVEtJbWFnZUlPIl0sWyJpc3EiLCJTY2FuY29JbWFnZUlPIl0sWyJJU1EiLCJTY2FuY29JbWFnZUlPIl0sWyJmZGYiLCJGREZJbWFnZUlPIl0sWyJGREYiLCJGREZJbWFnZUlPIl1dKSxnZT1wSTtmdW5jdGlvbiBGSShBKXtsZXQgZT1BLnNsaWNlKChBLmxhc3RJbmRleE9mKCIuIiktMT4+PjApKzIpO2lmKGUudG9Mb3dlckNhc2UoKT09PSJneiIpe2xldCB0PUEuc2xpY2UoMCwtMykubGFzdEluZGV4T2YoIi4iKTtlPUEuc2xpY2UoKHQtMT4+PjApKzIpfWVsc2UgaWYoZS50b0xvd2VyQ2FzZSgpPT09ImNib3IiKXtsZXQgdD1BLnNsaWNlKDAsLTUpLmxhc3RJbmRleE9mKCIuIik7ZT1BLnNsaWNlKCh0LTE+Pj4wKSsyKX1lbHNlIGlmKGUudG9Mb3dlckNhc2UoKT09PSJ6c3QiKXtsZXQgdD1BLnNsaWNlKDAsLTEwKS5sYXN0SW5kZXhPZigiLiIpO2U9QS5zbGljZSgodC0xPj4+MCkrMil9ZWxzZSBpZihlLnRvTG93ZXJDYXNlKCk9PT0iemlwIil7bGV0IHQ9QS5zbGljZSgwLC00KS5sYXN0SW5kZXhPZigiLiIpO2U9QS5zbGljZSgodC0xPj4+MCkrMil9cmV0dXJuIGV9dmFyIGtBPUZJO3ZhciBTST1bIlBOR0ltYWdlSU8iLCJNZXRhSW1hZ2VJTyIsIlRJRkZJbWFnZUlPIiwiTmlmdGlJbWFnZUlPIiwiSlBFR0ltYWdlSU8iLCJOcnJkSW1hZ2VJTyIsIlZUS0ltYWdlSU8iLCJCTVBJbWFnZUlPIiwiSERGNUltYWdlSU8iLCJNSU5DSW1hZ2VJTyIsIk1SQ0ltYWdlSU8iLCJMU01JbWFnZUlPIiwiTUdISW1hZ2VJTyIsIkJpb1JhZEltYWdlSU8iLCJHaXBsSW1hZ2VJTyIsIkdFQWR3SW1hZ2VJTyIsIkdFNEltYWdlSU8iLCJHRTVJbWFnZUlPIiwiR0RDTUltYWdlSU8iLCJTY2FuY29JbWFnZUlPIiwiRkRGSW1hZ2VJTyIsIldhc21JbWFnZUlPIiwiV2FzbVpzdGRJbWFnZUlPIl0sTEE9U0k7dmFyIE5JPXtUZXh0RmlsZToiSW50ZXJmYWNlVGV4dEZpbGUiLEJpbmFyeUZpbGU6IkludGVyZmFjZUJpbmFyeUZpbGUiLFRleHRTdHJlYW06IkludGVyZmFjZVRleHRTdHJlYW0iLEJpbmFyeVN0cmVhbToiSW50ZXJmYWNlQmluYXJ5U3RyZWFtIixJbWFnZToiSW50ZXJmYWNlSW1hZ2UiLE1lc2g6IkludGVyZmFjZU1lc2giLFBvbHlEYXRhOiJJbnRlcmZhY2VQb2x5RGF0YSIsSnNvbkNvbXBhdGlibGU6IkludGVyZmFjZUpzb25Db21wYXRpYmxlIn0sdT1OSTt2YXIgUkk9e1RleHQ6IlRleHQiLEJpbmFyeToiQmluYXJ5IixJbWFnZToiSW1hZ2UiLE1lc2g6Ik1lc2gifSxTPVJJO3ZhciBHST17SW50ODoiaW50OCIsVUludDg6InVpbnQ4IixJbnQxNjoiaW50MTYiLFVJbnQxNjoidWludDE2IixJbnQzMjoiaW50MzIiLFVJbnQzMjoidWludDMyIixJbnQ2NDoiaW50NjQiLFVJbnQ2NDoidWludDY0IixTaXplVmFsdWVUeXBlOiJ1aW50NjQiLElkZW50aWZpZXJUeXBlOiJ1aW50NjQiLEluZGV4VmFsdWVUeXBlOiJpbnQ2NCIsT2Zmc2V0VmFsdWVUeXBlOiJpbnQ2NCJ9LEY9R0k7dmFyIFVJPXtGbG9hdDMyOiJmbG9hdDMyIixGbG9hdDY0OiJmbG9hdDY0IixTcGFjZVByZWNpc2lvblR5cGU6ImZsb2F0NjQifSxUPVVJO2Z1bmN0aW9uIGtJKEEsZSl7bGV0IHQ9bnVsbDtzd2l0Y2goQSl7Y2FzZSBGLlVJbnQ4Ont0PW5ldyBVaW50OEFycmF5KGUpO2JyZWFrfWNhc2UgRi5JbnQ4Ont0PW5ldyBJbnQ4QXJyYXkoZSk7YnJlYWt9Y2FzZSBGLlVJbnQxNjp7dD1uZXcgVWludDE2QXJyYXkoZSk7YnJlYWt9Y2FzZSBGLkludDE2Ont0PW5ldyBJbnQxNkFycmF5KGUpO2JyZWFrfWNhc2UgRi5VSW50MzI6e3Q9bmV3IFVpbnQzMkFycmF5KGUpO2JyZWFrfWNhc2UgRi5JbnQzMjp7dD1uZXcgSW50MzJBcnJheShlKTticmVha31jYXNlIEYuVUludDY0Ont0eXBlb2YgZ2xvYmFsVGhpcy5CaWdVaW50NjRBcnJheT09ImZ1bmN0aW9uIj90PW5ldyBCaWdVaW50NjRBcnJheShlKTp0PW5ldyBVaW50OEFycmF5KGUpO2JyZWFrfWNhc2UgRi5JbnQ2NDp7dHlwZW9mIGdsb2JhbFRoaXMuQmlnSW50NjRBcnJheT09ImZ1bmN0aW9uIj90PW5ldyBCaWdJbnQ2NEFycmF5KGUpOnQ9bmV3IFVpbnQ4QXJyYXkoZSk7YnJlYWt9Y2FzZSBULkZsb2F0MzI6e3Q9bmV3IEZsb2F0MzJBcnJheShlKTticmVha31jYXNlIFQuRmxvYXQ2NDp7dD1uZXcgRmxvYXQ2NEFycmF5KGUpO2JyZWFrfWNhc2UibnVsbCI6e3Q9bnVsbDticmVha31jYXNlIG51bGw6e3Q9bnVsbDticmVha31kZWZhdWx0OnRocm93IG5ldyBFcnJvcigiVHlwZSBpcyBub3Qgc3VwcG9ydGVkIGFzIGEgVHlwZWRBcnJheSIpfXJldHVybiB0fXZhciBkPWtJO3ZhciBvdD10eXBlb2YgZ2xvYmFsVGhpcy5TaGFyZWRBcnJheUJ1ZmZlcj09ImZ1bmN0aW9uIixpdD1uZXcgVGV4dEVuY29kZXIsZ3Q9bmV3IFRleHREZWNvZGVyKCJ1dGYtOCIpO2Z1bmN0aW9uIEgoQSxlKXtsZXQgdD17ZmxhZ3M6InIiLGVuY29kaW5nOiJiaW5hcnkifSxJPUEuZnNfb3BlbihlLHQuZmxhZ3MpLGk9QS5mc19zdGF0KGUpLnNpemUsZz1udWxsO290P2c9bmV3IFNoYXJlZEFycmF5QnVmZmVyKGkpOmc9bmV3IEFycmF5QnVmZmVyKGkpO2xldCBuPW5ldyBVaW50OEFycmF5KGcpO3JldHVybiBBLmZzX3JlYWQoSSxuLDAsaSwwKSxBLmZzX2Nsb3NlKEkpLG59ZnVuY3Rpb24gbnQoQSxlLHQpe2xldCBJPW51bGw7b3Q/ST1uZXcgU2hhcmVkQXJyYXlCdWZmZXIodCk6ST1uZXcgQXJyYXlCdWZmZXIodCk7bGV0IHI9bmV3IFVpbnQ4QXJyYXkoSSksaT1uZXcgVWludDhBcnJheShBLkhFQVBVOC5idWZmZXIsZSx0KTtyZXR1cm4gci5zZXQoaSkscn1mdW5jdGlvbiB5KEEsZSx0LEkpe2xldCByPTA7cmV0dXJuIGUhPT1udWxsJiYocj1BLmNjYWxsKCJpdGtfd2FzbV9pbnB1dF9hcnJheV9hbGxvYyIsIm51bWJlciIsWyJudW1iZXIiLCJudW1iZXIiLCJudW1iZXIiLCJudW1iZXIiXSxbMCx0LEksZS5idWZmZXIuYnl0ZUxlbmd0aF0pLEEuSEVBUFU4LnNldChuZXcgVWludDhBcnJheShlLmJ1ZmZlcikscikpLHJ9ZnVuY3Rpb24gVihBLGUsdCl7bGV0IEk9SlNPTi5zdHJpbmdpZnkoZSkscj1BLmNjYWxsKCJpdGtfd2FzbV9pbnB1dF9qc29uX2FsbG9jIiwibnVtYmVyIixbIm51bWJlciIsIm51bWJlciIsIm51bWJlciJdLFswLHQsSS5sZW5ndGhdKTtBLndyaXRlQXNjaWlUb01lbW9yeShJLHIsITEpfWZ1bmN0aW9uIE4oQSxlLHQsSSl7bGV0IHI9QS5jY2FsbCgiaXRrX3dhc21fb3V0cHV0X2FycmF5X2FkZHJlc3MiLCJudW1iZXIiLFsibnVtYmVyIiwibnVtYmVyIiwibnVtYmVyIl0sWzAsZSx0XSksaT1BLmNjYWxsKCJpdGtfd2FzbV9vdXRwdXRfYXJyYXlfc2l6ZSIsIm51bWJlciIsWyJudW1iZXIiLCJudW1iZXIiLCJudW1iZXIiXSxbMCxlLHRdKSxnPW50KEEscixpKTtyZXR1cm4gZChJLGcuYnVmZmVyKX1mdW5jdGlvbiBvZShBLGUpe2xldCB0PUEuY2NhbGwoIml0a193YXNtX291dHB1dF9qc29uX2FkZHJlc3MiLCJudW1iZXIiLFsibnVtYmVyIiwibnVtYmVyIl0sWzAsZV0pLEk9QS5Bc2NpaVRvU3RyaW5nKHQpO3JldHVybiBKU09OLnBhcnNlKEkpfWZ1bmN0aW9uIExJKEEsZSx0LEkpe0khPW51bGwmJkkubGVuZ3RoPjAmJkkuZm9yRWFjaChmdW5jdGlvbihvLEIpe3ZhciBjO3N3aXRjaChvLnR5cGUpe2Nhc2UgdS5UZXh0U3RyZWFtOntsZXQgYT1pdC5lbmNvZGUoby5kYXRhLmRhdGEpLEM9eShBLGEsQiwwKSxRPXtzaXplOmEuYnVmZmVyLmJ5dGVMZW5ndGgsZGF0YTpgZGF0YTphcHBsaWNhdGlvbi92bmQuaXRrLmFkZHJlc3MsMDoke0N9YH07VihBLFEsQik7YnJlYWt9Y2FzZSB1Lkpzb25Db21wYXRpYmxlOntsZXQgYT1pdC5lbmNvZGUoSlNPTi5zdHJpbmdpZnkoby5kYXRhKSksQz15KEEsYSxCLDApLFE9e3NpemU6YS5idWZmZXIuYnl0ZUxlbmd0aCxkYXRhOmBkYXRhOmFwcGxpY2F0aW9uL3ZuZC5pdGsuYWRkcmVzcywwOiR7Q31gfTtWKEEsUSxCKTticmVha31jYXNlIHUuQmluYXJ5U3RyZWFtOntsZXQgYT1vLmRhdGEuZGF0YSxDPXkoQSxhLEIsMCksUT17c2l6ZTphLmJ1ZmZlci5ieXRlTGVuZ3RoLGRhdGE6YGRhdGE6YXBwbGljYXRpb24vdm5kLml0ay5hZGRyZXNzLDA6JHtDfWB9O1YoQSxRLEIpO2JyZWFrfWNhc2UgdS5UZXh0RmlsZTp7QS5mc193cml0ZUZpbGUoby5kYXRhLnBhdGgsby5kYXRhLmRhdGEpO2JyZWFrfWNhc2UgdS5CaW5hcnlGaWxlOntBLmZzX3dyaXRlRmlsZShvLmRhdGEucGF0aCxvLmRhdGEuZGF0YSk7YnJlYWt9Y2FzZSB1LkltYWdlOntsZXQgYT1vLmRhdGEsQz15KEEsYS5kYXRhLEIsMCksUT15KEEsYS5kaXJlY3Rpb24sQiwxKSxmPXR5cGVvZigoYz1hLm1ldGFkYXRhKT09PW51bGx8fGM9PT12b2lkIDA/dm9pZCAwOmMuZW50cmllcyk8InUiP0pTT04uc3RyaW5naWZ5KEFycmF5LmZyb20oYS5tZXRhZGF0YS5lbnRyaWVzKCkpKToiW10iLG09e2ltYWdlVHlwZTphLmltYWdlVHlwZSxuYW1lOmEubmFtZSxvcmlnaW46YS5vcmlnaW4sc3BhY2luZzphLnNwYWNpbmcsZGlyZWN0aW9uOmBkYXRhOmFwcGxpY2F0aW9uL3ZuZC5pdGsuYWRkcmVzcywwOiR7UX1gLHNpemU6YS5zaXplLGRhdGE6YGRhdGE6YXBwbGljYXRpb24vdm5kLml0ay5hZGRyZXNzLDA6JHtDfWAsbWV0YWRhdGE6Zn07VihBLG0sQik7YnJlYWt9Y2FzZSB1Lk1lc2g6e2xldCBhPW8uZGF0YSxDPXkoQSxhLnBvaW50cyxCLDApLFE9eShBLGEuY2VsbHMsQiwxKSxmPXkoQSxhLnBvaW50RGF0YSxCLDIpLG09eShBLGEuY2VsbERhdGEsQiwzKSx3PXttZXNoVHlwZTphLm1lc2hUeXBlLG5hbWU6YS5uYW1lLG51bWJlck9mUG9pbnRzOmEubnVtYmVyT2ZQb2ludHMscG9pbnRzOmBkYXRhOmFwcGxpY2F0aW9uL3ZuZC5pdGsuYWRkcmVzcywwOiR7Q31gLG51bWJlck9mQ2VsbHM6YS5udW1iZXJPZkNlbGxzLGNlbGxzOmBkYXRhOmFwcGxpY2F0aW9uL3ZuZC5pdGsuYWRkcmVzcywwOiR7UX1gLGNlbGxCdWZmZXJTaXplOmEuY2VsbEJ1ZmZlclNpemUsbnVtYmVyT2ZQb2ludFBpeGVsczphLm51bWJlck9mUG9pbnRQaXhlbHMscG9pbnREYXRhOmBkYXRhOmFwcGxpY2F0aW9uL3ZuZC5pdGsuYWRkcmVzcywwOiR7Zn1gLG51bWJlck9mQ2VsbFBpeGVsczphLm51bWJlck9mQ2VsbFBpeGVscyxjZWxsRGF0YTpgZGF0YTphcHBsaWNhdGlvbi92bmQuaXRrLmFkZHJlc3MsMDoke219YH07VihBLHcsQik7YnJlYWt9Y2FzZSB1LlBvbHlEYXRhOntsZXQgYT1vLmRhdGEsQz15KEEsYS5wb2ludHMsQiwwKSxRPXkoQSxhLnZlcnRpY2VzLEIsMSksZj15KEEsYS5saW5lcyxCLDIpLG09eShBLGEucG9seWdvbnMsQiwzKSx3PXkoQSxhLnRyaWFuZ2xlU3RyaXBzLEIsNCksTz15KEEsYS5wb2ludERhdGEsQiw1KSxLPXkoQSxhLnBvaW50RGF0YSxCLDYpLEpBPXtwb2x5RGF0YVR5cGU6YS5wb2x5RGF0YVR5cGUsbmFtZTphLm5hbWUsbnVtYmVyT2ZQb2ludHM6YS5udW1iZXJPZlBvaW50cyxwb2ludHM6YGRhdGE6YXBwbGljYXRpb24vdm5kLml0ay5hZGRyZXNzLDA6JHtDfWAsdmVydGljZXNCdWZmZXJTaXplOmEudmVydGljZXNCdWZmZXJTaXplLHZlcnRpY2VzOmBkYXRhOmFwcGxpY2F0aW9uL3ZuZC5pdGsuYWRkcmVzcywwOiR7UX1gLGxpbmVzQnVmZmVyU2l6ZTphLmxpbmVzQnVmZmVyU2l6ZSxsaW5lczpgZGF0YTphcHBsaWNhdGlvbi92bmQuaXRrLmFkZHJlc3MsMDoke2Z9YCxwb2x5Z29uc0J1ZmZlclNpemU6YS5wb2x5Z29uc0J1ZmZlclNpemUscG9seWdvbnM6YGRhdGE6YXBwbGljYXRpb24vdm5kLml0ay5hZGRyZXNzLDA6JHttfWAsdHJpYW5nbGVTdHJpcHNCdWZmZXJTaXplOmEudHJpYW5nbGVTdHJpcHNCdWZmZXJTaXplLHRyaWFuZ2xlU3RyaXBzOmBkYXRhOmFwcGxpY2F0aW9uL3ZuZC5pdGsuYWRkcmVzcywwOiR7d31gLG51bWJlck9mUG9pbnRQaXhlbHM6YS5udW1iZXJPZlBvaW50UGl4ZWxzLHBvaW50RGF0YTpgZGF0YTphcHBsaWNhdGlvbi92bmQuaXRrLmFkZHJlc3MsMDoke099YCxudW1iZXJPZkNlbGxQaXhlbHM6YS5udW1iZXJPZkNlbGxQaXhlbHMsY2VsbERhdGE6YGRhdGE6YXBwbGljYXRpb24vdm5kLml0ay5hZGRyZXNzLDA6JHtLfWB9O1YoQSxKQSxCKTticmVha31jYXNlIFMuVGV4dDp7QS5mc193cml0ZUZpbGUoby5wYXRoLG8uZGF0YSk7YnJlYWt9Y2FzZSBTLkJpbmFyeTp7QS5mc193cml0ZUZpbGUoby5wYXRoLG8uZGF0YSk7YnJlYWt9Y2FzZSBTLkltYWdlOntsZXQgYT1vLmRhdGEsQz17aW1hZ2VUeXBlOmEuaW1hZ2VUeXBlLG5hbWU6YS5uYW1lLG9yaWdpbjphLm9yaWdpbixzcGFjaW5nOmEuc3BhY2luZyxkaXJlY3Rpb246ImRhdGE6YXBwbGljYXRpb24vdm5kLml0ay5wYXRoLGRhdGEvZGlyZWN0aW9uLnJhdyIsc2l6ZTphLnNpemUsZGF0YToiZGF0YTphcHBsaWNhdGlvbi92bmQuaXRrLnBhdGgsZGF0YS9kYXRhLnJhdyJ9O2lmKEEuZnNfbWtkaXJzKGAke28ucGF0aH0vZGF0YWApLEEuZnNfd3JpdGVGaWxlKGAke28ucGF0aH0vaW5kZXguanNvbmAsSlNPTi5zdHJpbmdpZnkoQykpLGEuZGF0YT09PW51bGwpdGhyb3cgRXJyb3IoImltYWdlLmRhdGEgaXMgbnVsbCIpO0EuZnNfd3JpdGVGaWxlKGAke28ucGF0aH0vZGF0YS9kYXRhLnJhd2AsbmV3IFVpbnQ4QXJyYXkoYS5kYXRhLmJ1ZmZlcikpLEEuZnNfd3JpdGVGaWxlKGAke28ucGF0aH0vZGF0YS9kaXJlY3Rpb24ucmF3YCxuZXcgVWludDhBcnJheShhLmRpcmVjdGlvbi5idWZmZXIpKTticmVha31jYXNlIFMuTWVzaDp7bGV0IGE9by5kYXRhLEM9e21lc2hUeXBlOmEubWVzaFR5cGUsbmFtZTphLm5hbWUsbnVtYmVyT2ZQb2ludHM6YS5udW1iZXJPZlBvaW50cyxwb2ludHM6ImRhdGE6YXBwbGljYXRpb24vdm5kLml0ay5wYXRoLGRhdGEvcG9pbnRzLnJhdyIsbnVtYmVyT2ZQb2ludFBpeGVsczphLm51bWJlck9mUG9pbnRQaXhlbHMscG9pbnREYXRhOiJkYXRhOmFwcGxpY2F0aW9uL3ZuZC5pdGsucGF0aCxkYXRhL3BvaW50RGF0YS5yYXciLG51bWJlck9mQ2VsbHM6YS5udW1iZXJPZkNlbGxzLGNlbGxzOiJkYXRhOmFwcGxpY2F0aW9uL3ZuZC5pdGsucGF0aCxkYXRhL2NlbGxzLnJhdyIsbnVtYmVyT2ZDZWxsUGl4ZWxzOmEubnVtYmVyT2ZDZWxsUGl4ZWxzLGNlbGxEYXRhOiJkYXRhOmFwcGxpY2F0aW9uL3ZuZC5pdGsucGF0aCxkYXRhL2NlbGxEYXRhLnJhdyIsY2VsbEJ1ZmZlclNpemU6YS5jZWxsQnVmZmVyU2l6ZX07aWYoQS5mc19ta2RpcnMoYCR7by5wYXRofS9kYXRhYCksQS5mc193cml0ZUZpbGUoYCR7by5wYXRofS9pbmRleC5qc29uYCxKU09OLnN0cmluZ2lmeShDKSksQy5udW1iZXJPZlBvaW50cz4wKXtpZihhLnBvaW50cz09PW51bGwpdGhyb3cgRXJyb3IoIm1lc2gucG9pbnRzIGlzIG51bGwiKTtBLmZzX3dyaXRlRmlsZShgJHtvLnBhdGh9L2RhdGEvcG9pbnRzLnJhd2AsbmV3IFVpbnQ4QXJyYXkoYS5wb2ludHMuYnVmZmVyKSl9aWYoQy5udW1iZXJPZlBvaW50UGl4ZWxzPjApe2lmKGEucG9pbnREYXRhPT09bnVsbCl0aHJvdyBFcnJvcigibWVzaC5wb2ludERhdGEgaXMgbnVsbCIpO0EuZnNfd3JpdGVGaWxlKGAke28ucGF0aH0vZGF0YS9wb2ludERhdGEucmF3YCxuZXcgVWludDhBcnJheShhLnBvaW50RGF0YS5idWZmZXIpKX1pZihDLm51bWJlck9mQ2VsbHM+MCl7aWYoYS5jZWxscz09PW51bGwpdGhyb3cgRXJyb3IoIm1lc2guY2VsbHMgaXMgbnVsbCIpO0EuZnNfd3JpdGVGaWxlKGAke28ucGF0aH0vZGF0YS9jZWxscy5yYXdgLG5ldyBVaW50OEFycmF5KGEuY2VsbHMuYnVmZmVyKSl9aWYoQy5udW1iZXJPZkNlbGxQaXhlbHM+MCl7aWYoYS5jZWxsRGF0YT09PW51bGwpdGhyb3cgRXJyb3IoIm1lc2guY2VsbERhdGEgaXMgbnVsbCIpO0EuZnNfd3JpdGVGaWxlKGAke28ucGF0aH0vZGF0YS9jZWxsRGF0YS5yYXdgLG5ldyBVaW50OEFycmF5KGEuY2VsbERhdGEuYnVmZmVyKSl9YnJlYWt9ZGVmYXVsdDp0aHJvdyBFcnJvcigiVW5zdXBwb3J0ZWQgaW5wdXQgSW50ZXJmYWNlVHlwZSIpfX0pLEEucmVzZXRNb2R1bGVTdGRvdXQoKSxBLnJlc2V0TW9kdWxlU3RkZXJyKCk7bGV0IHI9QS5zdGFja1NhdmUoKSxpPTA7dHJ5e2k9QS5jYWxsTWFpbihlLnNsaWNlKCkpfWNhdGNoKG8pe3Rocm93IHR5cGVvZiBvPT0ibnVtYmVyIiYmKGNvbnNvbGUubG9nKCJFeGNlcHRpb24gd2hpbGUgcnVubmluZyBwaXBlbGluZToiKSxjb25zb2xlLmxvZygic3Rkb3V0OiIsQS5nZXRNb2R1bGVTdGRvdXQoKSksY29uc29sZS5lcnJvcigic3RkZXJyOiIsQS5nZXRNb2R1bGVTdGRlcnIoKSksdHlwZW9mIEEuZ2V0RXhjZXB0aW9uTWVzc2FnZTwidSI/Y29uc29sZS5lcnJvcigiZXhjZXB0aW9uOiIsQS5nZXRFeGNlcHRpb25NZXNzYWdlKG8pKTpjb25zb2xlLmVycm9yKCJCdWlsZCBtb2R1bGUgaW4gRGVidWcgbW9kZSBmb3IgZXhjZXB0aW9uIG1lc3NhZ2UgaW5mb3JtYXRpb24uIikpLG99ZmluYWxseXtBLnN0YWNrUmVzdG9yZShyKX1sZXQgZz1BLmdldE1vZHVsZVN0ZG91dCgpLG49QS5nZXRNb2R1bGVTdGRlcnIoKSxFPVtdO3JldHVybiB0IT1udWxsJiZ0Lmxlbmd0aD4wJiZpPT09MCYmdC5mb3JFYWNoKGZ1bmN0aW9uKG8sQil7bGV0IGM9bnVsbDtzd2l0Y2goby50eXBlKXtjYXNlIHUuVGV4dFN0cmVhbTp7bGV0IEM9QS5jY2FsbCgiaXRrX3dhc21fb3V0cHV0X2FycmF5X2FkZHJlc3MiLCJudW1iZXIiLFsibnVtYmVyIiwibnVtYmVyIiwibnVtYmVyIl0sWzAsQiwwXSksUT1BLmNjYWxsKCJpdGtfd2FzbV9vdXRwdXRfYXJyYXlfc2l6ZSIsIm51bWJlciIsWyJudW1iZXIiLCJudW1iZXIiLCJudW1iZXIiXSxbMCxCLDBdKSxmPW5ldyBVaW50OEFycmF5KEEuSEVBUFU4LmJ1ZmZlcixDLFEpO2M9e2RhdGE6Z3QuZGVjb2RlKGYpfTticmVha31jYXNlIHUuSnNvbkNvbXBhdGlibGU6e2xldCBDPUEuY2NhbGwoIml0a193YXNtX291dHB1dF9hcnJheV9hZGRyZXNzIiwibnVtYmVyIixbIm51bWJlciIsIm51bWJlciIsIm51bWJlciJdLFswLEIsMF0pLFE9QS5jY2FsbCgiaXRrX3dhc21fb3V0cHV0X2FycmF5X3NpemUiLCJudW1iZXIiLFsibnVtYmVyIiwibnVtYmVyIiwibnVtYmVyIl0sWzAsQiwwXSksZj1uZXcgVWludDhBcnJheShBLkhFQVBVOC5idWZmZXIsQyxRKTtjPUpTT04ucGFyc2UoZ3QuZGVjb2RlKGYpKTticmVha31jYXNlIHUuQmluYXJ5U3RyZWFtOntsZXQgQz1BLmNjYWxsKCJpdGtfd2FzbV9vdXRwdXRfYXJyYXlfYWRkcmVzcyIsIm51bWJlciIsWyJudW1iZXIiLCJudW1iZXIiLCJudW1iZXIiXSxbMCxCLDBdKSxRPUEuY2NhbGwoIml0a193YXNtX291dHB1dF9hcnJheV9zaXplIiwibnVtYmVyIixbIm51bWJlciIsIm51bWJlciIsIm51bWJlciJdLFswLEIsMF0pO2M9e2RhdGE6bnQoQSxDLFEpfTticmVha31jYXNlIHUuVGV4dEZpbGU6e2M9e3BhdGg6by5kYXRhLnBhdGgsZGF0YTpBLmZzX3JlYWRGaWxlKG8uZGF0YS5wYXRoLHtlbmNvZGluZzoidXRmOCJ9KX07YnJlYWt9Y2FzZSB1LkJpbmFyeUZpbGU6e2M9e3BhdGg6by5kYXRhLnBhdGgsZGF0YTpIKEEsby5kYXRhLnBhdGgpfTticmVha31jYXNlIHUuSW1hZ2U6e2xldCBDPW9lKEEsQik7Qy5kYXRhPU4oQSxCLDAsQy5pbWFnZVR5cGUuY29tcG9uZW50VHlwZSksQy5kaXJlY3Rpb249TihBLEIsMSxULkZsb2F0NjQpLEMubWV0YWRhdGE9bmV3IE1hcChDLm1ldGFkYXRhKSxjPUM7YnJlYWt9Y2FzZSB1Lk1lc2g6e2xldCBDPW9lKEEsQik7Qy5udW1iZXJPZlBvaW50cz4wP0MucG9pbnRzPU4oQSxCLDAsQy5tZXNoVHlwZS5wb2ludENvbXBvbmVudFR5cGUpOkMucG9pbnRzPWQoQy5tZXNoVHlwZS5wb2ludENvbXBvbmVudFR5cGUsbmV3IEFycmF5QnVmZmVyKDApKSxDLm51bWJlck9mQ2VsbHM+MD9DLmNlbGxzPU4oQSxCLDEsQy5tZXNoVHlwZS5jZWxsQ29tcG9uZW50VHlwZSk6Qy5jZWxscz1kKEMubWVzaFR5cGUuY2VsbENvbXBvbmVudFR5cGUsbmV3IEFycmF5QnVmZmVyKDApKSxDLm51bWJlck9mUG9pbnRQaXhlbHM+MD9DLnBvaW50RGF0YT1OKEEsQiwyLEMubWVzaFR5cGUucG9pbnRQaXhlbENvbXBvbmVudFR5cGUpOkMucG9pbnREYXRhPWQoQy5tZXNoVHlwZS5wb2ludFBpeGVsQ29tcG9uZW50VHlwZSxuZXcgQXJyYXlCdWZmZXIoMCkpLEMubnVtYmVyT2ZDZWxsUGl4ZWxzPjA/Qy5jZWxsRGF0YT1OKEEsQiwzLEMubWVzaFR5cGUuY2VsbFBpeGVsQ29tcG9uZW50VHlwZSk6Qy5jZWxsRGF0YT1kKEMubWVzaFR5cGUuY2VsbFBpeGVsQ29tcG9uZW50VHlwZSxuZXcgQXJyYXlCdWZmZXIoMCkpLGM9QzticmVha31jYXNlIHUuUG9seURhdGE6e2xldCBDPW9lKEEsQik7Qy5udW1iZXJPZlBvaW50cz4wP0MucG9pbnRzPU4oQSxCLDAsVC5GbG9hdDMyKTpDLnBvaW50cz1uZXcgRmxvYXQzMkFycmF5LEMudmVydGljZXNCdWZmZXJTaXplPjA/Qy52ZXJ0aWNlcz1OKEEsQiwxLEYuVUludDMyKTpDLnZlcnRpY2VzPW5ldyBVaW50MzJBcnJheSxDLmxpbmVzQnVmZmVyU2l6ZT4wP0MubGluZXM9TihBLEIsMixGLlVJbnQzMik6Qy5saW5lcz1uZXcgVWludDMyQXJyYXksQy5wb2x5Z29uc0J1ZmZlclNpemU+MD9DLnBvbHlnb25zPU4oQSxCLDMsRi5VSW50MzIpOkMucG9seWdvbnM9bmV3IFVpbnQzMkFycmF5LEMudHJpYW5nbGVTdHJpcHNCdWZmZXJTaXplPjA/Qy50cmlhbmdsZVN0cmlwcz1OKEEsQiw0LEYuVUludDMyKTpDLnRyaWFuZ2xlU3RyaXBzPW5ldyBVaW50MzJBcnJheSxDLm51bWJlck9mUG9pbnRQaXhlbHM+MD9DLnBvaW50RGF0YT1OKEEsQiw1LEMucG9seURhdGFUeXBlLnBvaW50UGl4ZWxDb21wb25lbnRUeXBlKTpDLnBvaW50RGF0YT1kKEMucG9seURhdGFUeXBlLnBvaW50UGl4ZWxDb21wb25lbnRUeXBlLG5ldyBBcnJheUJ1ZmZlcigwKSksQy5udW1iZXJPZkNlbGxQaXhlbHM+MD9DLmNlbGxEYXRhPU4oQSxCLDYsQy5wb2x5RGF0YVR5cGUuY2VsbFBpeGVsQ29tcG9uZW50VHlwZSk6Qy5jZWxsRGF0YT1kKEMucG9seURhdGFUeXBlLmNlbGxQaXhlbENvbXBvbmVudFR5cGUsbmV3IEFycmF5QnVmZmVyKDApKSxjPUM7YnJlYWt9Y2FzZSBTLlRleHQ6e2lmKHR5cGVvZiBvLnBhdGg+InUiKXRocm93IG5ldyBFcnJvcigib3V0cHV0LnBhdGggbm90IGRlZmluZWQiKTtjPUEuZnNfcmVhZEZpbGUoby5wYXRoLHtlbmNvZGluZzoidXRmOCJ9KTticmVha31jYXNlIFMuQmluYXJ5OntpZih0eXBlb2Ygby5wYXRoPiJ1Iil0aHJvdyBuZXcgRXJyb3IoIm91dHB1dC5wYXRoIG5vdCBkZWZpbmVkIik7Yz1IKEEsby5wYXRoKTticmVha31jYXNlIFMuSW1hZ2U6e2lmKHR5cGVvZiBvLnBhdGg+InUiKXRocm93IG5ldyBFcnJvcigib3V0cHV0LnBhdGggbm90IGRlZmluZWQiKTtsZXQgQz1BLmZzX3JlYWRGaWxlKGAke28ucGF0aH0vaW5kZXguanNvbmAse2VuY29kaW5nOiJ1dGY4In0pLFE9SlNPTi5wYXJzZShDKSxmPUgoQSxgJHtvLnBhdGh9L2RhdGEvZGF0YS5yYXdgKTtRLmRhdGE9ZChRLmltYWdlVHlwZS5jb21wb25lbnRUeXBlLGYuYnVmZmVyKTtsZXQgbT1IKEEsYCR7by5wYXRofS9kYXRhL2RpcmVjdGlvbi5yYXdgKTtRLmRpcmVjdGlvbj1kKFQuRmxvYXQ2NCxtLmJ1ZmZlciksYz1RO2JyZWFrfWNhc2UgUy5NZXNoOntpZih0eXBlb2Ygby5wYXRoPiJ1Iil0aHJvdyBuZXcgRXJyb3IoIm91dHB1dC5wYXRoIG5vdCBkZWZpbmVkIik7bGV0IEM9QS5mc19yZWFkRmlsZShgJHtvLnBhdGh9L2luZGV4Lmpzb25gLHtlbmNvZGluZzoidXRmOCJ9KSxRPUpTT04ucGFyc2UoQyk7aWYoUS5udW1iZXJPZlBvaW50cz4wKXtsZXQgZj1IKEEsYCR7by5wYXRofS9kYXRhL3BvaW50cy5yYXdgKTtRLnBvaW50cz1kKFEubWVzaFR5cGUucG9pbnRDb21wb25lbnRUeXBlLGYuYnVmZmVyKX1lbHNlIFEucG9pbnRzPWQoUS5tZXNoVHlwZS5wb2ludENvbXBvbmVudFR5cGUsbmV3IEFycmF5QnVmZmVyKDApKTtpZihRLm51bWJlck9mUG9pbnRQaXhlbHM+MCl7bGV0IGY9SChBLGAke28ucGF0aH0vZGF0YS9wb2ludERhdGEucmF3YCk7US5wb2ludERhdGE9ZChRLm1lc2hUeXBlLnBvaW50UGl4ZWxDb21wb25lbnRUeXBlLGYuYnVmZmVyKX1lbHNlIFEucG9pbnREYXRhPWQoUS5tZXNoVHlwZS5wb2ludFBpeGVsQ29tcG9uZW50VHlwZSxuZXcgQXJyYXlCdWZmZXIoMCkpO2lmKFEubnVtYmVyT2ZDZWxscz4wKXtsZXQgZj1IKEEsYCR7by5wYXRofS9kYXRhL2NlbGxzLnJhd2ApO1EuY2VsbHM9ZChRLm1lc2hUeXBlLmNlbGxDb21wb25lbnRUeXBlLGYuYnVmZmVyKX1lbHNlIFEuY2VsbHM9ZChRLm1lc2hUeXBlLmNlbGxDb21wb25lbnRUeXBlLG5ldyBBcnJheUJ1ZmZlcigwKSk7aWYoUS5udW1iZXJPZkNlbGxQaXhlbHM+MCl7bGV0IGY9SChBLGAke28ucGF0aH0vZGF0YS9jZWxsRGF0YS5yYXdgKTtRLmNlbGxEYXRhPWQoUS5tZXNoVHlwZS5jZWxsUGl4ZWxDb21wb25lbnRUeXBlLGYuYnVmZmVyKX1lbHNlIFEuY2VsbERhdGE9ZChRLm1lc2hUeXBlLmNlbGxQaXhlbENvbXBvbmVudFR5cGUsbmV3IEFycmF5QnVmZmVyKDApKTtjPVE7YnJlYWt9ZGVmYXVsdDp0aHJvdyBFcnJvcigiVW5zdXBwb3J0ZWQgb3V0cHV0IEludGVyZmFjZVR5cGUiKX1sZXQgYT17dHlwZTpvLnR5cGUsZGF0YTpjfTtFLnB1c2goYSl9KSx7cmV0dXJuVmFsdWU6aSxzdGRvdXQ6ZyxzdGRlcnI6bixvdXRwdXRzOkV9fXZhciB6PUxJO3ZhciBvQT1mdW5jdGlvbihBKXtyZXR1cm4gdGhpcyBpbnN0YW5jZW9mIG9BPyh0aGlzLnY9QSx0aGlzKTpuZXcgb0EoQSl9LE9JPWZ1bmN0aW9uKEEsZSx0KXtpZighU3ltYm9sLmFzeW5jSXRlcmF0b3IpdGhyb3cgbmV3IFR5cGVFcnJvcigiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuIik7dmFyIEk9dC5hcHBseShBLGV8fFtdKSxyLGk9W107cmV0dXJuIHI9e30sZygibmV4dCIpLGcoInRocm93IiksZygicmV0dXJuIikscltTeW1ib2wuYXN5bmNJdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30scjtmdW5jdGlvbiBnKGEpe0lbYV0mJihyW2FdPWZ1bmN0aW9uKEMpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihRLGYpe2kucHVzaChbYSxDLFEsZl0pPjF8fG4oYSxDKX0pfSl9ZnVuY3Rpb24gbihhLEMpe3RyeXtFKElbYV0oQykpfWNhdGNoKFEpe2MoaVswXVszXSxRKX19ZnVuY3Rpb24gRShhKXthLnZhbHVlIGluc3RhbmNlb2Ygb0E/UHJvbWlzZS5yZXNvbHZlKGEudmFsdWUudikudGhlbihvLEIpOmMoaVswXVsyXSxhKX1mdW5jdGlvbiBvKGEpe24oIm5leHQiLGEpfWZ1bmN0aW9uIEIoYSl7bigidGhyb3ciLGEpfWZ1bmN0aW9uIGMoYSxDKXthKEMpLGkuc2hpZnQoKSxpLmxlbmd0aCYmbihpWzBdWzBdLGlbMF1bMV0pfX0sSkk9ZnVuY3Rpb24oQSl7aWYoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKXRocm93IG5ldyBUeXBlRXJyb3IoIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLiIpO3ZhciBlPUFbU3ltYm9sLmFzeW5jSXRlcmF0b3JdLHQ7cmV0dXJuIGU/ZS5jYWxsKEEpOihBPXR5cGVvZiBfX3ZhbHVlcz09ImZ1bmN0aW9uIj9fX3ZhbHVlcyhBKTpBW1N5bWJvbC5pdGVyYXRvcl0oKSx0PXt9LEkoIm5leHQiKSxJKCJ0aHJvdyIpLEkoInJldHVybiIpLHRbU3ltYm9sLmFzeW5jSXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9LHQpO2Z1bmN0aW9uIEkoaSl7dFtpXT1BW2ldJiZmdW5jdGlvbihnKXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24obixFKXtnPUFbaV0oZykscihuLEUsZy5kb25lLGcudmFsdWUpfSl9fWZ1bmN0aW9uIHIoaSxnLG4sRSl7UHJvbWlzZS5yZXNvbHZlKEUpLnRoZW4oZnVuY3Rpb24obyl7aSh7dmFsdWU6byxkb25lOm59KX0sZyl9fTtmdW5jdGlvbiBNSShBKXtyZXR1cm4gT0kodGhpcyxhcmd1bWVudHMsZnVuY3Rpb24qKCl7Zm9yKGxldCB0PTA7dDxMQS5sZW5ndGg7dCsrKXtsZXQgST1MQVt0XSsiLXJlYWQtaW1hZ2UiLHI9eWllbGQgb0EoRyhJLEEuY29uZmlnLmltYWdlSU9VcmwpKTt5aWVsZCB5aWVsZCBvQShyKX19KX1hc3luYyBmdW5jdGlvbiBiSShBLGUpe3ZhciB0LEk7aWYoQS5taW1lVHlwZSYmaWUuaGFzKEEubWltZVR5cGUpKXtsZXQgbj1pZS5nZXQoQS5taW1lVHlwZSkrZTtyZXR1cm4gYXdhaXQgRyhuLEEuY29uZmlnLmltYWdlSU9VcmwpfWxldCByPWtBKEEuZmlsZU5hbWUpO2lmKGdlLmhhcyhyKSl7bGV0IG49Z2UuZ2V0KHIpK2U7cmV0dXJuIGF3YWl0IEcobixBLmNvbmZpZy5pbWFnZUlPVXJsKX1mb3IobGV0IG49MDtuPExBLmxlbmd0aDsrK24pe2xldCBFPTA7dHJ5e2Zvcih2YXIgaT0odD12b2lkIDAsSkkoTUkoQSkpKSxnO2c9YXdhaXQgaS5uZXh0KCksIWcuZG9uZTspe2xldCBvPWcudmFsdWU7dHJ5e2xldHtyZXR1cm5WYWx1ZTpCLG91dHB1dHM6Y309YXdhaXQgeihvLEEuYXJncyxBLm91dHB1dHMsQS5pbnB1dHMpO2lmKEI9PT0wKXJldHVybiBvfWNhdGNoe31FKyt9fWNhdGNoKG8pe3Q9e2Vycm9yOm99fWZpbmFsbHl7dHJ5e2cmJiFnLmRvbmUmJihJPWkucmV0dXJuKSYmYXdhaXQgSS5jYWxsKGkpfWZpbmFsbHl7aWYodCl0aHJvdyB0LmVycm9yfX19dGhyb3cgRXJyb3IoYENvdWxkIG5vdCBmaW5kIElPIGZvcjogJHtBLmZpbGVOYW1lfWApfXZhciBuZT1iSTt2YXIgSEk9bmV3IE1hcChbXSksYWU9SEk7dmFyIFlJPW5ldyBNYXAoW1sidnRrIiwiVlRLUG9seURhdGFNZXNoSU8iXSxbIlZUSyIsIlZUS1BvbHlEYXRhTWVzaElPIl0sWyJieXUiLCJCWVVNZXNoSU8iXSxbIkJZVSIsIkJZVU1lc2hJTyJdLFsiZnNhIiwiRnJlZVN1cmZlckFzY2lpTWVzaElPIl0sWyJGU0EiLCJGcmVlU3VyZmVyQXNjaWlNZXNoSU8iXSxbImZzYiIsIkZyZWVTdXJmZXJCaW5hcnlNZXNoSU8iXSxbIkZTQiIsIkZyZWVTdXJmZXJCaW5hcnlNZXNoSU8iXSxbIm9iaiIsIk9CSk1lc2hJTyJdLFsiT0JKIiwiT0JKTWVzaElPIl0sWyJvZmYiLCJPRkZNZXNoSU8iXSxbIk9GRiIsIk9GRk1lc2hJTyJdLFsic3RsIiwiU1RMTWVzaElPIl0sWyJTVEwiLCJTVExNZXNoSU8iXSxbInN3YyIsIlNXQ01lc2hJTyJdLFsiU1dDIiwiU1dDTWVzaElPIl0sWyJpd20iLCJXYXNtTWVzaElPIl0sWyJpd20uY2JvciIsIldhc21NZXNoSU8iXSxbIml3bS5jYm9yLnpzdCIsIldhc21ac3RkTWVzaElPIl1dKSxzZT1ZSTt2YXIgcUk9WyJCWVVNZXNoSU8iLCJGcmVlU3VyZmVyQXNjaWlNZXNoSU8iLCJGcmVlU3VyZmVyQmluYXJ5TWVzaElPIiwiT0JKTWVzaElPIiwiT0ZGTWVzaElPIiwiU1RMTWVzaElPIiwiU1dDTWVzaElPIiwiVlRLUG9seURhdGFNZXNoSU8iLCJXYXNtTWVzaElPIiwiV2FzbVpzdGRNZXNoSU8iXSxPQT1xSTt2YXIgbkE9ZnVuY3Rpb24oQSl7cmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBuQT8odGhpcy52PUEsdGhpcyk6bmV3IG5BKEEpfSxUST1mdW5jdGlvbihBLGUsdCl7aWYoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKXRocm93IG5ldyBUeXBlRXJyb3IoIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLiIpO3ZhciBJPXQuYXBwbHkoQSxlfHxbXSkscixpPVtdO3JldHVybiByPXt9LGcoIm5leHQiKSxnKCJ0aHJvdyIpLGcoInJldHVybiIpLHJbU3ltYm9sLmFzeW5jSXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9LHI7ZnVuY3Rpb24gZyhhKXtJW2FdJiYoclthXT1mdW5jdGlvbihDKXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oUSxmKXtpLnB1c2goW2EsQyxRLGZdKT4xfHxuKGEsQyl9KX0pfWZ1bmN0aW9uIG4oYSxDKXt0cnl7RShJW2FdKEMpKX1jYXRjaChRKXtjKGlbMF1bM10sUSl9fWZ1bmN0aW9uIEUoYSl7YS52YWx1ZSBpbnN0YW5jZW9mIG5BP1Byb21pc2UucmVzb2x2ZShhLnZhbHVlLnYpLnRoZW4obyxCKTpjKGlbMF1bMl0sYSl9ZnVuY3Rpb24gbyhhKXtuKCJuZXh0IixhKX1mdW5jdGlvbiBCKGEpe24oInRocm93IixhKX1mdW5jdGlvbiBjKGEsQyl7YShDKSxpLnNoaWZ0KCksaS5sZW5ndGgmJm4oaVswXVswXSxpWzBdWzFdKX19LEtJPWZ1bmN0aW9uKEEpe2lmKCFTeW1ib2wuYXN5bmNJdGVyYXRvcil0aHJvdyBuZXcgVHlwZUVycm9yKCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC4iKTt2YXIgZT1BW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSx0O3JldHVybiBlP2UuY2FsbChBKTooQT10eXBlb2YgX192YWx1ZXM9PSJmdW5jdGlvbiI/X192YWx1ZXMoQSk6QVtTeW1ib2wuaXRlcmF0b3JdKCksdD17fSxJKCJuZXh0IiksSSgidGhyb3ciKSxJKCJyZXR1cm4iKSx0W1N5bWJvbC5hc3luY0l0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfSx0KTtmdW5jdGlvbiBJKGkpe3RbaV09QVtpXSYmZnVuY3Rpb24oZyl7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKG4sRSl7Zz1BW2ldKGcpLHIobixFLGcuZG9uZSxnLnZhbHVlKX0pfX1mdW5jdGlvbiByKGksZyxuLEUpe1Byb21pc2UucmVzb2x2ZShFKS50aGVuKGZ1bmN0aW9uKG8pe2koe3ZhbHVlOm8sZG9uZTpufSl9LGcpfX07ZnVuY3Rpb24geEkoQSl7cmV0dXJuIFRJKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKigpe2ZvcihsZXQgdD0wO3Q8T0EubGVuZ3RoO3QrKyl7bGV0IEk9T0FbdF0rIi1yZWFkLW1lc2giLHI9eWllbGQgbkEoRyhJLEEuY29uZmlnLm1lc2hJT1VybCkpO3lpZWxkIHlpZWxkIG5BKHIpfX0pfWFzeW5jIGZ1bmN0aW9uIFBJKEEsZSl7dmFyIHQsSTtpZihBLm1pbWVUeXBlJiZhZS5oYXMoQS5taW1lVHlwZSkpe2xldCBuPWFlLmdldChBLm1pbWVUeXBlKStlO3JldHVybiBhd2FpdCBHKG4sQS5jb25maWcubWVzaElPVXJsKX1sZXQgcj1rQShBLmZpbGVOYW1lKTtpZihzZS5oYXMocikpe2xldCBuPXNlLmdldChyKStlO3JldHVybiBhd2FpdCBHKG4sQS5jb25maWcubWVzaElPVXJsKX1mb3IobGV0IG49MDtuPE9BLmxlbmd0aDsrK24pe2xldCBFPTA7dHJ5e2Zvcih2YXIgaT0odD12b2lkIDAsS0koeEkoQSkpKSxnO2c9YXdhaXQgaS5uZXh0KCksIWcuZG9uZTspe2xldCBvPWcudmFsdWU7dHJ5e2xldHtyZXR1cm5WYWx1ZTpCLG91dHB1dHM6Y309YXdhaXQgeihvLEEuYXJncyxBLm91dHB1dHMsQS5pbnB1dHMpO2lmKEI9PT0wKXJldHVybiBvfWNhdGNoe31FKyt9fWNhdGNoKG8pe3Q9e2Vycm9yOm99fWZpbmFsbHl7dHJ5e2cmJiFnLmRvbmUmJihJPWkucmV0dXJuKSYmYXdhaXQgSS5jYWxsKGkpfWZpbmFsbHl7aWYodCl0aHJvdyB0LmVycm9yfX19dGhyb3cgRXJyb3IoYENvdWxkIG5vdCBmaW5kIElPIGZvcjogJHtBLmZpbGVOYW1lfWApfXZhciBDZT1QSTt2YXIgV0k9dHlwZW9mIGdsb2JhbFRoaXMuU2hhcmVkQXJyYXlCdWZmZXI8InUiO2Z1bmN0aW9uIGpJKEEpe2lmKEE9PW51bGwpcmV0dXJuW107bGV0IGU9W107Zm9yKGxldCB0PTA7dDxBLmxlbmd0aDt0Kyspe2xldCBJPVpJKEFbdF0pO0khPT1udWxsJiZlLnB1c2goSSl9cmV0dXJuIGV9ZnVuY3Rpb24gWkkoQSl7aWYoQT09bnVsbClyZXR1cm4gbnVsbDtsZXQgZT1udWxsO3JldHVybiBBLmJ1ZmZlciE9PXZvaWQgMD9lPUEuYnVmZmVyOkEuYnl0ZUxlbmd0aCE9PXZvaWQgMCYmKGU9QSksV0kmJmUgaW5zdGFuY2VvZiBTaGFyZWRBcnJheUJ1ZmZlcj9udWxsOmV9dmFyIGF0PWpJO2Z1bmN0aW9uIF9JKEEpe3JldHVybltBLmRhdGEsQS5kaXJlY3Rpb25dfXZhciBCZT1fSTtmdW5jdGlvbiBWSShBKXtyZXR1cm5bQS5wb2ludHMsQS5wb2ludERhdGEsQS5jZWxscyxBLmNlbGxEYXRhXX12YXIgUWU9Vkk7ZnVuY3Rpb24gekkoQSl7cmV0dXJuW0EucG9pbnRzLEEudmVydGljZXMsQS5saW5lcyxBLnBvbHlnb25zLEEudHJpYW5nbGVTdHJpcHMsQS5wb2ludERhdGEsQS5jZWxsRGF0YV19dmFyIHN0PXpJO2FzeW5jIGZ1bmN0aW9uIFhJKEEsZSx0LEkpe2xldCByPXooQSxlLHQsSSksaT1bXTtyZXR1cm4gci5vdXRwdXRzJiZyLm91dHB1dHMuZm9yRWFjaChmdW5jdGlvbihnKXtpZihnLnR5cGU9PT11LkJpbmFyeVN0cmVhbXx8Zy50eXBlPT09dS5CaW5hcnlGaWxlKXtsZXQgbj1nLmRhdGE7aS5wdXNoKG4pfWVsc2UgaWYoZy50eXBlPT09dS5JbWFnZSl7bGV0IG49Zy5kYXRhO2kucHVzaCguLi5CZShuKSl9ZWxzZSBpZihnLnR5cGU9PT11Lk1lc2gpe2xldCBuPWcuZGF0YTtpLnB1c2goLi4uUWUobikpfWVsc2UgaWYoZy50eXBlPT09dS5Qb2x5RGF0YSl7bGV0IG49Zy5kYXRhO2kucHVzaCguLi5zdChuKSl9ZWxzZSBpZihnLnR5cGU9PT1TLkJpbmFyeSl7bGV0IG49Zy5kYXRhO2kucHVzaChuKX1lbHNlIGlmKGcudHlwZT09PVMuSW1hZ2Upe2xldCBuPWcuZGF0YTtpLnB1c2goLi4uQmUobikpfWVsc2UgaWYoZy50eXBlPT09Uy5NZXNoKXtsZXQgbj1nLmRhdGE7aS5wdXNoKC4uLlFlKG4pKX19KSxIQShyLGF0KGkpKX12YXIgWT1YSTt2YXIgdkk9e21lc2hUb1BvbHlEYXRhOmFzeW5jIGZ1bmN0aW9uKEEsZSx0LEkpe2xldCByPWF3YWl0IEcoIm1lc2gtdG8tcG9seWRhdGEiLEEubWVzaElPVXJsKTtyZXR1cm4gWShyLGUsdCxJKX0scG9seURhdGFUb01lc2g6YXN5bmMgZnVuY3Rpb24oQSxlLHQsSSl7bGV0IHI9YXdhaXQgRygicG9seWRhdGEtdG8tbWVzaCIsQS5tZXNoSU9VcmwpO3JldHVybiBZKHIsZSx0LEkpfSxyZWFkSW1hZ2U6YXN5bmMgZnVuY3Rpb24oQSxlLHQsSSxyLGkpe2xldCBnPWF3YWl0IG5lKHtmaWxlTmFtZTp0LG1pbWVUeXBlOmUsY29uZmlnOkEsYXJnczpJLG91dHB1dHM6cixpbnB1dHM6aX0sIi1yZWFkLWltYWdlIik7cmV0dXJuIFkoZyxJLHIsaSl9LHdyaXRlSW1hZ2U6YXN5bmMgZnVuY3Rpb24oQSxlLHQsSSxyLGkpe2xldCBnPWF3YWl0IG5lKHtmaWxlTmFtZTp0LG1pbWVUeXBlOmUsY29uZmlnOkEsYXJnczpJLG91dHB1dHM6cixpbnB1dHM6aX0sIi13cml0ZS1pbWFnZSIpO3JldHVybiBZKGcsSSxyLGkpfSxyZWFkTWVzaDphc3luYyBmdW5jdGlvbihBLGUsdCxJLHIsaSl7bGV0IGc9YXdhaXQgQ2Uoe2ZpbGVOYW1lOnQsbWltZVR5cGU6ZSxjb25maWc6QSxhcmdzOkksb3V0cHV0czpyLGlucHV0czppfSwiLXJlYWQtbWVzaCIpO3JldHVybiBZKGcsSSxyLGkpfSx3cml0ZU1lc2g6YXN5bmMgZnVuY3Rpb24oQSxlLHQsSSxyLGkpe2xldCBnPWF3YWl0IENlKHtmaWxlTmFtZTp0LG1pbWVUeXBlOmUsY29uZmlnOkEsYXJnczpJLG91dHB1dHM6cixpbnB1dHM6aX0sIi13cml0ZS1tZXNoIik7cmV0dXJuIFkoZyxJLHIsaSl9LHJ1blBpcGVsaW5lOmFzeW5jIGZ1bmN0aW9uKEEsZSx0LEkscixpKXtsZXQgZz10eXBlb2YgQVt0XT4idSI/dDpBW3RdLG49YXdhaXQgRyhlLGcpO3JldHVybiBZKG4sSSxyLGkpfX07RUEodkkpOyUwQS8qISBCdW5kbGVkIGxpY2Vuc2UgaW5mb3JtYXRpb246JTBBJTBBY29tbGluay9kaXN0L2VzbS9jb21saW5rLm1qczolMEEgICgqKiUwQSAgICogQGxpY2Vuc2UlMEEgICAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTEMlMEEgICAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wJTBBICAgKiklMEEqLyUwQSc7dXQoQnQpO2V4cG9ydHskciBhcyBhcHBseVByZXNlbnRhdGlvblN0YXRlVG9JbWFnZSxUIGFzIGdldFBpcGVsaW5lV29ya2VyVXJsLE8gYXMgZ2V0UGlwZWxpbmVzQmFzZVVybCxlbiBhcyByZWFkRGljb21FbmNhcHN1bGF0ZWRQZGYsc24gYXMgcmVhZERpY29tVGFncyxjbiBhcyByZWFkSW1hZ2VEaWNvbUZpbGVTZXJpZXMsb2UgYXMgcmVhZEltYWdlRGljb21GaWxlU2VyaWVzV29ya2VyRnVuY3Rpb24sdXQgYXMgc2V0UGlwZWxpbmVXb3JrZXJVcmwsSXMgYXMgc2V0UGlwZWxpbmVzQmFzZVVybCxybiBhcyBzdHJ1Y3R1cmVkUmVwb3J0VG9IdG1sLGFuIGFzIHN0cnVjdHVyZWRSZXBvcnRUb1RleHR9OwovKiEgQnVuZGxlZCBsaWNlbnNlIGluZm9ybWF0aW9uOgoKY29tbGluay9kaXN0L2VzbS9jb21saW5rLm1qczoKICAoKioKICAgKiBAbGljZW5zZQogICAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTEMKICAgKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMAogICAqKQoqLwo="""
default_config = JsPackageConfig(default_js_module)
js_package = JsPackage(default_config)
