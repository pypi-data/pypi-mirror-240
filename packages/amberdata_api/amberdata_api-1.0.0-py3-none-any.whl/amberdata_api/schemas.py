"""Generated by Sideko (sideko.dev)"""
from __future__ import annotations

import io
import typing
from pydantic import BaseModel as _PydanticBaseModel, Field as _PydanticField, ConfigDict as _PydanticConfigDict

ModelFiles = typing.List[typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]]

class BinaryResponse:
    content: bytes
    headers: dict[str, str]

    def __init__(self, content: bytes, headers: dict[str, str]) -> None:
        self.content = content
        self.headers = headers


class GetAddressesResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetAddressesResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    records: typing.Optional[typing.List[GetAddressesResponsePayloadRecordsItem]] = _PydanticField(alias="records", default=None)
    total_records: typing.Optional[int] = _PydanticField(alias="totalRecords", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesResponsePayloadRecordsItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    blockchain_id: typing.Optional[str] = _PydanticField(alias="blockchainId", default=None)
    creator: typing.Optional[typing.Any] = _PydanticField(alias="creator", default=None)
    first_block_number: typing.Optional[str] = _PydanticField(alias="firstBlockNumber", default=None)
    first_transaction_hash: typing.Optional[str] = _PydanticField(alias="firstTransactionHash", default=None)
    hash: typing.Optional[str] = _PydanticField(alias="hash", default=None)
    timestamp: typing.Optional[int] = _PydanticField(alias="timestamp", default=None)
    type: typing.Optional[str] = _PydanticField(alias="type", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesMetricsLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetAddressesMetricsLatestResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesMetricsLatestResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    active_average: typing.Optional[str] = _PydanticField(alias="activeAverage", default=None)
    active_total: typing.Optional[str] = _PydanticField(alias="activeTotal", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesHashAccountBalancesHistoricalResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetAddressesHashAccountBalancesHistoricalResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesHashAccountBalancesHistoricalResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[typing.Any]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetAddressesHashAccountBalancesHistoricalResponsePayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesHashAccountBalancesHistoricalResponsePayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    columns: typing.Optional[typing.List[str]] = _PydanticField(alias="columns", default=None)
    total_records: typing.Optional[int] = _PydanticField(alias="totalRecords", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesHashAccountBalancesLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetAddressesHashAccountBalancesLatestResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesHashAccountBalancesLatestResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    address: typing.Optional[GetAddressesHashAccountBalancesLatestResponsePayloadAddress] = _PydanticField(alias="address", default=None)
    block_number: typing.Optional[str] = _PydanticField(alias="blockNumber", default=None)
    blockchain_id: typing.Optional[str] = _PydanticField(alias="blockchainId", default=None)
    timestamp: typing.Optional[int] = _PydanticField(alias="timestamp", default=None)
    timestamp_nanoseconds: typing.Optional[int] = _PydanticField(alias="timestampNanoseconds", default=None)
    value: typing.Optional[str] = _PydanticField(alias="value", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesHashAccountBalancesLatestResponsePayloadAddress(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    address: typing.Optional[str] = _PydanticField(alias="address", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesHashConverterResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetAddressesHashConverterResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesHashConverterResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    cash_address: typing.Optional[str] = _PydanticField(alias="cashAddress", default=None)
    is_cash_address: typing.Optional[bool] = _PydanticField(alias="isCashAddress", default=None)
    is_legacy_address: typing.Optional[bool] = _PydanticField(alias="isLegacyAddress", default=None)
    legacy_address: typing.Optional[str] = _PydanticField(alias="legacyAddress", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesHashFunctionsResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetAddressesHashFunctionsResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesHashFunctionsResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    records: typing.Optional[typing.List[GetAddressesHashFunctionsResponsePayloadRecordsItem]] = _PydanticField(alias="records", default=None)
    total_records: typing.Optional[int] = _PydanticField(alias="totalRecords", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesHashFunctionsResponsePayloadRecordsItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    block_number: typing.Optional[str] = _PydanticField(alias="blockNumber", default=None)
    blockchain_id: typing.Optional[str] = _PydanticField(alias="blockchainId", default=None)
    depth: typing.Optional[int] = _PydanticField(alias="depth", default=None)
    error: typing.Optional[str] = _PydanticField(alias="error", default=None)
    from_field: typing.Optional[str] = _PydanticField(alias="from", default=None)
    initial_gas: typing.Optional[str] = _PydanticField(alias="initialGas", default=None)
    input: typing.Optional[str] = _PydanticField(alias="input", default=None)
    message_index: typing.Optional[int] = _PydanticField(alias="messageIndex", default=None)
    opcode: typing.Optional[str] = _PydanticField(alias="opcode", default=None)
    optional_properties: typing.Optional[typing.Any] = _PydanticField(alias="optionalProperties", default=None)
    return_value: typing.Optional[str] = _PydanticField(alias="returnValue", default=None)
    timestamp: typing.Optional[int] = _PydanticField(alias="timestamp", default=None)
    timestamp_nanoseconds: typing.Optional[typing.Any] = _PydanticField(alias="timestampNanoseconds", default=None)
    to: typing.Optional[typing.List[str]] = _PydanticField(alias="to", default=None)
    transaction_hash: typing.Optional[str] = _PydanticField(alias="transactionHash", default=None)
    value: typing.Optional[str] = _PydanticField(alias="value", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesHashInformationResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetAddressesHashInformationResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesHashInformationResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    address_type: typing.Optional[str] = _PydanticField(alias="addressType", default=None)
    balance: typing.Optional[str] = _PydanticField(alias="balance", default=None)
    balance_in: typing.Optional[str] = _PydanticField(alias="balanceIn", default=None)
    balance_out: typing.Optional[str] = _PydanticField(alias="balanceOut", default=None)
    contract_types: typing.Optional[typing.List[str]] = _PydanticField(alias="contractTypes", default=None)
    decimals: typing.Optional[str] = _PydanticField(alias="decimals", default=None)
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)
    num_holders: typing.Optional[str] = _PydanticField(alias="numHolders", default=None)
    num_tokens: typing.Optional[str] = _PydanticField(alias="numTokens", default=None)
    num_transfers: typing.Optional[str] = _PydanticField(alias="numTransfers", default=None)
    symbol: typing.Optional[str] = _PydanticField(alias="symbol", default=None)
    total_supply: typing.Optional[str] = _PydanticField(alias="totalSupply", default=None)
    total_value_usd: typing.Optional[typing.Any] = _PydanticField(alias="totalValueUSD", default=None)
    unit_value_usd: typing.Optional[typing.Any] = _PydanticField(alias="unitValueUSD", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesHashLogsResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetAddressesHashLogsResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesHashLogsResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    records: typing.Optional[typing.List[GetAddressesHashLogsResponsePayloadRecordsItem]] = _PydanticField(alias="records", default=None)
    total_records: typing.Optional[int] = _PydanticField(alias="totalRecords", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesHashLogsResponsePayloadRecordsItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    address: typing.Optional[str] = _PydanticField(alias="address", default=None)
    block_hash: typing.Optional[str] = _PydanticField(alias="blockHash", default=None)
    block_number: typing.Optional[str] = _PydanticField(alias="blockNumber", default=None)
    blockchain_id: typing.Optional[str] = _PydanticField(alias="blockchainId", default=None)
    data: typing.Optional[typing.List[str]] = _PydanticField(alias="data", default=None)
    data_size: typing.Optional[int] = _PydanticField(alias="dataSize", default=None)
    log_index: typing.Optional[str] = _PydanticField(alias="logIndex", default=None)
    removed: typing.Optional[bool] = _PydanticField(alias="removed", default=None)
    timestamp: typing.Optional[int] = _PydanticField(alias="timestamp", default=None)
    timestamp_nanoseconds: typing.Optional[int] = _PydanticField(alias="timestampNanoseconds", default=None)
    topics: typing.Optional[typing.List[str]] = _PydanticField(alias="topics", default=None)
    transaction_hash: typing.Optional[str] = _PydanticField(alias="transactionHash", default=None)
    transaction_index: typing.Optional[str] = _PydanticField(alias="transactionIndex", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesHashMetadataResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetAddressesHashMetadataResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesHashMetadataResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    contract_types: typing.Optional[typing.List[str]] = _PydanticField(alias="contractTypes", default=None)
    creation_hash: typing.Optional[str] = _PydanticField(alias="creationHash", default=None)
    creator: typing.Optional[str] = _PydanticField(alias="creator", default=None)
    first_seen: typing.Optional[str] = _PydanticField(alias="firstSeen", default=None)
    network: typing.Optional[GetAddressesHashMetadataResponsePayloadNetwork] = _PydanticField(alias="network", default=None)
    probability: typing.Optional[typing.Any] = _PydanticField(alias="probability", default=None)
    type: typing.Optional[str] = _PydanticField(alias="type", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesHashMetadataResponsePayloadNetwork(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    blockchain_id: typing.Optional[str] = _PydanticField(alias="blockchainId", default=None)
    link: typing.Optional[str] = _PydanticField(alias="link", default=None)
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)
    network: typing.Optional[str] = _PydanticField(alias="network", default=None)
    slug: typing.Optional[str] = _PydanticField(alias="slug", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesHashTokenBalancesHistoricalResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetAddressesHashTokenBalancesHistoricalResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesHashTokenBalancesHistoricalResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    records: typing.Optional[typing.List[GetAddressesHashTokenBalancesHistoricalResponsePayloadRecordsItem]] = _PydanticField(alias="records", default=None)
    total_records: typing.Optional[int] = _PydanticField(alias="totalRecords", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesHashTokenBalancesHistoricalResponsePayloadRecordsItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    address: typing.Optional[str] = _PydanticField(alias="address", default=None)
    amount: typing.Optional[str] = _PydanticField(alias="amount", default=None)
    blockchain_id: typing.Optional[str] = _PydanticField(alias="blockchainId", default=None)
    decimals: typing.Optional[str] = _PydanticField(alias="decimals", default=None)
    holder: typing.Optional[str] = _PydanticField(alias="holder", default=None)
    is_erc20: typing.Optional[bool] = _PydanticField(alias="isERC20", default=None)
    is_erc721: typing.Optional[bool] = _PydanticField(alias="isERC721", default=None)
    is_erc777: typing.Optional[bool] = _PydanticField(alias="isERC777", default=None)
    is_erc884: typing.Optional[bool] = _PydanticField(alias="isERC884", default=None)
    is_erc998: typing.Optional[bool] = _PydanticField(alias="isERC998", default=None)
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)
    symbol: typing.Optional[str] = _PydanticField(alias="symbol", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesHashTokenTransfersResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetAddressesHashTokenTransfersResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesHashTokenTransfersResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    records: typing.Optional[typing.List[GetAddressesHashTokenTransfersResponsePayloadRecordsItem]] = _PydanticField(alias="records", default=None)
    total_records: typing.Optional[int] = _PydanticField(alias="totalRecords", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesHashTokenTransfersResponsePayloadRecordsItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    amount: typing.Optional[str] = _PydanticField(alias="amount", default=None)
    block_hash: typing.Optional[str] = _PydanticField(alias="blockHash", default=None)
    block_number: typing.Optional[str] = _PydanticField(alias="blockNumber", default=None)
    blockchain_id: typing.Optional[str] = _PydanticField(alias="blockchainId", default=None)
    decimals: typing.Optional[str] = _PydanticField(alias="decimals", default=None)
    from_field: typing.Optional[str] = _PydanticField(alias="from", default=None)
    is_erc20: typing.Optional[bool] = _PydanticField(alias="isERC20", default=None)
    is_erc721: typing.Optional[bool] = _PydanticField(alias="isERC721", default=None)
    is_erc777: typing.Optional[bool] = _PydanticField(alias="isERC777", default=None)
    is_erc884: typing.Optional[bool] = _PydanticField(alias="isERC884", default=None)
    is_erc998: typing.Optional[bool] = _PydanticField(alias="isERC998", default=None)
    log_index: typing.Optional[int] = _PydanticField(alias="logIndex", default=None)
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)
    symbol: typing.Optional[str] = _PydanticField(alias="symbol", default=None)
    timestamp: typing.Optional[int] = _PydanticField(alias="timestamp", default=None)
    timestamp_nanoseconds: typing.Optional[int] = _PydanticField(alias="timestampNanoseconds", default=None)
    to: typing.Optional[typing.List[str]] = _PydanticField(alias="to", default=None)
    token_address: typing.Optional[str] = _PydanticField(alias="tokenAddress", default=None)
    transaction_hash: typing.Optional[str] = _PydanticField(alias="transactionHash", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesHashTransactionsResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetAddressesHashTransactionsResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesHashTransactionsResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    records: typing.Optional[typing.List[GetAddressesHashTransactionsResponsePayloadRecordsItem]] = _PydanticField(alias="records", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesHashTransactionsResponsePayloadRecordsItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    block_number: typing.Optional[str] = _PydanticField(alias="blockNumber", default=None)
    blockchain_id: typing.Optional[str] = _PydanticField(alias="blockchainId", default=None)
    confirmations: typing.Optional[str] = _PydanticField(alias="confirmations", default=None)
    contract_address: typing.Optional[str] = _PydanticField(alias="contractAddress", default=None)
    cumulative_gas_used: typing.Optional[str] = _PydanticField(alias="cumulativeGasUsed", default=None)
    fee: typing.Optional[str] = _PydanticField(alias="fee", default=None)
    from_field: typing.Optional[GetAddressesHashTransactionsResponsePayloadRecordsItemFrom] = _PydanticField(alias="from", default=None)
    gas_limit: typing.Optional[str] = _PydanticField(alias="gasLimit", default=None)
    gas_price: typing.Optional[str] = _PydanticField(alias="gasPrice", default=None)
    gas_used: typing.Optional[str] = _PydanticField(alias="gasUsed", default=None)
    hash: typing.Optional[str] = _PydanticField(alias="hash", default=None)
    index: typing.Optional[int] = _PydanticField(alias="index", default=None)
    input: typing.Optional[str] = _PydanticField(alias="input", default=None)
    logs_bloom: typing.Optional[str] = _PydanticField(alias="logsBloom", default=None)
    max_fee_per_gas: typing.Optional[int] = _PydanticField(alias="maxFeePerGas", default=None)
    max_priority_fee_per_gas: typing.Optional[int] = _PydanticField(alias="maxPriorityFeePerGas", default=None)
    nonce: typing.Optional[str] = _PydanticField(alias="nonce", default=None)
    public_key: typing.Optional[str] = _PydanticField(alias="publicKey", default=None)
    r: typing.Optional[str] = _PydanticField(alias="r", default=None)
    raw: typing.Optional[str] = _PydanticField(alias="raw", default=None)
    root: typing.Optional[str] = _PydanticField(alias="root", default=None)
    s: typing.Optional[str] = _PydanticField(alias="s", default=None)
    status: typing.Optional[str] = _PydanticField(alias="status", default=None)
    status_result: typing.Optional[GetAddressesHashTransactionsResponsePayloadRecordsItemStatusResult] = _PydanticField(alias="statusResult", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    to: typing.Optional[typing.List[GetAddressesHashTransactionsResponsePayloadRecordsItemToItem]] = _PydanticField(alias="to", default=None)
    type: typing.Optional[int] = _PydanticField(alias="type", default=None)
    v: typing.Optional[str] = _PydanticField(alias="v", default=None)
    value: typing.Optional[str] = _PydanticField(alias="value", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesHashTransactionsResponsePayloadRecordsItemFrom(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    address: typing.Optional[str] = _PydanticField(alias="address", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesHashTransactionsResponsePayloadRecordsItemStatusResult(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    code: typing.Optional[str] = _PydanticField(alias="code", default=None)
    confirmed: typing.Optional[bool] = _PydanticField(alias="confirmed", default=None)
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)
    success: typing.Optional[bool] = _PydanticField(alias="success", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAddressesHashTransactionsResponsePayloadRecordsItemToItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    address: typing.Optional[str] = _PydanticField(alias="address", default=None)
    icon: typing.Optional[str] = _PydanticField(alias="icon", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetBlockchainsMetricsLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetBlockchainsMetricsLatestResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetBlockchainsMetricsLatestResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    algorithm: typing.Optional[str] = _PydanticField(alias="algorithm", default=None)
    blockchain_id: typing.Optional[str] = _PydanticField(alias="blockchainId", default=None)
    color: typing.Optional[str] = _PydanticField(alias="color", default=None)
    consensus: typing.Optional[str] = _PydanticField(alias="consensus", default=None)
    decimals: typing.Optional[str] = _PydanticField(alias="decimals", default=None)
    icon: typing.Optional[str] = _PydanticField(alias="icon", default=None)
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)
    network: typing.Optional[str] = _PydanticField(alias="network", default=None)
    size_total: typing.Optional[int] = _PydanticField(alias="sizeTotal", default=None)
    slug: typing.Optional[str] = _PydanticField(alias="slug", default=None)
    unit: typing.Optional[str] = _PydanticField(alias="unit", default=None)
    utility: typing.Optional[str] = _PydanticField(alias="utility", default=None)
    website: typing.Optional[str] = _PydanticField(alias="website", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetBlocksMetricsLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetBlocksMetricsLatestResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetBlocksMetricsLatestResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    base_fee_average: typing.Optional[str] = _PydanticField(alias="baseFeeAverage", default=None)
    base_fee_maximum: typing.Optional[str] = _PydanticField(alias="baseFeeMaximum", default=None)
    base_fee_minimum: typing.Optional[str] = _PydanticField(alias="baseFeeMinimum", default=None)
    base_fee_total: typing.Optional[str] = _PydanticField(alias="baseFeeTotal", default=None)
    burnt_fee_average: typing.Optional[str] = _PydanticField(alias="burntFeeAverage", default=None)
    burnt_fee_maximum: typing.Optional[str] = _PydanticField(alias="burntFeeMaximum", default=None)
    burnt_fee_minimum: typing.Optional[str] = _PydanticField(alias="burntFeeMinimum", default=None)
    burnt_fee_total: typing.Optional[str] = _PydanticField(alias="burntFeeTotal", default=None)
    difficulty_average: typing.Optional[str] = _PydanticField(alias="difficultyAverage", default=None)
    difficulty_maximum: typing.Optional[str] = _PydanticField(alias="difficultyMaximum", default=None)
    difficulty_minimum: typing.Optional[str] = _PydanticField(alias="difficultyMinimum", default=None)
    duration_average: typing.Optional[str] = _PydanticField(alias="durationAverage", default=None)
    duration_maximum: typing.Optional[str] = _PydanticField(alias="durationMaximum", default=None)
    duration_minimum: typing.Optional[str] = _PydanticField(alias="durationMinimum", default=None)
    hashrate_average: typing.Optional[int] = _PydanticField(alias="hashrateAverage", default=None)
    issuance_average: typing.Optional[str] = _PydanticField(alias="issuanceAverage", default=None)
    issuance_maximum: typing.Optional[str] = _PydanticField(alias="issuanceMaximum", default=None)
    issuance_minimum: typing.Optional[str] = _PydanticField(alias="issuanceMinimum", default=None)
    issuance_total: typing.Optional[str] = _PydanticField(alias="issuanceTotal", default=None)
    issuance_unit: typing.Optional[str] = _PydanticField(alias="issuanceUnit", default=None)
    size_average: typing.Optional[str] = _PydanticField(alias="sizeAverage", default=None)
    size_maximum: typing.Optional[int] = _PydanticField(alias="sizeMaximum", default=None)
    size_minimum: typing.Optional[int] = _PydanticField(alias="sizeMinimum", default=None)
    size_total: typing.Optional[str] = _PydanticField(alias="sizeTotal", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    transaction_fee_average: typing.Optional[str] = _PydanticField(alias="transactionFeeAverage", default=None)
    transaction_fee_maximum: typing.Optional[str] = _PydanticField(alias="transactionFeeMaximum", default=None)
    transaction_fee_minimum: typing.Optional[str] = _PydanticField(alias="transactionFeeMinimum", default=None)
    transaction_fee_total: typing.Optional[str] = _PydanticField(alias="transactionFeeTotal", default=None)
    transactions_average: typing.Optional[str] = _PydanticField(alias="transactionsAverage", default=None)
    transactions_maximum: typing.Optional[int] = _PydanticField(alias="transactionsMaximum", default=None)
    transactions_minimum: typing.Optional[int] = _PydanticField(alias="transactionsMinimum", default=None)
    transactions_total: typing.Optional[str] = _PydanticField(alias="transactionsTotal", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetBlocksIdResponseObj0(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetBlocksIdResponseObj0Payload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetBlocksIdResponseObj0Payload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    base_fee_per_gas: typing.Optional[int] = _PydanticField(alias="baseFeePerGas", default=None)
    burnt_fees: typing.Optional[int] = _PydanticField(alias="burntFees", default=None)
    difficulty: typing.Optional[str] = _PydanticField(alias="difficulty", default=None)
    duration: typing.Optional[int] = _PydanticField(alias="duration", default=None)
    extra_data: typing.Optional[str] = _PydanticField(alias="extraData", default=None)
    gas_limit: typing.Optional[str] = _PydanticField(alias="gasLimit", default=None)
    gas_used: typing.Optional[str] = _PydanticField(alias="gasUsed", default=None)
    hash: typing.Optional[str] = _PydanticField(alias="hash", default=None)
    logs_bloom: typing.Optional[str] = _PydanticField(alias="logsBloom", default=None)
    miner: typing.Optional[GetBlocksIdResponseObj0PayloadMiner] = _PydanticField(alias="miner", default=None)
    mix_hash: typing.Optional[str] = _PydanticField(alias="mixHash", default=None)
    nonce: typing.Optional[str] = _PydanticField(alias="nonce", default=None)
    num_transactions: typing.Optional[int] = _PydanticField(alias="numTransactions", default=None)
    num_uncles: typing.Optional[str] = _PydanticField(alias="numUncles", default=None)
    number: typing.Optional[str] = _PydanticField(alias="number", default=None)
    parent: typing.Optional[GetBlocksIdResponseObj0PayloadParent] = _PydanticField(alias="parent", default=None)
    receipts_root: typing.Optional[str] = _PydanticField(alias="receiptsRoot", default=None)
    sha3_uncles: typing.Optional[str] = _PydanticField(alias="sha3Uncles", default=None)
    size: typing.Optional[int] = _PydanticField(alias="size", default=None)
    state_root: typing.Optional[str] = _PydanticField(alias="stateRoot", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    total_difficulty: typing.Optional[str] = _PydanticField(alias="totalDifficulty", default=None)
    transactions_root: typing.Optional[str] = _PydanticField(alias="transactionsRoot", default=None)
    uncles_reward: typing.Optional[typing.Any] = _PydanticField(alias="unclesReward", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetBlocksIdResponseObj0PayloadMiner(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    address: typing.Optional[str] = _PydanticField(alias="address", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetBlocksIdResponseObj0PayloadParent(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    hash: typing.Optional[str] = _PydanticField(alias="hash", default=None)
    number: typing.Optional[int] = _PydanticField(alias="number", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetBlocksIdResponseObj1(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetBlocksIdResponseObj1Payload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetBlocksIdResponseObj1Payload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    blocks: typing.Optional[GetBlocksIdResponseObj1PayloadBlocks] = _PydanticField(alias="blocks", default=None)
    predictions: typing.Optional[GetBlocksIdResponseObj1PayloadPredictions] = _PydanticField(alias="predictions", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetBlocksIdResponseObj1PayloadBlocks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    current: typing.Optional[str] = _PydanticField(alias="current", default=None)
    future: typing.Optional[str] = _PydanticField(alias="future", default=None)
    remaining: typing.Optional[str] = _PydanticField(alias="remaining", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetBlocksIdResponseObj1PayloadPredictions(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    fast: typing.Optional[GetBlocksIdResponseObj1PayloadPredictionsFast] = _PydanticField(alias="fast", default=None)
    normal: typing.Optional[GetBlocksIdResponseObj1PayloadPredictionsNormal] = _PydanticField(alias="normal", default=None)
    safe: typing.Optional[GetBlocksIdResponseObj1PayloadPredictionsSafe] = _PydanticField(alias="safe", default=None)
    slow: typing.Optional[GetBlocksIdResponseObj1PayloadPredictionsSlow] = _PydanticField(alias="slow", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetBlocksIdResponseObj1PayloadPredictionsFast(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    average_block_duration: typing.Optional[int] = _PydanticField(alias="averageBlockDuration", default=None)
    remaining_milliseconds: typing.Optional[int] = _PydanticField(alias="remainingMilliseconds", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetBlocksIdResponseObj1PayloadPredictionsNormal(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    average_block_duration: typing.Optional[float] = _PydanticField(alias="averageBlockDuration", default=None)
    remaining_milliseconds: typing.Optional[int] = _PydanticField(alias="remainingMilliseconds", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetBlocksIdResponseObj1PayloadPredictionsSafe(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    average_block_duration: typing.Optional[float] = _PydanticField(alias="averageBlockDuration", default=None)
    remaining_milliseconds: typing.Optional[int] = _PydanticField(alias="remainingMilliseconds", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetBlocksIdResponseObj1PayloadPredictionsSlow(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    average_block_duration: typing.Optional[float] = _PydanticField(alias="averageBlockDuration", default=None)
    remaining_milliseconds: typing.Optional[float] = _PydanticField(alias="remainingMilliseconds", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetBlocksIdTokenTransfersResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetBlocksIdTokenTransfersResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetBlocksIdTokenTransfersResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[typing.Any]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetBlocksIdTokenTransfersResponsePayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetBlocksIdTokenTransfersResponsePayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    columns: typing.Optional[typing.List[str]] = _PydanticField(alias="columns", default=None)
    end_date: typing.Optional[int] = _PydanticField(alias="endDate", default=None)
    start_date: typing.Optional[int] = _PydanticField(alias="startDate", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetContractsHashFunctionsResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[typing.List[GetContractsHashFunctionsResponsePayloadItem]] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetContractsHashFunctionsResponsePayloadItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    inputs: typing.Optional[typing.List[GetContractsHashFunctionsResponsePayloadItemInputsItem]] = _PydanticField(alias="inputs", default=None)
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)
    text_signature: typing.Optional[str] = _PydanticField(alias="textSignature", default=None)
    type: typing.Optional[str] = _PydanticField(alias="type", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetContractsHashFunctionsResponsePayloadItemInputsItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)
    type: typing.Optional[str] = _PydanticField(alias="type", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiDexProtocolIdPoolsPoolAddressResponseObj0(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetDefiDexProtocolIdPoolsPoolAddressResponseObj0Payload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiDexProtocolIdPoolsPoolAddressResponseObj0Payload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[GetDefiDexProtocolIdPoolsPoolAddressResponseObj0PayloadDataItem]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetDefiDexProtocolIdPoolsPoolAddressResponseObj0PayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiDexProtocolIdPoolsPoolAddressResponseObj0PayloadDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    action: typing.Optional[str] = _PydanticField(alias="action", default=None)
    amount0_in: typing.Optional[str] = _PydanticField(alias="amount0In", default=None)
    amount0_in_normalized: typing.Optional[str] = _PydanticField(alias="amount0InNormalized", default=None)
    amount0_out: typing.Optional[str] = _PydanticField(alias="amount0Out", default=None)
    amount0_out_normalized: typing.Optional[str] = _PydanticField(alias="amount0OutNormalized", default=None)
    amount1_in: typing.Optional[str] = _PydanticField(alias="amount1In", default=None)
    amount1_in_normalized: typing.Optional[str] = _PydanticField(alias="amount1InNormalized", default=None)
    amount1_out: typing.Optional[str] = _PydanticField(alias="amount1Out", default=None)
    amount1_out_normalized: typing.Optional[str] = _PydanticField(alias="amount1OutNormalized", default=None)
    block_number: typing.Optional[int] = _PydanticField(alias="blockNumber", default=None)
    event: typing.Optional[str] = _PydanticField(alias="event", default=None)
    log_index: typing.Optional[int] = _PydanticField(alias="logIndex", default=None)
    pool_address: typing.Optional[str] = _PydanticField(alias="poolAddress", default=None)
    sender: typing.Optional[str] = _PydanticField(alias="sender", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    to: typing.Optional[str] = _PydanticField(alias="to", default=None)
    token0: typing.Optional[str] = _PydanticField(alias="token0", default=None)
    token1: typing.Optional[str] = _PydanticField(alias="token1", default=None)
    transaction_hash: typing.Optional[str] = _PydanticField(alias="transactionHash", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiDexProtocolIdPoolsPoolAddressResponseObj0PayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    next: typing.Optional[typing.Any] = _PydanticField(alias="next", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiDexProtocolIdPoolsPoolAddressResponseObj1(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetDefiDexProtocolIdPoolsPoolAddressResponseObj1Payload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiDexProtocolIdPoolsPoolAddressResponseObj1Payload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[GetDefiDexProtocolIdPoolsPoolAddressResponseObj1PayloadDataItem]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetDefiDexProtocolIdPoolsPoolAddressResponseObj1PayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiDexProtocolIdPoolsPoolAddressResponseObj1PayloadDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    action: typing.Optional[str] = _PydanticField(alias="action", default=None)
    amount0: typing.Optional[str] = _PydanticField(alias="amount0", default=None)
    amount0_normalized: typing.Optional[str] = _PydanticField(alias="amount0Normalized", default=None)
    amount1: typing.Optional[str] = _PydanticField(alias="amount1", default=None)
    amount1_normalized: typing.Optional[str] = _PydanticField(alias="amount1Normalized", default=None)
    block_number: typing.Optional[int] = _PydanticField(alias="blockNumber", default=None)
    event: typing.Optional[str] = _PydanticField(alias="event", default=None)
    factory_address: typing.Optional[str] = _PydanticField(alias="factoryAddress", default=None)
    liquidity: typing.Optional[str] = _PydanticField(alias="liquidity", default=None)
    log_index: typing.Optional[int] = _PydanticField(alias="logIndex", default=None)
    pool_address: typing.Optional[str] = _PydanticField(alias="poolAddress", default=None)
    recipient: typing.Optional[str] = _PydanticField(alias="recipient", default=None)
    sender: typing.Optional[str] = _PydanticField(alias="sender", default=None)
    sqrt_price_x96: typing.Optional[str] = _PydanticField(alias="sqrtPriceX96", default=None)
    tick: typing.Optional[str] = _PydanticField(alias="tick", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    token0_address: typing.Optional[str] = _PydanticField(alias="token0Address", default=None)
    token1_address: typing.Optional[str] = _PydanticField(alias="token1Address", default=None)
    transaction_hash: typing.Optional[str] = _PydanticField(alias="transactionHash", default=None)
    wallet_address: typing.Optional[str] = _PydanticField(alias="walletAddress", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiDexProtocolIdPoolsPoolAddressResponseObj1PayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    next: typing.Optional[str] = _PydanticField(alias="next", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiDexProtocolIdProtocolResponseObj0(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetDefiDexProtocolIdProtocolResponseObj0Payload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiDexProtocolIdProtocolResponseObj0Payload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[GetDefiDexProtocolIdProtocolResponseObj0PayloadDataItem]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetDefiDexProtocolIdProtocolResponseObj0PayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiDexProtocolIdProtocolResponseObj0PayloadDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    block_number: typing.Optional[int] = _PydanticField(alias="blockNumber", default=None)
    event: typing.Optional[str] = _PydanticField(alias="event", default=None)
    log_index: typing.Optional[int] = _PydanticField(alias="logIndex", default=None)
    pool_address: typing.Optional[str] = _PydanticField(alias="poolAddress", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    token0: typing.Optional[str] = _PydanticField(alias="token0", default=None)
    token1: typing.Optional[str] = _PydanticField(alias="token1", default=None)
    transaction_hash: typing.Optional[str] = _PydanticField(alias="transactionHash", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiDexProtocolIdProtocolResponseObj0PayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    next: typing.Optional[typing.Any] = _PydanticField(alias="next", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiDexProtocolIdProtocolResponseObj1(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetDefiDexProtocolIdProtocolResponseObj1Payload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiDexProtocolIdProtocolResponseObj1Payload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[GetDefiDexProtocolIdProtocolResponseObj1PayloadDataItem]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetDefiDexProtocolIdProtocolResponseObj1PayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiDexProtocolIdProtocolResponseObj1PayloadDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    action: typing.Optional[str] = _PydanticField(alias="action", default=None)
    block_number: typing.Optional[int] = _PydanticField(alias="blockNumber", default=None)
    event: typing.Optional[str] = _PydanticField(alias="event", default=None)
    factory_address: typing.Optional[str] = _PydanticField(alias="factoryAddress", default=None)
    fee: typing.Optional[str] = _PydanticField(alias="fee", default=None)
    fee_normalized: typing.Optional[str] = _PydanticField(alias="feeNormalized", default=None)
    log_index: typing.Optional[int] = _PydanticField(alias="logIndex", default=None)
    pool: typing.Optional[str] = _PydanticField(alias="pool", default=None)
    tick_spacing: typing.Optional[str] = _PydanticField(alias="tickSpacing", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    token0: typing.Optional[str] = _PydanticField(alias="token0", default=None)
    token1: typing.Optional[str] = _PydanticField(alias="token1", default=None)
    transaction_hash: typing.Optional[str] = _PydanticField(alias="transactionHash", default=None)
    wallet_address: typing.Optional[str] = _PydanticField(alias="walletAddress", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiDexProtocolIdProtocolResponseObj1PayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    next: typing.Optional[str] = _PydanticField(alias="next", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiDexProtocolIdWalletsWalletAddressResponseObj0(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetDefiDexProtocolIdWalletsWalletAddressResponseObj0Payload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiDexProtocolIdWalletsWalletAddressResponseObj0Payload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[GetDefiDexProtocolIdWalletsWalletAddressResponseObj0PayloadDataItem]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetDefiDexProtocolIdWalletsWalletAddressResponseObj0PayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiDexProtocolIdWalletsWalletAddressResponseObj0PayloadDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    action: typing.Optional[str] = _PydanticField(alias="action", default=None)
    amount0: typing.Optional[str] = _PydanticField(alias="amount0", default=None)
    amount0_normalized: typing.Optional[str] = _PydanticField(alias="amount0Normalized", default=None)
    amount1: typing.Optional[str] = _PydanticField(alias="amount1", default=None)
    amount1_normalized: typing.Optional[str] = _PydanticField(alias="amount1Normalized", default=None)
    block_number: typing.Optional[int] = _PydanticField(alias="blockNumber", default=None)
    event: typing.Optional[str] = _PydanticField(alias="event", default=None)
    log_index: typing.Optional[int] = _PydanticField(alias="logIndex", default=None)
    pool_address: typing.Optional[str] = _PydanticField(alias="poolAddress", default=None)
    sender: typing.Optional[str] = _PydanticField(alias="sender", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    token0: typing.Optional[str] = _PydanticField(alias="token0", default=None)
    token1: typing.Optional[str] = _PydanticField(alias="token1", default=None)
    transaction_hash: typing.Optional[str] = _PydanticField(alias="transactionHash", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiDexProtocolIdWalletsWalletAddressResponseObj0PayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    next: typing.Optional[typing.Any] = _PydanticField(alias="next", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiDexProtocolIdWalletsWalletAddressResponseObj1(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetDefiDexProtocolIdWalletsWalletAddressResponseObj1Payload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiDexProtocolIdWalletsWalletAddressResponseObj1Payload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[GetDefiDexProtocolIdWalletsWalletAddressResponseObj1PayloadDataItem]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetDefiDexProtocolIdWalletsWalletAddressResponseObj1PayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiDexProtocolIdWalletsWalletAddressResponseObj1PayloadDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    action: typing.Optional[str] = _PydanticField(alias="action", default=None)
    amount0: typing.Optional[str] = _PydanticField(alias="amount0", default=None)
    amount0_normalized: typing.Optional[str] = _PydanticField(alias="amount0Normalized", default=None)
    amount1: typing.Optional[str] = _PydanticField(alias="amount1", default=None)
    amount1_normalized: typing.Optional[str] = _PydanticField(alias="amount1Normalized", default=None)
    block_number: typing.Optional[int] = _PydanticField(alias="blockNumber", default=None)
    event: typing.Optional[str] = _PydanticField(alias="event", default=None)
    log_index: typing.Optional[int] = _PydanticField(alias="logIndex", default=None)
    pool_address: typing.Optional[str] = _PydanticField(alias="poolAddress", default=None)
    sender: typing.Optional[str] = _PydanticField(alias="sender", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    token0: typing.Optional[str] = _PydanticField(alias="token0", default=None)
    token1: typing.Optional[str] = _PydanticField(alias="token1", default=None)
    transaction_hash: typing.Optional[str] = _PydanticField(alias="transactionHash", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiDexProtocolIdWalletsWalletAddressResponseObj1PayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    next: typing.Optional[typing.Any] = _PydanticField(alias="next", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiDexProtocolIdWalletsWalletAddressResponseObj2(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetDefiDexProtocolIdWalletsWalletAddressResponseObj2Payload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiDexProtocolIdWalletsWalletAddressResponseObj2Payload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[GetDefiDexProtocolIdWalletsWalletAddressResponseObj2PayloadDataItem]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetDefiDexProtocolIdWalletsWalletAddressResponseObj2PayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiDexProtocolIdWalletsWalletAddressResponseObj2PayloadDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    action: typing.Optional[str] = _PydanticField(alias="action", default=None)
    amount0: typing.Optional[str] = _PydanticField(alias="amount0", default=None)
    amount0_normalized: typing.Optional[str] = _PydanticField(alias="amount0Normalized", default=None)
    amount1: typing.Optional[str] = _PydanticField(alias="amount1", default=None)
    amount1_normalized: typing.Optional[str] = _PydanticField(alias="amount1Normalized", default=None)
    block_number: typing.Optional[int] = _PydanticField(alias="blockNumber", default=None)
    event: typing.Optional[str] = _PydanticField(alias="event", default=None)
    liquidity: typing.Optional[str] = _PydanticField(alias="liquidity", default=None)
    log_index: typing.Optional[int] = _PydanticField(alias="logIndex", default=None)
    pool_address: typing.Optional[str] = _PydanticField(alias="poolAddress", default=None)
    recipient: typing.Optional[str] = _PydanticField(alias="recipient", default=None)
    sender: typing.Optional[str] = _PydanticField(alias="sender", default=None)
    sqrt_price_x96: typing.Optional[str] = _PydanticField(alias="sqrtPriceX96", default=None)
    tick: typing.Optional[str] = _PydanticField(alias="tick", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    token0_address: typing.Optional[str] = _PydanticField(alias="token0Address", default=None)
    token1_address: typing.Optional[str] = _PydanticField(alias="token1Address", default=None)
    transaction_hash: typing.Optional[str] = _PydanticField(alias="transactionHash", default=None)
    wallet_address: typing.Optional[str] = _PydanticField(alias="walletAddress", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiDexProtocolIdWalletsWalletAddressResponseObj2PayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    next: typing.Optional[str] = _PydanticField(alias="next", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiLendingProtocolIdAssetsAssetResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetDefiLendingProtocolIdAssetsAssetResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiLendingProtocolIdAssetsAssetResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[GetDefiLendingProtocolIdAssetsAssetResponsePayloadDataItem]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetDefiLendingProtocolIdAssetsAssetResponsePayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiLendingProtocolIdAssetsAssetResponsePayloadDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    action: typing.Optional[str] = _PydanticField(alias="action", default=None)
    amount: typing.Optional[float] = _PydanticField(alias="amount", default=None)
    asset_id: typing.Optional[str] = _PydanticField(alias="assetId", default=None)
    asset_symbol: typing.Optional[str] = _PydanticField(alias="assetSymbol", default=None)
    block_number: typing.Optional[int] = _PydanticField(alias="blockNumber", default=None)
    log_index: typing.Optional[int] = _PydanticField(alias="logIndex", default=None)
    market: typing.Optional[str] = _PydanticField(alias="market", default=None)
    market_id: typing.Optional[str] = _PydanticField(alias="marketId", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    to: typing.Optional[str] = _PydanticField(alias="to", default=None)
    transaction_hash: typing.Optional[str] = _PydanticField(alias="transactionHash", default=None)
    user: typing.Optional[str] = _PydanticField(alias="user", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiLendingProtocolIdAssetsAssetResponsePayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    next: typing.Optional[str] = _PydanticField(alias="next", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiLendingProtocolIdGovernanceResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetDefiLendingProtocolIdGovernanceResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiLendingProtocolIdGovernanceResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[GetDefiLendingProtocolIdGovernanceResponsePayloadDataItem]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetDefiLendingProtocolIdGovernanceResponsePayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiLendingProtocolIdGovernanceResponsePayloadDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    action: typing.Optional[str] = _PydanticField(alias="action", default=None)
    creator: typing.Optional[str] = _PydanticField(alias="creator", default=None)
    ipfs_hash: typing.Optional[str] = _PydanticField(alias="ipfsHash", default=None)
    proposal_id: typing.Optional[str] = _PydanticField(alias="proposalId", default=None)
    short_description: typing.Optional[str] = _PydanticField(alias="shortDescription", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiLendingProtocolIdGovernanceResponsePayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    next: typing.Optional[str] = _PydanticField(alias="next", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiLendingProtocolIdProtocolResponseObj0(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetDefiLendingProtocolIdProtocolResponseObj0Payload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiLendingProtocolIdProtocolResponseObj0Payload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[GetDefiLendingProtocolIdProtocolResponseObj0PayloadDataItem]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetDefiLendingProtocolIdProtocolResponseObj0PayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiLendingProtocolIdProtocolResponseObj0PayloadDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    action: typing.Optional[str] = _PydanticField(alias="action", default=None)
    asset_id: typing.Optional[str] = _PydanticField(alias="assetId", default=None)
    asset_symbol: typing.Optional[str] = _PydanticField(alias="assetSymbol", default=None)
    block_number: typing.Optional[int] = _PydanticField(alias="blockNumber", default=None)
    log_index: typing.Optional[int] = _PydanticField(alias="logIndex", default=None)
    market: typing.Optional[str] = _PydanticField(alias="market", default=None)
    market_id: typing.Optional[str] = _PydanticField(alias="marketId", default=None)
    reserve_as_collateral_enabled: typing.Optional[bool] = _PydanticField(alias="reserveAsCollateralEnabled", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    transaction_hash: typing.Optional[str] = _PydanticField(alias="transactionHash", default=None)
    user: typing.Optional[str] = _PydanticField(alias="user", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiLendingProtocolIdProtocolResponseObj0PayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    next: typing.Optional[str] = _PydanticField(alias="next", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiLendingProtocolIdProtocolResponseObj1(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetDefiLendingProtocolIdProtocolResponseObj1Payload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiLendingProtocolIdProtocolResponseObj1Payload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[GetDefiLendingProtocolIdProtocolResponseObj1PayloadDataItem]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetDefiLendingProtocolIdProtocolResponseObj1PayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiLendingProtocolIdProtocolResponseObj1PayloadDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    action: typing.Optional[str] = _PydanticField(alias="action", default=None)
    amount: typing.Optional[int] = _PydanticField(alias="amount", default=None)
    asset_id: typing.Optional[str] = _PydanticField(alias="assetId", default=None)
    asset_symbol: typing.Optional[str] = _PydanticField(alias="assetSymbol", default=None)
    block_number: typing.Optional[int] = _PydanticField(alias="blockNumber", default=None)
    e_mode: typing.Optional[str] = _PydanticField(alias="eMode", default=None)
    log_index: typing.Optional[int] = _PydanticField(alias="logIndex", default=None)
    market: typing.Optional[str] = _PydanticField(alias="market", default=None)
    market_id: typing.Optional[str] = _PydanticField(alias="marketId", default=None)
    on_behalf_of: typing.Optional[str] = _PydanticField(alias="onBehalfOf", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    transaction_hash: typing.Optional[str] = _PydanticField(alias="transactionHash", default=None)
    user: typing.Optional[str] = _PydanticField(alias="user", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiLendingProtocolIdProtocolResponseObj1PayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    next: typing.Optional[str] = _PydanticField(alias="next", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiLendingProtocolIdWalletsAddressPortfolioResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetDefiLendingProtocolIdWalletsAddressPortfolioResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiLendingProtocolIdWalletsAddressPortfolioResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[GetDefiLendingProtocolIdWalletsAddressPortfolioResponsePayloadData] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetDefiLendingProtocolIdWalletsAddressPortfolioResponsePayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiLendingProtocolIdWalletsAddressPortfolioResponsePayloadData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    available_to_borrow_eth: typing.Optional[float] = _PydanticField(alias="availableToBorrowETH", default=None)
    available_to_borrow_usd: typing.Optional[float] = _PydanticField(alias="availableToBorrowUSD", default=None)
    health_factor: typing.Optional[float] = _PydanticField(alias="healthFactor", default=None)
    lifetime_rewards_eth: typing.Optional[int] = _PydanticField(alias="lifetimeRewardsETH", default=None)
    lifetime_rewards_usd: typing.Optional[int] = _PydanticField(alias="lifetimeRewardsUSD", default=None)
    liquidation_threshold_ratio: typing.Optional[float] = _PydanticField(alias="liquidationThresholdRatio", default=None)
    loan_to_value_ratio: typing.Optional[float] = _PydanticField(alias="loanToValueRatio", default=None)
    net_worth_eth: typing.Optional[float] = _PydanticField(alias="netWorthETH", default=None)
    net_worth_usd: typing.Optional[float] = _PydanticField(alias="netWorthUSD", default=None)
    positions: typing.Optional[typing.List[GetDefiLendingProtocolIdWalletsAddressPortfolioResponsePayloadDataPositionsItem]] = _PydanticField(alias="positions", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    total_borrowed_eth: typing.Optional[float] = _PydanticField(alias="totalBorrowedETH", default=None)
    total_borrowed_usd: typing.Optional[float] = _PydanticField(alias="totalBorrowedUSD", default=None)
    total_collateral_eth: typing.Optional[float] = _PydanticField(alias="totalCollateralETH", default=None)
    total_collateral_usd: typing.Optional[float] = _PydanticField(alias="totalCollateralUSD", default=None)
    total_liquidity_eth: typing.Optional[float] = _PydanticField(alias="totalLiquidityETH", default=None)
    total_liquidity_usd: typing.Optional[float] = _PydanticField(alias="totalLiquidityUSD", default=None)
    unclaimed_rewards_eth: typing.Optional[int] = _PydanticField(alias="unclaimedRewardsETH", default=None)
    unclaimed_rewards_usd: typing.Optional[int] = _PydanticField(alias="unclaimedRewardsUSD", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiLendingProtocolIdWalletsAddressPortfolioResponsePayloadDataPositionsItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    amount_native: typing.Optional[float] = _PydanticField(alias="amountNative", default=None)
    amount_usd: typing.Optional[float] = _PydanticField(alias="amountUSD", default=None)
    asset_id: typing.Optional[str] = _PydanticField(alias="assetId", default=None)
    asset_symbol: typing.Optional[str] = _PydanticField(alias="assetSymbol", default=None)
    interest_rate_apy: typing.Optional[float] = _PydanticField(alias="interestRateAPY", default=None)
    interest_rate_type: typing.Optional[str] = _PydanticField(alias="interestRateType", default=None)
    is_collateral: typing.Optional[bool] = _PydanticField(alias="isCollateral", default=None)
    liquidation_threshold_ratio: typing.Optional[float] = _PydanticField(alias="liquidationThresholdRatio", default=None)
    loan_to_value_ratio: typing.Optional[float] = _PydanticField(alias="loanToValueRatio", default=None)
    position_type: typing.Optional[str] = _PydanticField(alias="positionType", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiLendingProtocolIdWalletsAddressPortfolioResponsePayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    next: typing.Optional[typing.Any] = _PydanticField(alias="next", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiLendingProtocolIdWalletsWalletAddressResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetDefiLendingProtocolIdWalletsWalletAddressResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiLendingProtocolIdWalletsWalletAddressResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[GetDefiLendingProtocolIdWalletsWalletAddressResponsePayloadDataItem]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetDefiLendingProtocolIdWalletsWalletAddressResponsePayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiLendingProtocolIdWalletsWalletAddressResponsePayloadDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    action: typing.Optional[str] = _PydanticField(alias="action", default=None)
    amount: typing.Optional[float] = _PydanticField(alias="amount", default=None)
    asset_id: typing.Optional[str] = _PydanticField(alias="assetId", default=None)
    asset_symbol: typing.Optional[str] = _PydanticField(alias="assetSymbol", default=None)
    block_number: typing.Optional[int] = _PydanticField(alias="blockNumber", default=None)
    log_index: typing.Optional[int] = _PydanticField(alias="logIndex", default=None)
    market: typing.Optional[str] = _PydanticField(alias="market", default=None)
    market_id: typing.Optional[str] = _PydanticField(alias="marketId", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    to: typing.Optional[str] = _PydanticField(alias="to", default=None)
    transaction_hash: typing.Optional[str] = _PydanticField(alias="transactionHash", default=None)
    user: typing.Optional[str] = _PydanticField(alias="user", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDefiLendingProtocolIdWalletsWalletAddressResponsePayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    next: typing.Optional[str] = _PydanticField(alias="next", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiLiquidityPoolDailyReturnAddressResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketDefiLiquidityPoolDailyReturnAddressResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiLiquidityPoolDailyReturnAddressResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[GetMarketDefiLiquidityPoolDailyReturnAddressResponsePayloadDataItem]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetMarketDefiLiquidityPoolDailyReturnAddressResponsePayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiLiquidityPoolDailyReturnAddressResponsePayloadDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    change0: typing.Optional[float] = _PydanticField(alias="change0", default=None)
    change1: typing.Optional[float] = _PydanticField(alias="change1", default=None)
    fees: typing.Optional[float] = _PydanticField(alias="fees", default=None)
    fees0_total: typing.Optional[float] = _PydanticField(alias="fees0Total", default=None)
    fees1_total: typing.Optional[float] = _PydanticField(alias="fees1Total", default=None)
    impermanent_loss: typing.Optional[float] = _PydanticField(alias="impermanentLoss", default=None)
    pool_address: typing.Optional[str] = _PydanticField(alias="poolAddress", default=None)
    price0: typing.Optional[float] = _PydanticField(alias="price0", default=None)
    price1: typing.Optional[float] = _PydanticField(alias="price1", default=None)
    protocol: typing.Optional[str] = _PydanticField(alias="protocol", default=None)
    return_field: typing.Optional[float] = _PydanticField(alias="return", default=None)
    timestamp: typing.Optional[int] = _PydanticField(alias="timestamp", default=None)
    token0_address: typing.Optional[str] = _PydanticField(alias="token0Address", default=None)
    token0_if_held: typing.Optional[float] = _PydanticField(alias="token0IfHeld", default=None)
    token0_lp: typing.Optional[float] = _PydanticField(alias="token0Lp", default=None)
    token1_address: typing.Optional[str] = _PydanticField(alias="token1Address", default=None)
    token1_if_held: typing.Optional[float] = _PydanticField(alias="token1IfHeld", default=None)
    token1_lp: typing.Optional[float] = _PydanticField(alias="token1Lp", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiLiquidityPoolDailyReturnAddressResponsePayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    columns: typing.Optional[typing.List[str]] = _PydanticField(alias="columns", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiLiquidityProvidersDailyReturnLiquidityPoolAddressResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketDefiLiquidityProvidersDailyReturnLiquidityPoolAddressResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiLiquidityProvidersDailyReturnLiquidityPoolAddressResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[GetMarketDefiLiquidityProvidersDailyReturnLiquidityPoolAddressResponsePayloadDataItem]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetMarketDefiLiquidityProvidersDailyReturnLiquidityPoolAddressResponsePayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiLiquidityProvidersDailyReturnLiquidityPoolAddressResponsePayloadDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    change0: typing.Optional[float] = _PydanticField(alias="change0", default=None)
    change1: typing.Optional[float] = _PydanticField(alias="change1", default=None)
    fees: typing.Optional[float] = _PydanticField(alias="fees", default=None)
    fees0_claimed: typing.Optional[float] = _PydanticField(alias="fees0Claimed", default=None)
    fees0_total: typing.Optional[float] = _PydanticField(alias="fees0Total", default=None)
    fees0_unclaimed: typing.Optional[float] = _PydanticField(alias="fees0Unclaimed", default=None)
    fees1_claimed: typing.Optional[float] = _PydanticField(alias="fees1Claimed", default=None)
    fees1_total: typing.Optional[float] = _PydanticField(alias="fees1Total", default=None)
    fees1_unclaimed: typing.Optional[float] = _PydanticField(alias="fees1Unclaimed", default=None)
    fees_claimed: typing.Optional[float] = _PydanticField(alias="feesClaimed", default=None)
    fees_unclaimed: typing.Optional[float] = _PydanticField(alias="feesUnclaimed", default=None)
    first_liquidity_event: typing.Optional[int] = _PydanticField(alias="firstLiquidityEvent", default=None)
    holder_address: typing.Optional[str] = _PydanticField(alias="holderAddress", default=None)
    impermanent_loss: typing.Optional[float] = _PydanticField(alias="impermanentLoss", default=None)
    pool_address: typing.Optional[str] = _PydanticField(alias="poolAddress", default=None)
    price0: typing.Optional[float] = _PydanticField(alias="price0", default=None)
    price1: typing.Optional[float] = _PydanticField(alias="price1", default=None)
    protocol: typing.Optional[str] = _PydanticField(alias="protocol", default=None)
    return_field: typing.Optional[float] = _PydanticField(alias="return", default=None)
    timestamp: typing.Optional[int] = _PydanticField(alias="timestamp", default=None)
    token0_address: typing.Optional[str] = _PydanticField(alias="token0Address", default=None)
    token0_if_held: typing.Optional[float] = _PydanticField(alias="token0IfHeld", default=None)
    token0_lp: typing.Optional[float] = _PydanticField(alias="token0Lp", default=None)
    token1_address: typing.Optional[str] = _PydanticField(alias="token1Address", default=None)
    token1_if_held: typing.Optional[float] = _PydanticField(alias="token1IfHeld", default=None)
    token1_lp: typing.Optional[float] = _PydanticField(alias="token1Lp", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiLiquidityProvidersDailyReturnLiquidityPoolAddressResponsePayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    columns: typing.Optional[typing.List[str]] = _PydanticField(alias="columns", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiLiquidityProvidersReturnLiquidityPoolAddressResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketDefiLiquidityProvidersReturnLiquidityPoolAddressResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiLiquidityProvidersReturnLiquidityPoolAddressResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[GetMarketDefiLiquidityProvidersReturnLiquidityPoolAddressResponsePayloadDataItem]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetMarketDefiLiquidityProvidersReturnLiquidityPoolAddressResponsePayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiLiquidityProvidersReturnLiquidityPoolAddressResponsePayloadDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    change0: typing.Optional[str] = _PydanticField(alias="change0", default=None)
    change1: typing.Optional[str] = _PydanticField(alias="change1", default=None)
    end: typing.Optional[str] = _PydanticField(alias="end", default=None)
    fees: typing.Optional[float] = _PydanticField(alias="fees", default=None)
    fees0_claimed: typing.Optional[str] = _PydanticField(alias="fees0Claimed", default=None)
    fees0_total: typing.Optional[str] = _PydanticField(alias="fees0Total", default=None)
    fees0_unclaimed: typing.Optional[str] = _PydanticField(alias="fees0Unclaimed", default=None)
    fees1_claimed: typing.Optional[str] = _PydanticField(alias="fees1Claimed", default=None)
    fees1_total: typing.Optional[str] = _PydanticField(alias="fees1Total", default=None)
    fees1_unclaimed: typing.Optional[str] = _PydanticField(alias="fees1Unclaimed", default=None)
    fees_claimed: typing.Optional[int] = _PydanticField(alias="feesClaimed", default=None)
    fees_unclaimed: typing.Optional[float] = _PydanticField(alias="feesUnclaimed", default=None)
    holder_address: typing.Optional[str] = _PydanticField(alias="holderAddress", default=None)
    impermanent_loss: typing.Optional[float] = _PydanticField(alias="impermanentLoss", default=None)
    pool_address: typing.Optional[str] = _PydanticField(alias="poolAddress", default=None)
    position_open: typing.Optional[bool] = _PydanticField(alias="positionOpen", default=None)
    protocol: typing.Optional[str] = _PydanticField(alias="protocol", default=None)
    return_field: typing.Optional[float] = _PydanticField(alias="return", default=None)
    start: typing.Optional[str] = _PydanticField(alias="start", default=None)
    token0_address: typing.Optional[str] = _PydanticField(alias="token0Address", default=None)
    token0_if_held: typing.Optional[str] = _PydanticField(alias="token0IfHeld", default=None)
    token0_lp: typing.Optional[str] = _PydanticField(alias="token0Lp", default=None)
    token1_address: typing.Optional[str] = _PydanticField(alias="token1Address", default=None)
    token1_if_held: typing.Optional[str] = _PydanticField(alias="token1IfHeld", default=None)
    token1_lp: typing.Optional[str] = _PydanticField(alias="token1Lp", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiLiquidityProvidersReturnLiquidityPoolAddressResponsePayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    columns: typing.Optional[typing.List[str]] = _PydanticField(alias="columns", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiPricesAssetAssetLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketDefiPricesAssetAssetLatestResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiPricesAssetAssetLatestResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    asset: typing.Optional[str] = _PydanticField(alias="asset", default=None)
    price: typing.Optional[str] = _PydanticField(alias="price", default=None)
    timestamp: typing.Optional[int] = _PydanticField(alias="timestamp", default=None)
    volume: typing.Optional[str] = _PydanticField(alias="volume", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiPricesPairsBasesBaseQuotesQuoteLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketDefiPricesPairsBasesBaseQuotesQuoteLatestResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiPricesPairsBasesBaseQuotesQuoteLatestResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    pair: typing.Optional[str] = _PydanticField(alias="pair", default=None)
    price: typing.Optional[str] = _PydanticField(alias="price", default=None)
    timestamp: typing.Optional[int] = _PydanticField(alias="timestamp", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiTradesPoolHistoricalResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketDefiTradesPoolHistoricalResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiTradesPoolHistoricalResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[typing.Any]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetMarketDefiTradesPoolHistoricalResponsePayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiTradesPoolHistoricalResponsePayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    columns: typing.Optional[typing.List[str]] = _PydanticField(alias="columns", default=None)
    dex_pairs: typing.Optional[GetMarketDefiTradesPoolHistoricalResponsePayloadMetadataDexPairs] = _PydanticField(alias="dexPairs", default=None)
    end_date: typing.Optional[str] = _PydanticField(alias="endDate", default=None)
    next: typing.Optional[str] = _PydanticField(alias="next", default=None)
    start_date: typing.Optional[str] = _PydanticField(alias="startDate", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiTradesPoolHistoricalResponsePayloadMetadataDexPairs(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    field_0xa478c2975ab1ea89e8196811f51a7b7ade33eb11: typing.Optional[GetMarketDefiTradesPoolHistoricalResponsePayloadMetadataDexPairs0xa478c2975ab1ea89e8196811f51a7b7ade33eb11] = _PydanticField(alias="0xa478c2975ab1ea89e8196811f51a7b7ade33eb11", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiTradesPoolHistoricalResponsePayloadMetadataDexPairs0xa478c2975ab1ea89e8196811f51a7b7ade33eb11(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    exchange_id: typing.Optional[str] = _PydanticField(alias="exchangeId", default=None)
    pair_address: typing.Optional[str] = _PydanticField(alias="pairAddress", default=None)
    timestamp_nanoseconds: typing.Optional[int] = _PydanticField(alias="timestampNanoseconds", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiTwapAssetAssetLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketDefiTwapAssetAssetLatestResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiTwapAssetAssetLatestResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    asset: typing.Optional[str] = _PydanticField(alias="asset", default=None)
    price: typing.Optional[str] = _PydanticField(alias="price", default=None)
    timestamp: typing.Optional[int] = _PydanticField(alias="timestamp", default=None)
    twap: typing.Optional[str] = _PydanticField(alias="twap", default=None)
    volume: typing.Optional[str] = _PydanticField(alias="volume", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiTwapPairsBasesBaseQuotesQuoteHistoricalResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketDefiTwapPairsBasesBaseQuotesQuoteHistoricalResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiTwapPairsBasesBaseQuotesQuoteHistoricalResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[GetMarketDefiTwapPairsBasesBaseQuotesQuoteHistoricalResponsePayloadDataItem]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetMarketDefiTwapPairsBasesBaseQuotesQuoteHistoricalResponsePayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiTwapPairsBasesBaseQuotesQuoteHistoricalResponsePayloadDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    base_address: typing.Optional[str] = _PydanticField(alias="baseAddress", default=None)
    base_symbol: typing.Optional[str] = _PydanticField(alias="baseSymbol", default=None)
    pair: typing.Optional[str] = _PydanticField(alias="pair", default=None)
    price: typing.Optional[str] = _PydanticField(alias="price", default=None)
    quote_address: typing.Optional[str] = _PydanticField(alias="quoteAddress", default=None)
    quote_symbol: typing.Optional[str] = _PydanticField(alias="quoteSymbol", default=None)
    timestamp: typing.Optional[int] = _PydanticField(alias="timestamp", default=None)
    twap: typing.Optional[str] = _PydanticField(alias="twap", default=None)
    volume: typing.Optional[str] = _PydanticField(alias="volume", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiTwapPairsBasesBaseQuotesQuoteHistoricalResponsePayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    end_date: typing.Optional[int] = _PydanticField(alias="endDate", default=None)
    start_date: typing.Optional[int] = _PydanticField(alias="startDate", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiTwapPairsBasesBaseQuotesQuoteLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketDefiTwapPairsBasesBaseQuotesQuoteLatestResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiTwapPairsBasesBaseQuotesQuoteLatestResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    pair: typing.Optional[str] = _PydanticField(alias="pair", default=None)
    price: typing.Optional[str] = _PydanticField(alias="price", default=None)
    timestamp: typing.Optional[int] = _PydanticField(alias="timestamp", default=None)
    twap: typing.Optional[str] = _PydanticField(alias="twap", default=None)
    volume: typing.Optional[str] = _PydanticField(alias="volume", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiVwapAssetAssetLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketDefiVwapAssetAssetLatestResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiVwapAssetAssetLatestResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    asset: typing.Optional[str] = _PydanticField(alias="asset", default=None)
    price: typing.Optional[str] = _PydanticField(alias="price", default=None)
    timestamp: typing.Optional[int] = _PydanticField(alias="timestamp", default=None)
    volume: typing.Optional[str] = _PydanticField(alias="volume", default=None)
    vwap: typing.Optional[str] = _PydanticField(alias="vwap", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiVwapPairsBasesBaseQuotesQuoteHistoricalResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketDefiVwapPairsBasesBaseQuotesQuoteHistoricalResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiVwapPairsBasesBaseQuotesQuoteHistoricalResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[GetMarketDefiVwapPairsBasesBaseQuotesQuoteHistoricalResponsePayloadDataItem]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetMarketDefiVwapPairsBasesBaseQuotesQuoteHistoricalResponsePayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiVwapPairsBasesBaseQuotesQuoteHistoricalResponsePayloadDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    base_address: typing.Optional[str] = _PydanticField(alias="baseAddress", default=None)
    base_symbol: typing.Optional[str] = _PydanticField(alias="baseSymbol", default=None)
    pair: typing.Optional[str] = _PydanticField(alias="pair", default=None)
    price: typing.Optional[str] = _PydanticField(alias="price", default=None)
    quote_address: typing.Optional[str] = _PydanticField(alias="quoteAddress", default=None)
    quote_symbol: typing.Optional[str] = _PydanticField(alias="quoteSymbol", default=None)
    timestamp: typing.Optional[int] = _PydanticField(alias="timestamp", default=None)
    volume: typing.Optional[str] = _PydanticField(alias="volume", default=None)
    vwap: typing.Optional[str] = _PydanticField(alias="vwap", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiVwapPairsBasesBaseQuotesQuoteHistoricalResponsePayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    end_date: typing.Optional[int] = _PydanticField(alias="endDate", default=None)
    start_date: typing.Optional[int] = _PydanticField(alias="startDate", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiVwapPairsBasesBaseQuotesQuoteLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketDefiVwapPairsBasesBaseQuotesQuoteLatestResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketDefiVwapPairsBasesBaseQuotesQuoteLatestResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    pair: typing.Optional[str] = _PydanticField(alias="pair", default=None)
    price: typing.Optional[str] = _PydanticField(alias="price", default=None)
    timestamp: typing.Optional[int] = _PydanticField(alias="timestamp", default=None)
    volume: typing.Optional[str] = _PydanticField(alias="volume", default=None)
    vwap: typing.Optional[str] = _PydanticField(alias="vwap", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketFuturesFundingRatesExchangeExchangeLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[typing.List[GetMarketFuturesFundingRatesExchangeExchangeLatestResponsePayloadItem]] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketFuturesFundingRatesExchangeExchangeLatestResponsePayloadItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    funding_interval: typing.Optional[typing.Any] = _PydanticField(alias="fundingInterval", default=None)
    funding_rate: typing.Optional[float] = _PydanticField(alias="fundingRate", default=None)
    instrument: typing.Optional[str] = _PydanticField(alias="instrument", default=None)
    next_funding_rate: typing.Optional[typing.Any] = _PydanticField(alias="nextFundingRate", default=None)
    next_funding_time: typing.Optional[str] = _PydanticField(alias="nextFundingTime", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketFuturesFundingRatesInstrumentLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[typing.List[GetMarketFuturesFundingRatesInstrumentLatestResponsePayloadItem]] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketFuturesFundingRatesInstrumentLatestResponsePayloadItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    exchange: typing.Optional[str] = _PydanticField(alias="exchange", default=None)
    funding_interval: typing.Optional[typing.Any] = _PydanticField(alias="fundingInterval", default=None)
    funding_rate: typing.Optional[float] = _PydanticField(alias="fundingRate", default=None)
    next_funding_rate: typing.Optional[typing.Any] = _PydanticField(alias="nextFundingRate", default=None)
    next_funding_time: typing.Optional[int] = _PydanticField(alias="nextFundingTime", default=None)
    timestamp: typing.Optional[int] = _PydanticField(alias="timestamp", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketFuturesLiquidationsInstrumentLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[typing.List[GetMarketFuturesLiquidationsInstrumentLatestResponsePayloadItem]] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketFuturesLiquidationsInstrumentLatestResponsePayloadItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    exchange: typing.Optional[str] = _PydanticField(alias="exchange", default=None)
    original_quantity: typing.Optional[int] = _PydanticField(alias="originalQuantity", default=None)
    position_type: typing.Optional[str] = _PydanticField(alias="positionType", default=None)
    price: typing.Optional[float] = _PydanticField(alias="price", default=None)
    side: typing.Optional[str] = _PydanticField(alias="side", default=None)
    status: typing.Optional[str] = _PydanticField(alias="status", default=None)
    time_in_force: typing.Optional[str] = _PydanticField(alias="timeInForce", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    type: typing.Optional[str] = _PydanticField(alias="type", default=None)
    unit: typing.Optional[str] = _PydanticField(alias="unit", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketFuturesLongShortRatioInstrumentLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[typing.List[GetMarketFuturesLongShortRatioInstrumentLatestResponsePayloadItem]] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketFuturesLongShortRatioInstrumentLatestResponsePayloadItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    exchange: typing.Optional[str] = _PydanticField(alias="exchange", default=None)
    long_account: typing.Optional[float] = _PydanticField(alias="longAccount", default=None)
    period: typing.Optional[int] = _PydanticField(alias="period", default=None)
    ratio: typing.Optional[float] = _PydanticField(alias="ratio", default=None)
    short_account: typing.Optional[float] = _PydanticField(alias="shortAccount", default=None)
    timestamp: typing.Optional[int] = _PydanticField(alias="timestamp", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketFuturesOhlcvExchangeExchangeLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[typing.List[GetMarketFuturesOhlcvExchangeExchangeLatestResponsePayloadItem]] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketFuturesOhlcvExchangeExchangeLatestResponsePayloadItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    close: typing.Optional[float] = _PydanticField(alias="close", default=None)
    high: typing.Optional[float] = _PydanticField(alias="high", default=None)
    instrument: typing.Optional[str] = _PydanticField(alias="instrument", default=None)
    low: typing.Optional[float] = _PydanticField(alias="low", default=None)
    open: typing.Optional[float] = _PydanticField(alias="open", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    volume: typing.Optional[float] = _PydanticField(alias="volume", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketFuturesOhlcvInstrumentLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[typing.List[GetMarketFuturesOhlcvInstrumentLatestResponsePayloadItem]] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketFuturesOhlcvInstrumentLatestResponsePayloadItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    close: typing.Optional[float] = _PydanticField(alias="close", default=None)
    exchange: typing.Optional[str] = _PydanticField(alias="exchange", default=None)
    high: typing.Optional[float] = _PydanticField(alias="high", default=None)
    low: typing.Optional[float] = _PydanticField(alias="low", default=None)
    open: typing.Optional[float] = _PydanticField(alias="open", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    volume: typing.Optional[float] = _PydanticField(alias="volume", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketFuturesOpenInterestExchangeExchangeLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[typing.List[GetMarketFuturesOpenInterestExchangeExchangeLatestResponsePayloadItem]] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketFuturesOpenInterestExchangeExchangeLatestResponsePayloadItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    instrument: typing.Optional[str] = _PydanticField(alias="instrument", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    value: typing.Optional[float] = _PydanticField(alias="value", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketFuturesOpenInterestInstrumentLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[typing.List[GetMarketFuturesOpenInterestInstrumentLatestResponsePayloadItem]] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketFuturesOpenInterestInstrumentLatestResponsePayloadItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    exchange: typing.Optional[str] = _PydanticField(alias="exchange", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    value: typing.Optional[float] = _PydanticField(alias="value", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketFuturesTickersInstrumentLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[typing.List[GetMarketFuturesTickersInstrumentLatestResponsePayloadItem]] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketFuturesTickersInstrumentLatestResponsePayloadItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    ask: typing.Optional[float] = _PydanticField(alias="ask", default=None)
    ask_volume: typing.Optional[float] = _PydanticField(alias="askVolume", default=None)
    bid: typing.Optional[float] = _PydanticField(alias="bid", default=None)
    bid_volume: typing.Optional[float] = _PydanticField(alias="bidVolume", default=None)
    exchange: typing.Optional[str] = _PydanticField(alias="exchange", default=None)
    last: typing.Optional[int] = _PydanticField(alias="last", default=None)
    mid: typing.Optional[float] = _PydanticField(alias="mid", default=None)
    sequence: typing.Optional[int] = _PydanticField(alias="sequence", default=None)
    timestamp: typing.Optional[int] = _PydanticField(alias="timestamp", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsExchangesVolumesHistoricalResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketMetricsExchangesVolumesHistoricalResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsExchangesVolumesHistoricalResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[GetMarketMetricsExchangesVolumesHistoricalResponsePayloadDataItem]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetMarketMetricsExchangesVolumesHistoricalResponsePayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsExchangesVolumesHistoricalResponsePayloadDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    exchange: typing.Optional[str] = _PydanticField(alias="exchange", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    volume_usd: typing.Optional[str] = _PydanticField(alias="volumeUSD", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsExchangesVolumesHistoricalResponsePayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    end_date: typing.Optional[str] = _PydanticField(alias="endDate", default=None)
    start_date: typing.Optional[str] = _PydanticField(alias="startDate", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsExchangesVolumesLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketMetricsExchangesVolumesLatestResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsExchangesVolumesLatestResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[GetMarketMetricsExchangesVolumesLatestResponsePayloadDataItem]] = _PydanticField(alias="data", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsExchangesVolumesLatestResponsePayloadDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    exchange: typing.Optional[str] = _PydanticField(alias="exchange", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    volume_usd: typing.Optional[str] = _PydanticField(alias="volumeUSD", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsExchangesExchangeAssetsVolumesHistoricalResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketMetricsExchangesExchangeAssetsVolumesHistoricalResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsExchangesExchangeAssetsVolumesHistoricalResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[GetMarketMetricsExchangesExchangeAssetsVolumesHistoricalResponsePayloadDataItem]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetMarketMetricsExchangesExchangeAssetsVolumesHistoricalResponsePayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsExchangesExchangeAssetsVolumesHistoricalResponsePayloadDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    asset: typing.Optional[str] = _PydanticField(alias="asset", default=None)
    exchange: typing.Optional[str] = _PydanticField(alias="exchange", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    volume_usd: typing.Optional[str] = _PydanticField(alias="volumeUSD", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsExchangesExchangeAssetsVolumesHistoricalResponsePayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    end_date: typing.Optional[str] = _PydanticField(alias="endDate", default=None)
    start_date: typing.Optional[str] = _PydanticField(alias="startDate", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsExchangesExchangeAssetsVolumesLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketMetricsExchangesExchangeAssetsVolumesLatestResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsExchangesExchangeAssetsVolumesLatestResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[GetMarketMetricsExchangesExchangeAssetsVolumesLatestResponsePayloadDataItem]] = _PydanticField(alias="data", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsExchangesExchangeAssetsVolumesLatestResponsePayloadDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    asset: typing.Optional[str] = _PydanticField(alias="asset", default=None)
    exchange: typing.Optional[str] = _PydanticField(alias="exchange", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    volume_usd: typing.Optional[str] = _PydanticField(alias="volumeUSD", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsExchangesExchangePairsVolumesHistoricalResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketMetricsExchangesExchangePairsVolumesHistoricalResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsExchangesExchangePairsVolumesHistoricalResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[GetMarketMetricsExchangesExchangePairsVolumesHistoricalResponsePayloadDataItem]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetMarketMetricsExchangesExchangePairsVolumesHistoricalResponsePayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsExchangesExchangePairsVolumesHistoricalResponsePayloadDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    exchange: typing.Optional[str] = _PydanticField(alias="exchange", default=None)
    pair: typing.Optional[str] = _PydanticField(alias="pair", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    volume_usd: typing.Optional[str] = _PydanticField(alias="volumeUSD", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsExchangesExchangePairsVolumesHistoricalResponsePayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    end_date: typing.Optional[str] = _PydanticField(alias="endDate", default=None)
    start_date: typing.Optional[str] = _PydanticField(alias="startDate", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsExchangesExchangePairsVolumesLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketMetricsExchangesExchangePairsVolumesLatestResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsExchangesExchangePairsVolumesLatestResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[GetMarketMetricsExchangesExchangePairsVolumesLatestResponsePayloadDataItem]] = _PydanticField(alias="data", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsExchangesExchangePairsVolumesLatestResponsePayloadDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    exchange: typing.Optional[str] = _PydanticField(alias="exchange", default=None)
    pair: typing.Optional[str] = _PydanticField(alias="pair", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    volume_usd: typing.Optional[str] = _PydanticField(alias="volumeUSD", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsAssetImpliedYieldLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[typing.List[GetMarketMetricsAssetImpliedYieldLatestResponsePayloadItem]] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsAssetImpliedYieldLatestResponsePayloadItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    apr: typing.Optional[float] = _PydanticField(alias="apr", default=None)
    basis: typing.Optional[str] = _PydanticField(alias="basis", default=None)
    days_to_expiration: typing.Optional[int] = _PydanticField(alias="daysToExpiration", default=None)
    instrument: typing.Optional[str] = _PydanticField(alias="instrument", default=None)
    price: typing.Optional[str] = _PydanticField(alias="price", default=None)
    settlement: typing.Optional[str] = _PydanticField(alias="settlement", default=None)
    spot: typing.Optional[str] = _PydanticField(alias="spot", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsAssetSupplyHistoricalResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketMetricsAssetSupplyHistoricalResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsAssetSupplyHistoricalResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[GetMarketMetricsAssetSupplyHistoricalResponsePayloadDataItem]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetMarketMetricsAssetSupplyHistoricalResponsePayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsAssetSupplyHistoricalResponsePayloadDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    circulating_supply: typing.Optional[str] = _PydanticField(alias="circulatingSupply", default=None)
    issuance: typing.Optional[str] = _PydanticField(alias="issuance", default=None)
    max_supply: typing.Optional[str] = _PydanticField(alias="maxSupply", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    total_supply: typing.Optional[str] = _PydanticField(alias="totalSupply", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsAssetSupplyHistoricalResponsePayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    end_date: typing.Optional[str] = _PydanticField(alias="endDate", default=None)
    start_date: typing.Optional[str] = _PydanticField(alias="startDate", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsAssetSupplyLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketMetricsAssetSupplyLatestResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsAssetSupplyLatestResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    circulating_supply: typing.Optional[str] = _PydanticField(alias="circulatingSupply", default=None)
    issuance: typing.Optional[str] = _PydanticField(alias="issuance", default=None)
    max_supply: typing.Optional[str] = _PydanticField(alias="maxSupply", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    total_supply: typing.Optional[str] = _PydanticField(alias="totalSupply", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsInstrumentImpliedYieldHistoricalResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[typing.List[GetMarketMetricsInstrumentImpliedYieldHistoricalResponsePayloadItem]] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsInstrumentImpliedYieldHistoricalResponsePayloadItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    apr: typing.Optional[float] = _PydanticField(alias="apr", default=None)
    basis: typing.Optional[str] = _PydanticField(alias="basis", default=None)
    price: typing.Optional[str] = _PydanticField(alias="price", default=None)
    settlement: typing.Optional[str] = _PydanticField(alias="settlement", default=None)
    spot: typing.Optional[str] = _PydanticField(alias="spot", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsSymbolHistoricalNvtResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketMetricsSymbolHistoricalNvtResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsSymbolHistoricalNvtResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[typing.Any]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetMarketMetricsSymbolHistoricalNvtResponsePayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsSymbolHistoricalNvtResponsePayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    columns: typing.Optional[typing.List[str]] = _PydanticField(alias="columns", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsSymbolHistoricalSharpeResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketMetricsSymbolHistoricalSharpeResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsSymbolHistoricalSharpeResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[typing.Any]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetMarketMetricsSymbolHistoricalSharpeResponsePayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsSymbolHistoricalSharpeResponsePayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    columns: typing.Optional[typing.List[str]] = _PydanticField(alias="columns", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsSymbolHistoricalStockToFlowResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketMetricsSymbolHistoricalStockToFlowResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsSymbolHistoricalStockToFlowResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[typing.Any]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetMarketMetricsSymbolHistoricalStockToFlowResponsePayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsSymbolHistoricalStockToFlowResponsePayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    columns: typing.Optional[typing.List[str]] = _PydanticField(alias="columns", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsSymbolLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketMetricsSymbolLatestResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsSymbolLatestResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    nvt: typing.Optional[GetMarketMetricsSymbolLatestResponsePayloadNvt] = _PydanticField(alias="nvt", default=None)
    sharpe: typing.Optional[GetMarketMetricsSymbolLatestResponsePayloadSharpe] = _PydanticField(alias="sharpe", default=None)
    stock_to_flow: typing.Optional[GetMarketMetricsSymbolLatestResponsePayloadStockToFlow] = _PydanticField(alias="stockToFlow", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsSymbolLatestResponsePayloadNvt(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    signal: typing.Optional[float] = _PydanticField(alias="signal", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsSymbolLatestResponsePayloadSharpe(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    historical_volatility: typing.Optional[float] = _PydanticField(alias="historicalVolatility", default=None)
    ratio: typing.Optional[float] = _PydanticField(alias="ratio", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketMetricsSymbolLatestResponsePayloadStockToFlow(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    block_number: typing.Optional[int] = _PydanticField(alias="blockNumber", default=None)
    circulation: typing.Optional[float] = _PydanticField(alias="circulation", default=None)
    last_year_circulation: typing.Optional[float] = _PydanticField(alias="lastYearCirculation", default=None)
    price: typing.Optional[float] = _PydanticField(alias="price", default=None)
    ratio: typing.Optional[float] = _PydanticField(alias="ratio", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsOhlcvExchangeExchangeLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[typing.List[GetMarketOptionsOhlcvExchangeExchangeLatestResponsePayloadItem]] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsOhlcvExchangeExchangeLatestResponsePayloadItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    close: typing.Optional[float] = _PydanticField(alias="close", default=None)
    high: typing.Optional[float] = _PydanticField(alias="high", default=None)
    instrument: typing.Optional[str] = _PydanticField(alias="instrument", default=None)
    low: typing.Optional[float] = _PydanticField(alias="low", default=None)
    open: typing.Optional[float] = _PydanticField(alias="open", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    volume: typing.Optional[int] = _PydanticField(alias="volume", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsOhlcvInstrumentLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[typing.List[GetMarketOptionsOhlcvInstrumentLatestResponsePayloadItem]] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsOhlcvInstrumentLatestResponsePayloadItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    close: typing.Optional[float] = _PydanticField(alias="close", default=None)
    exchange: typing.Optional[str] = _PydanticField(alias="exchange", default=None)
    high: typing.Optional[float] = _PydanticField(alias="high", default=None)
    low: typing.Optional[float] = _PydanticField(alias="low", default=None)
    open: typing.Optional[float] = _PydanticField(alias="open", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    volume: typing.Optional[int] = _PydanticField(alias="volume", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsOpenInterestExchangeExchangeLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[typing.List[GetMarketOptionsOpenInterestExchangeExchangeLatestResponsePayloadItem]] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsOpenInterestExchangeExchangeLatestResponsePayloadItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    instrument: typing.Optional[str] = _PydanticField(alias="instrument", default=None)
    timestamp: typing.Optional[int] = _PydanticField(alias="timestamp", default=None)
    value: typing.Optional[int] = _PydanticField(alias="value", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsOpenInterestInstrumentHistoricalResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketOptionsOpenInterestInstrumentHistoricalResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsOpenInterestInstrumentHistoricalResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[GetMarketOptionsOpenInterestInstrumentHistoricalResponsePayloadDataItem]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetMarketOptionsOpenInterestInstrumentHistoricalResponsePayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsOpenInterestInstrumentHistoricalResponsePayloadDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    exchange: typing.Optional[str] = _PydanticField(alias="exchange", default=None)
    timestamp: typing.Optional[int] = _PydanticField(alias="timestamp", default=None)
    value: typing.Optional[float] = _PydanticField(alias="value", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsOpenInterestInstrumentHistoricalResponsePayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    end_date: typing.Optional[int] = _PydanticField(alias="endDate", default=None)
    start_date: typing.Optional[int] = _PydanticField(alias="startDate", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsOpenInterestInstrumentLatestResponseObj0(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[typing.List[GetMarketOptionsOpenInterestInstrumentLatestResponseObj0PayloadItem]] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsOpenInterestInstrumentLatestResponseObj0PayloadItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    exchange: typing.Optional[str] = _PydanticField(alias="exchange", default=None)
    timestamp: typing.Optional[int] = _PydanticField(alias="timestamp", default=None)
    value: typing.Optional[int] = _PydanticField(alias="value", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsOpenInterestInstrumentLatestResponseObj1(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[typing.List[GetMarketOptionsOpenInterestInstrumentLatestResponseObj1PayloadItem]] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsOpenInterestInstrumentLatestResponseObj1PayloadItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    exchange: typing.Optional[str] = _PydanticField(alias="exchange", default=None)
    exchange_timestamp: typing.Optional[int] = _PydanticField(alias="exchangeTimestamp", default=None)
    exchange_timestamp_nanoseconds: typing.Optional[int] = _PydanticField(alias="exchangeTimestampNanoseconds", default=None)
    instrument: typing.Optional[GetMarketOptionsOpenInterestInstrumentLatestResponseObj1PayloadItemInstrument] = _PydanticField(alias="instrument", default=None)
    received_timestamp: typing.Optional[int] = _PydanticField(alias="receivedTimestamp", default=None)
    received_timestamp_nanoseconds: typing.Optional[int] = _PydanticField(alias="receivedTimestampNanoseconds", default=None)
    sent_time: typing.Optional[str] = _PydanticField(alias="sentTime", default=None)
    symbol: typing.Optional[str] = _PydanticField(alias="symbol", default=None)
    trade_statistics: typing.Optional[GetMarketOptionsOpenInterestInstrumentLatestResponseObj1PayloadItemTradeStatistics] = _PydanticField(alias="tradeStatistics", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsOpenInterestInstrumentLatestResponseObj1PayloadItemInstrument(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    definition_source: typing.Optional[str] = _PydanticField(alias="definitionSource", default=None)
    exchange_mic: typing.Optional[str] = _PydanticField(alias="exchangeMic", default=None)
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    market_segment_id: typing.Optional[str] = _PydanticField(alias="marketSegmentId", default=None)
    period_code: typing.Optional[str] = _PydanticField(alias="periodCode", default=None)
    product_code: typing.Optional[str] = _PydanticField(alias="productCode", default=None)
    product_group: typing.Optional[str] = _PydanticField(alias="productGroup", default=None)
    product_type: typing.Optional[str] = _PydanticField(alias="productType", default=None)
    put_or_call: typing.Optional[str] = _PydanticField(alias="putOrCall", default=None)
    strike_price: typing.Optional[str] = _PydanticField(alias="strikePrice", default=None)
    symbol: typing.Optional[str] = _PydanticField(alias="symbol", default=None)
    underlying_symbol: typing.Optional[str] = _PydanticField(alias="underlyingSymbol", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsOpenInterestInstrumentLatestResponseObj1PayloadItemTradeStatistics(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    cleared_volume: typing.Optional[str] = _PydanticField(alias="clearedVolume", default=None)
    cleared_volume_date: typing.Optional[str] = _PydanticField(alias="clearedVolumeDate", default=None)
    cleared_volume_timestamp: typing.Optional[str] = _PydanticField(alias="clearedVolumeTimestamp", default=None)
    open_interest: typing.Optional[str] = _PydanticField(alias="openInterest", default=None)
    open_interest_date: typing.Optional[str] = _PydanticField(alias="openInterestDate", default=None)
    open_interest_timestamp: typing.Optional[str] = _PydanticField(alias="openInterestTimestamp", default=None)
    settlement_actual: typing.Optional[str] = _PydanticField(alias="settlementActual", default=None)
    settlement_final: typing.Optional[str] = _PydanticField(alias="settlementFinal", default=None)
    settlement_price: typing.Optional[str] = _PydanticField(alias="settlementPrice", default=None)
    settlement_price_date: typing.Optional[str] = _PydanticField(alias="settlementPriceDate", default=None)
    settlement_price_timestamp: typing.Optional[str] = _PydanticField(alias="settlementPriceTimestamp", default=None)
    settlement_rounded: typing.Optional[str] = _PydanticField(alias="settlementRounded", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsTickersInstrumentLatestResponseObj0(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[typing.List[GetMarketOptionsTickersInstrumentLatestResponseObj0PayloadItem]] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsTickersInstrumentLatestResponseObj0PayloadItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    ask: typing.Optional[float] = _PydanticField(alias="ask", default=None)
    ask_iv: typing.Optional[float] = _PydanticField(alias="askIv", default=None)
    ask_volume: typing.Optional[int] = _PydanticField(alias="askVolume", default=None)
    base_volume: typing.Optional[int] = _PydanticField(alias="baseVolume", default=None)
    bid: typing.Optional[float] = _PydanticField(alias="bid", default=None)
    bid_iv: typing.Optional[int] = _PydanticField(alias="bidIv", default=None)
    bid_volume: typing.Optional[int] = _PydanticField(alias="bidVolume", default=None)
    estimated_delivery_price: typing.Optional[float] = _PydanticField(alias="estimatedDeliveryPrice", default=None)
    exchange: typing.Optional[str] = _PydanticField(alias="exchange", default=None)
    greeks: typing.Optional[GetMarketOptionsTickersInstrumentLatestResponseObj0PayloadItemGreeks] = _PydanticField(alias="greeks", default=None)
    index_price: typing.Optional[float] = _PydanticField(alias="indexPrice", default=None)
    interest_rate: typing.Optional[int] = _PydanticField(alias="interestRate", default=None)
    last: typing.Optional[float] = _PydanticField(alias="last", default=None)
    mark_iv: typing.Optional[float] = _PydanticField(alias="markIv", default=None)
    mark_price: typing.Optional[float] = _PydanticField(alias="markPrice", default=None)
    max_price: typing.Optional[float] = _PydanticField(alias="maxPrice", default=None)
    metadata: typing.Optional[typing.Any] = _PydanticField(alias="metadata", default=None)
    mid: typing.Optional[float] = _PydanticField(alias="mid", default=None)
    min_price: typing.Optional[float] = _PydanticField(alias="minPrice", default=None)
    open_interest: typing.Optional[int] = _PydanticField(alias="openInterest", default=None)
    quote_volume: typing.Optional[int] = _PydanticField(alias="quoteVolume", default=None)
    sequence: typing.Optional[typing.Any] = _PydanticField(alias="sequence", default=None)
    settlement_price: typing.Optional[float] = _PydanticField(alias="settlementPrice", default=None)
    state: typing.Optional[str] = _PydanticField(alias="state", default=None)
    stats: typing.Optional[GetMarketOptionsTickersInstrumentLatestResponseObj0PayloadItemStats] = _PydanticField(alias="stats", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    underlying_index: typing.Optional[str] = _PydanticField(alias="underlyingIndex", default=None)
    underlying_price: typing.Optional[str] = _PydanticField(alias="underlyingPrice", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsTickersInstrumentLatestResponseObj0PayloadItemGreeks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    delta: typing.Optional[float] = _PydanticField(alias="delta", default=None)
    gamma: typing.Optional[float] = _PydanticField(alias="gamma", default=None)
    rho: typing.Optional[float] = _PydanticField(alias="rho", default=None)
    theta: typing.Optional[float] = _PydanticField(alias="theta", default=None)
    vega: typing.Optional[float] = _PydanticField(alias="vega", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsTickersInstrumentLatestResponseObj0PayloadItemStats(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    high: typing.Optional[float] = _PydanticField(alias="high", default=None)
    low: typing.Optional[float] = _PydanticField(alias="low", default=None)
    price_change: typing.Optional[int] = _PydanticField(alias="price_change", default=None)
    volume: typing.Optional[int] = _PydanticField(alias="volume", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsTickersInstrumentLatestResponseObj1(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[typing.List[GetMarketOptionsTickersInstrumentLatestResponseObj1PayloadItem]] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsTickersInstrumentLatestResponseObj1PayloadItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    ask_level: typing.Optional[typing.List[GetMarketOptionsTickersInstrumentLatestResponseObj1PayloadItemAskLevelItem]] = _PydanticField(alias="askLevel", default=None)
    bid_level: typing.Optional[typing.List[GetMarketOptionsTickersInstrumentLatestResponseObj1PayloadItemBidLevelItem]] = _PydanticField(alias="bidLevel", default=None)
    exchange: typing.Optional[str] = _PydanticField(alias="exchange", default=None)
    exchange_timestamp: typing.Optional[int] = _PydanticField(alias="exchangeTimestamp", default=None)
    exchange_timestamp_nanoseconds: typing.Optional[int] = _PydanticField(alias="exchangeTimestampNanoseconds", default=None)
    instrument: typing.Optional[GetMarketOptionsTickersInstrumentLatestResponseObj1PayloadItemInstrument] = _PydanticField(alias="instrument", default=None)
    received_timestamp: typing.Optional[int] = _PydanticField(alias="receivedTimestamp", default=None)
    received_timestamp_nanoseconds: typing.Optional[int] = _PydanticField(alias="receivedTimestampNanoseconds", default=None)
    sent_time: typing.Optional[str] = _PydanticField(alias="sentTime", default=None)
    symbol: typing.Optional[str] = _PydanticField(alias="symbol", default=None)
    trading_status: typing.Optional[str] = _PydanticField(alias="tradingStatus", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsTickersInstrumentLatestResponseObj1PayloadItemAskLevelItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    last_update_time: typing.Optional[str] = _PydanticField(alias="lastUpdateTime", default=None)
    order_cnt: typing.Optional[int] = _PydanticField(alias="orderCnt", default=None)
    price: typing.Optional[str] = _PydanticField(alias="price", default=None)
    qty: typing.Optional[int] = _PydanticField(alias="qty", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsTickersInstrumentLatestResponseObj1PayloadItemBidLevelItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    last_update_time: typing.Optional[str] = _PydanticField(alias="lastUpdateTime", default=None)
    order_cnt: typing.Optional[int] = _PydanticField(alias="orderCnt", default=None)
    price: typing.Optional[str] = _PydanticField(alias="price", default=None)
    qty: typing.Optional[int] = _PydanticField(alias="qty", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsTickersInstrumentLatestResponseObj1PayloadItemInstrument(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    definition_source: typing.Optional[str] = _PydanticField(alias="definitionSource", default=None)
    exchange_mic: typing.Optional[str] = _PydanticField(alias="exchangeMic", default=None)
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    market_segment_id: typing.Optional[str] = _PydanticField(alias="marketSegmentId", default=None)
    period_code: typing.Optional[str] = _PydanticField(alias="periodCode", default=None)
    product_code: typing.Optional[str] = _PydanticField(alias="productCode", default=None)
    product_group: typing.Optional[str] = _PydanticField(alias="productGroup", default=None)
    product_type: typing.Optional[str] = _PydanticField(alias="productType", default=None)
    put_or_call: typing.Optional[str] = _PydanticField(alias="putOrCall", default=None)
    strike_price: typing.Optional[str] = _PydanticField(alias="strikePrice", default=None)
    symbol: typing.Optional[str] = _PydanticField(alias="symbol", default=None)
    underlying_symbol: typing.Optional[str] = _PydanticField(alias="underlyingSymbol", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsTradesInstrumentHistoricalResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketOptionsTradesInstrumentHistoricalResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsTradesInstrumentHistoricalResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[GetMarketOptionsTradesInstrumentHistoricalResponsePayloadDataItem]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetMarketOptionsTradesInstrumentHistoricalResponsePayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsTradesInstrumentHistoricalResponsePayloadDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    exchange: typing.Optional[str] = _PydanticField(alias="exchange", default=None)
    exchange_timestamp: typing.Optional[int] = _PydanticField(alias="exchangeTimestamp", default=None)
    exchange_timestamp_nanoseconds: typing.Optional[int] = _PydanticField(alias="exchangeTimestampNanoseconds", default=None)
    instrument: typing.Optional[GetMarketOptionsTradesInstrumentHistoricalResponsePayloadDataItemInstrument] = _PydanticField(alias="instrument", default=None)
    received_timestamp: typing.Optional[int] = _PydanticField(alias="receivedTimestamp", default=None)
    received_timestamp_nanoseconds: typing.Optional[int] = _PydanticField(alias="receivedTimestampNanoseconds", default=None)
    sent_time: typing.Optional[str] = _PydanticField(alias="sentTime", default=None)
    symbol: typing.Optional[str] = _PydanticField(alias="symbol", default=None)
    trade_summary: typing.Optional[GetMarketOptionsTradesInstrumentHistoricalResponsePayloadDataItemTradeSummary] = _PydanticField(alias="tradeSummary", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsTradesInstrumentHistoricalResponsePayloadDataItemInstrument(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    definition_source: typing.Optional[str] = _PydanticField(alias="definitionSource", default=None)
    exchange_mic: typing.Optional[str] = _PydanticField(alias="exchangeMic", default=None)
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    market_segment_id: typing.Optional[str] = _PydanticField(alias="marketSegmentId", default=None)
    period_code: typing.Optional[str] = _PydanticField(alias="periodCode", default=None)
    product_code: typing.Optional[str] = _PydanticField(alias="productCode", default=None)
    product_group: typing.Optional[str] = _PydanticField(alias="productGroup", default=None)
    product_type: typing.Optional[str] = _PydanticField(alias="productType", default=None)
    put_or_call: typing.Optional[str] = _PydanticField(alias="putOrCall", default=None)
    strike_price: typing.Optional[str] = _PydanticField(alias="strikePrice", default=None)
    symbol: typing.Optional[str] = _PydanticField(alias="symbol", default=None)
    underlying_symbol: typing.Optional[str] = _PydanticField(alias="underlyingSymbol", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsTradesInstrumentHistoricalResponsePayloadDataItemTradeSummary(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    aggressor_side: typing.Optional[str] = _PydanticField(alias="aggressorSide", default=None)
    md_trade_entry_id: typing.Optional[str] = _PydanticField(alias="mdTradeEntryId", default=None)
    order_qty: typing.Optional[GetMarketOptionsTradesInstrumentHistoricalResponsePayloadDataItemTradeSummaryOrderQty] = _PydanticField(alias="orderQty", default=None)
    trade_order_count: typing.Optional[str] = _PydanticField(alias="tradeOrderCount", default=None)
    trade_price: typing.Optional[str] = _PydanticField(alias="tradePrice", default=None)
    trade_qty: typing.Optional[str] = _PydanticField(alias="tradeQty", default=None)
    trade_update_action: typing.Optional[str] = _PydanticField(alias="tradeUpdateAction", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsTradesInstrumentHistoricalResponsePayloadDataItemTradeSummaryOrderQty(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    last_ord_qty: typing.Optional[str] = _PydanticField(alias="lastOrdQty", default=None)
    order_id: typing.Optional[str] = _PydanticField(alias="orderId", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketOptionsTradesInstrumentHistoricalResponsePayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    columns: typing.Optional[typing.List[str]] = _PydanticField(alias="columns", default=None)
    start_date: typing.Optional[int] = _PydanticField(alias="startDate", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSpotExchangesReferenceBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    raw_body: typing.Optional[str] = _PydanticField(alias="RAW_BODY", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSpotOhlcvExchangeExchangeLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketSpotOhlcvExchangeExchangeLatestResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSpotOhlcvExchangeExchangeLatestResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    btc_usdt: typing.Optional[GetMarketSpotOhlcvExchangeExchangeLatestResponsePayloadBtcUsdt] = _PydanticField(alias="btc_usdt", default=None)
    eth_usdt: typing.Optional[GetMarketSpotOhlcvExchangeExchangeLatestResponsePayloadEthUsdt] = _PydanticField(alias="eth_usdt", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSpotOhlcvExchangeExchangeLatestResponsePayloadBtcUsdt(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    close: typing.Optional[float] = _PydanticField(alias="close", default=None)
    high: typing.Optional[float] = _PydanticField(alias="high", default=None)
    low: typing.Optional[float] = _PydanticField(alias="low", default=None)
    open: typing.Optional[float] = _PydanticField(alias="open", default=None)
    timestamp: typing.Optional[int] = _PydanticField(alias="timestamp", default=None)
    volume: typing.Optional[float] = _PydanticField(alias="volume", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSpotOhlcvExchangeExchangeLatestResponsePayloadEthUsdt(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    close: typing.Optional[float] = _PydanticField(alias="close", default=None)
    high: typing.Optional[float] = _PydanticField(alias="high", default=None)
    low: typing.Optional[int] = _PydanticField(alias="low", default=None)
    open: typing.Optional[float] = _PydanticField(alias="open", default=None)
    timestamp: typing.Optional[int] = _PydanticField(alias="timestamp", default=None)
    volume: typing.Optional[float] = _PydanticField(alias="volume", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSpotPricesAssetsAssetLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketSpotPricesAssetsAssetLatestResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSpotPricesAssetsAssetLatestResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    asset: typing.Optional[str] = _PydanticField(alias="asset", default=None)
    price: typing.Optional[str] = _PydanticField(alias="price", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    volume: typing.Optional[str] = _PydanticField(alias="volume", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSpotPricesPairsPairLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketSpotPricesPairsPairLatestResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSpotPricesPairsPairLatestResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    pair: typing.Optional[str] = _PydanticField(alias="pair", default=None)
    price: typing.Optional[str] = _PydanticField(alias="price", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    volume: typing.Optional[str] = _PydanticField(alias="volume", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSpotReferenceQuotesPairHistoricalResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketSpotReferenceQuotesPairHistoricalResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSpotReferenceQuotesPairHistoricalResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[GetMarketSpotReferenceQuotesPairHistoricalResponsePayloadDataItem]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[typing.Any] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSpotReferenceQuotesPairHistoricalResponsePayloadDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    pair: typing.Optional[str] = _PydanticField(alias="pair", default=None)
    price: typing.Optional[float] = _PydanticField(alias="price", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    timestamp_nanoseconds: typing.Optional[int] = _PydanticField(alias="timestampNanoseconds", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSpotTickersPairLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketSpotTickersPairLatestResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSpotTickersPairLatestResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    bitfinex: typing.Optional[GetMarketSpotTickersPairLatestResponsePayloadBitfinex] = _PydanticField(alias="bitfinex", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSpotTickersPairLatestResponsePayloadBitfinex(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    ask: typing.Optional[float] = _PydanticField(alias="ask", default=None)
    ask_volume: typing.Optional[float] = _PydanticField(alias="askVolume", default=None)
    bid: typing.Optional[float] = _PydanticField(alias="bid", default=None)
    bid_volume: typing.Optional[float] = _PydanticField(alias="bidVolume", default=None)
    last: typing.Optional[float] = _PydanticField(alias="last", default=None)
    mid: typing.Optional[float] = _PydanticField(alias="mid", default=None)
    sequence: typing.Optional[typing.Any] = _PydanticField(alias="sequence", default=None)
    timestamp: typing.Optional[int] = _PydanticField(alias="timestamp", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSpotTwapAssetsAssetLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketSpotTwapAssetsAssetLatestResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSpotTwapAssetsAssetLatestResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    asset: typing.Optional[str] = _PydanticField(alias="asset", default=None)
    price: typing.Optional[str] = _PydanticField(alias="price", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    twap: typing.Optional[str] = _PydanticField(alias="twap", default=None)
    volume: typing.Optional[str] = _PydanticField(alias="volume", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSpotVwapAssetsAssetLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketSpotVwapAssetsAssetLatestResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSpotVwapAssetsAssetLatestResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    asset: typing.Optional[str] = _PydanticField(alias="asset", default=None)
    price: typing.Optional[str] = _PydanticField(alias="price", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    volume: typing.Optional[str] = _PydanticField(alias="volume", default=None)
    vwap: typing.Optional[str] = _PydanticField(alias="vwap", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSwapsFundingRatesExchangeExchangeLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[typing.List[GetMarketSwapsFundingRatesExchangeExchangeLatestResponsePayloadItem]] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSwapsFundingRatesExchangeExchangeLatestResponsePayloadItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    funding_interval: typing.Optional[typing.Any] = _PydanticField(alias="fundingInterval", default=None)
    funding_rate: typing.Optional[float] = _PydanticField(alias="fundingRate", default=None)
    funding_rate_daily: typing.Optional[int] = _PydanticField(alias="fundingRateDaily", default=None)
    funding_time: typing.Optional[typing.Any] = _PydanticField(alias="fundingTime", default=None)
    instrument: typing.Optional[str] = _PydanticField(alias="instrument", default=None)
    next_funding_time: typing.Optional[typing.Any] = _PydanticField(alias="nextFundingTime", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSwapsInsuranceFundInstrumentLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[typing.List[GetMarketSwapsInsuranceFundInstrumentLatestResponsePayloadItem]] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSwapsInsuranceFundInstrumentLatestResponsePayloadItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    exchange: typing.Optional[str] = _PydanticField(alias="exchange", default=None)
    fund: typing.Optional[float] = _PydanticField(alias="fund", default=None)
    timestamp: typing.Optional[int] = _PydanticField(alias="timestamp", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSwapsLiquidationsInstrumentLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[typing.List[GetMarketSwapsLiquidationsInstrumentLatestResponsePayloadItem]] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSwapsLiquidationsInstrumentLatestResponsePayloadItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    exchange: typing.Optional[str] = _PydanticField(alias="exchange", default=None)
    original_quantity: typing.Optional[int] = _PydanticField(alias="originalQuantity", default=None)
    price: typing.Optional[float] = _PydanticField(alias="price", default=None)
    side: typing.Optional[str] = _PydanticField(alias="side", default=None)
    status: typing.Optional[str] = _PydanticField(alias="status", default=None)
    time_in_force: typing.Optional[str] = _PydanticField(alias="timeInForce", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    type: typing.Optional[str] = _PydanticField(alias="type", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSwapsOhlcvExchangeExchangeLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[typing.List[GetMarketSwapsOhlcvExchangeExchangeLatestResponsePayloadItem]] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSwapsOhlcvExchangeExchangeLatestResponsePayloadItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    close: typing.Optional[float] = _PydanticField(alias="close", default=None)
    high: typing.Optional[float] = _PydanticField(alias="high", default=None)
    instrument: typing.Optional[str] = _PydanticField(alias="instrument", default=None)
    low: typing.Optional[float] = _PydanticField(alias="low", default=None)
    open: typing.Optional[float] = _PydanticField(alias="open", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    volume: typing.Optional[float] = _PydanticField(alias="volume", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSwapsOhlcvInstrumentLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[typing.List[GetMarketSwapsOhlcvInstrumentLatestResponsePayloadItem]] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSwapsOhlcvInstrumentLatestResponsePayloadItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    close: typing.Optional[float] = _PydanticField(alias="close", default=None)
    exchange: typing.Optional[str] = _PydanticField(alias="exchange", default=None)
    high: typing.Optional[float] = _PydanticField(alias="high", default=None)
    low: typing.Optional[float] = _PydanticField(alias="low", default=None)
    open: typing.Optional[float] = _PydanticField(alias="open", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    volume: typing.Optional[float] = _PydanticField(alias="volume", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSwapsOpenInterestExchangeExchangeLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[typing.List[GetMarketSwapsOpenInterestExchangeExchangeLatestResponsePayloadItem]] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSwapsOpenInterestExchangeExchangeLatestResponsePayloadItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    instrument: typing.Optional[str] = _PydanticField(alias="instrument", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    value: typing.Optional[float] = _PydanticField(alias="value", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSwapsOpenInterestInstrumentLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[typing.List[GetMarketSwapsOpenInterestInstrumentLatestResponsePayloadItem]] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSwapsOpenInterestInstrumentLatestResponsePayloadItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    exchange: typing.Optional[str] = _PydanticField(alias="exchange", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    value: typing.Optional[float] = _PydanticField(alias="value", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSwapsTickersInstrumentHistoricalResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetMarketSwapsTickersInstrumentHistoricalResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSwapsTickersInstrumentHistoricalResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[GetMarketSwapsTickersInstrumentHistoricalResponsePayloadDataItem]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetMarketSwapsTickersInstrumentHistoricalResponsePayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSwapsTickersInstrumentHistoricalResponsePayloadDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    ask: typing.Optional[float] = _PydanticField(alias="ask", default=None)
    ask_volume: typing.Optional[int] = _PydanticField(alias="askVolume", default=None)
    bid: typing.Optional[int] = _PydanticField(alias="bid", default=None)
    bid_volume: typing.Optional[int] = _PydanticField(alias="bidVolume", default=None)
    exchange: typing.Optional[str] = _PydanticField(alias="exchange", default=None)
    last: typing.Optional[int] = _PydanticField(alias="last", default=None)
    mid: typing.Optional[float] = _PydanticField(alias="mid", default=None)
    sequence: typing.Optional[typing.Any] = _PydanticField(alias="sequence", default=None)
    timestamp: typing.Optional[int] = _PydanticField(alias="timestamp", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSwapsTickersInstrumentHistoricalResponsePayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    end_date: typing.Optional[int] = _PydanticField(alias="endDate", default=None)
    start_date: typing.Optional[int] = _PydanticField(alias="startDate", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSwapsTickersInstrumentLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[typing.List[GetMarketSwapsTickersInstrumentLatestResponsePayloadItem]] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketSwapsTickersInstrumentLatestResponsePayloadItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    ask: typing.Optional[float] = _PydanticField(alias="ask", default=None)
    ask_volume: typing.Optional[int] = _PydanticField(alias="askVolume", default=None)
    bid: typing.Optional[float] = _PydanticField(alias="bid", default=None)
    bid_volume: typing.Optional[int] = _PydanticField(alias="bidVolume", default=None)
    exchange: typing.Optional[str] = _PydanticField(alias="exchange", default=None)
    last: typing.Optional[int] = _PydanticField(alias="last", default=None)
    mid: typing.Optional[float] = _PydanticField(alias="mid", default=None)
    sequence: typing.Optional[typing.Any] = _PydanticField(alias="sequence", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketTokensPricesSymbolLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[typing.List[GetMarketTokensPricesSymbolLatestResponsePayloadItem]] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetMarketTokensPricesSymbolLatestResponsePayloadItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    address: typing.Optional[str] = _PydanticField(alias="address", default=None)
    circulating_supply: typing.Optional[int] = _PydanticField(alias="circulatingSupply", default=None)
    daily_percent_change_usd: typing.Optional[float] = _PydanticField(alias="dailyPercentChangeUSD", default=None)
    daily_volume_usd: typing.Optional[float] = _PydanticField(alias="dailyVolumeUSD", default=None)
    hourly_percent_change_usd: typing.Optional[float] = _PydanticField(alias="hourlyPercentChangeUSD", default=None)
    market_cap_usd: typing.Optional[float] = _PydanticField(alias="marketCapUSD", default=None)
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)
    price_usd: typing.Optional[float] = _PydanticField(alias="priceUSD", default=None)
    symbol: typing.Optional[str] = _PydanticField(alias="symbol", default=None)
    total_supply: typing.Optional[int] = _PydanticField(alias="totalSupply", default=None)
    weekly_percent_change_usd: typing.Optional[float] = _PydanticField(alias="weeklyPercentChangeUSD", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetSignaturesHashResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[typing.List[GetSignaturesHashResponsePayloadItem]] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetSignaturesHashResponsePayloadItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    full_hexadecimal_signature: typing.Optional[str] = _PydanticField(alias="fullHexadecimalSignature", default=None)
    hexadecimal_signature: typing.Optional[str] = _PydanticField(alias="hexadecimalSignature", default=None)
    num_parameters: typing.Optional[int] = _PydanticField(alias="numParameters", default=None)
    text_signature: typing.Optional[str] = _PydanticField(alias="textSignature", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetTokensMetricsSymbolLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetTokensMetricsSymbolLatestResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetTokensMetricsSymbolLatestResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    price_usd: typing.Optional[str] = _PydanticField(alias="priceUSD", default=None)
    transfered_value_average: typing.Optional[str] = _PydanticField(alias="transferedValueAverage", default=None)
    transfered_value_average_usd: typing.Optional[str] = _PydanticField(alias="transferedValueAverageUSD", default=None)
    transfered_value_total: typing.Optional[str] = _PydanticField(alias="transferedValueTotal", default=None)
    transfered_value_total_usd: typing.Optional[str] = _PydanticField(alias="transferedValueTotalUSD", default=None)
    transfers_total: typing.Optional[str] = _PydanticField(alias="transfersTotal", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetTokensHashHoldersLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetTokensHashHoldersLatestResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetTokensHashHoldersLatestResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    records: typing.Optional[typing.List[GetTokensHashHoldersLatestResponsePayloadRecordsItem]] = _PydanticField(alias="records", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetTokensHashHoldersLatestResponsePayloadRecordsItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    decimals: typing.Optional[str] = _PydanticField(alias="decimals", default=None)
    holder_address: typing.Optional[str] = _PydanticField(alias="holderAddress", default=None)
    holder_first_timestamp: typing.Optional[str] = _PydanticField(alias="holderFirstTimestamp", default=None)
    num_tokens: typing.Optional[str] = _PydanticField(alias="numTokens", default=None)
    timestamp: typing.Optional[int] = _PydanticField(alias="timestamp", default=None)
    token_address: typing.Optional[str] = _PydanticField(alias="tokenAddress", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetTokensHashSuppliesLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetTokensHashSuppliesLatestResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetTokensHashSuppliesLatestResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    circulating_supply: typing.Optional[str] = _PydanticField(alias="circulatingSupply", default=None)
    decimals: typing.Optional[str] = _PydanticField(alias="decimals", default=None)
    total_burned: typing.Optional[str] = _PydanticField(alias="totalBurned", default=None)
    total_minted: typing.Optional[str] = _PydanticField(alias="totalMinted", default=None)
    total_supply: typing.Optional[str] = _PydanticField(alias="totalSupply", default=None)
    total_transfers: typing.Optional[str] = _PydanticField(alias="totalTransfers", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetTokensHashTransfersResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetTokensHashTransfersResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetTokensHashTransfersResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    records: typing.Optional[typing.List[GetTokensHashTransfersResponsePayloadRecordsItem]] = _PydanticField(alias="records", default=None)
    total_records: typing.Optional[int] = _PydanticField(alias="totalRecords", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetTokensHashTransfersResponsePayloadRecordsItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    amount: typing.Optional[str] = _PydanticField(alias="amount", default=None)
    block_hash: typing.Optional[str] = _PydanticField(alias="blockHash", default=None)
    block_number: typing.Optional[str] = _PydanticField(alias="blockNumber", default=None)
    blockchain_id: typing.Optional[str] = _PydanticField(alias="blockchainId", default=None)
    decimals: typing.Optional[str] = _PydanticField(alias="decimals", default=None)
    from_field: typing.Optional[str] = _PydanticField(alias="from", default=None)
    is_erc20: typing.Optional[bool] = _PydanticField(alias="isERC20", default=None)
    is_erc721: typing.Optional[bool] = _PydanticField(alias="isERC721", default=None)
    is_erc777: typing.Optional[bool] = _PydanticField(alias="isERC777", default=None)
    is_erc884: typing.Optional[bool] = _PydanticField(alias="isERC884", default=None)
    is_erc998: typing.Optional[bool] = _PydanticField(alias="isERC998", default=None)
    log_index: typing.Optional[int] = _PydanticField(alias="logIndex", default=None)
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)
    symbol: typing.Optional[str] = _PydanticField(alias="symbol", default=None)
    timestamp: typing.Optional[int] = _PydanticField(alias="timestamp", default=None)
    timestamp_nanoseconds: typing.Optional[int] = _PydanticField(alias="timestampNanoseconds", default=None)
    to: typing.Optional[typing.List[str]] = _PydanticField(alias="to", default=None)
    token_address: typing.Optional[str] = _PydanticField(alias="tokenAddress", default=None)
    transaction_hash: typing.Optional[str] = _PydanticField(alias="transactionHash", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetTokensHashVelocityResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetTokensHashVelocityResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetTokensHashVelocityResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[typing.Any]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetTokensHashVelocityResponsePayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetTokensHashVelocityResponsePayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    columns: typing.Optional[typing.List[str]] = _PydanticField(alias="columns", default=None)
    end_date: typing.Optional[int] = _PydanticField(alias="endDate", default=None)
    start_date: typing.Optional[int] = _PydanticField(alias="startDate", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetTokensHashVolumeResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetTokensHashVolumeResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetTokensHashVolumeResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[typing.Any]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetTokensHashVolumeResponsePayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetTokensHashVolumeResponsePayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    columns: typing.Optional[typing.List[str]] = _PydanticField(alias="columns", default=None)
    end_date: typing.Optional[int] = _PydanticField(alias="endDate", default=None)
    start_date: typing.Optional[int] = _PydanticField(alias="startDate", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetTransactionsMetricsLatestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetTransactionsMetricsLatestResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetTransactionsMetricsLatestResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    fees_average: typing.Optional[str] = _PydanticField(alias="feesAverage", default=None)
    fees_average_usd: typing.Optional[str] = _PydanticField(alias="feesAverageUSD", default=None)
    fees_total: typing.Optional[str] = _PydanticField(alias="feesTotal", default=None)
    fees_total_usd: typing.Optional[str] = _PydanticField(alias="feesTotalUSD", default=None)
    fees_unit: typing.Optional[str] = _PydanticField(alias="feesUnit", default=None)
    functions_total: typing.Optional[str] = _PydanticField(alias="functionsTotal", default=None)
    gas_price_average: typing.Optional[str] = _PydanticField(alias="gasPriceAverage", default=None)
    inputs_average: typing.Optional[str] = _PydanticField(alias="inputsAverage", default=None)
    inputs_total: typing.Optional[str] = _PydanticField(alias="inputsTotal", default=None)
    outputs_average: typing.Optional[str] = _PydanticField(alias="outputsAverage", default=None)
    outputs_total: typing.Optional[str] = _PydanticField(alias="outputsTotal", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    transactions_total: typing.Optional[str] = _PydanticField(alias="transactionsTotal", default=None)
    value_average: typing.Optional[str] = _PydanticField(alias="valueAverage", default=None)
    value_average_usd: typing.Optional[str] = _PydanticField(alias="valueAverageUSD", default=None)
    value_total: typing.Optional[str] = _PydanticField(alias="valueTotal", default=None)
    value_total_usd: typing.Optional[str] = _PydanticField(alias="valueTotalUSD", default=None)
    value_unit: typing.Optional[str] = _PydanticField(alias="valueUnit", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetTransactionsVolumeResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetTransactionsVolumeResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetTransactionsVolumeResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    data: typing.Optional[typing.List[typing.List[int]]] = _PydanticField(alias="data", default=None)
    metadata: typing.Optional[GetTransactionsVolumeResponsePayloadMetadata] = _PydanticField(alias="metadata", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetTransactionsVolumeResponsePayloadMetadata(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    columns: typing.Optional[typing.List[str]] = _PydanticField(alias="columns", default=None)
    end_date: typing.Optional[int] = _PydanticField(alias="endDate", default=None)
    start_date: typing.Optional[int] = _PydanticField(alias="startDate", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetTransactionsHashResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[GetTransactionsHashResponsePayload] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetTransactionsHashResponsePayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    block_number: typing.Optional[str] = _PydanticField(alias="blockNumber", default=None)
    confirmations: typing.Optional[str] = _PydanticField(alias="confirmations", default=None)
    contract_address: typing.Optional[str] = _PydanticField(alias="contractAddress", default=None)
    cumulative_gas_used: typing.Optional[str] = _PydanticField(alias="cumulativeGasUsed", default=None)
    fee: typing.Optional[str] = _PydanticField(alias="fee", default=None)
    from_field: typing.Optional[GetTransactionsHashResponsePayloadFrom] = _PydanticField(alias="from", default=None)
    gas_limit: typing.Optional[str] = _PydanticField(alias="gasLimit", default=None)
    gas_price: typing.Optional[str] = _PydanticField(alias="gasPrice", default=None)
    gas_used: typing.Optional[str] = _PydanticField(alias="gasUsed", default=None)
    hash: typing.Optional[str] = _PydanticField(alias="hash", default=None)
    index: typing.Optional[int] = _PydanticField(alias="index", default=None)
    input: typing.Optional[str] = _PydanticField(alias="input", default=None)
    logs_bloom: typing.Optional[str] = _PydanticField(alias="logsBloom", default=None)
    max_fee_per_gas: typing.Optional[int] = _PydanticField(alias="maxFeePerGas", default=None)
    max_priority_fee_per_gas: typing.Optional[int] = _PydanticField(alias="maxPriorityFeePerGas", default=None)
    nonce: typing.Optional[str] = _PydanticField(alias="nonce", default=None)
    public_key: typing.Optional[str] = _PydanticField(alias="publicKey", default=None)
    r: typing.Optional[str] = _PydanticField(alias="r", default=None)
    raw: typing.Optional[str] = _PydanticField(alias="raw", default=None)
    root: typing.Optional[str] = _PydanticField(alias="root", default=None)
    s: typing.Optional[str] = _PydanticField(alias="s", default=None)
    status: typing.Optional[str] = _PydanticField(alias="status", default=None)
    status_result: typing.Optional[GetTransactionsHashResponsePayloadStatusResult] = _PydanticField(alias="statusResult", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    to: typing.Optional[typing.List[GetTransactionsHashResponsePayloadToItem]] = _PydanticField(alias="to", default=None)
    type: typing.Optional[int] = _PydanticField(alias="type", default=None)
    v: typing.Optional[str] = _PydanticField(alias="v", default=None)
    value: typing.Optional[str] = _PydanticField(alias="value", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetTransactionsHashResponsePayloadFrom(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    address: typing.Optional[str] = _PydanticField(alias="address", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetTransactionsHashResponsePayloadStatusResult(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    code: typing.Optional[str] = _PydanticField(alias="code", default=None)
    confirmed: typing.Optional[bool] = _PydanticField(alias="confirmed", default=None)
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)
    success: typing.Optional[bool] = _PydanticField(alias="success", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetTransactionsHashResponsePayloadToItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    address: typing.Optional[str] = _PydanticField(alias="address", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetTransactionsHashTokenTransfersResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[typing.List[GetTransactionsHashTokenTransfersResponsePayloadItem]] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetTransactionsHashTokenTransfersResponsePayloadItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    amount: typing.Optional[str] = _PydanticField(alias="amount", default=None)
    decimals: typing.Optional[str] = _PydanticField(alias="decimals", default=None)
    from_field: typing.Optional[str] = _PydanticField(alias="from", default=None)
    is_erc20: typing.Optional[bool] = _PydanticField(alias="isERC20", default=None)
    is_erc721: typing.Optional[bool] = _PydanticField(alias="isERC721", default=None)
    is_erc777: typing.Optional[bool] = _PydanticField(alias="isERC777", default=None)
    is_erc884: typing.Optional[bool] = _PydanticField(alias="isERC884", default=None)
    is_erc998: typing.Optional[bool] = _PydanticField(alias="isERC998", default=None)
    log_index: typing.Optional[int] = _PydanticField(alias="logIndex", default=None)
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)
    symbol: typing.Optional[str] = _PydanticField(alias="symbol", default=None)
    to: typing.Optional[str] = _PydanticField(alias="to", default=None)
    token_address: typing.Optional[str] = _PydanticField(alias="tokenAddress", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetUnclesHashResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    description: typing.Optional[str] = _PydanticField(alias="description", default=None)
    payload: typing.Optional[typing.List[GetUnclesHashResponsePayloadItem]] = _PydanticField(alias="payload", default=None)
    status: typing.Optional[int] = _PydanticField(alias="status", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetUnclesHashResponsePayloadItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    base_fee_per_gas: typing.Optional[int] = _PydanticField(alias="baseFeePerGas", default=None)
    block_number: typing.Optional[str] = _PydanticField(alias="blockNumber", default=None)
    difficulty: typing.Optional[str] = _PydanticField(alias="difficulty", default=None)
    extra_data: typing.Optional[str] = _PydanticField(alias="extraData", default=None)
    gas_limit: typing.Optional[str] = _PydanticField(alias="gasLimit", default=None)
    gas_used: typing.Optional[str] = _PydanticField(alias="gasUsed", default=None)
    hash: typing.Optional[str] = _PydanticField(alias="hash", default=None)
    logs_bloom: typing.Optional[str] = _PydanticField(alias="logsBloom", default=None)
    miner: typing.Optional[str] = _PydanticField(alias="miner", default=None)
    mix_hash: typing.Optional[str] = _PydanticField(alias="mixHash", default=None)
    nonce: typing.Optional[str] = _PydanticField(alias="nonce", default=None)
    number: typing.Optional[str] = _PydanticField(alias="number", default=None)
    parent_hash: typing.Optional[str] = _PydanticField(alias="parentHash", default=None)
    position_index: typing.Optional[int] = _PydanticField(alias="positionIndex", default=None)
    receipts_root: typing.Optional[str] = _PydanticField(alias="receiptsRoot", default=None)
    reward: typing.Optional[str] = _PydanticField(alias="reward", default=None)
    sha3_uncles: typing.Optional[str] = _PydanticField(alias="sha3Uncles", default=None)
    size: typing.Optional[int] = _PydanticField(alias="size", default=None)
    state_root: typing.Optional[str] = _PydanticField(alias="stateRoot", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)
    total_difficulty: typing.Optional[str] = _PydanticField(alias="totalDifficulty", default=None)
    transactions_root: typing.Optional[str] = _PydanticField(alias="transactionsRoot", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


# Rebuild forward refs
GetAddressesResponse.model_rebuild()
GetAddressesResponsePayload.model_rebuild()
GetAddressesResponsePayloadRecordsItem.model_rebuild()
GetAddressesMetricsLatestResponse.model_rebuild()
GetAddressesMetricsLatestResponsePayload.model_rebuild()
GetAddressesHashAccountBalancesHistoricalResponse.model_rebuild()
GetAddressesHashAccountBalancesHistoricalResponsePayload.model_rebuild()
GetAddressesHashAccountBalancesHistoricalResponsePayloadMetadata.model_rebuild()
GetAddressesHashAccountBalancesLatestResponse.model_rebuild()
GetAddressesHashAccountBalancesLatestResponsePayload.model_rebuild()
GetAddressesHashAccountBalancesLatestResponsePayloadAddress.model_rebuild()
GetAddressesHashConverterResponse.model_rebuild()
GetAddressesHashConverterResponsePayload.model_rebuild()
GetAddressesHashFunctionsResponse.model_rebuild()
GetAddressesHashFunctionsResponsePayload.model_rebuild()
GetAddressesHashFunctionsResponsePayloadRecordsItem.model_rebuild()
GetAddressesHashInformationResponse.model_rebuild()
GetAddressesHashInformationResponsePayload.model_rebuild()
GetAddressesHashLogsResponse.model_rebuild()
GetAddressesHashLogsResponsePayload.model_rebuild()
GetAddressesHashLogsResponsePayloadRecordsItem.model_rebuild()
GetAddressesHashMetadataResponse.model_rebuild()
GetAddressesHashMetadataResponsePayload.model_rebuild()
GetAddressesHashMetadataResponsePayloadNetwork.model_rebuild()
GetAddressesHashTokenBalancesHistoricalResponse.model_rebuild()
GetAddressesHashTokenBalancesHistoricalResponsePayload.model_rebuild()
GetAddressesHashTokenBalancesHistoricalResponsePayloadRecordsItem.model_rebuild()
GetAddressesHashTokenTransfersResponse.model_rebuild()
GetAddressesHashTokenTransfersResponsePayload.model_rebuild()
GetAddressesHashTokenTransfersResponsePayloadRecordsItem.model_rebuild()
GetAddressesHashTransactionsResponse.model_rebuild()
GetAddressesHashTransactionsResponsePayload.model_rebuild()
GetAddressesHashTransactionsResponsePayloadRecordsItem.model_rebuild()
GetAddressesHashTransactionsResponsePayloadRecordsItemFrom.model_rebuild()
GetAddressesHashTransactionsResponsePayloadRecordsItemStatusResult.model_rebuild()
GetAddressesHashTransactionsResponsePayloadRecordsItemToItem.model_rebuild()
GetBlockchainsMetricsLatestResponse.model_rebuild()
GetBlockchainsMetricsLatestResponsePayload.model_rebuild()
GetBlocksMetricsLatestResponse.model_rebuild()
GetBlocksMetricsLatestResponsePayload.model_rebuild()
GetBlocksIdResponseObj0.model_rebuild()
GetBlocksIdResponseObj0Payload.model_rebuild()
GetBlocksIdResponseObj0PayloadMiner.model_rebuild()
GetBlocksIdResponseObj0PayloadParent.model_rebuild()
GetBlocksIdResponseObj1.model_rebuild()
GetBlocksIdResponseObj1Payload.model_rebuild()
GetBlocksIdResponseObj1PayloadBlocks.model_rebuild()
GetBlocksIdResponseObj1PayloadPredictions.model_rebuild()
GetBlocksIdResponseObj1PayloadPredictionsFast.model_rebuild()
GetBlocksIdResponseObj1PayloadPredictionsNormal.model_rebuild()
GetBlocksIdResponseObj1PayloadPredictionsSafe.model_rebuild()
GetBlocksIdResponseObj1PayloadPredictionsSlow.model_rebuild()
GetBlocksIdTokenTransfersResponse.model_rebuild()
GetBlocksIdTokenTransfersResponsePayload.model_rebuild()
GetBlocksIdTokenTransfersResponsePayloadMetadata.model_rebuild()
GetContractsHashFunctionsResponse.model_rebuild()
GetContractsHashFunctionsResponsePayloadItem.model_rebuild()
GetContractsHashFunctionsResponsePayloadItemInputsItem.model_rebuild()
GetDefiDexProtocolIdPoolsPoolAddressResponseObj0.model_rebuild()
GetDefiDexProtocolIdPoolsPoolAddressResponseObj0Payload.model_rebuild()
GetDefiDexProtocolIdPoolsPoolAddressResponseObj0PayloadDataItem.model_rebuild()
GetDefiDexProtocolIdPoolsPoolAddressResponseObj0PayloadMetadata.model_rebuild()
GetDefiDexProtocolIdPoolsPoolAddressResponseObj1.model_rebuild()
GetDefiDexProtocolIdPoolsPoolAddressResponseObj1Payload.model_rebuild()
GetDefiDexProtocolIdPoolsPoolAddressResponseObj1PayloadDataItem.model_rebuild()
GetDefiDexProtocolIdPoolsPoolAddressResponseObj1PayloadMetadata.model_rebuild()
GetDefiDexProtocolIdProtocolResponseObj0.model_rebuild()
GetDefiDexProtocolIdProtocolResponseObj0Payload.model_rebuild()
GetDefiDexProtocolIdProtocolResponseObj0PayloadDataItem.model_rebuild()
GetDefiDexProtocolIdProtocolResponseObj0PayloadMetadata.model_rebuild()
GetDefiDexProtocolIdProtocolResponseObj1.model_rebuild()
GetDefiDexProtocolIdProtocolResponseObj1Payload.model_rebuild()
GetDefiDexProtocolIdProtocolResponseObj1PayloadDataItem.model_rebuild()
GetDefiDexProtocolIdProtocolResponseObj1PayloadMetadata.model_rebuild()
GetDefiDexProtocolIdWalletsWalletAddressResponseObj0.model_rebuild()
GetDefiDexProtocolIdWalletsWalletAddressResponseObj0Payload.model_rebuild()
GetDefiDexProtocolIdWalletsWalletAddressResponseObj0PayloadDataItem.model_rebuild()
GetDefiDexProtocolIdWalletsWalletAddressResponseObj0PayloadMetadata.model_rebuild()
GetDefiDexProtocolIdWalletsWalletAddressResponseObj1.model_rebuild()
GetDefiDexProtocolIdWalletsWalletAddressResponseObj1Payload.model_rebuild()
GetDefiDexProtocolIdWalletsWalletAddressResponseObj1PayloadDataItem.model_rebuild()
GetDefiDexProtocolIdWalletsWalletAddressResponseObj1PayloadMetadata.model_rebuild()
GetDefiDexProtocolIdWalletsWalletAddressResponseObj2.model_rebuild()
GetDefiDexProtocolIdWalletsWalletAddressResponseObj2Payload.model_rebuild()
GetDefiDexProtocolIdWalletsWalletAddressResponseObj2PayloadDataItem.model_rebuild()
GetDefiDexProtocolIdWalletsWalletAddressResponseObj2PayloadMetadata.model_rebuild()
GetDefiLendingProtocolIdAssetsAssetResponse.model_rebuild()
GetDefiLendingProtocolIdAssetsAssetResponsePayload.model_rebuild()
GetDefiLendingProtocolIdAssetsAssetResponsePayloadDataItem.model_rebuild()
GetDefiLendingProtocolIdAssetsAssetResponsePayloadMetadata.model_rebuild()
GetDefiLendingProtocolIdGovernanceResponse.model_rebuild()
GetDefiLendingProtocolIdGovernanceResponsePayload.model_rebuild()
GetDefiLendingProtocolIdGovernanceResponsePayloadDataItem.model_rebuild()
GetDefiLendingProtocolIdGovernanceResponsePayloadMetadata.model_rebuild()
GetDefiLendingProtocolIdProtocolResponseObj0.model_rebuild()
GetDefiLendingProtocolIdProtocolResponseObj0Payload.model_rebuild()
GetDefiLendingProtocolIdProtocolResponseObj0PayloadDataItem.model_rebuild()
GetDefiLendingProtocolIdProtocolResponseObj0PayloadMetadata.model_rebuild()
GetDefiLendingProtocolIdProtocolResponseObj1.model_rebuild()
GetDefiLendingProtocolIdProtocolResponseObj1Payload.model_rebuild()
GetDefiLendingProtocolIdProtocolResponseObj1PayloadDataItem.model_rebuild()
GetDefiLendingProtocolIdProtocolResponseObj1PayloadMetadata.model_rebuild()
GetDefiLendingProtocolIdWalletsAddressPortfolioResponse.model_rebuild()
GetDefiLendingProtocolIdWalletsAddressPortfolioResponsePayload.model_rebuild()
GetDefiLendingProtocolIdWalletsAddressPortfolioResponsePayloadData.model_rebuild()
GetDefiLendingProtocolIdWalletsAddressPortfolioResponsePayloadDataPositionsItem.model_rebuild()
GetDefiLendingProtocolIdWalletsAddressPortfolioResponsePayloadMetadata.model_rebuild()
GetDefiLendingProtocolIdWalletsWalletAddressResponse.model_rebuild()
GetDefiLendingProtocolIdWalletsWalletAddressResponsePayload.model_rebuild()
GetDefiLendingProtocolIdWalletsWalletAddressResponsePayloadDataItem.model_rebuild()
GetDefiLendingProtocolIdWalletsWalletAddressResponsePayloadMetadata.model_rebuild()
GetMarketDefiLiquidityPoolDailyReturnAddressResponse.model_rebuild()
GetMarketDefiLiquidityPoolDailyReturnAddressResponsePayload.model_rebuild()
GetMarketDefiLiquidityPoolDailyReturnAddressResponsePayloadDataItem.model_rebuild()
GetMarketDefiLiquidityPoolDailyReturnAddressResponsePayloadMetadata.model_rebuild()
GetMarketDefiLiquidityProvidersDailyReturnLiquidityPoolAddressResponse.model_rebuild()
GetMarketDefiLiquidityProvidersDailyReturnLiquidityPoolAddressResponsePayload.model_rebuild()
GetMarketDefiLiquidityProvidersDailyReturnLiquidityPoolAddressResponsePayloadDataItem.model_rebuild()
GetMarketDefiLiquidityProvidersDailyReturnLiquidityPoolAddressResponsePayloadMetadata.model_rebuild()
GetMarketDefiLiquidityProvidersReturnLiquidityPoolAddressResponse.model_rebuild()
GetMarketDefiLiquidityProvidersReturnLiquidityPoolAddressResponsePayload.model_rebuild()
GetMarketDefiLiquidityProvidersReturnLiquidityPoolAddressResponsePayloadDataItem.model_rebuild()
GetMarketDefiLiquidityProvidersReturnLiquidityPoolAddressResponsePayloadMetadata.model_rebuild()
GetMarketDefiPricesAssetAssetLatestResponse.model_rebuild()
GetMarketDefiPricesAssetAssetLatestResponsePayload.model_rebuild()
GetMarketDefiPricesPairsBasesBaseQuotesQuoteLatestResponse.model_rebuild()
GetMarketDefiPricesPairsBasesBaseQuotesQuoteLatestResponsePayload.model_rebuild()
GetMarketDefiTradesPoolHistoricalResponse.model_rebuild()
GetMarketDefiTradesPoolHistoricalResponsePayload.model_rebuild()
GetMarketDefiTradesPoolHistoricalResponsePayloadMetadata.model_rebuild()
GetMarketDefiTradesPoolHistoricalResponsePayloadMetadataDexPairs.model_rebuild()
GetMarketDefiTradesPoolHistoricalResponsePayloadMetadataDexPairs0xa478c2975ab1ea89e8196811f51a7b7ade33eb11.model_rebuild()
GetMarketDefiTwapAssetAssetLatestResponse.model_rebuild()
GetMarketDefiTwapAssetAssetLatestResponsePayload.model_rebuild()
GetMarketDefiTwapPairsBasesBaseQuotesQuoteHistoricalResponse.model_rebuild()
GetMarketDefiTwapPairsBasesBaseQuotesQuoteHistoricalResponsePayload.model_rebuild()
GetMarketDefiTwapPairsBasesBaseQuotesQuoteHistoricalResponsePayloadDataItem.model_rebuild()
GetMarketDefiTwapPairsBasesBaseQuotesQuoteHistoricalResponsePayloadMetadata.model_rebuild()
GetMarketDefiTwapPairsBasesBaseQuotesQuoteLatestResponse.model_rebuild()
GetMarketDefiTwapPairsBasesBaseQuotesQuoteLatestResponsePayload.model_rebuild()
GetMarketDefiVwapAssetAssetLatestResponse.model_rebuild()
GetMarketDefiVwapAssetAssetLatestResponsePayload.model_rebuild()
GetMarketDefiVwapPairsBasesBaseQuotesQuoteHistoricalResponse.model_rebuild()
GetMarketDefiVwapPairsBasesBaseQuotesQuoteHistoricalResponsePayload.model_rebuild()
GetMarketDefiVwapPairsBasesBaseQuotesQuoteHistoricalResponsePayloadDataItem.model_rebuild()
GetMarketDefiVwapPairsBasesBaseQuotesQuoteHistoricalResponsePayloadMetadata.model_rebuild()
GetMarketDefiVwapPairsBasesBaseQuotesQuoteLatestResponse.model_rebuild()
GetMarketDefiVwapPairsBasesBaseQuotesQuoteLatestResponsePayload.model_rebuild()
GetMarketFuturesFundingRatesExchangeExchangeLatestResponse.model_rebuild()
GetMarketFuturesFundingRatesExchangeExchangeLatestResponsePayloadItem.model_rebuild()
GetMarketFuturesFundingRatesInstrumentLatestResponse.model_rebuild()
GetMarketFuturesFundingRatesInstrumentLatestResponsePayloadItem.model_rebuild()
GetMarketFuturesLiquidationsInstrumentLatestResponse.model_rebuild()
GetMarketFuturesLiquidationsInstrumentLatestResponsePayloadItem.model_rebuild()
GetMarketFuturesLongShortRatioInstrumentLatestResponse.model_rebuild()
GetMarketFuturesLongShortRatioInstrumentLatestResponsePayloadItem.model_rebuild()
GetMarketFuturesOhlcvExchangeExchangeLatestResponse.model_rebuild()
GetMarketFuturesOhlcvExchangeExchangeLatestResponsePayloadItem.model_rebuild()
GetMarketFuturesOhlcvInstrumentLatestResponse.model_rebuild()
GetMarketFuturesOhlcvInstrumentLatestResponsePayloadItem.model_rebuild()
GetMarketFuturesOpenInterestExchangeExchangeLatestResponse.model_rebuild()
GetMarketFuturesOpenInterestExchangeExchangeLatestResponsePayloadItem.model_rebuild()
GetMarketFuturesOpenInterestInstrumentLatestResponse.model_rebuild()
GetMarketFuturesOpenInterestInstrumentLatestResponsePayloadItem.model_rebuild()
GetMarketFuturesTickersInstrumentLatestResponse.model_rebuild()
GetMarketFuturesTickersInstrumentLatestResponsePayloadItem.model_rebuild()
GetMarketMetricsExchangesVolumesHistoricalResponse.model_rebuild()
GetMarketMetricsExchangesVolumesHistoricalResponsePayload.model_rebuild()
GetMarketMetricsExchangesVolumesHistoricalResponsePayloadDataItem.model_rebuild()
GetMarketMetricsExchangesVolumesHistoricalResponsePayloadMetadata.model_rebuild()
GetMarketMetricsExchangesVolumesLatestResponse.model_rebuild()
GetMarketMetricsExchangesVolumesLatestResponsePayload.model_rebuild()
GetMarketMetricsExchangesVolumesLatestResponsePayloadDataItem.model_rebuild()
GetMarketMetricsExchangesExchangeAssetsVolumesHistoricalResponse.model_rebuild()
GetMarketMetricsExchangesExchangeAssetsVolumesHistoricalResponsePayload.model_rebuild()
GetMarketMetricsExchangesExchangeAssetsVolumesHistoricalResponsePayloadDataItem.model_rebuild()
GetMarketMetricsExchangesExchangeAssetsVolumesHistoricalResponsePayloadMetadata.model_rebuild()
GetMarketMetricsExchangesExchangeAssetsVolumesLatestResponse.model_rebuild()
GetMarketMetricsExchangesExchangeAssetsVolumesLatestResponsePayload.model_rebuild()
GetMarketMetricsExchangesExchangeAssetsVolumesLatestResponsePayloadDataItem.model_rebuild()
GetMarketMetricsExchangesExchangePairsVolumesHistoricalResponse.model_rebuild()
GetMarketMetricsExchangesExchangePairsVolumesHistoricalResponsePayload.model_rebuild()
GetMarketMetricsExchangesExchangePairsVolumesHistoricalResponsePayloadDataItem.model_rebuild()
GetMarketMetricsExchangesExchangePairsVolumesHistoricalResponsePayloadMetadata.model_rebuild()
GetMarketMetricsExchangesExchangePairsVolumesLatestResponse.model_rebuild()
GetMarketMetricsExchangesExchangePairsVolumesLatestResponsePayload.model_rebuild()
GetMarketMetricsExchangesExchangePairsVolumesLatestResponsePayloadDataItem.model_rebuild()
GetMarketMetricsAssetImpliedYieldLatestResponse.model_rebuild()
GetMarketMetricsAssetImpliedYieldLatestResponsePayloadItem.model_rebuild()
GetMarketMetricsAssetSupplyHistoricalResponse.model_rebuild()
GetMarketMetricsAssetSupplyHistoricalResponsePayload.model_rebuild()
GetMarketMetricsAssetSupplyHistoricalResponsePayloadDataItem.model_rebuild()
GetMarketMetricsAssetSupplyHistoricalResponsePayloadMetadata.model_rebuild()
GetMarketMetricsAssetSupplyLatestResponse.model_rebuild()
GetMarketMetricsAssetSupplyLatestResponsePayload.model_rebuild()
GetMarketMetricsInstrumentImpliedYieldHistoricalResponse.model_rebuild()
GetMarketMetricsInstrumentImpliedYieldHistoricalResponsePayloadItem.model_rebuild()
GetMarketMetricsSymbolHistoricalNvtResponse.model_rebuild()
GetMarketMetricsSymbolHistoricalNvtResponsePayload.model_rebuild()
GetMarketMetricsSymbolHistoricalNvtResponsePayloadMetadata.model_rebuild()
GetMarketMetricsSymbolHistoricalSharpeResponse.model_rebuild()
GetMarketMetricsSymbolHistoricalSharpeResponsePayload.model_rebuild()
GetMarketMetricsSymbolHistoricalSharpeResponsePayloadMetadata.model_rebuild()
GetMarketMetricsSymbolHistoricalStockToFlowResponse.model_rebuild()
GetMarketMetricsSymbolHistoricalStockToFlowResponsePayload.model_rebuild()
GetMarketMetricsSymbolHistoricalStockToFlowResponsePayloadMetadata.model_rebuild()
GetMarketMetricsSymbolLatestResponse.model_rebuild()
GetMarketMetricsSymbolLatestResponsePayload.model_rebuild()
GetMarketMetricsSymbolLatestResponsePayloadNvt.model_rebuild()
GetMarketMetricsSymbolLatestResponsePayloadSharpe.model_rebuild()
GetMarketMetricsSymbolLatestResponsePayloadStockToFlow.model_rebuild()
GetMarketOptionsOhlcvExchangeExchangeLatestResponse.model_rebuild()
GetMarketOptionsOhlcvExchangeExchangeLatestResponsePayloadItem.model_rebuild()
GetMarketOptionsOhlcvInstrumentLatestResponse.model_rebuild()
GetMarketOptionsOhlcvInstrumentLatestResponsePayloadItem.model_rebuild()
GetMarketOptionsOpenInterestExchangeExchangeLatestResponse.model_rebuild()
GetMarketOptionsOpenInterestExchangeExchangeLatestResponsePayloadItem.model_rebuild()
GetMarketOptionsOpenInterestInstrumentHistoricalResponse.model_rebuild()
GetMarketOptionsOpenInterestInstrumentHistoricalResponsePayload.model_rebuild()
GetMarketOptionsOpenInterestInstrumentHistoricalResponsePayloadDataItem.model_rebuild()
GetMarketOptionsOpenInterestInstrumentHistoricalResponsePayloadMetadata.model_rebuild()
GetMarketOptionsOpenInterestInstrumentLatestResponseObj0.model_rebuild()
GetMarketOptionsOpenInterestInstrumentLatestResponseObj0PayloadItem.model_rebuild()
GetMarketOptionsOpenInterestInstrumentLatestResponseObj1.model_rebuild()
GetMarketOptionsOpenInterestInstrumentLatestResponseObj1PayloadItem.model_rebuild()
GetMarketOptionsOpenInterestInstrumentLatestResponseObj1PayloadItemInstrument.model_rebuild()
GetMarketOptionsOpenInterestInstrumentLatestResponseObj1PayloadItemTradeStatistics.model_rebuild()
GetMarketOptionsTickersInstrumentLatestResponseObj0.model_rebuild()
GetMarketOptionsTickersInstrumentLatestResponseObj0PayloadItem.model_rebuild()
GetMarketOptionsTickersInstrumentLatestResponseObj0PayloadItemGreeks.model_rebuild()
GetMarketOptionsTickersInstrumentLatestResponseObj0PayloadItemStats.model_rebuild()
GetMarketOptionsTickersInstrumentLatestResponseObj1.model_rebuild()
GetMarketOptionsTickersInstrumentLatestResponseObj1PayloadItem.model_rebuild()
GetMarketOptionsTickersInstrumentLatestResponseObj1PayloadItemAskLevelItem.model_rebuild()
GetMarketOptionsTickersInstrumentLatestResponseObj1PayloadItemBidLevelItem.model_rebuild()
GetMarketOptionsTickersInstrumentLatestResponseObj1PayloadItemInstrument.model_rebuild()
GetMarketOptionsTradesInstrumentHistoricalResponse.model_rebuild()
GetMarketOptionsTradesInstrumentHistoricalResponsePayload.model_rebuild()
GetMarketOptionsTradesInstrumentHistoricalResponsePayloadDataItem.model_rebuild()
GetMarketOptionsTradesInstrumentHistoricalResponsePayloadDataItemInstrument.model_rebuild()
GetMarketOptionsTradesInstrumentHistoricalResponsePayloadDataItemTradeSummary.model_rebuild()
GetMarketOptionsTradesInstrumentHistoricalResponsePayloadDataItemTradeSummaryOrderQty.model_rebuild()
GetMarketOptionsTradesInstrumentHistoricalResponsePayloadMetadata.model_rebuild()
GetMarketSpotExchangesReferenceBody.model_rebuild()
GetMarketSpotOhlcvExchangeExchangeLatestResponse.model_rebuild()
GetMarketSpotOhlcvExchangeExchangeLatestResponsePayload.model_rebuild()
GetMarketSpotOhlcvExchangeExchangeLatestResponsePayloadBtcUsdt.model_rebuild()
GetMarketSpotOhlcvExchangeExchangeLatestResponsePayloadEthUsdt.model_rebuild()
GetMarketSpotPricesAssetsAssetLatestResponse.model_rebuild()
GetMarketSpotPricesAssetsAssetLatestResponsePayload.model_rebuild()
GetMarketSpotPricesPairsPairLatestResponse.model_rebuild()
GetMarketSpotPricesPairsPairLatestResponsePayload.model_rebuild()
GetMarketSpotReferenceQuotesPairHistoricalResponse.model_rebuild()
GetMarketSpotReferenceQuotesPairHistoricalResponsePayload.model_rebuild()
GetMarketSpotReferenceQuotesPairHistoricalResponsePayloadDataItem.model_rebuild()
GetMarketSpotTickersPairLatestResponse.model_rebuild()
GetMarketSpotTickersPairLatestResponsePayload.model_rebuild()
GetMarketSpotTickersPairLatestResponsePayloadBitfinex.model_rebuild()
GetMarketSpotTwapAssetsAssetLatestResponse.model_rebuild()
GetMarketSpotTwapAssetsAssetLatestResponsePayload.model_rebuild()
GetMarketSpotVwapAssetsAssetLatestResponse.model_rebuild()
GetMarketSpotVwapAssetsAssetLatestResponsePayload.model_rebuild()
GetMarketSwapsFundingRatesExchangeExchangeLatestResponse.model_rebuild()
GetMarketSwapsFundingRatesExchangeExchangeLatestResponsePayloadItem.model_rebuild()
GetMarketSwapsInsuranceFundInstrumentLatestResponse.model_rebuild()
GetMarketSwapsInsuranceFundInstrumentLatestResponsePayloadItem.model_rebuild()
GetMarketSwapsLiquidationsInstrumentLatestResponse.model_rebuild()
GetMarketSwapsLiquidationsInstrumentLatestResponsePayloadItem.model_rebuild()
GetMarketSwapsOhlcvExchangeExchangeLatestResponse.model_rebuild()
GetMarketSwapsOhlcvExchangeExchangeLatestResponsePayloadItem.model_rebuild()
GetMarketSwapsOhlcvInstrumentLatestResponse.model_rebuild()
GetMarketSwapsOhlcvInstrumentLatestResponsePayloadItem.model_rebuild()
GetMarketSwapsOpenInterestExchangeExchangeLatestResponse.model_rebuild()
GetMarketSwapsOpenInterestExchangeExchangeLatestResponsePayloadItem.model_rebuild()
GetMarketSwapsOpenInterestInstrumentLatestResponse.model_rebuild()
GetMarketSwapsOpenInterestInstrumentLatestResponsePayloadItem.model_rebuild()
GetMarketSwapsTickersInstrumentHistoricalResponse.model_rebuild()
GetMarketSwapsTickersInstrumentHistoricalResponsePayload.model_rebuild()
GetMarketSwapsTickersInstrumentHistoricalResponsePayloadDataItem.model_rebuild()
GetMarketSwapsTickersInstrumentHistoricalResponsePayloadMetadata.model_rebuild()
GetMarketSwapsTickersInstrumentLatestResponse.model_rebuild()
GetMarketSwapsTickersInstrumentLatestResponsePayloadItem.model_rebuild()
GetMarketTokensPricesSymbolLatestResponse.model_rebuild()
GetMarketTokensPricesSymbolLatestResponsePayloadItem.model_rebuild()
GetSignaturesHashResponse.model_rebuild()
GetSignaturesHashResponsePayloadItem.model_rebuild()
GetTokensMetricsSymbolLatestResponse.model_rebuild()
GetTokensMetricsSymbolLatestResponsePayload.model_rebuild()
GetTokensHashHoldersLatestResponse.model_rebuild()
GetTokensHashHoldersLatestResponsePayload.model_rebuild()
GetTokensHashHoldersLatestResponsePayloadRecordsItem.model_rebuild()
GetTokensHashSuppliesLatestResponse.model_rebuild()
GetTokensHashSuppliesLatestResponsePayload.model_rebuild()
GetTokensHashTransfersResponse.model_rebuild()
GetTokensHashTransfersResponsePayload.model_rebuild()
GetTokensHashTransfersResponsePayloadRecordsItem.model_rebuild()
GetTokensHashVelocityResponse.model_rebuild()
GetTokensHashVelocityResponsePayload.model_rebuild()
GetTokensHashVelocityResponsePayloadMetadata.model_rebuild()
GetTokensHashVolumeResponse.model_rebuild()
GetTokensHashVolumeResponsePayload.model_rebuild()
GetTokensHashVolumeResponsePayloadMetadata.model_rebuild()
GetTransactionsMetricsLatestResponse.model_rebuild()
GetTransactionsMetricsLatestResponsePayload.model_rebuild()
GetTransactionsVolumeResponse.model_rebuild()
GetTransactionsVolumeResponsePayload.model_rebuild()
GetTransactionsVolumeResponsePayloadMetadata.model_rebuild()
GetTransactionsHashResponse.model_rebuild()
GetTransactionsHashResponsePayload.model_rebuild()
GetTransactionsHashResponsePayloadFrom.model_rebuild()
GetTransactionsHashResponsePayloadStatusResult.model_rebuild()
GetTransactionsHashResponsePayloadToItem.model_rebuild()
GetTransactionsHashTokenTransfersResponse.model_rebuild()
GetTransactionsHashTokenTransfersResponsePayloadItem.model_rebuild()
GetUnclesHashResponse.model_rebuild()
GetUnclesHashResponsePayloadItem.model_rebuild()
