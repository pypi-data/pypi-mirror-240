[build-system]
requires = ["setuptools>=61.0", "versioningit"]
build-backend = "setuptools.build_meta"

[tool]
[tool.setuptools]
include-package-data = true
zip-safe = false

[tool.setuptools.packages.find]
where = ["src"]
namespaces = true

[tool.versioningit]
[tool.versioningit.vcs]
method = "git"
match = ["ver/[0-9]*.[0-9]*.[0-9]*"]
default-tag = "ver/0.0.0"

[tool.versioningit.tag2version]
rmprefix = "ver/"

[tool.versioningit.format]
distance = "{base_version}+{distance}-{revision}"
dirty = "{base_version}.dirty"
distance-dirty = "{base_version}+{distance}-{revision}.dirty"

[tool.versioningit.onbuild]
method = "replace-version"
regex = "^\\s*__version_details__\\s*=\\s*(?P<version>.*)"
require-match = true
replacement = "dict(\n    version=\"{version}\",\n    version_tuple={version_tuple},\n    author_date=\"{author_date:%Y.%m.%d}\",\n    build_date=\"{build_date:%Y.%m.%d}\",\n    branch=\"{branch}\",\n    distance=\"{distance}\",\n    head_commit_hash=\"{revision}\",\n)"
source-file = "src/testrepo123/__init__.py"
build-file = "testrepo123/__init__.py"

[tool.pylint]
[tool.pylint.main]
fail-under = 10
jobs = 0
limit-inference-results = 500
load-plugins = ["pylint.extensions.broad_try_clause", "pylint.extensions.code_style", "pylint.extensions.comparison_placement", "pylint.extensions.confusing_elif", "pylint.extensions.for_any_all", "pylint.extensions.consider_refactoring_into_while_condition", "pylint.extensions.consider_ternary_expression", "pylint.extensions.bad_builtin", "pylint.extensions.mccabe", "pylint.extensions.dict_init_mutate", "pylint.extensions.docstyle", "pylint.extensions.dunder", "pylint.extensions.check_elif", "pylint.extensions.empty_comment", "pylint.extensions.eq_without_hash", "pylint.extensions.private_import", "pylint.extensions.magic_value", "pylint.extensions.redefined_variable_type", "pylint.extensions.no_self_use", "pylint.extensions.overlapping_exceptions", "pylint.extensions.docparams", "pylint.extensions.redefined_loop_name", "pylint.extensions.set_membership", "pylint.extensions.typing", "pylint.extensions.while_used"]
persistent = true
py-version = "3.9"
recursive = true
source-roots = ["src"]

[tool.pylint.basic]
good-names = ["i", "j", "k", "x", "y", "z", "ex", "Run", "_"]

[tool.pylint.design]
max-args = 10
max-attributes = 20
max-bool-expr = 5
max-branches = 15
max-locals = 15
max-public-methods = 50
max-returns = 10
max-statements = 50
min-public-methods = 1

[tool.pylint.format]
max-line-length = 100
max-module-lines = 2000

[tool.pylint.imports]
import-graph = ".local/report/pylint/import_graph_total.svg"
int-import-graph = ".local/report/pylint/import_graph_internal.svg"
ext-import-graph = ".local/report/pylint/import_graph_external.svg"

[tool.pylint.logging]
logging-format-style = "new"

[tool.pylint."messages control"]
confidence = ["HIGH", "CONTROL_FLOW", "INFERENCE", "INFERENCE_FAILURE", "UNDEFINED"]

[tool.pylint.reports]
reports = true
score = true
msg-template = "{path}\nL[{line}:{end_line}] - Col[{column}:{end_column}] - Obj: {obj}\n\t{msg_id}: {category} - {symbol}\n\t{msg}\n"
output-format = ["json:.local/report/pylint/report_json.json", "text:.local/report/pylint/report_text.txt", "parseable:.local/report/pylint/report_parseable.txt", "msvs:.local/report/pylint/report_msvs.txt", "colorized"]

[tool.pylint.similarities]
ignore-comments = true
min-similarity-lines = 8

[tool.pytest.ini_options]
addopts = "-r a --verbose --color=yes --full-trace --cov --cov-config=pyproject.toml --cov-report=term-missing:skip-covered --cov-report=html --cov-report=xml --strict-config --strict-markers"
cache_dir = ".local/cache/pytest"
console_output_style = "count"
log_auto_indent = true
log_cli = true
log_cli_format = "%(levelname)s %(message)s"
log_cli_level = "INFO"
log_file = ".local/report/pytest/log.txt"
log_file_date_format = "%Y-%m-%d %H:%M:%S"
log_file_format = "%(asctime)s %(levelname)s %(message)s"
log_file_level = "DEBUG"
log_format = "%(asctime)s %(levelname)s %(message)s"
log_level = "DEBUG"
minversion = "7.4.2"
python_classes = ["Test*", "*Test"]
python_files = ["test_*.py", "tests_*.py", "*_test.py", "*_tests.py"]
python_functions = ["test_*", "tests_*", "*_test", "*_tests"]
required_plugins = ["pytest-cov>=4.1.0,<5"]
testpaths = ["tests"]

[tool.coverage]
[tool.coverage.run]
branch = true
data_file = ".local/cache/coverage/.coverage"
source_pkgs = ["testrepo123"]

[tool.coverage.report]
exclude_also = ["def __repr__", "if self\\.debug", "raise AssertionError", "raise NotImplementedError", "if 0:", "if __name__ == .__main__.:", "@(abc\\.)?abstractmethod"]
show_missing = true

[tool.coverage.html]
directory = ".local/report/coverage"

[tool.coverage.xml]
output = ".local/report/coverage/coverage.xml"

[tool.mypy]
packages = ["testrepo123"]
warn_return_any = true
strict = true
show_error_context = true
show_column_numbers = true
pretty = true
color_output = true
cache_dir = ".local/cache/mypy"
show_traceback = true
raise_exceptions = true
any_exprs_report = ".local/report/mypy"
html_report = ".local/report/mypy"
linecount_report = ".local/report/mypy"
linecoverage_report = ".local/report/mypy"
lineprecision_report = ".local/report/mypy"
txt_report = ".local/report/mypy"
verbosity = 2

[tool.bandit]
targets = ["src"]

[tool.ruff]
required-version = "0.1.5"
cache-dir = ".local/cache/ruff"
output-format = "grouped"
ignore-init-module-imports = true
line-length = 100
show-fixes = true
show-source = true
select = ["F", "E", "W", "N", "D", "UP", "YTT", "S", "BLE", "FBT", "B", "COM", "C4", "DTZ", "EM", "EXE", "ICN", "PIE", "PT", "RSE", "RET", "SIM", "ARG", "PTH", "TD", "FIX", "ERA", "PD", "PGH", "PL", "RUF"]
src = ["src", "tests"]
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]

[tool.ruff.lint.per-file-ignores]
"tests/src" = ["S101"]

[tool.ruff.flake8-annotations]
allow-star-arg-any = true
suppress-dummy-args = true
suppress-none-returning = true

[tool.ruff.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.flake8-quotes]
docstring-quotes = "single"
multiline-quotes = "single"

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.pylint]
max-args = 10
max-public-methods = 50
max-returns = 10

[tool.black]
required-version = "23.9.1"
target-version = ["py39", "py310", "py311", "py312"]
line-length = 100
verbose = true

[tool.isort]
profile = "black"
line_length = 100
src_paths = ["src", "tests"]
skip_gitignore = true
lines_before_imports = 2
lines_after_imports = 2
lines_between_sections = 0
verbose = true
color_output = true
only_modified = true
filter_files = true
no_lines_before = ["future", "stdlib", "thirdparty", "firstparty", "localfolder"]
dedup_headings = true
overwrite_in_place = true

[tool.isort.import_headings]
future = "Futures"
stdlib = "Standard libraries"
thirdparty = "Non-standard libraries"
firstparty = "Self"

[project]
name = "testrepo123"
dynamic = [
    'version',
]
description = "YOUR Tag HERE"
readme = "src/readme_pypi.md"
requires-python = ">= 3.9"
authors = [
    {name = "Armin Ariamajd"},
]
maintainers = [
    {name = "Armin Ariamajd"},
]
keywords = [
    'FIRST KEYWORD',
    'SECOND KEYWORD',
]
classifiers = [
    'License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)',
    'Natural Language :: English',
    'Operating System :: MacOS',
    'Operating System :: Microsoft :: Windows',
    'Operating System :: POSIX :: Linux',
    'Programming Language :: Python :: 3 :: Only',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.9',
    'Typing :: Typed',
]
dependencies = [
    'numpy >= 1.21.2',
]
license = {file = "LICENSE"}

[project.urls]
Homepage = "https://aariam.github.io/TestRepo123"
Download = "https://github.com/AAriam/TestRepo123/releases"
News = "https://aariam.github.io/TestRepo123/news"
Documentation = "https://aariam.github.io/TestRepo123"
Issue-Tracker = "https://github.com/AAriam/TestRepo123/issues"
Sponsor = "https://aariam.github.io/TestRepo123/contribute/collaborate/maintain/sponsor"
Source = "https://github.com/AAriam/TestRepo123"
