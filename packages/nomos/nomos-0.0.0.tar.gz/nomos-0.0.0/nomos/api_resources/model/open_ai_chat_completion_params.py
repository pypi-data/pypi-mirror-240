# coding: utf-8

"""
    Nomos API

    For more information on the Nomos API, please refer to the documentation at https://getnomos.com/docs/api.  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from nomos.api_resources import schemas  # noqa: F401


class OpenAIChatCompletionParams(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "model",
            "provider_name",
            "provider_function",
        }

        class properties:
            class provider_name(schemas.EnumBase, schemas.StrSchema):
                class MetaOapg:
                    enum_value_to_name = {
                        "openai": "OPENAI",
                    }

                @schemas.classproperty
                def OPENAI(cls):
                    return cls("openai")

            class provider_function(schemas.EnumBase, schemas.StrSchema):
                class MetaOapg:
                    enum_value_to_name = {
                        "chat_completion": "CHAT_COMPLETION",
                    }

                @schemas.classproperty
                def CHAT_COMPLETION(cls):
                    return cls("chat_completion")

            model = schemas.StrSchema

            class top_p(schemas.NumberSchema):
                class MetaOapg:
                    inclusive_maximum = 1
                    inclusive_minimum = 0
                    multiple_of = 0.1

            class temperature(schemas.NumberSchema):
                class MetaOapg:
                    inclusive_maximum = 2
                    inclusive_minimum = 0
                    multiple_of = 0.1

            class stop(
                schemas.ComposedSchema,
            ):
                class MetaOapg:
                    one_of_0 = schemas.StrSchema

                    class one_of_1(schemas.ListSchema):
                        class MetaOapg:
                            items = schemas.StrSchema

                        def __new__(
                            cls,
                            _arg: typing.Union[
                                typing.Tuple[
                                    typing.Union[
                                        MetaOapg.items,
                                        str,
                                    ]
                                ],
                                typing.List[
                                    typing.Union[
                                        MetaOapg.items,
                                        str,
                                    ]
                                ],
                            ],
                            _configuration: typing.Optional[
                                schemas.Configuration
                            ] = None,
                        ) -> "one_of_1":
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )

                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)

                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]

                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        bool,
                        None,
                        list,
                        tuple,
                        bytes,
                        io.FileIO,
                        io.BufferedReader,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[
                        schemas.AnyTypeSchema,
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        None,
                        list,
                        tuple,
                        bytes,
                    ],
                ) -> "stop":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )

            class max_tokens(schemas.IntSchema):
                class MetaOapg:
                    inclusive_minimum = 0

            class presence_penalty(schemas.NumberSchema):
                class MetaOapg:
                    inclusive_maximum = 2
                    inclusive_minimum = -2
                    multiple_of = 0.1

            class frequency_penalty(schemas.NumberSchema):
                class MetaOapg:
                    inclusive_maximum = 2
                    inclusive_minimum = -2
                    multiple_of = 0.1

            class logit_bias(schemas.DictSchema):
                class MetaOapg:
                    additional_properties = schemas.NumberSchema

                def __getitem__(
                    self, name: typing.Union[str,]
                ) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)

                def get_item_oapg(
                    self, name: typing.Union[str,]
                ) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)

                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[
                        MetaOapg.additional_properties,
                        decimal.Decimal,
                        int,
                        float,
                    ],
                ) -> "logit_bias":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )

            class function_call(
                schemas.ComposedSchema,
            ):
                class MetaOapg:
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            OpenAIFunctionCallValues,
                            OpenAIFunctionCallObject,
                        ]

                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        bool,
                        None,
                        list,
                        tuple,
                        bytes,
                        io.FileIO,
                        io.BufferedReader,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[
                        schemas.AnyTypeSchema,
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        None,
                        list,
                        tuple,
                        bytes,
                    ],
                ) -> "function_call":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )

            class functions(schemas.ListSchema):
                class MetaOapg:
                    @staticmethod
                    def items() -> typing.Type["OpenAIFunction"]:
                        return OpenAIFunction

                def __new__(
                    cls,
                    _arg: typing.Union[
                        typing.Tuple["OpenAIFunction"], typing.List["OpenAIFunction"]
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "functions":
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> "OpenAIFunction":
                    return super().__getitem__(i)

            user = schemas.StrSchema
            __annotations__ = {
                "provider_name": provider_name,
                "provider_function": provider_function,
                "model": model,
                "top_p": top_p,
                "temperature": temperature,
                "stop": stop,
                "max_tokens": max_tokens,
                "presence_penalty": presence_penalty,
                "frequency_penalty": frequency_penalty,
                "logit_bias": logit_bias,
                "function_call": function_call,
                "functions": functions,
                "user": user,
            }

    model: MetaOapg.properties.model
    provider_name: MetaOapg.properties.provider_name
    provider_function: MetaOapg.properties.provider_function

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["provider_name"]
    ) -> MetaOapg.properties.provider_name:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["provider_function"]
    ) -> MetaOapg.properties.provider_function:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["model"]
    ) -> MetaOapg.properties.model:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["top_p"]
    ) -> MetaOapg.properties.top_p:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["temperature"]
    ) -> MetaOapg.properties.temperature:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["stop"]
    ) -> MetaOapg.properties.stop:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["max_tokens"]
    ) -> MetaOapg.properties.max_tokens:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["presence_penalty"]
    ) -> MetaOapg.properties.presence_penalty:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["frequency_penalty"]
    ) -> MetaOapg.properties.frequency_penalty:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["logit_bias"]
    ) -> MetaOapg.properties.logit_bias:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["function_call"]
    ) -> MetaOapg.properties.function_call:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["functions"]
    ) -> MetaOapg.properties.functions:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["user"]
    ) -> MetaOapg.properties.user:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "provider_name",
                "provider_function",
                "model",
                "top_p",
                "temperature",
                "stop",
                "max_tokens",
                "presence_penalty",
                "frequency_penalty",
                "logit_bias",
                "function_call",
                "functions",
                "user",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["provider_name"]
    ) -> MetaOapg.properties.provider_name:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["provider_function"]
    ) -> MetaOapg.properties.provider_function:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["model"]
    ) -> MetaOapg.properties.model:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["top_p"]
    ) -> typing.Union[MetaOapg.properties.top_p, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["temperature"]
    ) -> typing.Union[MetaOapg.properties.temperature, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["stop"]
    ) -> typing.Union[MetaOapg.properties.stop, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["max_tokens"]
    ) -> typing.Union[MetaOapg.properties.max_tokens, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["presence_penalty"]
    ) -> typing.Union[MetaOapg.properties.presence_penalty, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["frequency_penalty"]
    ) -> typing.Union[MetaOapg.properties.frequency_penalty, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["logit_bias"]
    ) -> typing.Union[MetaOapg.properties.logit_bias, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["function_call"]
    ) -> typing.Union[MetaOapg.properties.function_call, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["functions"]
    ) -> typing.Union[MetaOapg.properties.functions, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["user"]
    ) -> typing.Union[MetaOapg.properties.user, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "provider_name",
                "provider_function",
                "model",
                "top_p",
                "temperature",
                "stop",
                "max_tokens",
                "presence_penalty",
                "frequency_penalty",
                "logit_bias",
                "function_call",
                "functions",
                "user",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        model: typing.Union[
            MetaOapg.properties.model,
            str,
        ],
        provider_name: typing.Union[
            MetaOapg.properties.provider_name,
            str,
        ],
        provider_function: typing.Union[
            MetaOapg.properties.provider_function,
            str,
        ],
        top_p: typing.Union[
            MetaOapg.properties.top_p, decimal.Decimal, int, float, schemas.Unset
        ] = schemas.unset,
        temperature: typing.Union[
            MetaOapg.properties.temperature, decimal.Decimal, int, float, schemas.Unset
        ] = schemas.unset,
        stop: typing.Union[
            MetaOapg.properties.stop,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            bool,
            None,
            list,
            tuple,
            bytes,
            io.FileIO,
            io.BufferedReader,
            schemas.Unset,
        ] = schemas.unset,
        max_tokens: typing.Union[
            MetaOapg.properties.max_tokens, decimal.Decimal, int, schemas.Unset
        ] = schemas.unset,
        presence_penalty: typing.Union[
            MetaOapg.properties.presence_penalty,
            decimal.Decimal,
            int,
            float,
            schemas.Unset,
        ] = schemas.unset,
        frequency_penalty: typing.Union[
            MetaOapg.properties.frequency_penalty,
            decimal.Decimal,
            int,
            float,
            schemas.Unset,
        ] = schemas.unset,
        logit_bias: typing.Union[
            MetaOapg.properties.logit_bias, dict, frozendict.frozendict, schemas.Unset
        ] = schemas.unset,
        function_call: typing.Union[
            MetaOapg.properties.function_call,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            bool,
            None,
            list,
            tuple,
            bytes,
            io.FileIO,
            io.BufferedReader,
            schemas.Unset,
        ] = schemas.unset,
        functions: typing.Union[
            MetaOapg.properties.functions, list, tuple, schemas.Unset
        ] = schemas.unset,
        user: typing.Union[
            MetaOapg.properties.user, str, schemas.Unset
        ] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "OpenAIChatCompletionParams":
        return super().__new__(
            cls,
            *_args,
            model=model,
            provider_name=provider_name,
            provider_function=provider_function,
            top_p=top_p,
            temperature=temperature,
            stop=stop,
            max_tokens=max_tokens,
            presence_penalty=presence_penalty,
            frequency_penalty=frequency_penalty,
            logit_bias=logit_bias,
            function_call=function_call,
            functions=functions,
            user=user,
            _configuration=_configuration,
            **kwargs,
        )


from nomos.api_resources.model.open_ai_function import OpenAIFunction
from nomos.api_resources.model.open_ai_function_call_object import (
    OpenAIFunctionCallObject,
)
from nomos.api_resources.model.open_ai_function_call_values import (
    OpenAIFunctionCallValues,
)
