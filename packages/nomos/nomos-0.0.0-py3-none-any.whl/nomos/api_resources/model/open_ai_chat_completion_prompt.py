# coding: utf-8

"""
    Nomos API

    For more information on the Nomos API, please refer to the documentation at https://getnomos.com/docs/api.  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from nomos.api_resources import schemas  # noqa: F401


class OpenAIChatCompletionPrompt(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "messages",
            "provider_name",
            "provider_function",
        }

        class properties:
            class provider_name(schemas.EnumBase, schemas.StrSchema):
                class MetaOapg:
                    enum_value_to_name = {
                        "openai": "OPENAI",
                    }

                @schemas.classproperty
                def OPENAI(cls):
                    return cls("openai")

            class provider_function(schemas.EnumBase, schemas.StrSchema):
                class MetaOapg:
                    enum_value_to_name = {
                        "chat_completion": "CHAT_COMPLETION",
                    }

                @schemas.classproperty
                def CHAT_COMPLETION(cls):
                    return cls("chat_completion")

            class messages(schemas.ListSchema):
                class MetaOapg:
                    class items(schemas.DictSchema):
                        class MetaOapg:
                            required = {
                                "role",
                            }

                            class properties:
                                class role(schemas.EnumBase, schemas.StrSchema):
                                    class MetaOapg:
                                        enum_value_to_name = {
                                            "system": "SYSTEM",
                                            "user": "USER",
                                            "assistant": "ASSISTANT",
                                            "function": "FUNCTION",
                                        }

                                    @schemas.classproperty
                                    def SYSTEM(cls):
                                        return cls("system")

                                    @schemas.classproperty
                                    def USER(cls):
                                        return cls("user")

                                    @schemas.classproperty
                                    def ASSISTANT(cls):
                                        return cls("assistant")

                                    @schemas.classproperty
                                    def FUNCTION(cls):
                                        return cls("function")

                                content = schemas.StrSchema
                                name = schemas.StrSchema

                                class function_call(schemas.DictSchema):
                                    class MetaOapg:
                                        required = {
                                            "name",
                                            "arguments",
                                        }

                                        class properties:
                                            name = schemas.StrSchema
                                            arguments = schemas.StrSchema
                                            __annotations__ = {
                                                "name": name,
                                                "arguments": arguments,
                                            }

                                    name: MetaOapg.properties.name
                                    arguments: MetaOapg.properties.arguments

                                    @typing.overload
                                    def __getitem__(
                                        self, name: typing_extensions.Literal["name"]
                                    ) -> MetaOapg.properties.name:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self,
                                        name: typing_extensions.Literal["arguments"],
                                    ) -> MetaOapg.properties.arguments:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: str
                                    ) -> schemas.UnsetAnyTypeSchema:
                                        ...

                                    def __getitem__(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "name",
                                                "arguments",
                                            ],
                                            str,
                                        ],
                                    ):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: typing_extensions.Literal["name"]
                                    ) -> MetaOapg.properties.name:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self,
                                        name: typing_extensions.Literal["arguments"],
                                    ) -> MetaOapg.properties.arguments:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: str
                                    ) -> typing.Union[
                                        schemas.UnsetAnyTypeSchema, schemas.Unset
                                    ]:
                                        ...

                                    def get_item_oapg(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "name",
                                                "arguments",
                                            ],
                                            str,
                                        ],
                                    ):
                                        return super().get_item_oapg(name)

                                    def __new__(
                                        cls,
                                        *_args: typing.Union[
                                            dict,
                                            frozendict.frozendict,
                                        ],
                                        name: typing.Union[
                                            MetaOapg.properties.name,
                                            str,
                                        ],
                                        arguments: typing.Union[
                                            MetaOapg.properties.arguments,
                                            str,
                                        ],
                                        _configuration: typing.Optional[
                                            schemas.Configuration
                                        ] = None,
                                        **kwargs: typing.Union[
                                            schemas.AnyTypeSchema,
                                            dict,
                                            frozendict.frozendict,
                                            str,
                                            date,
                                            datetime,
                                            uuid.UUID,
                                            int,
                                            float,
                                            decimal.Decimal,
                                            None,
                                            list,
                                            tuple,
                                            bytes,
                                        ],
                                    ) -> "function_call":
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            name=name,
                                            arguments=arguments,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )

                                __annotations__ = {
                                    "role": role,
                                    "content": content,
                                    "name": name,
                                    "function_call": function_call,
                                }

                        role: MetaOapg.properties.role

                        @typing.overload
                        def __getitem__(
                            self, name: typing_extensions.Literal["role"]
                        ) -> MetaOapg.properties.role:
                            ...

                        @typing.overload
                        def __getitem__(
                            self, name: typing_extensions.Literal["content"]
                        ) -> MetaOapg.properties.content:
                            ...

                        @typing.overload
                        def __getitem__(
                            self, name: typing_extensions.Literal["name"]
                        ) -> MetaOapg.properties.name:
                            ...

                        @typing.overload
                        def __getitem__(
                            self, name: typing_extensions.Literal["function_call"]
                        ) -> MetaOapg.properties.function_call:
                            ...

                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
                            ...

                        def __getitem__(
                            self,
                            name: typing.Union[
                                typing_extensions.Literal[
                                    "role",
                                    "content",
                                    "name",
                                    "function_call",
                                ],
                                str,
                            ],
                        ):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)

                        @typing.overload
                        def get_item_oapg(
                            self, name: typing_extensions.Literal["role"]
                        ) -> MetaOapg.properties.role:
                            ...

                        @typing.overload
                        def get_item_oapg(
                            self, name: typing_extensions.Literal["content"]
                        ) -> typing.Union[MetaOapg.properties.content, schemas.Unset]:
                            ...

                        @typing.overload
                        def get_item_oapg(
                            self, name: typing_extensions.Literal["name"]
                        ) -> typing.Union[MetaOapg.properties.name, schemas.Unset]:
                            ...

                        @typing.overload
                        def get_item_oapg(
                            self, name: typing_extensions.Literal["function_call"]
                        ) -> typing.Union[
                            MetaOapg.properties.function_call, schemas.Unset
                        ]:
                            ...

                        @typing.overload
                        def get_item_oapg(
                            self, name: str
                        ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
                            ...

                        def get_item_oapg(
                            self,
                            name: typing.Union[
                                typing_extensions.Literal[
                                    "role",
                                    "content",
                                    "name",
                                    "function_call",
                                ],
                                str,
                            ],
                        ):
                            return super().get_item_oapg(name)

                        def __new__(
                            cls,
                            *_args: typing.Union[
                                dict,
                                frozendict.frozendict,
                            ],
                            role: typing.Union[
                                MetaOapg.properties.role,
                                str,
                            ],
                            content: typing.Union[
                                MetaOapg.properties.content, str, schemas.Unset
                            ] = schemas.unset,
                            name: typing.Union[
                                MetaOapg.properties.name, str, schemas.Unset
                            ] = schemas.unset,
                            function_call: typing.Union[
                                MetaOapg.properties.function_call,
                                dict,
                                frozendict.frozendict,
                                schemas.Unset,
                            ] = schemas.unset,
                            _configuration: typing.Optional[
                                schemas.Configuration
                            ] = None,
                            **kwargs: typing.Union[
                                schemas.AnyTypeSchema,
                                dict,
                                frozendict.frozendict,
                                str,
                                date,
                                datetime,
                                uuid.UUID,
                                int,
                                float,
                                decimal.Decimal,
                                None,
                                list,
                                tuple,
                                bytes,
                            ],
                        ) -> "items":
                            return super().__new__(
                                cls,
                                *_args,
                                role=role,
                                content=content,
                                name=name,
                                function_call=function_call,
                                _configuration=_configuration,
                                **kwargs,
                            )

                def __new__(
                    cls,
                    _arg: typing.Union[
                        typing.Tuple[
                            typing.Union[
                                MetaOapg.items,
                                dict,
                                frozendict.frozendict,
                            ]
                        ],
                        typing.List[
                            typing.Union[
                                MetaOapg.items,
                                dict,
                                frozendict.frozendict,
                            ]
                        ],
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "messages":
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)

            __annotations__ = {
                "provider_name": provider_name,
                "provider_function": provider_function,
                "messages": messages,
            }

    messages: MetaOapg.properties.messages
    provider_name: MetaOapg.properties.provider_name
    provider_function: MetaOapg.properties.provider_function

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["provider_name"]
    ) -> MetaOapg.properties.provider_name:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["provider_function"]
    ) -> MetaOapg.properties.provider_function:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["messages"]
    ) -> MetaOapg.properties.messages:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "provider_name",
                "provider_function",
                "messages",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["provider_name"]
    ) -> MetaOapg.properties.provider_name:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["provider_function"]
    ) -> MetaOapg.properties.provider_function:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["messages"]
    ) -> MetaOapg.properties.messages:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "provider_name",
                "provider_function",
                "messages",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        messages: typing.Union[
            MetaOapg.properties.messages,
            list,
            tuple,
        ],
        provider_name: typing.Union[
            MetaOapg.properties.provider_name,
            str,
        ],
        provider_function: typing.Union[
            MetaOapg.properties.provider_function,
            str,
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "OpenAIChatCompletionPrompt":
        return super().__new__(
            cls,
            *_args,
            messages=messages,
            provider_name=provider_name,
            provider_function=provider_function,
            _configuration=_configuration,
            **kwargs,
        )
