# coding: utf-8

"""
    Nomos API

    For more information on the Nomos API, please refer to the documentation at https://getnomos.com/docs/api.  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from nomos.api_resources import schemas  # noqa: F401


class OpenAICompletionPrompt(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "provider_name",
            "content",
            "provider_function",
        }

        class properties:
            class provider_name(schemas.EnumBase, schemas.StrSchema):
                class MetaOapg:
                    enum_value_to_name = {
                        "openai": "OPENAI",
                    }

                @schemas.classproperty
                def OPENAI(cls):
                    return cls("openai")

            class provider_function(schemas.EnumBase, schemas.StrSchema):
                class MetaOapg:
                    enum_value_to_name = {
                        "completion": "COMPLETION",
                    }

                @schemas.classproperty
                def COMPLETION(cls):
                    return cls("completion")

            content = schemas.StrSchema
            __annotations__ = {
                "provider_name": provider_name,
                "provider_function": provider_function,
                "content": content,
            }

    provider_name: MetaOapg.properties.provider_name
    content: MetaOapg.properties.content
    provider_function: MetaOapg.properties.provider_function

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["provider_name"]
    ) -> MetaOapg.properties.provider_name:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["provider_function"]
    ) -> MetaOapg.properties.provider_function:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["content"]
    ) -> MetaOapg.properties.content:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "provider_name",
                "provider_function",
                "content",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["provider_name"]
    ) -> MetaOapg.properties.provider_name:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["provider_function"]
    ) -> MetaOapg.properties.provider_function:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["content"]
    ) -> MetaOapg.properties.content:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "provider_name",
                "provider_function",
                "content",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        provider_name: typing.Union[
            MetaOapg.properties.provider_name,
            str,
        ],
        content: typing.Union[
            MetaOapg.properties.content,
            str,
        ],
        provider_function: typing.Union[
            MetaOapg.properties.provider_function,
            str,
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "OpenAICompletionPrompt":
        return super().__new__(
            cls,
            *_args,
            provider_name=provider_name,
            content=content,
            provider_function=provider_function,
            _configuration=_configuration,
            **kwargs,
        )
