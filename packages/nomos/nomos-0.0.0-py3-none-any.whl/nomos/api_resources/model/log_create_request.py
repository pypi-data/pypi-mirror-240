# coding: utf-8

"""
    Nomos API

    For more information on the Nomos API, please refer to the documentation at https://getnomos.com/docs/api.  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from nomos.api_resources import schemas  # noqa: F401


class LogCreateRequest(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    LogCreateRequest defines the request schema for `/log/create`
    """

    class MetaOapg:
        required = {
            "log_id",
            "request_start_time",
            "request_body",
            "response_status",
            "group_id",
            "provider",
            "response",
            "request_end_time",
            "request_path",
            "model",
        }

        class properties:
            log_id = schemas.UUIDSchema
            group_id = schemas.UUIDSchema
            provider = schemas.StrSchema
            model = schemas.StrSchema
            request_path = schemas.StrSchema
            request_body = schemas.DictSchema

            @staticmethod
            def response_status() -> typing.Type["LogResponseStatus"]:
                return LogResponseStatus

            response = schemas.DictSchema
            request_start_time = schemas.DateTimeSchema
            request_end_time = schemas.DateTimeSchema
            tags = schemas.DictSchema
            project_id = schemas.UUIDSchema
            project_version_id = schemas.UUIDSchema
            variables_dataset_id = schemas.UUIDSchema
            parent_log_id = schemas.UUIDSchema

            @staticmethod
            def variables() -> typing.Type["Variables"]:
                return Variables

            __annotations__ = {
                "log_id": log_id,
                "group_id": group_id,
                "provider": provider,
                "model": model,
                "request_path": request_path,
                "request_body": request_body,
                "response_status": response_status,
                "response": response,
                "request_start_time": request_start_time,
                "request_end_time": request_end_time,
                "tags": tags,
                "project_id": project_id,
                "project_version_id": project_version_id,
                "variables_dataset_id": variables_dataset_id,
                "parent_log_id": parent_log_id,
                "variables": variables,
            }

    log_id: MetaOapg.properties.log_id
    request_start_time: MetaOapg.properties.request_start_time
    request_body: MetaOapg.properties.request_body
    response_status: "LogResponseStatus"
    group_id: MetaOapg.properties.group_id
    provider: MetaOapg.properties.provider
    response: MetaOapg.properties.response
    request_end_time: MetaOapg.properties.request_end_time
    request_path: MetaOapg.properties.request_path
    model: MetaOapg.properties.model

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["log_id"]
    ) -> MetaOapg.properties.log_id:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["group_id"]
    ) -> MetaOapg.properties.group_id:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["provider"]
    ) -> MetaOapg.properties.provider:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["model"]
    ) -> MetaOapg.properties.model:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["request_path"]
    ) -> MetaOapg.properties.request_path:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["request_body"]
    ) -> MetaOapg.properties.request_body:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["response_status"]
    ) -> "LogResponseStatus":
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["response"]
    ) -> MetaOapg.properties.response:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["request_start_time"]
    ) -> MetaOapg.properties.request_start_time:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["request_end_time"]
    ) -> MetaOapg.properties.request_end_time:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["tags"]
    ) -> MetaOapg.properties.tags:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["project_id"]
    ) -> MetaOapg.properties.project_id:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["project_version_id"]
    ) -> MetaOapg.properties.project_version_id:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["variables_dataset_id"]
    ) -> MetaOapg.properties.variables_dataset_id:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["parent_log_id"]
    ) -> MetaOapg.properties.parent_log_id:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["variables"]) -> "Variables":
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "log_id",
                "group_id",
                "provider",
                "model",
                "request_path",
                "request_body",
                "response_status",
                "response",
                "request_start_time",
                "request_end_time",
                "tags",
                "project_id",
                "project_version_id",
                "variables_dataset_id",
                "parent_log_id",
                "variables",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["log_id"]
    ) -> MetaOapg.properties.log_id:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["group_id"]
    ) -> MetaOapg.properties.group_id:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["provider"]
    ) -> MetaOapg.properties.provider:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["model"]
    ) -> MetaOapg.properties.model:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["request_path"]
    ) -> MetaOapg.properties.request_path:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["request_body"]
    ) -> MetaOapg.properties.request_body:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["response_status"]
    ) -> "LogResponseStatus":
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["response"]
    ) -> MetaOapg.properties.response:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["request_start_time"]
    ) -> MetaOapg.properties.request_start_time:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["request_end_time"]
    ) -> MetaOapg.properties.request_end_time:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["tags"]
    ) -> typing.Union[MetaOapg.properties.tags, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["project_id"]
    ) -> typing.Union[MetaOapg.properties.project_id, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["project_version_id"]
    ) -> typing.Union[MetaOapg.properties.project_version_id, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["variables_dataset_id"]
    ) -> typing.Union[MetaOapg.properties.variables_dataset_id, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["parent_log_id"]
    ) -> typing.Union[MetaOapg.properties.parent_log_id, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["variables"]
    ) -> typing.Union["Variables", schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "log_id",
                "group_id",
                "provider",
                "model",
                "request_path",
                "request_body",
                "response_status",
                "response",
                "request_start_time",
                "request_end_time",
                "tags",
                "project_id",
                "project_version_id",
                "variables_dataset_id",
                "parent_log_id",
                "variables",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        log_id: typing.Union[
            MetaOapg.properties.log_id,
            str,
            uuid.UUID,
        ],
        request_start_time: typing.Union[
            MetaOapg.properties.request_start_time,
            str,
            datetime,
        ],
        request_body: typing.Union[
            MetaOapg.properties.request_body,
            dict,
            frozendict.frozendict,
        ],
        response_status: "LogResponseStatus",
        group_id: typing.Union[
            MetaOapg.properties.group_id,
            str,
            uuid.UUID,
        ],
        provider: typing.Union[
            MetaOapg.properties.provider,
            str,
        ],
        response: typing.Union[
            MetaOapg.properties.response,
            dict,
            frozendict.frozendict,
        ],
        request_end_time: typing.Union[
            MetaOapg.properties.request_end_time,
            str,
            datetime,
        ],
        request_path: typing.Union[
            MetaOapg.properties.request_path,
            str,
        ],
        model: typing.Union[
            MetaOapg.properties.model,
            str,
        ],
        tags: typing.Union[
            MetaOapg.properties.tags, dict, frozendict.frozendict, schemas.Unset
        ] = schemas.unset,
        project_id: typing.Union[
            MetaOapg.properties.project_id, str, uuid.UUID, schemas.Unset
        ] = schemas.unset,
        project_version_id: typing.Union[
            MetaOapg.properties.project_version_id, str, uuid.UUID, schemas.Unset
        ] = schemas.unset,
        variables_dataset_id: typing.Union[
            MetaOapg.properties.variables_dataset_id, str, uuid.UUID, schemas.Unset
        ] = schemas.unset,
        parent_log_id: typing.Union[
            MetaOapg.properties.parent_log_id, str, uuid.UUID, schemas.Unset
        ] = schemas.unset,
        variables: typing.Union["Variables", schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "LogCreateRequest":
        return super().__new__(
            cls,
            *_args,
            log_id=log_id,
            request_start_time=request_start_time,
            request_body=request_body,
            response_status=response_status,
            group_id=group_id,
            provider=provider,
            response=response,
            request_end_time=request_end_time,
            request_path=request_path,
            model=model,
            tags=tags,
            project_id=project_id,
            project_version_id=project_version_id,
            variables_dataset_id=variables_dataset_id,
            parent_log_id=parent_log_id,
            variables=variables,
            _configuration=_configuration,
            **kwargs,
        )


from nomos.api_resources.model.log_response_status import LogResponseStatus
from nomos.api_resources.model.variables import Variables
