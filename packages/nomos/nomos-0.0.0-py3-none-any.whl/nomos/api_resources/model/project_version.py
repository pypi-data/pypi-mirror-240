# coding: utf-8

"""
    Nomos API

    For more information on the Nomos API, please refer to the documentation at https://getnomos.com/docs/api.  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from nomos.api_resources import schemas  # noqa: F401


class ProjectVersion(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A version of your Nomos project. Corresponds to a set of Tasks.
    """

    class MetaOapg:
        required = {
            "project_id",
            "id",
            "title",
            "tasks",
        }

        class properties:
            id = schemas.UUIDSchema
            project_id = schemas.UUIDSchema
            title = schemas.StrSchema

            class tasks(schemas.ListSchema):
                class MetaOapg:
                    min_items = 1

                    @staticmethod
                    def items() -> typing.Type["Task"]:
                        return Task

                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple["Task"], typing.List["Task"]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "tasks":
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> "Task":
                    return super().__getitem__(i)

            description = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "project_id": project_id,
                "title": title,
                "tasks": tasks,
                "description": description,
            }

    project_id: MetaOapg.properties.project_id
    id: MetaOapg.properties.id
    title: MetaOapg.properties.title
    tasks: MetaOapg.properties.tasks

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["id"]
    ) -> MetaOapg.properties.id:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["project_id"]
    ) -> MetaOapg.properties.project_id:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["title"]
    ) -> MetaOapg.properties.title:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["tasks"]
    ) -> MetaOapg.properties.tasks:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["description"]
    ) -> MetaOapg.properties.description:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "id",
                "project_id",
                "title",
                "tasks",
                "description",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["id"]
    ) -> MetaOapg.properties.id:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["project_id"]
    ) -> MetaOapg.properties.project_id:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["title"]
    ) -> MetaOapg.properties.title:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["tasks"]
    ) -> MetaOapg.properties.tasks:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["description"]
    ) -> typing.Union[MetaOapg.properties.description, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "id",
                "project_id",
                "title",
                "tasks",
                "description",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        project_id: typing.Union[
            MetaOapg.properties.project_id,
            str,
            uuid.UUID,
        ],
        id: typing.Union[
            MetaOapg.properties.id,
            str,
            uuid.UUID,
        ],
        title: typing.Union[
            MetaOapg.properties.title,
            str,
        ],
        tasks: typing.Union[
            MetaOapg.properties.tasks,
            list,
            tuple,
        ],
        description: typing.Union[
            MetaOapg.properties.description, str, schemas.Unset
        ] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "ProjectVersion":
        return super().__new__(
            cls,
            *_args,
            project_id=project_id,
            id=id,
            title=title,
            tasks=tasks,
            description=description,
            _configuration=_configuration,
            **kwargs,
        )


from nomos.api_resources.model.task import Task
