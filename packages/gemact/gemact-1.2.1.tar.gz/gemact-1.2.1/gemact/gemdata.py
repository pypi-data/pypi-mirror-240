from .libraries import *

"""Triangle of individual payments"""
incremental_payments = np.array(
        [[28446, 31963, 37775, 40418, 44116, 50294, 49620, 46410, 48295, 52590, 58599, 60361],
        [29251, 36106, 40125, 44499, 45490, 48040, 49991, 49694, 49354, 50606, 53743, np.nan],
        [12464, 13441, 12951, 15370, 15339, 17843, 19570, 20881, 18304, 18604, np.nan, np.nan],
        [5144, 5868, 6034, 5594, 5478, 7035, 10047, 8202, 8833, np.nan, np.nan, np.nan],
        [2727, 2882, 3010, 2616, 2541, 3934, 5750, 4714, np.nan, np.nan, np.nan, np.nan],
        [2359, 2422, 1264, 1984, 2906, 2726, 3313, np.nan, np.nan, np.nan, np.nan, np.nan],
        [1334, 918, 1250, 2137, 1294, 2267, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],
        [1238, 1076, 1135, 1184, 1124, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],
        [941, 734, 904, 873, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],
        [860, 458, 559, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],
        [282, 456, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],
        [727, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan]]
        ).T


"""Triangle of individual payments, simulated with SYNTHEtic"""
incremental_payments_sim= np.array([[1.96913066e+08, 4.61268594e+08, 4.07076958e+08, 3.75281224e+08,
        2.92597211e+08, 2.42035330e+08, 2.04368146e+08, 1.72229626e+08,
        1.58802386e+08],
       [1.97500955e+08, 4.51712783e+08, 4.26662651e+08, 3.70143209e+08,
        3.19893168e+08, 2.38682876e+08, 2.08229879e+08, 1.74993281e+08,
        1.72032424e+08],
       [2.00334338e+08, 4.60568698e+08, 4.23989036e+08, 3.52836891e+08,
        3.07249291e+08, 2.56826193e+08, 2.18767919e+08, 1.70587727e+08,
        1.57403303e+08],
       [1.77031498e+08, 4.56016313e+08, 3.96328104e+08, 3.50598297e+08,
        3.09937880e+08, 2.56842193e+08, 2.13701781e+08, 1.70141928e+08,
        1.55195165e+08],
       [1.85363556e+08, 4.75166115e+08, 4.24093993e+08, 3.44776132e+08,
        2.92557807e+08, 2.36169055e+08, 2.09030848e+08, 1.67818582e+08,
        1.41913656e+08],
       [1.90345770e+08, 4.73267046e+08, 4.52868871e+08, 3.62900144e+08,
        2.91766694e+08, 2.53397609e+08, 2.12080430e+08, 1.69571204e+08,
        1.64020552e+08],
       [1.93036862e+08, 4.27152023e+08, 4.10107272e+08, 3.69588864e+08,
        3.09348813e+08, 2.61023204e+08, 1.99995647e+08, 1.77957928e+08,
        1.47014932e+08],
       [1.74740844e+08, 4.70836903e+08, 4.18681538e+08, 3.52925538e+08,
        3.01554322e+08, 2.41132230e+08, 2.10502665e+08, 1.82518866e+08,
        1.59729651e+08],
       [1.80063732e+08, 4.71431974e+08, 4.56799698e+08, 3.68696960e+08,
        3.04469804e+08, 2.29630053e+08, 2.15258201e+08, 1.83256640e+08,
        1.52692795e+08]])

"""Triangle of claim payments numbers"""
payments_number = np.array(
        [[34433, 35475, 37004, 37038, 36849, 39171, 37492, 34188, 31308, 30357, 30717, 30590],
        [13796, 13718, 13820, 13631, 13416, 12601, 12282, 12245, 10743, 10117, 11081, np.nan],
        [1589, 1501, 1527, 1463, 1564, 1592, 2057, 1938, 1908, 1611, np.nan, np.nan],
        [568, 548, 436, 500, 422, 559, 739, 761, 639, np.nan, np.nan, np.nan],
        [278, 209, 194, 164, 182, 273, 391, 295, np.nan, np.nan, np.nan, np.nan],
        [152, 134, 72, 80, 107, 175, 287, np.nan, np.nan, np.nan, np.nan, np.nan],
        [104, 51, 46, 63, 81, 155, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],
        [55, 44, 29, 40, 42, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],
        [30, 27, 17, 26, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],
        [31, 20, 17, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],
        [18, 16, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],
        [19, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan]]
        ).T

"""Triangle of claim payments numbers simulated with SYNTHEtic"""
payments_number_sim=np.array([[ 9935., 20990., 16168., 12122.,  9005.,  6990.,  5573.,  4406.,
         3561.],
       [10042., 21025., 16477., 12196.,  9338.,  7104.,  5591.,  4504.,
         3608.],
       [10028., 21058., 16397., 12211.,  9323.,  7190.,  5578.,  4398.,
         3486.],
       [ 9533., 20981., 16065., 12078.,  9176.,  7231.,  5648.,  4399.,
         3470.],
       [ 9854., 21077., 16008., 11882.,  8975.,  6728.,  5271.,  4208.,
         3488.],
       [10170., 21219., 16478., 12066.,  9321.,  7073.,  5600.,  4325.,
         3400.],
       [10225., 20899., 16157., 12136.,  9274.,  7057.,  5526.,  4464.,
         3607.],
       [ 9738., 21220., 16328., 12161.,  9261.,  6986.,  5502.,  4493.,
         3663.],
       [ 9745., 21577., 16488., 12167.,  9117.,  6797.,  5452.,  4257.,
         3396.]])

"""Triangle of open numbers"""
open_number = np.array(
        [[19508, 18794, 18099, 17565, 17207, 16775, 17413, 17714, 15417, 14126, 15481, 15178],
        [4038, 3310, 2854, 2732, 2642, 3170, 4396, 4325, 3872, 3751, 3931, np.nan],
        [1374, 1114, 838, 875, 869, 1310, 1900, 1885, 1807, 1895, np.nan, np.nan],
        [727, 529, 395, 395, 474, 758, 1056, 1006, 1050, np.nan, np.nan, np.nan],
        [445, 318, 196, 250, 318, 476, 615, 685, np.nan, np.nan, np.nan, np.nan],
        [289, 185, 139, 178, 216, 296, 325, np.nan, np.nan, np.nan, np.nan, np.nan],
        [180, 148, 97, 123, 141, 145, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],
        [125, 105, 73, 89, 102, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],
        [98, 80, 69, 66, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],
        [71, 58, 51, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],
        [54, 43, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],
        [36, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan,
        np.nan]]
        ).T

"""Triangle of open numbers, simulated with SYNTHEtic"""

open_number_sim = np.array([[14474., 13841., 12345., 10798.,  9431.,  8162.,  7081.,  6094.,
         5241.],
       [14856., 14256., 12703., 11196.,  9711.,  8447.,  7278.,  6279.,
         5399.],
       [14851., 14172., 12622., 11067.,  9555.,  8239.,  7048.,  6067.,
         5193.],
       [14742., 14124., 12643., 11079.,  9669.,  8287.,  7187.,  6173.,
         5329.],
       [14448., 13763., 12235., 10657.,  9293.,  8095.,  7003.,  6114.,
         5241.],
       [14743., 14038., 12443., 10929.,  9542.,  8238.,  7133.,  6171.,
         5346.],
       [14619., 14060., 12546., 11038.,  9626.,  8323.,  7209.,  6267.,
         5384.],
       [14704., 14102., 12612., 11053.,  9625.,  8381.,  7197.,  6174.,
         5285.],
       [14704., 13933., 12446., 10836.,  9384.,  8124.,  6988.,  6040.,
         5241.]])

"""Triangle of cased amounts"""
cased_payments = np.array(
    [[56551, 63344, 66954, 72768, 76338, 83493, 92136, 97059, 94658, 104836, 112265, 107822],
     [26907, 25706, 25502, 26613, 29399, 37080, 44671, 47808, 44919, 48968, 47921, np.nan],
     [12910, 12497, 13034, 13663, 16012, 19807, 25963, 26658, 26905, 29487, np.nan, np.nan],
     [7836, 7797, 8177, 9695, 10904, 14191, 17438, 17590, 18725, np.nan, np.nan, np.nan],
     [6201, 6088, 5767, 7363, 8774, 11144, 12034, 12339, np.nan, np.nan, np.nan, np.nan],
     [4555, 4289, 4623, 6052, 6308, 8161, 7718, np.nan, np.nan, np.nan, np.nan, np.nan],
     [3806, 3743, 3620, 4111, 5255, 4926, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],
     [3189, 2915, 2547, 3060, 2845, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],
     [2792, 2252, 1804, 1901, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],
     [1987, 1762, 1853, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],
     [1784, 1795, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],
     [1068, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan]]
     ).T

"""Triangle of cased amounts, simulated with SPLICE"""

cased_payments_sim = np.array([[1.35845378e+09, 7.75872178e+08, 4.07085929e+08, 2.36695822e+08,
        1.73377882e+08, 1.33518314e+08, 8.77908510e+07, 6.52186087e+07,
        1.21650266e+08],
       [1.40405032e+09, 7.76995677e+08, 3.96968826e+08, 2.56823960e+08,
        1.75483485e+08, 1.28946749e+08, 8.35567981e+07, 5.55906081e+07,
        1.22759882e+08],
       [1.38904558e+09, 7.77075750e+08, 3.74064722e+08, 2.64528044e+08,
        1.80694868e+08, 1.09132732e+08, 9.11566866e+07, 6.02773100e+07,
        1.45604876e+08],
       [1.35235330e+09, 7.85989901e+08, 3.61295671e+08, 2.60921757e+08,
        1.85787511e+08, 1.27572709e+08, 7.07299197e+07, 5.78368850e+07,
        1.40481393e+08],
       [1.35569128e+09, 7.81834622e+08, 3.70327806e+08, 2.40338326e+08,
        1.58077047e+08, 1.23545929e+08, 9.98571235e+07, 5.42846926e+07,
        1.15737157e+08],
       [1.40468104e+09, 7.85128259e+08, 3.91596614e+08, 2.60151544e+08,
        1.86360858e+08, 1.14829103e+08, 1.01278388e+08, 5.48462986e+07,
        1.31797443e+08],
       [1.33512639e+09, 7.62204008e+08, 4.18088256e+08, 2.43150065e+08,
        1.71459971e+08, 1.17296368e+08, 8.34076130e+07, 7.17872958e+07,
        1.33496875e+08],
       [1.35710862e+09, 7.54660797e+08, 3.86036811e+08, 2.59459977e+08,
        1.77058036e+08, 1.25959981e+08, 8.37950960e+07, 6.15374563e+07,
        1.35070175e+08],
       [1.38746455e+09, 8.04403745e+08, 3.75132310e+08, 2.55758637e+08,
        1.92300485e+08, 1.12495073e+08, 7.81650210e+07, 5.15805565e+07,
        1.26613068e+08]])

"""Reported claims by accident period"""
reported_claims = np.array([57133, 57896, 58721, 58248, 57785, 59753, 58772, 54761, 49832, 47899, 49511, 48946])

"""Reported claims by accident period, simulated with SYNTHEtic"""
reported_claims_sim = np.array([19885., 20160., 20134., 19963., 19640., 19800., 19536., 19015.,17224.])

"""Vector of inflation from Savelli et al. (2014)"""
claims_inflation = np.array([1.06, 1.053, 1.045, 1.038, 1.03, 1.03, 1.03, 1.03, 1.03, 1.03, 1.03, 1.03])

"""Coefficients of variation by development period from Savelli et al. (2014)"""
czj = np.array([.5, .75, 1., 1.25, 1.5, 2., 2.5, 3., 4., 5., 7., .01])

"""Coefficients of variation by development period estimated from the SYNTHEtic simulated data"""
czj_sim = np.array([3.75267569, 3.47890004, 3.39674867, 3.36503991, 3.0752325 ,2.98601416, 2.76782598, 2.89634828])