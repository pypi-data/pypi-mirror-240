from typing import List, Sequence, Union
import numpy

from .map_to_index import DUPLICATE_METHOD, map_to_index


def match(x: Sequence, targets: Union[dict, Sequence], duplicate_method: DUPLICATE_METHOD = "first") -> numpy.ndarray:
    """Find a matching value of each element of ``x`` in ``target``.

    Args:
        x (Sequence): Sequence of values to match.

        targets (Union[dict, Sequence]):
            Sequence of targets to be matched against. Alternatively, a
            dictionary generated by passing a sequence of targets to
            :py:meth:`~biocutils.map_to_index.map_to_index`.

    Returns:
        list[Union[int, None]]: List of length equal to ``x``, containing the
        integer position of each entry of ``x`` inside ``target``; or None,
        if the entry of ``x`` is None or cannot be found in ``target``.
    """
    if not isinstance(targets, dict):
        targets = map_to_index(targets, duplicate_method=duplicate_method)

    indices = numpy.zeros(len(x), dtype=numpy.min_scalar_type(-len(targets))) # get a signed type
    for i, y in enumerate(x):
        if y not in targets:
            indices[i] = -1
        else:
            indices[i] = targets[y]

    return indices
