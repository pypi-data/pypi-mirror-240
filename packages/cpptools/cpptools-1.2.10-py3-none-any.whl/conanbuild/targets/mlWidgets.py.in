from conans import ConanFile, tools, CMake
from conans.util import files
import os
import shutil
import os.path

class mlWidgetsConan(ConanFile):
    name = "mlWidgets"
    version = "@version@"
    generators = "cmake"
    settings = "os", "arch", "compiler", "build_type"
    url = "https://gitlab.gz.cvte.cn/1602/Client/mlWidgets"
    requires = "wxsvg/1.5.2@1602/dev", "wxWidgets/3.1.4@1602/dev", "libqrencode/4.0.2@1602/stable"

    def configure(self):
        del self.settings.compiler.libcxx

    def source(self):
        self.run("git clone git@gitlab.gz.cvte.cn:1602/client/mlWidgets.git @git_ref@ .")
        @checkout@

    def cmakeBuild(self):
        cmake = CMake(self)
        options = ['-DCMAKE_INSTALL_PREFIX=%s'%self.package_folder, '-DWITHOUT_SAMPLE=ON']

        if(self.settings.os == "Macos"):
            sysroot = "macosx"
            target_arch = str(self.settings.arch)
            if(self.settings.arch == "x86"):
                target_arch = "i386"
            options.append("-DCMAKE_OSX_SYSROOT="+sysroot)
            options.append("-DCMAKE_OSX_ARCHITECTURES="+target_arch)
            options.append("-DMACOS=TRUE")
        elif(self.settings.os == "Linux"):
            if(self.settings.arch == "x86"):
                options.append("-DCMAKE_C_FLAGS=-m32 -fPIC")
                options.append("-DCMAKE_CXX_FLAGS=-m32 -fPIC")
                options.append("-DCMAKE_EXE_LINKER_FLAGS=-m32")
            elif(self.settings.arch == "armv7"):
                if("CFLAGS" in os.environ):
                    options.append("-DCMAKE_C_FLAGS=-fPIC %s"%os.environ.get("CFLAGS"))
                else:
                    options.append("-DCMAKE_C_FLAGS=-fPIC")
                if("CXXFLAGS" in os.environ):
                    options.append("-DCMAKE_CXX_FLAGS=-fPIC %s"%os.environ.get("CXXFLAGS"))
                else:
                    options.append("-DCMAKE_CXX_FLAGS=-fPIC")
            else:
                options.append("-DCMAKE_CXX_FLAGS=-fPIC")
                options.append("-DCMAKE_C_FLAGS=-fPIC")
                
            if("CMAKE_TOOLCHAIN_FILE_NAME" in os.environ):
                options.append("-DCMAKE_TOOLCHAIN_FILE=%s"%os.environ.get("CMAKE_TOOLCHAIN_FILE_NAME"))
        
        cmake.configure(args=options, source_folder=self.source_folder)
        cmake.build()
        cmake.install()

    def build(self):
        with tools.chdir(self.source_folder):
            tools.mkdir('_build')
            with tools.chdir('./_build'):
                self.cmakeBuild()

    def package_info(self):
        self.cpp_info.libs = ['mlComponent', 'mlWidgets', 'mlWidgetsUtil']
