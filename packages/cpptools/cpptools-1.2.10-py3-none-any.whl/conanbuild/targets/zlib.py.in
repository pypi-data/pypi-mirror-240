from conans import ConanFile, tools, CMake, AutoToolsBuildEnvironment
from conans.util import files
import os


class ZlibConan(ConanFile):
    name = "zlib"
    version = "@version@"
    generators = "cmake"
    settings = "os", "arch", "compiler", "build_type"
    options = {"shared": [True, False]}
    default_options = "shared=False"
    url = "https://gitlab.gz.cvte.cn/1602/3rd/zlib"
    # license = "http://www.zlib.net/zlib_license.html"
    # description = "A Massively Spiffy Yet Delicately Unobtrusive Compression Library " \
    #               "(Also Free, Not to Mention Unencumbered by Patents)"

    def source(self):
        self.run("git clone git@gitlab.gz.cvte.cn:1602/3rd/zlib.git @git_ref@ .")
        @checkout@

    def configure(self):
        del self.settings.compiler.libcxx

    def patch_pcfile(self):
        if self.settings.os == "Windows":
            if self.settings.build_type == "Debug":
                tools.replace_in_file("zlib.pc.cmakein", "-lz", "-lzlibstaticd")
            else:
                tools.replace_in_file("zlib.pc.cmakein", "-lz", "-lzlibstatic")

    def patch_package(self):
        if(self.settings.os == "Windows"):
            pkg_lib_path = os.path.join(self.package_folder, 'lib')
            pkg_inc_path = os.path.join(self.package_folder, 'include')
            tools.mkdir('lib/pkgconfig')
            self.copy("*.pc", dst="lib/pkgconfig", keep_path=False)
            self.copy("*.pc", dst="lib/pkgconfig", keep_path=False)
            tools.replace_in_file(os.path.join(pkg_inc_path, 'zlib.h'), '#include "zconf.h"', '#undef HAVE_UNISTD_H\n#include "zconf.h"')

    def build(self):
        with tools.chdir(self.source_folder):
            cmake = CMake(self)
            cmake_options = ["-DBUILD_TEST=OFF", "-DBUILD_TOOL=OFF"]

            if(self.settings.os == "Android"):
                cmake.generator = "Unix Makefiles"
                if tools.os_info.is_windows:
                    make_program = os.environ.get("CONAN_BASH_PATH").replace("bash.exe", "make.exe")
                    cmake_options.append("-DCMAKE_MAKE_PROGRAM=%s"%make_program)
                toolchain_file = os.environ.get(
                    "NDK_HOME") + "/build/cmake/android.toolchain.cmake"
                cmake_options.append("-DCMAKE_TOOLCHAIN_FILE="+toolchain_file)
                if self.settings.compiler == "clang":
                    cmake_options.append("-DANDROID_STL=c++_static")
                else:
                    cmake_options.append("-DANDROID_STL=gnustl_static")
            elif(self.settings.os == "iOS"):
                sysroot = "iphoneos"
                if(self.settings.arch == "x86" or self.settings.arch == "x86_64"):
                    sysroot = "iphonesimulator"
                target_arch = str(self.settings.arch)
                if(self.settings.arch == "armv8"):
                    target_arch = "arm64"
                elif(self.settings.arch == "x86"):
                    target_arch = "i386"
                cmake_options.append("-DCMAKE_OSX_SYSROOT="+sysroot)
                cmake_options.append("-DCMAKE_OSX_ARCHITECTURES="+target_arch)
                cmake_options.append("-DIOS=TRUE")
            elif(self.settings.os == "Macos"):
                sysroot = "macosx"
                target_arch = str(self.settings.arch)
                if(target_arch == "x86"):
                    target_arch = "i386"
                if(self.settings.arch == "armv8"):
                    target_arch = "arm64"
                cmake_options.append("-DCMAKE_OSX_SYSROOT="+sysroot)
                cmake_options.append("-DCMAKE_OSX_ARCHITECTURES="+target_arch)
                cmake_options.append("-DMACOS=TRUE")
            elif(self.settings.os == "Linux"):
                if(self.settings.arch == "x86"):
                    cmake_options.append("-DCMAKE_C_FLAGS=-m32 -fPIC")
                    cmake_options.append("-DCMAKE_CXX_FLAGS=-m32 -fPIC")
                    cmake_options.append("-DCMAKE_EXE_LINKER_FLAGS=-m32 -fPIC")
                else:
                    cmake_options.append("-DCMAKE_C_FLAGS=-fPIC")
                    cmake_options.append("-DCMAKE_CXX_FLAGS=-fPIC")
            elif(self.settings.compiler == "Visual Studio"):
                self.patch_pcfile();
                cmake_options.append("-DCMAKE_CXX_FLAGS=/w")
                if (self.settings.compiler.runtime == 'MT' or self.settings.compiler.runtime == 'MTd'):
                    tools.download('https://artifactory.gz.cvte.cn/artifactory/binaries/1602/buildtool/UseStaticMsvcrt.cmake', 'UseStaticMsvcrt.cmake')
                    cmake_options.append("-DCMAKE_USER_MAKE_RULES_OVERRIDE=UseStaticMsvcrt.cmake")

            cmake.configure(args=cmake_options)
            cmake.build()
            cmake.install()

    def package(self):
        self.output.warn("local cache: %s" % self.in_local_cache)
        self.output.warn("develop: %s" % self.develop)
        self.patch_package()
        # Copying all installed files
        # self.copy("*", src="%s" % os.path.join(self.source_folder, "install"), keep_path=True)

    def package_info(self):
        if (self.options.shared):
            self.cpp_info.libs = ['zlib']
        elif(self.settings.os == "Windows"):    
            if(self.settings.build_type == "Debug" ):
                self.cpp_info.libs = ['zlibstaticd.lib']
            else :
                self.cpp_info.libs = ['zlibstatic.lib']
        else:
            self.cpp_info.libs = ['zlibstatic']
