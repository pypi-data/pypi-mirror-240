from conans import ConanFile, AutoToolsBuildEnvironment
from conans import tools
import os
import shutil
from conans import CMake


class SIOClientConan(ConanFile):
    name = "sioclient"
    version = "@version@"
    url = "https://github.com/socketio/socket.io-client-cpp.git"
    generators = "cmake"
    settings = "os", "arch", "compiler", "build_type"
    options = {"tls": [True, False]}
    default_options = ("tls=True")
    
    def configure(self):
        del self.settings.compiler.libcxx
        if self.options.tls:
            self.requires.add("OpenSSL/1.1.1w@1602/stable")
        
        return super().configure()

    def source(self):
        self.run('git clone https://github.com/socketio/socket.io-client-cpp.git @git_ref@ .')
        @checkout@
        self.run('git submodule update --init --recursive')
        
    def build(self):
        with tools.chdir(self.source_folder):
            cmake = CMake(self)
            # Wrap original CMakeLists.txt for be able to include and call CONAN_BASIC_SETUP
            # It will allow us to set architecture flags, link with the requires etc
            cmake_options = ["-DBUILD_TESTING=OFF"]
            
            target = "sioclient"
            if self.options.tls:
                target = "sioclient_tls"
                cmake_options.append("-DOPENSSL_ROOT_DIR=%s"%self.deps_cpp_info["OpenSSL"].rootpath)
                cmake_options.append("-DOPENSSL_INCLUDE_DIR=%s"%self.deps_cpp_info["OpenSSL"].include_paths[0])
                cmake_options.append("-DOPENSSL_CRYPTO_LIBRARY=%s"%self.deps_cpp_info["OpenSSL"].lib_paths[0]+"/libcrypto.a")
                cmake_options.append("-DOPENSSL_SSL_LIBRARY=%s"%self.deps_cpp_info["OpenSSL"].lib_paths[0]+"/libssl.a")

 
            if self.settings.os == "Android":
                cmake.generator = "Unix Makefiles"
                if tools.os_info.is_windows:
                    make_program = os.environ.get("CONAN_BASH_PATH").replace("bash.exe", "make.exe")
                    cmake_options.append("-DCMAKE_MAKE_PROGRAM=%s"%make_program)
                
                toolchain_file = os.environ.get(
                    "ANDROID_NDK_HOME") + "/build/cmake/android.toolchain.cmake"
                cmake_options.append("-DCMAKE_TOOLCHAIN_FILE="+toolchain_file)
                cmake_options.append("-DCMAKE_C_COMPILER_FORCED=TRUE")
                cmake_options.append("-DCMAKE_CXX_COMPILER_FORCED=TRUE")
                
                if(self.settings.compiler=="clang"):
                    cmake_options.append("-DANDROID_STL=c++_static")
                else:
                    cmake_options.append("-DANDROID_STL=gnustl_static")
                
                if(self.settings.arch == "armv7"):
                    cmake_options.append("-DANDROID_ABI=armeabi-v7a")
                elif(self.settings.arch == "armv8"):
                    cmake_options.append("-DANDROID_ABI=arm64-v8a")
            elif self.settings.os == "iOS":
                sysroot = "iphoneos"
                if(self.settings.arch == "x86" or self.settings.arch == "x86_64"):
                    sysroot = "iphonesimulator"
                target_arch = str(self.settings.arch)
                if(self.settings.arch == "armv8"):
                    target_arch = "arm64"
                elif(self.settings.arch == "x86"):
                    target_arch = "i386"
                cmake_options.append("-DCMAKE_OSX_SYSROOT="+sysroot)
                cmake_options.append("-DCMAKE_OSX_ARCHITECTURES="+target_arch)
                cmake_options.append("-DIOS=TRUE")
            elif(self.settings.os == "Macos"):
                sysroot = "macosx"
                target_arch = str(self.settings.arch)
                if(target_arch == "x86"):
                    target_arch = "i386"
                if(target_arch == "armv8"):
                    target_arch = "arm64"
                cmake_options.append("-DCMAKE_OSX_SYSROOT="+sysroot)
                cmake_options.append("-DCMAKE_OSX_ARCHITECTURES="+target_arch)
                cmake_options.append("-DMACOS=TRUE")
            elif(self.settings.os == "Linux"):
                if("CMAKE_TOOLCHAIN_FILE_NAME" in os.environ):
                    cmake_options.append("-DCMAKE_TOOLCHAIN_FILE=%s"%os.environ.get("CMAKE_TOOLCHAIN_FILE_NAME"))
                elif(self.settings.arch == "x86"):
                    cmake_options.append("-DCMAKE_C_FLAGS=-m32 -fPIC")
                    cmake_options.append("-DCMAKE_CXX_FLAGS=-m32 -fPIC")
                    cmake_options.append("-DCMAKE_EXE_LINKER_FLAGS=-m32 -fPIC")
                else:
                    cmake_options.append("-DCMAKE_C_FLAGS=-fPIC")
                    cmake_options.append("-DCMAKE_CXX_FLAGS=-fPIC")
            elif(self.settings.compiler == "Visual Studio"):
                cmake_options.append("-DCMAKE_C_FLAGS=-DWIN32_LEAN_AND_MEAN")
                cmake_options.append("-DCMAKE_CXX_FLAGS=-DWIN32_LEAN_AND_MEAN")
                if (self.settings.compiler.runtime == 'MT' or self.settings.compiler.runtime == 'MTd'):
                    tools.download('https://artifactory.gz.cvte.cn/artifactory/binaries/1602/buildtool/UseStaticMsvcrt.cmake', 'UseStaticMsvcrt.cmake')
                    cmake_options.append("-DCMAKE_USER_MAKE_RULES_OVERRIDE=UseStaticMsvcrt.cmake")
                    
            cmake_options.append("-DCMAKE_INSTALL_PREFIX=%s"%self.package_folder)
            
            cmake.configure(args=cmake_options)
            cmake.build(target=target)
            cmake.install()

    def package_info(self):
        if self.options.tls:
            self.cpp_info.libs = ['sioclient_tls']
        else:
            self.cpp_info.libs = ['sioclient']
