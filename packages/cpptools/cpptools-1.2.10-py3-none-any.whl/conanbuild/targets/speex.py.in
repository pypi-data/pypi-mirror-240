from conans import ConanFile, tools, CMake, AutoToolsBuildEnvironment
import os
import platform
import shutil

class LibvpxConan(ConanFile):
    name = "speex"
    version = "@version@"
    settings = "os", "arch", "compiler", "build_type"
    options = {"shared": [True, False], "fPIC": [True, False]}
    default_options = "shared=False", "fPIC=True"
    url = "https://gitlab.gz.cvte.cn/1602/3rd/conan-speex"
    # license = "http://www.zlib.net/zlib_license.html"
    # description = "A Massively Spiffy Yet Delicately Unobtrusive Compression Library " \
    #               "(Also Free, Not to Mention Unencumbered by Patents)"

    def configure(self):
        del self.settings.compiler.libcxx

    def requirements(self):
        self.requires.add("ogg/1.3.3@1602/stable", private=False)
        
    def source(self):
        self.run("git clone git@gitlab.gz.cvte.cn:1602/3rd/speex.git @git_ref@ .")
        @checkout@

    def _genConfigureArgs(self):
        configure_args = ""
        arch = str(self.settings.arch)
        if (arch == "armv8"):
            arch = "arm64"

        host = str(self.settings.os)
        if (host == "Windows"):
            if (arch == "x86"):
                host = "win32"
            elif (arch == "x86_64"):
                host = "win64"
        elif (host == "iOS"):
            if (arch == "x86" or arch == "x86_64"):
                host = "iphonesimulator"
            else:
                host = "darwin"
        elif (host == "Macos"):
            host = "darwin10"

        compiler = str(self.settings.compiler).lower()

        if (compiler == "visual studio"):
            compiler = "vs"+str(self.settings.compiler.version)
        elif(compiler == "apple-clang"):
            compiler = "gcc"

        target = arch+'-'+host+'-'+compiler

        configure_args = ['--target='+target.lower()]
        configure_args.append('--enable-realtime-only')
        configure_args.append('--disable-examples')
        configure_args.append('--disable-tools')
        configure_args.append('--disable-docs')
        configure_args.append('--enable-better-hw-compatibility')
        configure_args.append('--disable-unit-tests')
        
        if self.options.shared:
            configure_args.append('--enable-shared')
        else:
            configure_args.append('--disable-shared')
        
        if self.options.fPIC:
            configure_args.append('--with-pic')

        if (self.settings.compiler == 'Visual Studio' and (self.settings.compiler.runtime == 'MT' or self.settings.compiler.runtime == 'MTd')):
            configure_args.append("--enable-static-msvcrt")

        if (self.settings.build_type == "Debug"):
            configure_args.append("--enable-debug")
            configure_args.append("--enable-debug-libs")

        if (not self.settings.os == "Windows"):
            configure_args.append("--enable-pic")

        if(self.settings.os == "Android"):
            configure_args.append('--sdk-path='+os.environ['NDK_HOME'])

            sysroot = os.environ.get(
                'NDK_HOME')+'/platforms/android-'+str(self.settings.os.api_level)
            toolchain_prefix = os.environ.get('NDK_HOME') + '/toolchains/'
            if(self.settings.arch == 'armv7'):
                configure_args.append(
                    '--extra-cflags= -mfloat-abi=softfp -mfpu=neon')
                sysroot += '/arch-arm'
                toolchain_prefix += 'arm-linux-androideabi-' + \
                    str(self.settings.compiler.version)+'/prebuilt/' + \
                    str.lower(platform.system()) + \
                    '-x86_64/bin/arm-linux-androideabi-'
            elif(self.settings.arch == 'armv8'):
                configure_args.append(
                    '--extra-cflags= -mfloat-abi=softfp -mfpu=neon')
                sysroot += '/arch-arm64'
                toolchain_prefix += 'aarch64-linux-android-' + \
                    str(self.settings.compiler.version)+'/prebuilt/' + \
                    str.lower(platform.system()) + \
                    '-x86_64/bin/aarch64-linux-android-'
            elif(self.settings.arch == 'x86'):
                sysroot += '/arch-x86'
                toolchain_prefix += 'x86-'+str(self.settings.compiler.version)+'/prebuilt/'+str.lower(
                    platform.system())+'-x86_64/bin/i686-linux-android-'
            elif(self.settings.arch == 'x86_64'):
                sysroot += '/arch-x86_64'
                toolchain_prefix += 'x86_64-'+str(self.settings.compiler.version)+'/prebuilt/'+str.lower(
                    platform.system())+'-x86_64/bin/x86_64-linux-android-'

            os.environ['CC'] = toolchain_prefix+'gcc'
            os.environ['AR'] = toolchain_prefix+'ar'
            os.environ['NM'] = toolchain_prefix+'nm'
            os.environ['CPP'] = toolchain_prefix+'cpp'
            os.environ['LD'] = toolchain_prefix+'ld'
            os.environ['RANLIB'] = toolchain_prefix+'ranlib'
            os.environ['OBJDUMP'] = toolchain_prefix+'objdump'
            os.environ['STRIP'] = toolchain_prefix+'strip'

        if (self.settings.os == "Linux"):
            os.system("chmod +x ./configure")

        if(not tools.os_info.is_windows):
            configure_args.append('--prefix='+str(self.package_folder))
        
        return configure_args
    
    def buildWin(self):
        #with tools.vcvars(self.settings, filter_known_paths=True):
        cmake = CMake(self)
        cmake.configure(source_folder="speex")
        cmake.build()

    def build(self):
        with tools.chdir(self.source_folder):
            if (self.settings.os == "Windows"):
                self.buildWin()
            else:
                with tools.chdir("speex"):
                    if (self.settings.os == "Android"):
                        shutil.copyfile('%s/sources/android/cpufeatures/cpu-features.c'%os.environ['NDK_HOME'], 'vpx_ports/cpu-features.c')
                        shutil.copyfile('%s/sources/android/cpufeatures/cpu-features.h'%os.environ['NDK_HOME'], 'vpx_ports/cpu-features.h')
                        with open('vpx_ports/vpx_ports.mk','a') as f:  
                            f.write('PORTS_SRCS-yes += cpu-features.c \n')
                            f.write('PORTS_SRCS-yes += cpu-features.h \n')
                            
                    if (tools.os_info.is_windows):
                        env_build = AutoToolsBuildEnvironment(self, win_bash=True)
                    else:
                        os.system("chmod +x ./configure")
                        env_build = AutoToolsBuildEnvironment(self)
                    env_build.configure(args=self._genConfigureArgs(), build=False, host=False)
                    env_build.make()

    def package(self):
        with tools.chdir(self.source_folder):
            self.copy("include/speex/*.h", "%s/include/speex"%self.package_folder, keep_path=False)
            self.copy("speex/include/speex/*.h", "%s/include/speex"%self.package_folder, keep_path=False)
            self.copy("*.lib", "%s/lib"%self.package_folder, keep_path=False)
            self.copy("*.so", "%s/lib"%self.package_folder, keep_path=False)
            self.copy("*.a", "%s/lib"%self.package_folder, keep_path=False)

    def package_info(self):
        self.cpp_info.libs = ['speex', 'speexdsp']
