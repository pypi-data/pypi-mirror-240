from conans import ConanFile, tools, CMake, AutoToolsBuildEnvironment
from conans.util import files
import os, shutil


class WxWidgetsConan(ConanFile):
    name = "wxWidgets"
    version = "@version@"
    generators = "cmake"
    settings = "os", "arch", "compiler", "build_type"
    options = {"shared": [True, False], "gtk":[2, 3, 4], "cairo":[True, False]}
    default_options = {"shared":False, "cairo":False,   "gtk":3}
    url = "https://gitlab.gz.cvte.cn/1602/3rd/wxWidgets"
    # license = "http://www.zlib.net/zlib_license.html"
    description = "Process GUI library "

    def source(self):
        self.run("git clone git@gitlab.gz.cvte.cn:1602/3rd/wxWidgets.git @git_ref@ .")
        @checkout@
        self.run("git submodule update --init --recursive")

    def configure(self):
        del self.settings.compiler.libcxx
    def config_options(self):
        if(self.settings.os != "Linux"): 
            del self.options.gtk
    def build_requirements(self):
        if self.settings.os == 'Windows' and self.options.cairo:
            self.build_requires( 'cairo/1.16@1602/stable')
    def build(self):
        with tools.chdir(self.build_folder):
            if(self.settings.os != "Linux"):
                cmake = CMake(self)
                cmake_options = ['-DwxUSE_EXCEPTIONS=OFF', '-DwxUSE_HTML=ON']
                if(self.settings.os == "Windows" and self.options.cairo):
                    cmake_options.append("-DwxUSE_CAIRO=ON")
                    cmake_options.append("-DCAIRO_INCLUDE_DIR=%s"%self.deps_cpp_info["cairo"].include_paths[1])
                
                if(True == self.options.shared):
                    cmake_options.append('-DwxBUILD_SHARED=ON')
                else:
                    cmake_options.append('-DwxBUILD_SHARED=OFF')

                if(self.settings.os == "Macos"):
                    sysroot = "macosx"
                    target_arch = str(self.settings.arch)
                    if(target_arch == "x86"):
                        target_arch = "i386"
                    cmake_options.append("-DCMAKE_OSX_SYSROOT="+sysroot)
                    cmake_options.append("-DCMAKE_OSX_ARCHITECTURES="+target_arch)
                    cmake_options.append("-DMACOS=TRUE")
                elif(self.settings.compiler == "Visual Studio"):
                    cmake_options.append("-DwxUSE_DPI_AWARE_MANIFEST=per-monitor")
                    if (self.settings.compiler.runtime == 'MT' or self.settings.compiler.runtime == 'MTd'):
                        tools.download('https://artifactory.gz.cvte.cn/artifactory/binaries/1602/buildtool/UseStaticMsvcrt.cmake', 'UseStaticMsvcrt.cmake')
                        cmake_options.append("-DCMAKE_USER_MAKE_RULES_OVERRIDE=UseStaticMsvcrt.cmake")

                cmake_options.append('-DCMAKE_INSTALL_PREFIX=%s'%(self.package_folder))
                cmake.configure(args=cmake_options)
                cmake.build()
                cmake.install()
            else:
                builder = AutoToolsBuildEnvironment(self)
                builder.configure(args=['--with-cxx=11', '--enable-debug_gdb', '--enable-cxx11', '--enable-monolithic', '--with-gtk=%d'%self.options.gtk, '--enable-webviewwebkit'])
                builder.make()
                builder.install()
				
    def package(self):
        if(self.settings.compiler=='Visual Studio'):
            if(self.settings.arch == "x86_64"):
                self.copy(pattern="*.pdb", dst="lib/vc_x64_lib", src="%s"%(self.build_folder), keep_path=False)
                self.copy(pattern="*.h", dst="lib/vc_x64_lib", src="%s/lib/vc_x64_dll"%(self.package_folder), keep_path=True)
                if(self.options.shared):
                    self.copy(pattern="*.lib", dst="lib/vc_x64_dll", src="%s/lib/vc_x64_dll"%(self.build_folder), keep_path=False)
            else:
                self.copy(pattern="*.pdb", dst="lib/vc_lib", src="%s"%(self.build_folder), keep_path=False)
                self.copy(pattern="*.h", dst="lib/vc_lib", src="%s/lib/vc_dll"%(self.package_folder), keep_path=True)
                if(self.options.shared):
                    self.copy(pattern="*.lib", dst="lib/vc_dll", src="%s/lib/vc_dll"%(self.build_folder), keep_path=False)

    def package_info(self):
        if(self.settings.compiler=='Visual Studio'): 
            self.cpp_info.libdirs = ['lib/vc_lib']  
            if(self.settings.arch == "x86_64"):
                self.cpp_info.libdirs = ['lib/vc_x64_lib']
            if(self.options.shared):
                self.cpp_info.libdirs = ['lib/vc_dll']
                if(self.settings.arch == "x86_64"):
                    self.cpp_info.libdirs = ['lib/vc_x64_dll']
            self.cpp_info.includedirs.append('include/msvc')
            
            if(self.settings.build_type == 'Release'): 
                self.cpp_info.libs = ['wxbase31u.lib', 'wxbase31u_net.lib', 'wxbase31u_xml.lib', 'wxmsw31u_adv.lib', 'wxmsw31u_aui.lib', 'wxmsw31u_core.lib', 'wxmsw31u_gl.lib', 'wxmsw31u_html.lib', 'wxmsw31u_media.lib', 'wxmsw31u_propgrid.lib', 'wxmsw31u_qa.lib', 'wxmsw31u_ribbon.lib', 'wxmsw31u_richtext.lib', 'wxmsw31u_stc.lib', 'wxmsw31u_webview.lib', 'wxmsw31u_xrc.lib', 'wxzlib.lib', 'wxjpeg.lib', 'wxpng.lib', 'wxtiff.lib', 'wxexpat.lib', 'wxregexu.lib', 'wxscintilla.lib']
            else :
                self.cpp_info.libs = ['wxbase31ud.lib', 'wxbase31ud_net.lib', 'wxbase31ud_xml.lib', 'wxmsw31ud_adv.lib', 'wxmsw31ud_aui.lib', 'wxmsw31ud_core.lib', 'wxmsw31ud_gl.lib', 'wxmsw31ud_html.lib', 'wxmsw31ud_media.lib', 'wxmsw31ud_propgrid.lib', 'wxmsw31ud_qa.lib', 'wxmsw31ud_ribbon.lib', 'wxmsw31ud_richtext.lib', 'wxmsw31ud_stc.lib', 'wxmsw31ud_webview.lib', 'wxmsw31ud_xrc.lib', 'wxzlibd.lib', 'wxjpegd.lib', 'wxpngd.lib', 'wxtiffd.lib', 'wxexpatd.lib', 'wxregexud.lib', 'wxscintillad.lib']
        elif(self.settings.os=='Macos'):
            self.cpp_info.libdirs= ['lib']
            if(self.options.shared):
                self.cpp_info.includedirs = ['include/wx-3.1','lib/wx/include/osx_cocoa-unicode-3.1']
                self.cpp_info.libs = ['libwx_baseu_net-3.1.a','libwx_baseu_xml-3.1.a','libwx_baseu-3.1.a','libwx_osx_cocoau_adv-3.1.a','libwx_osx_cocoau_aui-3.1.a','libwx_osx_cocoau_core-3.1.a','libwx_osx_cocoau_gl-3.1.a','libwx_osx_cocoau_html-3.1.a','libwx_osx_cocoau_media-3.1.a','libwx_osx_cocoau_propgrid-3.1.a','libwx_osx_cocoau_qa-3.1.a','libwx_osx_cocoau_ribbon-3.1.a','libwx_osx_cocoau_richtext-3.1.a','libwx_osx_cocoau_stc-3.1.a','libwx_osx_cocoau_webview-3.1.a','libwx_osx_cocoau_xrc-3.1.a','libwxjpeg-3.1.a','libwxpng-3.1.a','libwxregexu-3.1.a','libwxscintilla-3.1.a','libwxtiff-3.1.a']
            else:
                self.cpp_info.includedirs = ['include/wx-3.1','lib/wx/include/osx_cocoa-unicode-static-3.1']
                self.cpp_info.libs = ['libwx_baseu_net-3.1.a','libwx_baseu_xml-3.1.a','libwx_baseu-3.1.a','libwx_osx_cocoau_adv-3.1.a','libwx_osx_cocoau_aui-3.1.a','libwx_osx_cocoau_core-3.1.a','libwx_osx_cocoau_gl-3.1.a','libwx_osx_cocoau_html-3.1.a','libwx_osx_cocoau_media-3.1.a','libwx_osx_cocoau_propgrid-3.1.a','libwx_osx_cocoau_qa-3.1.a','libwx_osx_cocoau_ribbon-3.1.a','libwx_osx_cocoau_richtext-3.1.a','libwx_osx_cocoau_stc-3.1.a','libwx_osx_cocoau_webview-3.1.a','libwx_osx_cocoau_xrc-3.1.a','libwxjpeg-3.1.a','libwxpng-3.1.a','libwxregexu-3.1.a','libwxscintilla-3.1.a','libwxtiff-3.1.a']

        elif(self.settings.os=='Linux'):
            if(self.options.shared):
                if(self.options.gtk == 2):
                    self.cpp_info.includedirs = ['include/wx-3.1', 'lib/wx/include/gtk2-unicode-3.1']
                    self.cpp_info.libs =['wx_gtk2u-3.1']
                elif(self.options.gtk == 3):
                    self.cpp_info.includedirs = ['include/wx-3.1', 'lib/wx/include/gtk3-unicode-3.1']
                    self.cpp_info.libs =['wx_gtk3u-3.1']
            else:
                if(self.options.gtk == 2):
                    self.cpp_info.includedirs = ['include/wx-3.1', 'lib/wx/include/gtk-unicode-static-3.1']
                    self.cpp_info.libs =['wx_gtk2u-3.1', 'wxregexu-3.1', 'wxscintilla-3.1']
                elif(self.options.gtk == 3):
                    self.cpp_info.includedirs = ['include/wx-3.1', 'lib/wx/include/gtk3-unicode-3.1']
                    self.cpp_info.libs =['wx_gtk3u-3.1', 'wxregexu-3.1', 'wxscintilla-3.1']
