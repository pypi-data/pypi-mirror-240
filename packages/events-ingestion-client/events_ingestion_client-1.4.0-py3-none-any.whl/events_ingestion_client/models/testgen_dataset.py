# coding: utf-8

"""
    Event Ingestion API

    Event Ingestion API client for DataKitchenâ€™s DataOps Observability  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@datakitchen.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TestgenDataset(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'table_group_configuration': 'AllOfTestgenDatasetTableGroupConfiguration',
        'tables': 'AllOfTestgenDatasetTables',
        'version': 'float',
        'connection_name': 'str',
        'database_name': 'str',
        'schema': 'str'
    }

    attribute_map = {
        'table_group_configuration': 'table_group_configuration',
        'tables': 'tables',
        'version': 'version',
        'connection_name': 'connection_name',
        'database_name': 'database_name',
        'schema': 'schema'
    }

    def __init__(self, table_group_configuration=None, tables=None, version=None, connection_name=None, database_name=None, schema=None):  # noqa: E501
        """TestgenDataset - a model defined in Swagger"""  # noqa: E501
        self._table_group_configuration = None
        self._tables = None
        self._version = None
        self._connection_name = None
        self._database_name = None
        self._schema = None
        self.discriminator = None
        if table_group_configuration is not None:
            self.table_group_configuration = table_group_configuration
        self.tables = tables
        self.version = version
        self.connection_name = connection_name
        self.database_name = database_name
        if schema is not None:
            self.schema = schema

    @property
    def table_group_configuration(self):
        """Gets the table_group_configuration of this TestgenDataset.  # noqa: E501

        Optional. Description of the table group.  # noqa: E501

        :return: The table_group_configuration of this TestgenDataset.  # noqa: E501
        :rtype: AllOfTestgenDatasetTableGroupConfiguration
        """
        return self._table_group_configuration

    @table_group_configuration.setter
    def table_group_configuration(self, table_group_configuration):
        """Sets the table_group_configuration of this TestgenDataset.

        Optional. Description of the table group.  # noqa: E501

        :param table_group_configuration: The table_group_configuration of this TestgenDataset.  # noqa: E501
        :type: AllOfTestgenDatasetTableGroupConfiguration
        """

        self._table_group_configuration = table_group_configuration

    @property
    def tables(self):
        """Gets the tables of this TestgenDataset.  # noqa: E501

        Required. The tables under test.  # noqa: E501

        :return: The tables of this TestgenDataset.  # noqa: E501
        :rtype: AllOfTestgenDatasetTables
        """
        return self._tables

    @tables.setter
    def tables(self, tables):
        """Sets the tables of this TestgenDataset.

        Required. The tables under test.  # noqa: E501

        :param tables: The tables of this TestgenDataset.  # noqa: E501
        :type: AllOfTestgenDatasetTables
        """
        if tables is None:
            raise ValueError("Invalid value for `tables`, must not be `None`")  # noqa: E501

        self._tables = tables

    @property
    def version(self):
        """Gets the version of this TestgenDataset.  # noqa: E501

        Required. Version of the integration.  # noqa: E501

        :return: The version of this TestgenDataset.  # noqa: E501
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TestgenDataset.

        Required. Version of the integration.  # noqa: E501

        :param version: The version of this TestgenDataset.  # noqa: E501
        :type: float
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def connection_name(self):
        """Gets the connection_name of this TestgenDataset.  # noqa: E501

        Required. The name of the connection according to Testgen.  # noqa: E501

        :return: The connection_name of this TestgenDataset.  # noqa: E501
        :rtype: str
        """
        return self._connection_name

    @connection_name.setter
    def connection_name(self, connection_name):
        """Sets the connection_name of this TestgenDataset.

        Required. The name of the connection according to Testgen.  # noqa: E501

        :param connection_name: The connection_name of this TestgenDataset.  # noqa: E501
        :type: str
        """
        if connection_name is None:
            raise ValueError("Invalid value for `connection_name`, must not be `None`")  # noqa: E501

        self._connection_name = connection_name

    @property
    def database_name(self):
        """Gets the database_name of this TestgenDataset.  # noqa: E501

        Required. The name of the database.  # noqa: E501

        :return: The database_name of this TestgenDataset.  # noqa: E501
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this TestgenDataset.

        Required. The name of the database.  # noqa: E501

        :param database_name: The database_name of this TestgenDataset.  # noqa: E501
        :type: str
        """
        if database_name is None:
            raise ValueError("Invalid value for `database_name`, must not be `None`")  # noqa: E501

        self._database_name = database_name

    @property
    def schema(self):
        """Gets the schema of this TestgenDataset.  # noqa: E501

        Optional. The database schema.  # noqa: E501

        :return: The schema of this TestgenDataset.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this TestgenDataset.

        Optional. The database schema.  # noqa: E501

        :param schema: The schema of this TestgenDataset.  # noqa: E501
        :type: str
        """

        self._schema = schema

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestgenDataset, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestgenDataset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
