from __future__ import annotations

from typing import List, Sequence, overload

from pokerengine.pokerengine_core.enums.rank import RankEnum
from pokerengine.pokerengine_core.enums.suit import SuitEnum

class Rank:
    @overload
    def __init__(self, value: ...) -> None: ...
    @overload
    def __init__(self, value: str) -> None: ...
    def __eq__(self, other: Rank) -> bool: ...
    def __gt__(self, other: Rank) -> bool: ...
    def __lt__(self, other: Rank) -> bool: ...
    @property
    def rank(self) -> int: ...
    def __ne__(self, other: Rank) -> bool: ...
    def as_bitset(self) -> int: ...
    def as_string(self) -> str: ...
    def as_string_long(self) -> str: ...

class Suit:
    @overload
    def __init__(self, value: ...) -> None: ...
    @overload
    def __init__(self, value: str) -> None: ...
    def __eq__(self, other: Suit) -> bool: ...
    def __gt__(self, other: Suit) -> bool: ...
    def __lt__(self, other: Suit) -> bool: ...
    def __ne__(self, other: Suit) -> bool: ...
    @property
    def suit(self) -> int: ...
    def as_bitset(self) -> int: ...
    def as_string(self) -> str: ...
    def as_string_long(self) -> str: ...
    def as_string_pretty(self) -> str: ...

class Card:
    @overload
    def __init__(self, rank: Rank, suit: Suit) -> None: ...
    @overload
    def __init__(self, rank: RankEnum, suit: SuitEnum) -> None: ...
    @overload
    def __init__(self, card: int) -> None: ...
    @overload
    def __init__(self, value: str) -> None: ...
    def __eq__(self, other: Card) -> bool: ...
    def __gt__(self, other: Card) -> bool: ...
    def __lt__(self, other: Card) -> bool: ...
    def __ne__(self, other: Card) -> bool: ...
    @property
    def card(self) -> int: ...
    @property
    def rank(self) -> Rank: ...
    @property
    def suit(self) -> Suit: ...
    def as_bitset(self) -> int: ...
    def as_string(self) -> str: ...

class CardGenerator:
    def __init__(self, seed: int = 1927) -> None: ...
    def generate(self) -> Card: ...
    def generate_v(self, n: int) -> List[Card]: ...

class CardSet:
    cards: int

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, cards: Sequence[Card]) -> None: ...
    @overload
    def __init__(self, bitset: int) -> None: ...
    @overload
    def __init__(self, value: str) -> None: ...
    @overload
    def __add__(self, other: Card) -> CardSet: ...
    @overload
    def __add__(self, other: CardSet) -> CardSet: ...
    @overload
    def __contains__(self, value: Card) -> bool: ...
    @overload
    def __contains__(self, value: CardSet) -> bool: ...
    def __len__(self) -> int: ...
    @overload
    def remove(self, value: CardSet) -> None: ...
    @overload
    def remove(self, value: CardSet) -> None: ...
    def fill(self) -> None: ...
    def clear(self) -> None: ...
    def insert(self, value: Card) -> None: ...
    def join(self, value: CardSet) -> None: ...
