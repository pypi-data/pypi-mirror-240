Metadata-Version: 2.1
Name: deepecho
Version: 0.5.0.dev0
Summary: Create sequential synthetic data of mixed types using a GAN.
Home-page: https://github.com/sdv-dev/DeepEcho
Author: DataCebo, Inc.
Author-email: info@sdv.dev
License: BSL-1.1
Description: <div align="center">
        <br/>
        <p align="center">
            <i>This repository is part of <a href="https://sdv.dev">The Synthetic Data Vault Project</a>, a project from <a href="https://datacebo.com">DataCebo</a>.</i>
        </p>
        
        [![Development Status](https://img.shields.io/badge/Development%20Status-2%20--%20Pre--Alpha-yellow)](https://pypi.org/search/?c=Development+Status+%3A%3A+2+-+Pre-Alpha)
        [![PyPi Shield](https://img.shields.io/pypi/v/deepecho.svg)](https://pypi.python.org/pypi/deepecho)
        [![Tests](https://github.com/sdv-dev/DeepEcho/workflows/Run%20Tests/badge.svg)](https://github.com/sdv-dev/DeepEcho/actions?query=workflow%3A%22Run+Tests%22+branch%3Amain)
        [![Downloads](https://pepy.tech/badge/deepecho)](https://pepy.tech/project/deepecho)
        [![Coverage Status](https://codecov.io/gh/sdv-dev/DeepEcho/branch/main/graph/badge.svg)](https://codecov.io/gh/sdv-dev/DeepEcho)
        [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/sdv-dev/DeepEcho/main?filepath=tutorials/timeseries_data)
        [![Slack](https://img.shields.io/badge/Slack%20Workspace-Join%20now!-36C5F0?logo=slack)](https://bit.ly/sdv-slack-invite)
        
        <div align="left">
        <br/>
        <p align="center">
        <a href="https://github.com/sdv-dev/DeepEcho">
        <img align="center" width=40% src="https://github.com/sdv-dev/SDV/blob/stable/docs/images/DeepEcho-DataCebo.png"></img>
        </a>
        </p>
        </div>
        
        </div>
        
        # Overview
        
        **DeepEcho** is a **Synthetic Data Generation** Python library for **mixed-type**, **multivariate
        time series**. It provides:
        
        1. Multiple models based both on **classical statistical modeling** of time series and the latest
           in **Deep Learning** techniques.
        2. A robust [benchmarking framework](https://github.com/sdv-dev/SDGym) for evaluating these methods
           on multiple datasets and with multiple metrics.
        3. Ability for **Machine Learning researchers** to submit new methods following our `model` and
           `sample` API and get evaluated.
        
        | Important Links                               |                                                                      |
        | --------------------------------------------- | -------------------------------------------------------------------- |
        | :computer: **[Website]**                      | Check out the SDV Website for more information about the project.    |
        | :orange_book: **[SDV Blog]**                  | Regular publshing of useful content about Synthetic Data Generation. |
        | :book: **[Documentation]**                    | Quickstarts, User and Development Guides, and API Reference.         |
        | :octocat: **[Repository]**                    | The link to the Github Repository of this library.                   |
        | :keyboard: **[Development Status]**           | This software is in its Pre-Alpha stage.                             |
        | [![][Slack Logo] **Community**][Community]    | Join our Slack Workspace for announcements and discussions.          |
        | [![][MyBinder Logo] **Tutorials**][Tutorials] | Run the SDV Tutorials in a Binder environment.                       |
        
        [Website]: https://sdv.dev
        [SDV Blog]: https://sdv.dev/blog
        [Documentation]: https://sdv.dev/SDV
        [Repository]: https://github.com/sdv-dev/DeepEcho
        [License]: https://github.com/sdv-dev/DeepEcho/blob/main/LICENSE
        [Development Status]: https://pypi.org/search/?c=Development+Status+%3A%3A+2+-+Pre-Alpha
        [Slack Logo]: https://github.com/sdv-dev/SDV/blob/stable/docs/images/slack.png
        [Community]: https://bit.ly/sdv-slack-invite
        [MyBinder Logo]: https://github.com/sdv-dev/SDV/blob/stable/docs/images/mybinder.png
        [Tutorials]: https://mybinder.org/v2/gh/sdv-dev/DeepEcho/main?filepath=tutorials
        
        # Install
        
        **DeepEcho** is part of the **SDV** project and is automatically installed alongside it. For
        details about this process please visit the [SDV Installation Guide](
        https://sdv.dev/SDV/getting_started/install.html)
        
        Optionally, **DeepEcho** can also be installed as a standalone library using the following commands:
        
        **Using `pip`:**
        
        ```bash
        pip install deepecho
        ```
        
        **Using `conda`:**
        
        ```bash
        conda install -c pytorch -c conda-forge deepecho
        ```
        
        For more installation options please visit the [DeepEcho installation Guide](INSTALL.md)
        
        # Quickstart
        
        **DeepEcho** is included as part of [SDV](https://sdv.dev/SDV) to model and sample synthetic
        time series. In most cases, usage through SDV is recommeded, since it provides additional
        functionalities which are not available here. For more details about how to use DeepEcho
        whithin SDV, please visit the corresponding User Guide:
        
        * [SDV TimeSeries User Guide](https://sdv.dev/SDV/user_guides/timeseries/par.html)
        
        ## Standalone usage
        
        **DeepEcho** can also be used as a standalone library.
        
        In this short quickstart, we show how to learn a mixed-type multivariate time series
        dataset and then generate synthetic data that resembles it.
        
        We will start by loading the data and preparing the instance of our model.
        
        ```python3
        from deepecho import PARModel
        from deepecho.demo import load_demo
        
        # Load demo data
        data = load_demo()
        
        # Define data types for all the columns
        data_types = {
            'region': 'categorical',
            'day_of_week': 'categorical',
            'total_sales': 'continuous',
            'nb_customers': 'count',
        }
        
        model = PARModel(cuda=False)
        ```
        
        If we want to use different settings for our model, like increasing the number
        of epochs or enabling CUDA, we can pass the arguments when creating the model:
        
        ```python  # keep this as python (without the 3) to avoid using it in test-readme
        model = PARModel(epochs=1024, cuda=True)
        ```
        
        Notice that for smaller datasets like the one used on this demo, CUDA usage introduces
        more overhead than the gains it obtains from parallelization, so the process in this
        case is more efficient without CUDA, even if it is available.
        
        Once we have created our instance, we are ready to learn the data and generate
        new synthetic data that resembles it:
        
        ```python3
        # Learn a model from the data
        model.fit(
            data=data,
            entity_columns=['store_id'],
            context_columns=['region'],
            data_types=data_types,
            sequence_index='date'
        )
        
        # Sample new data
        model.sample(num_entities=5)
        ```
        
        The output will be a table with synthetic time series data with the same properties to
        the demo data that we used as input.
        
        # What's next?
        
        For more details about **DeepEcho** and all its possibilities and features, please check and
        run the [tutorials](tutorials).
        
        If you want to see how we evaluate the performance and quality of our models, please have a
        look at the [SDGym Benchmarking framework](https://github.com/sdv-dev/SDGym).
        
        Also, please feel welcome to visit [our contributing guide](CONTRIBUTING.rst) in order to help
        us developing new features or cool ideas!
        
        ---
        
        
        <div align="center">
        <a href="https://datacebo.com"><img align="center" width=40% src="https://github.com/sdv-dev/SDV/blob/stable/docs/images/DataCebo.png"></img></a>
        </div>
        <br/>
        <br/>
        
        [The Synthetic Data Vault Project](https://sdv.dev) was first created at MIT's [Data to AI Lab](
        https://dai.lids.mit.edu/) in 2016. After 4 years of research and traction with enterprise, we
        created [DataCebo](https://datacebo.com) in 2020 with the goal of growing the project.
        Today, DataCebo is the proud developer of SDV, the largest ecosystem for
        synthetic data generation & evaluation. It is home to multiple libraries that support synthetic
        data, including:
        
        * ðŸ”„ Data discovery & transformation. Reverse the transforms to reproduce realistic data.
        * ðŸ§  Multiple machine learning models -- ranging from Copulas to Deep Learning -- to create tabular,
          multi table and time series data.
        * ðŸ“Š Measuring quality and privacy of synthetic data, and comparing different synthetic data
          generation models.
        
        [Get started using the SDV package](https://sdv.dev/SDV/getting_started/install.html) -- a fully
        integrated solution and your one-stop shop for synthetic data. Or, use the standalone libraries
        for specific needs.
        
        
        # History
        
        ## 0.4.2 - 2023-07-25
        
        This release drops support for Python 3.7 and adds support for Python 3.11.
        
        ### Maintenance
        
        * Add support for Python 3.11 - Issue [#74](https://github.com/sdv-dev/DeepEcho/issues/74) by @fealho
        * Drop support for Python 3.7 - Issue [#75](https://github.com/sdv-dev/DeepEcho/issues/75) by @R-Palazzo
        
        ## 0.4.1 - 2023-05-02
        
        This release adds support for Pandas 2.0 and PyTorch 2.0!
        
        ### Maintenance
        
        * Remove upper bound for pandas - Issue [#69](https://github.com/sdv-dev/DeepEcho/issues/69) by @frances-h
        * Upgrade to Torch 2.0 - Issue [#70](https://github.com/sdv-dev/DeepEcho/issues/70) by @frances-h
        
        ## 0.4.0 - 2023-01-10
        
        This release adds support for python 3.10 and 3.11. It also drops support for python 3.6.
        
        ### Maintenance
        
        * Support Python 3.10 and 3.11 - Issue [#63](https://github.com/sdv-dev/DeepEcho/issues/63) by @pvk-developer
        * DeepEcho Package Maintenance Updates - Issue [#62](https://github.com/sdv-dev/DeepEcho/issues/62) by @pvk-developer
        
        ## 0.3.0 - 2021-11-15
        
        This release adds support for Python 3.9 and updates dependencies to ensure compatibility with the rest
        of the SDV ecosystem.
        
        * Add support for Python 3.9 - Issue [#41](https://github.com/sdv-dev/DeepEcho/issues/41) by @fealho
        * Add pip check to CI workflows internal improvements - Issue [#39](https://github.com/sdv-dev/DeepEcho/issues/39) by @pvk-developer
        * Add support for pylint>2.7.2 housekeeping - Issue [#33](https://github.com/sdv-dev/DeepEcho/issues/33) by @fealho
        * Add support for torch>=1.8 housekeeping - Issue [#32](https://github.com/sdv-dev/DeepEcho/issues/32) by @fealho
        
        ## 0.2.1 - 2021-10-12
        
        This release fixes a bug with how DeepEcho handles NaN values.
        
        * Handling NaN's bug - Issue [#35](https://github.com/sdv-dev/DeepEcho/issues/35) by @fealho
        
        ## 0.2.0 - 2021-02-24
        
        Maintenance release to update dependencies and ensure compatibility with the rest
        of the SDV ecosystem libraries.
        
        ## 0.1.4 - 2020-10-16
        
        Minor maintenance version to update dependencies and documentation, and
        also make the demo data loading function parse dates properly.
        
        ## 0.1.3 - 2020-10-16
        
        This version includes several minor improvements to the PAR model and the
        way the sequences are generated:
        
        * Sequences can now be generated without dropping the sequence index.
        * The PAR model learns the min and max length of the sequence from the input data.
        * NaN values are properly supported for both categorical and numerical columns.
        * NaN values are generated for numerical columns only if there were NaNs in the input data.
        * Constant columns can now be modeled.
        
        ## 0.1.2 - 2020-09-15
        
        Add BasicGAN Model and additional benchmarking results.
        
        ## 0.1.1 - 2020-08-15
        
        This release includes a few new features to make DeepEcho work on more types of datasets
        as well as to making it easier to add new datasets to the benchmarking framework.
        
        * Add `segment_size` and `sequence_index` arguments to `fit` method.
        * Add `sequence_length` as an optional argument to `sample` and `sample_sequence` methods.
        * Update the Dataset storage format to add `sequence_index` and versioning.
        * Separate the sequence assembling process in its own `deepecho.sequences` module.
        * Add function `make_dataset` to create a dataset from a dataframe and just a few column names.
        * Add notebook tutorial to show how to create a datasets and use them.
        
        ## 0.1.0 - 2020-08-11
        
        First release.
        
        Included Features:
        
        * PARModel
        * Demo dataset and tutorials
        * Benchmarking Framework
        * Support and instructions for benchmarking on a Kubernetes cluster.
        
Keywords: deepecho deepecho DeepEcho
Platform: UNKNOWN
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: Free for non-commercial use
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.8,<3.12
Description-Content-Type: text/markdown
Provides-Extra: test
Provides-Extra: dev
