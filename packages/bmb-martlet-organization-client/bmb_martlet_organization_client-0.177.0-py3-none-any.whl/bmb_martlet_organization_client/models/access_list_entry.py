# coding: utf-8

"""
    Martlet Organization API

    Create/maintain organizations, access keys, addresses and permissions.   # noqa: E501

    OpenAPI spec version: 0.177.0
    Contact: apiteam@bmbix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccessListEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'updated_at': 'str',
        'entry': 'str',
        'list': 'str',
        'sender': 'str'
    }

    attribute_map = {
        'updated_at': 'updated_at',
        'entry': 'entry',
        'list': 'list',
        'sender': 'sender'
    }

    def __init__(self, updated_at=None, entry=None, list=None, sender=None):  # noqa: E501
        """AccessListEntry - a model defined in Swagger"""  # noqa: E501
        self._updated_at = None
        self._entry = None
        self._list = None
        self._sender = None
        self.discriminator = None
        if updated_at is not None:
            self.updated_at = updated_at
        if entry is not None:
            self.entry = entry
        if list is not None:
            self.list = list
        if sender is not None:
            self.sender = sender

    @property
    def updated_at(self):
        """Gets the updated_at of this AccessListEntry.  # noqa: E501


        :return: The updated_at of this AccessListEntry.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AccessListEntry.


        :param updated_at: The updated_at of this AccessListEntry.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def entry(self):
        """Gets the entry of this AccessListEntry.  # noqa: E501


        :return: The entry of this AccessListEntry.  # noqa: E501
        :rtype: str
        """
        return self._entry

    @entry.setter
    def entry(self, entry):
        """Sets the entry of this AccessListEntry.


        :param entry: The entry of this AccessListEntry.  # noqa: E501
        :type: str
        """

        self._entry = entry

    @property
    def list(self):
        """Gets the list of this AccessListEntry.  # noqa: E501


        :return: The list of this AccessListEntry.  # noqa: E501
        :rtype: str
        """
        return self._list

    @list.setter
    def list(self, list):
        """Sets the list of this AccessListEntry.


        :param list: The list of this AccessListEntry.  # noqa: E501
        :type: str
        """

        self._list = list

    @property
    def sender(self):
        """Gets the sender of this AccessListEntry.  # noqa: E501


        :return: The sender of this AccessListEntry.  # noqa: E501
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this AccessListEntry.


        :param sender: The sender of this AccessListEntry.  # noqa: E501
        :type: str
        """

        self._sender = sender

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccessListEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessListEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
