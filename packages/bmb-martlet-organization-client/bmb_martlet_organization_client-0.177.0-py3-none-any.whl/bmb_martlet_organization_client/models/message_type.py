# coding: utf-8

"""
    Martlet Organization API

    Create/maintain organizations, access keys, addresses and permissions.   # noqa: E501

    OpenAPI spec version: 0.177.0
    Contact: apiteam@bmbix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MessageType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'updated_at': 'str',
        'address': 'str',
        'message_type': 'str',
        'direction': 'str',
        'retention_policy': 'str'
    }

    attribute_map = {
        'id': 'id',
        'updated_at': 'updated_at',
        'address': 'address',
        'message_type': 'message_type',
        'direction': 'direction',
        'retention_policy': 'retention_policy'
    }

    def __init__(self, id=None, updated_at=None, address=None, message_type=None, direction=None, retention_policy=None):  # noqa: E501
        """MessageType - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._updated_at = None
        self._address = None
        self._message_type = None
        self._direction = None
        self._retention_policy = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if updated_at is not None:
            self.updated_at = updated_at
        if address is not None:
            self.address = address
        if message_type is not None:
            self.message_type = message_type
        if direction is not None:
            self.direction = direction
        if retention_policy is not None:
            self.retention_policy = retention_policy

    @property
    def id(self):
        """Gets the id of this MessageType.  # noqa: E501


        :return: The id of this MessageType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MessageType.


        :param id: The id of this MessageType.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def updated_at(self):
        """Gets the updated_at of this MessageType.  # noqa: E501


        :return: The updated_at of this MessageType.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MessageType.


        :param updated_at: The updated_at of this MessageType.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def address(self):
        """Gets the address of this MessageType.  # noqa: E501


        :return: The address of this MessageType.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this MessageType.


        :param address: The address of this MessageType.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def message_type(self):
        """Gets the message_type of this MessageType.  # noqa: E501


        :return: The message_type of this MessageType.  # noqa: E501
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this MessageType.


        :param message_type: The message_type of this MessageType.  # noqa: E501
        :type: str
        """

        self._message_type = message_type

    @property
    def direction(self):
        """Gets the direction of this MessageType.  # noqa: E501


        :return: The direction of this MessageType.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this MessageType.


        :param direction: The direction of this MessageType.  # noqa: E501
        :type: str
        """

        self._direction = direction

    @property
    def retention_policy(self):
        """Gets the retention_policy of this MessageType.  # noqa: E501


        :return: The retention_policy of this MessageType.  # noqa: E501
        :rtype: str
        """
        return self._retention_policy

    @retention_policy.setter
    def retention_policy(self, retention_policy):
        """Sets the retention_policy of this MessageType.


        :param retention_policy: The retention_policy of this MessageType.  # noqa: E501
        :type: str
        """

        self._retention_policy = retention_policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MessageType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MessageType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
