# coding: utf-8

"""
    Martlet Organization API

    Create/maintain organizations, access keys, addresses and permissions.   # noqa: E501

    OpenAPI spec version: 0.177.0
    Contact: apiteam@bmbix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AcceptancesResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'selection_metadata': 'SelectionMetadata',
        'acceptances': 'list[Acceptance]'
    }

    attribute_map = {
        'selection_metadata': 'selection_metadata',
        'acceptances': 'acceptances'
    }

    def __init__(self, selection_metadata=None, acceptances=None):  # noqa: E501
        """AcceptancesResponse - a model defined in Swagger"""  # noqa: E501
        self._selection_metadata = None
        self._acceptances = None
        self.discriminator = None
        if selection_metadata is not None:
            self.selection_metadata = selection_metadata
        if acceptances is not None:
            self.acceptances = acceptances

    @property
    def selection_metadata(self):
        """Gets the selection_metadata of this AcceptancesResponse.  # noqa: E501


        :return: The selection_metadata of this AcceptancesResponse.  # noqa: E501
        :rtype: SelectionMetadata
        """
        return self._selection_metadata

    @selection_metadata.setter
    def selection_metadata(self, selection_metadata):
        """Sets the selection_metadata of this AcceptancesResponse.


        :param selection_metadata: The selection_metadata of this AcceptancesResponse.  # noqa: E501
        :type: SelectionMetadata
        """

        self._selection_metadata = selection_metadata

    @property
    def acceptances(self):
        """Gets the acceptances of this AcceptancesResponse.  # noqa: E501


        :return: The acceptances of this AcceptancesResponse.  # noqa: E501
        :rtype: list[Acceptance]
        """
        return self._acceptances

    @acceptances.setter
    def acceptances(self, acceptances):
        """Sets the acceptances of this AcceptancesResponse.


        :param acceptances: The acceptances of this AcceptancesResponse.  # noqa: E501
        :type: list[Acceptance]
        """

        self._acceptances = acceptances

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AcceptancesResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AcceptancesResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
