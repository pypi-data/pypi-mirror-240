# coding: utf-8

"""
    Martlet Organization API

    Create/maintain organizations, access keys, addresses and permissions.   # noqa: E501

    OpenAPI spec version: 0.177.0
    Contact: apiteam@bmbix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PaymentMethodLink(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'organization_id': 'str',
        'payment_method_id': 'str',
        'payment_method_user_id': 'str',
        'payment_method_description': 'str'
    }

    attribute_map = {
        'id': 'id',
        'organization_id': 'organization_id',
        'payment_method_id': 'payment_method_id',
        'payment_method_user_id': 'payment_method_user_id',
        'payment_method_description': 'payment_method_description'
    }

    def __init__(self, id=None, organization_id=None, payment_method_id=None, payment_method_user_id=None, payment_method_description=None):  # noqa: E501
        """PaymentMethodLink - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._organization_id = None
        self._payment_method_id = None
        self._payment_method_user_id = None
        self._payment_method_description = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if organization_id is not None:
            self.organization_id = organization_id
        if payment_method_id is not None:
            self.payment_method_id = payment_method_id
        if payment_method_user_id is not None:
            self.payment_method_user_id = payment_method_user_id
        if payment_method_description is not None:
            self.payment_method_description = payment_method_description

    @property
    def id(self):
        """Gets the id of this PaymentMethodLink.  # noqa: E501


        :return: The id of this PaymentMethodLink.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentMethodLink.


        :param id: The id of this PaymentMethodLink.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """Gets the organization_id of this PaymentMethodLink.  # noqa: E501


        :return: The organization_id of this PaymentMethodLink.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this PaymentMethodLink.


        :param organization_id: The organization_id of this PaymentMethodLink.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def payment_method_id(self):
        """Gets the payment_method_id of this PaymentMethodLink.  # noqa: E501


        :return: The payment_method_id of this PaymentMethodLink.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_id

    @payment_method_id.setter
    def payment_method_id(self, payment_method_id):
        """Sets the payment_method_id of this PaymentMethodLink.


        :param payment_method_id: The payment_method_id of this PaymentMethodLink.  # noqa: E501
        :type: str
        """

        self._payment_method_id = payment_method_id

    @property
    def payment_method_user_id(self):
        """Gets the payment_method_user_id of this PaymentMethodLink.  # noqa: E501


        :return: The payment_method_user_id of this PaymentMethodLink.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_user_id

    @payment_method_user_id.setter
    def payment_method_user_id(self, payment_method_user_id):
        """Sets the payment_method_user_id of this PaymentMethodLink.


        :param payment_method_user_id: The payment_method_user_id of this PaymentMethodLink.  # noqa: E501
        :type: str
        """

        self._payment_method_user_id = payment_method_user_id

    @property
    def payment_method_description(self):
        """Gets the payment_method_description of this PaymentMethodLink.  # noqa: E501


        :return: The payment_method_description of this PaymentMethodLink.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_description

    @payment_method_description.setter
    def payment_method_description(self, payment_method_description):
        """Sets the payment_method_description of this PaymentMethodLink.


        :param payment_method_description: The payment_method_description of this PaymentMethodLink.  # noqa: E501
        :type: str
        """

        self._payment_method_description = payment_method_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentMethodLink, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentMethodLink):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
