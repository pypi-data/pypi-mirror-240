# coding: utf-8

"""
    Martlet Organization API

    Create/maintain organizations, access keys, addresses and permissions.   # noqa: E501

    OpenAPI spec version: 0.175.0
    Contact: apiteam@bmbix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Message(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message_id': 'str',
        'submission_timestamp': 'str',
        'source_address_id': 'str',
        'destination_address_id': 'str',
        'sender_reference': 'str',
        'content_media_type': 'str',
        'content': 'str',
        'checksum_algorithm': 'str',
        'checksum': 'str',
        'decryption_rubric': 'str',
        'recipient_public_key_fingerprint': 'str'
    }

    attribute_map = {
        'message_id': 'message_id',
        'submission_timestamp': 'submission_timestamp',
        'source_address_id': 'source_address_id',
        'destination_address_id': 'destination_address_id',
        'sender_reference': 'sender_reference',
        'content_media_type': 'content_media_type',
        'content': 'content',
        'checksum_algorithm': 'checksum_algorithm',
        'checksum': 'checksum',
        'decryption_rubric': 'decryption_rubric',
        'recipient_public_key_fingerprint': 'recipient_public_key_fingerprint'
    }

    def __init__(self, message_id=None, submission_timestamp=None, source_address_id=None, destination_address_id=None, sender_reference=None, content_media_type=None, content=None, checksum_algorithm=None, checksum=None, decryption_rubric=None, recipient_public_key_fingerprint=None):  # noqa: E501
        """Message - a model defined in Swagger"""  # noqa: E501
        self._message_id = None
        self._submission_timestamp = None
        self._source_address_id = None
        self._destination_address_id = None
        self._sender_reference = None
        self._content_media_type = None
        self._content = None
        self._checksum_algorithm = None
        self._checksum = None
        self._decryption_rubric = None
        self._recipient_public_key_fingerprint = None
        self.discriminator = None
        if message_id is not None:
            self.message_id = message_id
        if submission_timestamp is not None:
            self.submission_timestamp = submission_timestamp
        if source_address_id is not None:
            self.source_address_id = source_address_id
        if destination_address_id is not None:
            self.destination_address_id = destination_address_id
        if sender_reference is not None:
            self.sender_reference = sender_reference
        if content_media_type is not None:
            self.content_media_type = content_media_type
        if content is not None:
            self.content = content
        if checksum_algorithm is not None:
            self.checksum_algorithm = checksum_algorithm
        if checksum is not None:
            self.checksum = checksum
        if decryption_rubric is not None:
            self.decryption_rubric = decryption_rubric
        if recipient_public_key_fingerprint is not None:
            self.recipient_public_key_fingerprint = recipient_public_key_fingerprint

    @property
    def message_id(self):
        """Gets the message_id of this Message.  # noqa: E501


        :return: The message_id of this Message.  # noqa: E501
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this Message.


        :param message_id: The message_id of this Message.  # noqa: E501
        :type: str
        """

        self._message_id = message_id

    @property
    def submission_timestamp(self):
        """Gets the submission_timestamp of this Message.  # noqa: E501


        :return: The submission_timestamp of this Message.  # noqa: E501
        :rtype: str
        """
        return self._submission_timestamp

    @submission_timestamp.setter
    def submission_timestamp(self, submission_timestamp):
        """Sets the submission_timestamp of this Message.


        :param submission_timestamp: The submission_timestamp of this Message.  # noqa: E501
        :type: str
        """

        self._submission_timestamp = submission_timestamp

    @property
    def source_address_id(self):
        """Gets the source_address_id of this Message.  # noqa: E501


        :return: The source_address_id of this Message.  # noqa: E501
        :rtype: str
        """
        return self._source_address_id

    @source_address_id.setter
    def source_address_id(self, source_address_id):
        """Sets the source_address_id of this Message.


        :param source_address_id: The source_address_id of this Message.  # noqa: E501
        :type: str
        """

        self._source_address_id = source_address_id

    @property
    def destination_address_id(self):
        """Gets the destination_address_id of this Message.  # noqa: E501


        :return: The destination_address_id of this Message.  # noqa: E501
        :rtype: str
        """
        return self._destination_address_id

    @destination_address_id.setter
    def destination_address_id(self, destination_address_id):
        """Sets the destination_address_id of this Message.


        :param destination_address_id: The destination_address_id of this Message.  # noqa: E501
        :type: str
        """

        self._destination_address_id = destination_address_id

    @property
    def sender_reference(self):
        """Gets the sender_reference of this Message.  # noqa: E501


        :return: The sender_reference of this Message.  # noqa: E501
        :rtype: str
        """
        return self._sender_reference

    @sender_reference.setter
    def sender_reference(self, sender_reference):
        """Sets the sender_reference of this Message.


        :param sender_reference: The sender_reference of this Message.  # noqa: E501
        :type: str
        """

        self._sender_reference = sender_reference

    @property
    def content_media_type(self):
        """Gets the content_media_type of this Message.  # noqa: E501


        :return: The content_media_type of this Message.  # noqa: E501
        :rtype: str
        """
        return self._content_media_type

    @content_media_type.setter
    def content_media_type(self, content_media_type):
        """Sets the content_media_type of this Message.


        :param content_media_type: The content_media_type of this Message.  # noqa: E501
        :type: str
        """

        self._content_media_type = content_media_type

    @property
    def content(self):
        """Gets the content of this Message.  # noqa: E501


        :return: The content of this Message.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Message.


        :param content: The content of this Message.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def checksum_algorithm(self):
        """Gets the checksum_algorithm of this Message.  # noqa: E501


        :return: The checksum_algorithm of this Message.  # noqa: E501
        :rtype: str
        """
        return self._checksum_algorithm

    @checksum_algorithm.setter
    def checksum_algorithm(self, checksum_algorithm):
        """Sets the checksum_algorithm of this Message.


        :param checksum_algorithm: The checksum_algorithm of this Message.  # noqa: E501
        :type: str
        """

        self._checksum_algorithm = checksum_algorithm

    @property
    def checksum(self):
        """Gets the checksum of this Message.  # noqa: E501


        :return: The checksum of this Message.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this Message.


        :param checksum: The checksum of this Message.  # noqa: E501
        :type: str
        """

        self._checksum = checksum

    @property
    def decryption_rubric(self):
        """Gets the decryption_rubric of this Message.  # noqa: E501


        :return: The decryption_rubric of this Message.  # noqa: E501
        :rtype: str
        """
        return self._decryption_rubric

    @decryption_rubric.setter
    def decryption_rubric(self, decryption_rubric):
        """Sets the decryption_rubric of this Message.


        :param decryption_rubric: The decryption_rubric of this Message.  # noqa: E501
        :type: str
        """

        self._decryption_rubric = decryption_rubric

    @property
    def recipient_public_key_fingerprint(self):
        """Gets the recipient_public_key_fingerprint of this Message.  # noqa: E501


        :return: The recipient_public_key_fingerprint of this Message.  # noqa: E501
        :rtype: str
        """
        return self._recipient_public_key_fingerprint

    @recipient_public_key_fingerprint.setter
    def recipient_public_key_fingerprint(self, recipient_public_key_fingerprint):
        """Sets the recipient_public_key_fingerprint of this Message.


        :param recipient_public_key_fingerprint: The recipient_public_key_fingerprint of this Message.  # noqa: E501
        :type: str
        """

        self._recipient_public_key_fingerprint = recipient_public_key_fingerprint

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Message, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Message):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
