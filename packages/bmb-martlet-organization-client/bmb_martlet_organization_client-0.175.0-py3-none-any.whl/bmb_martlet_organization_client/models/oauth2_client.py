# coding: utf-8

"""
    Martlet Organization API

    Create/maintain organizations, access keys, addresses and permissions.   # noqa: E501

    OpenAPI spec version: 0.175.0
    Contact: apiteam@bmbix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Oauth2Client(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'updated_at': 'str',
        'oauth2_client_id': 'str',
        'resource': 'str',
        'name_from_user': 'str',
        'client_id': 'str',
        'client_name': 'str',
        'client_secret': 'str'
    }

    attribute_map = {
        'updated_at': 'updated_at',
        'oauth2_client_id': 'oauth2_client_id',
        'resource': 'resource',
        'name_from_user': 'name_from_user',
        'client_id': 'client_id',
        'client_name': 'client_name',
        'client_secret': 'client_secret'
    }

    def __init__(self, updated_at=None, oauth2_client_id=None, resource=None, name_from_user=None, client_id=None, client_name=None, client_secret=None):  # noqa: E501
        """Oauth2Client - a model defined in Swagger"""  # noqa: E501
        self._updated_at = None
        self._oauth2_client_id = None
        self._resource = None
        self._name_from_user = None
        self._client_id = None
        self._client_name = None
        self._client_secret = None
        self.discriminator = None
        if updated_at is not None:
            self.updated_at = updated_at
        if oauth2_client_id is not None:
            self.oauth2_client_id = oauth2_client_id
        if resource is not None:
            self.resource = resource
        if name_from_user is not None:
            self.name_from_user = name_from_user
        if client_id is not None:
            self.client_id = client_id
        if client_name is not None:
            self.client_name = client_name
        if client_secret is not None:
            self.client_secret = client_secret

    @property
    def updated_at(self):
        """Gets the updated_at of this Oauth2Client.  # noqa: E501


        :return: The updated_at of this Oauth2Client.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Oauth2Client.


        :param updated_at: The updated_at of this Oauth2Client.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def oauth2_client_id(self):
        """Gets the oauth2_client_id of this Oauth2Client.  # noqa: E501


        :return: The oauth2_client_id of this Oauth2Client.  # noqa: E501
        :rtype: str
        """
        return self._oauth2_client_id

    @oauth2_client_id.setter
    def oauth2_client_id(self, oauth2_client_id):
        """Sets the oauth2_client_id of this Oauth2Client.


        :param oauth2_client_id: The oauth2_client_id of this Oauth2Client.  # noqa: E501
        :type: str
        """

        self._oauth2_client_id = oauth2_client_id

    @property
    def resource(self):
        """Gets the resource of this Oauth2Client.  # noqa: E501


        :return: The resource of this Oauth2Client.  # noqa: E501
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this Oauth2Client.


        :param resource: The resource of this Oauth2Client.  # noqa: E501
        :type: str
        """

        self._resource = resource

    @property
    def name_from_user(self):
        """Gets the name_from_user of this Oauth2Client.  # noqa: E501


        :return: The name_from_user of this Oauth2Client.  # noqa: E501
        :rtype: str
        """
        return self._name_from_user

    @name_from_user.setter
    def name_from_user(self, name_from_user):
        """Sets the name_from_user of this Oauth2Client.


        :param name_from_user: The name_from_user of this Oauth2Client.  # noqa: E501
        :type: str
        """

        self._name_from_user = name_from_user

    @property
    def client_id(self):
        """Gets the client_id of this Oauth2Client.  # noqa: E501


        :return: The client_id of this Oauth2Client.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Oauth2Client.


        :param client_id: The client_id of this Oauth2Client.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def client_name(self):
        """Gets the client_name of this Oauth2Client.  # noqa: E501


        :return: The client_name of this Oauth2Client.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this Oauth2Client.


        :param client_name: The client_name of this Oauth2Client.  # noqa: E501
        :type: str
        """

        self._client_name = client_name

    @property
    def client_secret(self):
        """Gets the client_secret of this Oauth2Client.  # noqa: E501


        :return: The client_secret of this Oauth2Client.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this Oauth2Client.


        :param client_secret: The client_secret of this Oauth2Client.  # noqa: E501
        :type: str
        """

        self._client_secret = client_secret

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Oauth2Client, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Oauth2Client):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
