# coding: utf-8

"""
    Martlet Organization API

    Create/maintain organizations, access keys, addresses and permissions.   # noqa: E501

    OpenAPI spec version: 0.175.0
    Contact: apiteam@bmbix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Address(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'organization_id': 'str',
        'alias': 'str',
        'display_name': 'str',
        'is_closed': 'bool',
        'purpose': 'str',
        'web_hook': 'str',
        'web_hook_token': 'str',
        'is_public': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'organization_id': 'organization_id',
        'alias': 'alias',
        'display_name': 'display_name',
        'is_closed': 'is_closed',
        'purpose': 'purpose',
        'web_hook': 'web_hook',
        'web_hook_token': 'web_hook_token',
        'is_public': 'is_public'
    }

    def __init__(self, id=None, organization_id=None, alias=None, display_name=None, is_closed=None, purpose=None, web_hook=None, web_hook_token=None, is_public=None):  # noqa: E501
        """Address - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._organization_id = None
        self._alias = None
        self._display_name = None
        self._is_closed = None
        self._purpose = None
        self._web_hook = None
        self._web_hook_token = None
        self._is_public = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if organization_id is not None:
            self.organization_id = organization_id
        if alias is not None:
            self.alias = alias
        if display_name is not None:
            self.display_name = display_name
        if is_closed is not None:
            self.is_closed = is_closed
        if purpose is not None:
            self.purpose = purpose
        if web_hook is not None:
            self.web_hook = web_hook
        if web_hook_token is not None:
            self.web_hook_token = web_hook_token
        if is_public is not None:
            self.is_public = is_public

    @property
    def id(self):
        """Gets the id of this Address.  # noqa: E501


        :return: The id of this Address.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Address.


        :param id: The id of this Address.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """Gets the organization_id of this Address.  # noqa: E501


        :return: The organization_id of this Address.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this Address.


        :param organization_id: The organization_id of this Address.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def alias(self):
        """Gets the alias of this Address.  # noqa: E501


        :return: The alias of this Address.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this Address.


        :param alias: The alias of this Address.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def display_name(self):
        """Gets the display_name of this Address.  # noqa: E501


        :return: The display_name of this Address.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Address.


        :param display_name: The display_name of this Address.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def is_closed(self):
        """Gets the is_closed of this Address.  # noqa: E501


        :return: The is_closed of this Address.  # noqa: E501
        :rtype: bool
        """
        return self._is_closed

    @is_closed.setter
    def is_closed(self, is_closed):
        """Sets the is_closed of this Address.


        :param is_closed: The is_closed of this Address.  # noqa: E501
        :type: bool
        """

        self._is_closed = is_closed

    @property
    def purpose(self):
        """Gets the purpose of this Address.  # noqa: E501


        :return: The purpose of this Address.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this Address.


        :param purpose: The purpose of this Address.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def web_hook(self):
        """Gets the web_hook of this Address.  # noqa: E501


        :return: The web_hook of this Address.  # noqa: E501
        :rtype: str
        """
        return self._web_hook

    @web_hook.setter
    def web_hook(self, web_hook):
        """Sets the web_hook of this Address.


        :param web_hook: The web_hook of this Address.  # noqa: E501
        :type: str
        """

        self._web_hook = web_hook

    @property
    def web_hook_token(self):
        """Gets the web_hook_token of this Address.  # noqa: E501


        :return: The web_hook_token of this Address.  # noqa: E501
        :rtype: str
        """
        return self._web_hook_token

    @web_hook_token.setter
    def web_hook_token(self, web_hook_token):
        """Sets the web_hook_token of this Address.


        :param web_hook_token: The web_hook_token of this Address.  # noqa: E501
        :type: str
        """

        self._web_hook_token = web_hook_token

    @property
    def is_public(self):
        """Gets the is_public of this Address.  # noqa: E501


        :return: The is_public of this Address.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this Address.


        :param is_public: The is_public of this Address.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Address, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
