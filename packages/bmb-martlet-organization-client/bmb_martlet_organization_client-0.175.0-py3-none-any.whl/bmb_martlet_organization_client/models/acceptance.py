# coding: utf-8

"""
    Martlet Organization API

    Create/maintain organizations, access keys, addresses and permissions.   # noqa: E501

    OpenAPI spec version: 0.175.0
    Contact: apiteam@bmbix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Acceptance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message_id': 'str',
        'from_address_id': 'str',
        'to_address_id': 'str',
        'message_type': 'str',
        'submission_timestamp': 'str',
        'sender_reference': 'str',
        'checksum': 'str',
        'checksum_algorithm': 'str',
        'message_processed_receipt_id': 'str',
        'received_timestamp': 'str',
        'result': 'str',
        'reference': 'str',
        'comments': 'str',
        'message_read_receipt_id': 'str',
        'read_received_timestamp': 'str',
        'system_id': 'float'
    }

    attribute_map = {
        'message_id': 'message_id',
        'from_address_id': 'from_address_id',
        'to_address_id': 'to_address_id',
        'message_type': 'message_type',
        'submission_timestamp': 'submission_timestamp',
        'sender_reference': 'sender_reference',
        'checksum': 'checksum',
        'checksum_algorithm': 'checksum_algorithm',
        'message_processed_receipt_id': 'message_processed_receipt_id',
        'received_timestamp': 'received_timestamp',
        'result': 'result',
        'reference': 'reference',
        'comments': 'comments',
        'message_read_receipt_id': 'message_read_receipt_id',
        'read_received_timestamp': 'read_received_timestamp',
        'system_id': 'system_id'
    }

    def __init__(self, message_id=None, from_address_id=None, to_address_id=None, message_type=None, submission_timestamp=None, sender_reference=None, checksum=None, checksum_algorithm=None, message_processed_receipt_id=None, received_timestamp=None, result=None, reference=None, comments=None, message_read_receipt_id=None, read_received_timestamp=None, system_id=None):  # noqa: E501
        """Acceptance - a model defined in Swagger"""  # noqa: E501
        self._message_id = None
        self._from_address_id = None
        self._to_address_id = None
        self._message_type = None
        self._submission_timestamp = None
        self._sender_reference = None
        self._checksum = None
        self._checksum_algorithm = None
        self._message_processed_receipt_id = None
        self._received_timestamp = None
        self._result = None
        self._reference = None
        self._comments = None
        self._message_read_receipt_id = None
        self._read_received_timestamp = None
        self._system_id = None
        self.discriminator = None
        if message_id is not None:
            self.message_id = message_id
        if from_address_id is not None:
            self.from_address_id = from_address_id
        if to_address_id is not None:
            self.to_address_id = to_address_id
        if message_type is not None:
            self.message_type = message_type
        if submission_timestamp is not None:
            self.submission_timestamp = submission_timestamp
        if sender_reference is not None:
            self.sender_reference = sender_reference
        if checksum is not None:
            self.checksum = checksum
        if checksum_algorithm is not None:
            self.checksum_algorithm = checksum_algorithm
        if message_processed_receipt_id is not None:
            self.message_processed_receipt_id = message_processed_receipt_id
        if received_timestamp is not None:
            self.received_timestamp = received_timestamp
        if result is not None:
            self.result = result
        if reference is not None:
            self.reference = reference
        if comments is not None:
            self.comments = comments
        if message_read_receipt_id is not None:
            self.message_read_receipt_id = message_read_receipt_id
        if read_received_timestamp is not None:
            self.read_received_timestamp = read_received_timestamp
        if system_id is not None:
            self.system_id = system_id

    @property
    def message_id(self):
        """Gets the message_id of this Acceptance.  # noqa: E501


        :return: The message_id of this Acceptance.  # noqa: E501
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this Acceptance.


        :param message_id: The message_id of this Acceptance.  # noqa: E501
        :type: str
        """

        self._message_id = message_id

    @property
    def from_address_id(self):
        """Gets the from_address_id of this Acceptance.  # noqa: E501


        :return: The from_address_id of this Acceptance.  # noqa: E501
        :rtype: str
        """
        return self._from_address_id

    @from_address_id.setter
    def from_address_id(self, from_address_id):
        """Sets the from_address_id of this Acceptance.


        :param from_address_id: The from_address_id of this Acceptance.  # noqa: E501
        :type: str
        """

        self._from_address_id = from_address_id

    @property
    def to_address_id(self):
        """Gets the to_address_id of this Acceptance.  # noqa: E501


        :return: The to_address_id of this Acceptance.  # noqa: E501
        :rtype: str
        """
        return self._to_address_id

    @to_address_id.setter
    def to_address_id(self, to_address_id):
        """Sets the to_address_id of this Acceptance.


        :param to_address_id: The to_address_id of this Acceptance.  # noqa: E501
        :type: str
        """

        self._to_address_id = to_address_id

    @property
    def message_type(self):
        """Gets the message_type of this Acceptance.  # noqa: E501


        :return: The message_type of this Acceptance.  # noqa: E501
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this Acceptance.


        :param message_type: The message_type of this Acceptance.  # noqa: E501
        :type: str
        """

        self._message_type = message_type

    @property
    def submission_timestamp(self):
        """Gets the submission_timestamp of this Acceptance.  # noqa: E501


        :return: The submission_timestamp of this Acceptance.  # noqa: E501
        :rtype: str
        """
        return self._submission_timestamp

    @submission_timestamp.setter
    def submission_timestamp(self, submission_timestamp):
        """Sets the submission_timestamp of this Acceptance.


        :param submission_timestamp: The submission_timestamp of this Acceptance.  # noqa: E501
        :type: str
        """

        self._submission_timestamp = submission_timestamp

    @property
    def sender_reference(self):
        """Gets the sender_reference of this Acceptance.  # noqa: E501


        :return: The sender_reference of this Acceptance.  # noqa: E501
        :rtype: str
        """
        return self._sender_reference

    @sender_reference.setter
    def sender_reference(self, sender_reference):
        """Sets the sender_reference of this Acceptance.


        :param sender_reference: The sender_reference of this Acceptance.  # noqa: E501
        :type: str
        """

        self._sender_reference = sender_reference

    @property
    def checksum(self):
        """Gets the checksum of this Acceptance.  # noqa: E501


        :return: The checksum of this Acceptance.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this Acceptance.


        :param checksum: The checksum of this Acceptance.  # noqa: E501
        :type: str
        """

        self._checksum = checksum

    @property
    def checksum_algorithm(self):
        """Gets the checksum_algorithm of this Acceptance.  # noqa: E501


        :return: The checksum_algorithm of this Acceptance.  # noqa: E501
        :rtype: str
        """
        return self._checksum_algorithm

    @checksum_algorithm.setter
    def checksum_algorithm(self, checksum_algorithm):
        """Sets the checksum_algorithm of this Acceptance.


        :param checksum_algorithm: The checksum_algorithm of this Acceptance.  # noqa: E501
        :type: str
        """

        self._checksum_algorithm = checksum_algorithm

    @property
    def message_processed_receipt_id(self):
        """Gets the message_processed_receipt_id of this Acceptance.  # noqa: E501


        :return: The message_processed_receipt_id of this Acceptance.  # noqa: E501
        :rtype: str
        """
        return self._message_processed_receipt_id

    @message_processed_receipt_id.setter
    def message_processed_receipt_id(self, message_processed_receipt_id):
        """Sets the message_processed_receipt_id of this Acceptance.


        :param message_processed_receipt_id: The message_processed_receipt_id of this Acceptance.  # noqa: E501
        :type: str
        """

        self._message_processed_receipt_id = message_processed_receipt_id

    @property
    def received_timestamp(self):
        """Gets the received_timestamp of this Acceptance.  # noqa: E501


        :return: The received_timestamp of this Acceptance.  # noqa: E501
        :rtype: str
        """
        return self._received_timestamp

    @received_timestamp.setter
    def received_timestamp(self, received_timestamp):
        """Sets the received_timestamp of this Acceptance.


        :param received_timestamp: The received_timestamp of this Acceptance.  # noqa: E501
        :type: str
        """

        self._received_timestamp = received_timestamp

    @property
    def result(self):
        """Gets the result of this Acceptance.  # noqa: E501


        :return: The result of this Acceptance.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this Acceptance.


        :param result: The result of this Acceptance.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def reference(self):
        """Gets the reference of this Acceptance.  # noqa: E501


        :return: The reference of this Acceptance.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Acceptance.


        :param reference: The reference of this Acceptance.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def comments(self):
        """Gets the comments of this Acceptance.  # noqa: E501


        :return: The comments of this Acceptance.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Acceptance.


        :param comments: The comments of this Acceptance.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def message_read_receipt_id(self):
        """Gets the message_read_receipt_id of this Acceptance.  # noqa: E501


        :return: The message_read_receipt_id of this Acceptance.  # noqa: E501
        :rtype: str
        """
        return self._message_read_receipt_id

    @message_read_receipt_id.setter
    def message_read_receipt_id(self, message_read_receipt_id):
        """Sets the message_read_receipt_id of this Acceptance.


        :param message_read_receipt_id: The message_read_receipt_id of this Acceptance.  # noqa: E501
        :type: str
        """

        self._message_read_receipt_id = message_read_receipt_id

    @property
    def read_received_timestamp(self):
        """Gets the read_received_timestamp of this Acceptance.  # noqa: E501


        :return: The read_received_timestamp of this Acceptance.  # noqa: E501
        :rtype: str
        """
        return self._read_received_timestamp

    @read_received_timestamp.setter
    def read_received_timestamp(self, read_received_timestamp):
        """Sets the read_received_timestamp of this Acceptance.


        :param read_received_timestamp: The read_received_timestamp of this Acceptance.  # noqa: E501
        :type: str
        """

        self._read_received_timestamp = read_received_timestamp

    @property
    def system_id(self):
        """Gets the system_id of this Acceptance.  # noqa: E501


        :return: The system_id of this Acceptance.  # noqa: E501
        :rtype: float
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this Acceptance.


        :param system_id: The system_id of this Acceptance.  # noqa: E501
        :type: float
        """

        self._system_id = system_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Acceptance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Acceptance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
