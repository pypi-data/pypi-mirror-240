# coding: utf-8

"""
    Martlet Organization API

    Create/maintain organizations, access keys, addresses and permissions.   # noqa: E501

    OpenAPI spec version: 0.175.0
    Contact: apiteam@bmbix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RejectedMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'system_id': 'float',
        'message_id': 'str',
        'reasons': 'object',
        'from_id': 'str',
        'to_id': 'str',
        'message_type': 'str',
        'updated_at': 'str',
        'sender_reference': 'str'
    }

    attribute_map = {
        'system_id': 'system_id',
        'message_id': 'message_id',
        'reasons': 'reasons',
        'from_id': 'from_id',
        'to_id': 'to_id',
        'message_type': 'message_type',
        'updated_at': 'updated_at',
        'sender_reference': 'sender_reference'
    }

    def __init__(self, system_id=None, message_id=None, reasons=None, from_id=None, to_id=None, message_type=None, updated_at=None, sender_reference=None):  # noqa: E501
        """RejectedMessage - a model defined in Swagger"""  # noqa: E501
        self._system_id = None
        self._message_id = None
        self._reasons = None
        self._from_id = None
        self._to_id = None
        self._message_type = None
        self._updated_at = None
        self._sender_reference = None
        self.discriminator = None
        if system_id is not None:
            self.system_id = system_id
        if message_id is not None:
            self.message_id = message_id
        if reasons is not None:
            self.reasons = reasons
        if from_id is not None:
            self.from_id = from_id
        if to_id is not None:
            self.to_id = to_id
        if message_type is not None:
            self.message_type = message_type
        if updated_at is not None:
            self.updated_at = updated_at
        if sender_reference is not None:
            self.sender_reference = sender_reference

    @property
    def system_id(self):
        """Gets the system_id of this RejectedMessage.  # noqa: E501


        :return: The system_id of this RejectedMessage.  # noqa: E501
        :rtype: float
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this RejectedMessage.


        :param system_id: The system_id of this RejectedMessage.  # noqa: E501
        :type: float
        """

        self._system_id = system_id

    @property
    def message_id(self):
        """Gets the message_id of this RejectedMessage.  # noqa: E501


        :return: The message_id of this RejectedMessage.  # noqa: E501
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this RejectedMessage.


        :param message_id: The message_id of this RejectedMessage.  # noqa: E501
        :type: str
        """

        self._message_id = message_id

    @property
    def reasons(self):
        """Gets the reasons of this RejectedMessage.  # noqa: E501


        :return: The reasons of this RejectedMessage.  # noqa: E501
        :rtype: object
        """
        return self._reasons

    @reasons.setter
    def reasons(self, reasons):
        """Sets the reasons of this RejectedMessage.


        :param reasons: The reasons of this RejectedMessage.  # noqa: E501
        :type: object
        """

        self._reasons = reasons

    @property
    def from_id(self):
        """Gets the from_id of this RejectedMessage.  # noqa: E501


        :return: The from_id of this RejectedMessage.  # noqa: E501
        :rtype: str
        """
        return self._from_id

    @from_id.setter
    def from_id(self, from_id):
        """Sets the from_id of this RejectedMessage.


        :param from_id: The from_id of this RejectedMessage.  # noqa: E501
        :type: str
        """

        self._from_id = from_id

    @property
    def to_id(self):
        """Gets the to_id of this RejectedMessage.  # noqa: E501


        :return: The to_id of this RejectedMessage.  # noqa: E501
        :rtype: str
        """
        return self._to_id

    @to_id.setter
    def to_id(self, to_id):
        """Sets the to_id of this RejectedMessage.


        :param to_id: The to_id of this RejectedMessage.  # noqa: E501
        :type: str
        """

        self._to_id = to_id

    @property
    def message_type(self):
        """Gets the message_type of this RejectedMessage.  # noqa: E501


        :return: The message_type of this RejectedMessage.  # noqa: E501
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this RejectedMessage.


        :param message_type: The message_type of this RejectedMessage.  # noqa: E501
        :type: str
        """

        self._message_type = message_type

    @property
    def updated_at(self):
        """Gets the updated_at of this RejectedMessage.  # noqa: E501


        :return: The updated_at of this RejectedMessage.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this RejectedMessage.


        :param updated_at: The updated_at of this RejectedMessage.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def sender_reference(self):
        """Gets the sender_reference of this RejectedMessage.  # noqa: E501


        :return: The sender_reference of this RejectedMessage.  # noqa: E501
        :rtype: str
        """
        return self._sender_reference

    @sender_reference.setter
    def sender_reference(self, sender_reference):
        """Sets the sender_reference of this RejectedMessage.


        :param sender_reference: The sender_reference of this RejectedMessage.  # noqa: E501
        :type: str
        """

        self._sender_reference = sender_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RejectedMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RejectedMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
