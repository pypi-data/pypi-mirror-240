# coding: utf-8

"""
    Martlet Organization API

    Create/maintain organizations, access keys, addresses and permissions.   # noqa: E501

    OpenAPI spec version: 0.175.0
    Contact: apiteam@bmbix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Organization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'organization_id': 'str',
        'name': 'str',
        'is_closed': 'bool',
        'sic_code': 'str',
        'headcount': 'int',
        'ppc_signatory': 'bool',
        'payment_contact_email': 'str'
    }

    attribute_map = {
        'organization_id': 'organization_id',
        'name': 'name',
        'is_closed': 'is_closed',
        'sic_code': 'sic_code',
        'headcount': 'headcount',
        'ppc_signatory': 'ppc_signatory',
        'payment_contact_email': 'payment_contact_email'
    }

    def __init__(self, organization_id=None, name=None, is_closed=None, sic_code=None, headcount=None, ppc_signatory=None, payment_contact_email=None):  # noqa: E501
        """Organization - a model defined in Swagger"""  # noqa: E501
        self._organization_id = None
        self._name = None
        self._is_closed = None
        self._sic_code = None
        self._headcount = None
        self._ppc_signatory = None
        self._payment_contact_email = None
        self.discriminator = None
        if organization_id is not None:
            self.organization_id = organization_id
        if name is not None:
            self.name = name
        if is_closed is not None:
            self.is_closed = is_closed
        if sic_code is not None:
            self.sic_code = sic_code
        if headcount is not None:
            self.headcount = headcount
        if ppc_signatory is not None:
            self.ppc_signatory = ppc_signatory
        if payment_contact_email is not None:
            self.payment_contact_email = payment_contact_email

    @property
    def organization_id(self):
        """Gets the organization_id of this Organization.  # noqa: E501


        :return: The organization_id of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this Organization.


        :param organization_id: The organization_id of this Organization.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def name(self):
        """Gets the name of this Organization.  # noqa: E501


        :return: The name of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organization.


        :param name: The name of this Organization.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def is_closed(self):
        """Gets the is_closed of this Organization.  # noqa: E501


        :return: The is_closed of this Organization.  # noqa: E501
        :rtype: bool
        """
        return self._is_closed

    @is_closed.setter
    def is_closed(self, is_closed):
        """Sets the is_closed of this Organization.


        :param is_closed: The is_closed of this Organization.  # noqa: E501
        :type: bool
        """

        self._is_closed = is_closed

    @property
    def sic_code(self):
        """Gets the sic_code of this Organization.  # noqa: E501


        :return: The sic_code of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._sic_code

    @sic_code.setter
    def sic_code(self, sic_code):
        """Sets the sic_code of this Organization.


        :param sic_code: The sic_code of this Organization.  # noqa: E501
        :type: str
        """

        self._sic_code = sic_code

    @property
    def headcount(self):
        """Gets the headcount of this Organization.  # noqa: E501


        :return: The headcount of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._headcount

    @headcount.setter
    def headcount(self, headcount):
        """Sets the headcount of this Organization.


        :param headcount: The headcount of this Organization.  # noqa: E501
        :type: int
        """

        self._headcount = headcount

    @property
    def ppc_signatory(self):
        """Gets the ppc_signatory of this Organization.  # noqa: E501


        :return: The ppc_signatory of this Organization.  # noqa: E501
        :rtype: bool
        """
        return self._ppc_signatory

    @ppc_signatory.setter
    def ppc_signatory(self, ppc_signatory):
        """Sets the ppc_signatory of this Organization.


        :param ppc_signatory: The ppc_signatory of this Organization.  # noqa: E501
        :type: bool
        """

        self._ppc_signatory = ppc_signatory

    @property
    def payment_contact_email(self):
        """Gets the payment_contact_email of this Organization.  # noqa: E501


        :return: The payment_contact_email of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._payment_contact_email

    @payment_contact_email.setter
    def payment_contact_email(self, payment_contact_email):
        """Sets the payment_contact_email of this Organization.


        :param payment_contact_email: The payment_contact_email of this Organization.  # noqa: E501
        :type: str
        """

        self._payment_contact_email = payment_contact_email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Organization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Organization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
