import pickle
import base64

##########################################
##TODO remove dependencies to rdfobj here

from rdfobj import  ModelPopulator
# +from .utils , .meta_model
##########################################


#utilities to manipulate the classes generated 

from biopax.templatereactionregulation import TemplateReactionRegulation
from biopax.entityreference import EntityReference
from biopax.evidencecodevocabulary import EvidenceCodeVocabulary
from biopax.proteinreference import ProteinReference
from biopax.covalentbindingfeature import CovalentBindingFeature
from biopax.sequenceregionvocabulary import SequenceRegionVocabulary
from biopax.relationshipxref import RelationshipXref
from biopax.protein import Protein
from biopax.transportwithbiochemicalreaction import TransportWithBiochemicalReaction
from biopax.rna import Rna
from biopax.rnareference import RnaReference
from biopax.cellvocabulary import CellVocabulary
from biopax.provenance import Provenance
from biopax.evidence import Evidence
from biopax.conversion import Conversion
from biopax.physicalentity import PhysicalEntity
from biopax.deltag import DeltaG
from biopax.interaction import Interaction
from biopax.dnareference import DnaReference
from biopax.biosource import BioSource
from biopax.entityreferencetypevocabulary import EntityReferenceTypeVocabulary
from biopax.xref import Xref
from biopax.fragmentfeature import FragmentFeature
from biopax.relationshiptypevocabulary import RelationshipTypeVocabulary
from biopax.chemicalstructure import ChemicalStructure
from biopax.experimentalformvocabulary import ExperimentalFormVocabulary
from biopax.interactionvocabulary import InteractionVocabulary
from biopax.degradation import Degradation
from biopax.sequencemodificationvocabulary import SequenceModificationVocabulary
from biopax.templatereaction import TemplateReaction
from biopax.bindingfeature import BindingFeature
from biopax.pathway import Pathway
from biopax.publicationxref import PublicationXref
from biopax.modulation import Modulation
from biopax.controlledvocabulary import ControlledVocabulary
from biopax.sequenceinterval import SequenceInterval
from biopax.dnaregion import DnaRegion
from biopax.sequencelocation import SequenceLocation
from biopax.kprime import KPrime
from biopax.biochemicalpathwaystep import BiochemicalPathwayStep
from biopax.entityfeature import EntityFeature
from biopax.smallmoleculereference import SmallMoleculeReference
from biopax.experimentalform import ExperimentalForm
from biopax.pathwaystep import PathwayStep
from biopax.rnaregion import RnaRegion
from biopax.rnaregionreference import RnaRegionReference
from biopax.molecularinteraction import MolecularInteraction
from biopax.tissuevocabulary import TissueVocabulary
from biopax.biochemicalreaction import BiochemicalReaction
from biopax.complexassembly import ComplexAssembly
from biopax.catalysis import Catalysis
from biopax.control import Control
from biopax.transport import Transport
from biopax.modificationfeature import ModificationFeature
from biopax.complex import Complex
from biopax.cellularlocationvocabulary import CellularLocationVocabulary
from biopax.phenotypevocabulary import PhenotypeVocabulary
from biopax.score import Score
from biopax.gene import Gene
from biopax.stoichiometry import Stoichiometry
from biopax.smallmolecule import SmallMolecule
from biopax.dna import Dna
from biopax.geneticinteraction import GeneticInteraction
from biopax.unificationxref import UnificationXref
from biopax.sequencesite import SequenceSite
from biopax.dnaregionreference import DnaRegionReference
from biopax.utilityclass import UtilityClass
from biopax.entity import Entity
  



#return an instance of a class corresponding to the input keywork
def define_model_instance(clsn):


  if clsn is None:
    inst=None
  else:
    clsn=str(clsn).strip().lower()
    if clsn =='':
      inst=None 
    elif clsn.lower() == 'templatereactionregulation':
      inst = TemplateReactionRegulation() 
    elif clsn.lower() == 'entityreference':
      inst = EntityReference() 
    elif clsn.lower() == 'evidencecodevocabulary':
      inst = EvidenceCodeVocabulary() 
    elif clsn.lower() == 'proteinreference':
      inst = ProteinReference() 
    elif clsn.lower() == 'covalentbindingfeature':
      inst = CovalentBindingFeature() 
    elif clsn.lower() == 'sequenceregionvocabulary':
      inst = SequenceRegionVocabulary() 
    elif clsn.lower() == 'relationshipxref':
      inst = RelationshipXref() 
    elif clsn.lower() == 'protein':
      inst = Protein() 
    elif clsn.lower() == 'transportwithbiochemicalreaction':
      inst = TransportWithBiochemicalReaction() 
    elif clsn.lower() == 'rna':
      inst = Rna() 
    elif clsn.lower() == 'rnareference':
      inst = RnaReference() 
    elif clsn.lower() == 'cellvocabulary':
      inst = CellVocabulary() 
    elif clsn.lower() == 'provenance':
      inst = Provenance() 
    elif clsn.lower() == 'evidence':
      inst = Evidence() 
    elif clsn.lower() == 'conversion':
      inst = Conversion() 
    elif clsn.lower() == 'physicalentity':
      inst = PhysicalEntity() 
    elif clsn.lower() == 'deltag':
      inst = DeltaG() 
    elif clsn.lower() == 'interaction':
      inst = Interaction() 
    elif clsn.lower() == 'dnareference':
      inst = DnaReference() 
    elif clsn.lower() == 'biosource':
      inst = BioSource() 
    elif clsn.lower() == 'entityreferencetypevocabulary':
      inst = EntityReferenceTypeVocabulary() 
    elif clsn.lower() == 'xref':
      inst = Xref() 
    elif clsn.lower() == 'fragmentfeature':
      inst = FragmentFeature() 
    elif clsn.lower() == 'relationshiptypevocabulary':
      inst = RelationshipTypeVocabulary() 
    elif clsn.lower() == 'chemicalstructure':
      inst = ChemicalStructure() 
    elif clsn.lower() == 'experimentalformvocabulary':
      inst = ExperimentalFormVocabulary() 
    elif clsn.lower() == 'interactionvocabulary':
      inst = InteractionVocabulary() 
    elif clsn.lower() == 'degradation':
      inst = Degradation() 
    elif clsn.lower() == 'sequencemodificationvocabulary':
      inst = SequenceModificationVocabulary() 
    elif clsn.lower() == 'templatereaction':
      inst = TemplateReaction() 
    elif clsn.lower() == 'bindingfeature':
      inst = BindingFeature() 
    elif clsn.lower() == 'pathway':
      inst = Pathway() 
    elif clsn.lower() == 'publicationxref':
      inst = PublicationXref() 
    elif clsn.lower() == 'modulation':
      inst = Modulation() 
    elif clsn.lower() == 'controlledvocabulary':
      inst = ControlledVocabulary() 
    elif clsn.lower() == 'sequenceinterval':
      inst = SequenceInterval() 
    elif clsn.lower() == 'dnaregion':
      inst = DnaRegion() 
    elif clsn.lower() == 'sequencelocation':
      inst = SequenceLocation() 
    elif clsn.lower() == 'kprime':
      inst = KPrime() 
    elif clsn.lower() == 'biochemicalpathwaystep':
      inst = BiochemicalPathwayStep() 
    elif clsn.lower() == 'entityfeature':
      inst = EntityFeature() 
    elif clsn.lower() == 'smallmoleculereference':
      inst = SmallMoleculeReference() 
    elif clsn.lower() == 'experimentalform':
      inst = ExperimentalForm() 
    elif clsn.lower() == 'pathwaystep':
      inst = PathwayStep() 
    elif clsn.lower() == 'rnaregion':
      inst = RnaRegion() 
    elif clsn.lower() == 'rnaregionreference':
      inst = RnaRegionReference() 
    elif clsn.lower() == 'molecularinteraction':
      inst = MolecularInteraction() 
    elif clsn.lower() == 'tissuevocabulary':
      inst = TissueVocabulary() 
    elif clsn.lower() == 'biochemicalreaction':
      inst = BiochemicalReaction() 
    elif clsn.lower() == 'complexassembly':
      inst = ComplexAssembly() 
    elif clsn.lower() == 'catalysis':
      inst = Catalysis() 
    elif clsn.lower() == 'control':
      inst = Control() 
    elif clsn.lower() == 'transport':
      inst = Transport() 
    elif clsn.lower() == 'modificationfeature':
      inst = ModificationFeature() 
    elif clsn.lower() == 'complex':
      inst = Complex() 
    elif clsn.lower() == 'cellularlocationvocabulary':
      inst = CellularLocationVocabulary() 
    elif clsn.lower() == 'phenotypevocabulary':
      inst = PhenotypeVocabulary() 
    elif clsn.lower() == 'score':
      inst = Score() 
    elif clsn.lower() == 'gene':
      inst = Gene() 
    elif clsn.lower() == 'stoichiometry':
      inst = Stoichiometry() 
    elif clsn.lower() == 'smallmolecule':
      inst = SmallMolecule() 
    elif clsn.lower() == 'dna':
      inst = Dna() 
    elif clsn.lower() == 'geneticinteraction':
      inst = GeneticInteraction() 
    elif clsn.lower() == 'unificationxref':
      inst = UnificationXref() 
    elif clsn.lower() == 'sequencesite':
      inst = SequenceSite() 
    elif clsn.lower() == 'dnaregionreference':
      inst = DnaRegionReference() 
    elif clsn.lower() == 'utilityclass':
      inst = UtilityClass() 
    elif clsn.lower() == 'entity':
      inst = Entity() 
   
    else:
      inst=None
  

  return inst

#return an dictionary class_name->[children class_name]
def classes_children():

  mchildren=dict()
  mchildren['TemplateReactionRegulation']= []
  mchildren['EntityReference']= ['ProteinReference', 'RnaReference', 'DnaReference', 'SmallMoleculeReference', 'RnaRegionReference', 'DnaRegionReference']
  mchildren['EvidenceCodeVocabulary']= []
  mchildren['ProteinReference']= []
  mchildren['CovalentBindingFeature']= []
  mchildren['SequenceRegionVocabulary']= []
  mchildren['RelationshipXref']= []
  mchildren['Protein']= []
  mchildren['TransportWithBiochemicalReaction']= []
  mchildren['Rna']= []
  mchildren['RnaReference']= []
  mchildren['CellVocabulary']= []
  mchildren['Provenance']= []
  mchildren['Evidence']= []
  mchildren['Conversion']= ['Degradation', 'BiochemicalReaction', 'TransportWithBiochemicalReaction', 'ComplexAssembly', 'Transport', 'TransportWithBiochemicalReaction']
  mchildren['PhysicalEntity']= ['Protein', 'Rna', 'DnaRegion', 'RnaRegion', 'Complex', 'SmallMolecule', 'Dna']
  mchildren['DeltaG']= []
  mchildren['Interaction']= ['Conversion', 'Degradation', 'BiochemicalReaction', 'TransportWithBiochemicalReaction', 'ComplexAssembly', 'Transport', 'TransportWithBiochemicalReaction', 'TemplateReaction', 'MolecularInteraction', 'Control', 'TemplateReactionRegulation', 'Modulation', 'Catalysis', 'GeneticInteraction']
  mchildren['DnaReference']= []
  mchildren['BioSource']= []
  mchildren['EntityReferenceTypeVocabulary']= []
  mchildren['Xref']= ['RelationshipXref', 'PublicationXref', 'UnificationXref']
  mchildren['FragmentFeature']= []
  mchildren['RelationshipTypeVocabulary']= []
  mchildren['ChemicalStructure']= []
  mchildren['ExperimentalFormVocabulary']= []
  mchildren['InteractionVocabulary']= []
  mchildren['Degradation']= []
  mchildren['SequenceModificationVocabulary']= []
  mchildren['TemplateReaction']= []
  mchildren['BindingFeature']= ['CovalentBindingFeature']
  mchildren['Pathway']= []
  mchildren['PublicationXref']= []
  mchildren['Modulation']= []
  mchildren['ControlledVocabulary']= ['EvidenceCodeVocabulary', 'SequenceRegionVocabulary', 'CellVocabulary', 'EntityReferenceTypeVocabulary', 'RelationshipTypeVocabulary', 'ExperimentalFormVocabulary', 'InteractionVocabulary', 'SequenceModificationVocabulary', 'TissueVocabulary', 'CellularLocationVocabulary', 'PhenotypeVocabulary']
  mchildren['SequenceInterval']= []
  mchildren['DnaRegion']= []
  mchildren['SequenceLocation']= ['SequenceInterval', 'SequenceSite']
  mchildren['KPrime']= []
  mchildren['BiochemicalPathwayStep']= []
  mchildren['EntityFeature']= ['FragmentFeature', 'BindingFeature', 'CovalentBindingFeature', 'ModificationFeature', 'CovalentBindingFeature']
  mchildren['SmallMoleculeReference']= []
  mchildren['ExperimentalForm']= []
  mchildren['PathwayStep']= ['BiochemicalPathwayStep']
  mchildren['RnaRegion']= []
  mchildren['RnaRegionReference']= []
  mchildren['MolecularInteraction']= []
  mchildren['TissueVocabulary']= []
  mchildren['BiochemicalReaction']= ['TransportWithBiochemicalReaction']
  mchildren['ComplexAssembly']= []
  mchildren['Catalysis']= []
  mchildren['Control']= ['TemplateReactionRegulation', 'Modulation', 'Catalysis']
  mchildren['Transport']= ['TransportWithBiochemicalReaction']
  mchildren['ModificationFeature']= ['CovalentBindingFeature']
  mchildren['Complex']= []
  mchildren['CellularLocationVocabulary']= []
  mchildren['PhenotypeVocabulary']= []
  mchildren['Score']= []
  mchildren['Gene']= []
  mchildren['Stoichiometry']= []
  mchildren['SmallMolecule']= []
  mchildren['Dna']= []
  mchildren['GeneticInteraction']= []
  mchildren['UnificationXref']= []
  mchildren['SequenceSite']= []
  mchildren['DnaRegionReference']= []
  mchildren['UtilityClass']= ['EntityReference', 'ProteinReference', 'RnaReference', 'DnaReference', 'SmallMoleculeReference', 'RnaRegionReference', 'DnaRegionReference', 'Provenance', 'DeltaG', 'BioSource', 'Xref', 'RelationshipXref', 'PublicationXref', 'UnificationXref', 'ChemicalStructure', 'ControlledVocabulary', 'EvidenceCodeVocabulary', 'SequenceRegionVocabulary', 'CellVocabulary', 'EntityReferenceTypeVocabulary', 'RelationshipTypeVocabulary', 'ExperimentalFormVocabulary', 'InteractionVocabulary', 'SequenceModificationVocabulary', 'TissueVocabulary', 'CellularLocationVocabulary', 'PhenotypeVocabulary', 'SequenceLocation', 'SequenceInterval', 'SequenceSite', 'KPrime', 'EntityFeature', 'FragmentFeature', 'BindingFeature', 'CovalentBindingFeature', 'ModificationFeature', 'CovalentBindingFeature', 'ExperimentalForm', 'PathwayStep', 'BiochemicalPathwayStep', 'Score', 'Stoichiometry']
  mchildren['Entity']= ['PhysicalEntity', 'Protein', 'Rna', 'DnaRegion', 'RnaRegion', 'Complex', 'SmallMolecule', 'Dna', 'Interaction', 'Conversion', 'Degradation', 'BiochemicalReaction', 'TransportWithBiochemicalReaction', 'ComplexAssembly', 'Transport', 'TransportWithBiochemicalReaction', 'TemplateReaction', 'MolecularInteraction', 'Control', 'TemplateReactionRegulation', 'Modulation', 'Catalysis', 'GeneticInteraction', 'Pathway', 'Gene']
  
  return mchildren

def class_children(cln):
   mchildren=classes_children()
   if cln in mchildren.keys():
      return mchildren[cln]
   return None 

#list all classes of the model
def classesDict():
   model=dict() 
   model['TemplateReactionRegulation']=TemplateReactionRegulation
   model['EntityReference']=EntityReference
   model['EvidenceCodeVocabulary']=EvidenceCodeVocabulary
   model['ProteinReference']=ProteinReference
   model['CovalentBindingFeature']=CovalentBindingFeature
   model['SequenceRegionVocabulary']=SequenceRegionVocabulary
   model['RelationshipXref']=RelationshipXref
   model['Protein']=Protein
   model['TransportWithBiochemicalReaction']=TransportWithBiochemicalReaction
   model['Rna']=Rna
   model['RnaReference']=RnaReference
   model['CellVocabulary']=CellVocabulary
   model['Provenance']=Provenance
   model['Evidence']=Evidence
   model['Conversion']=Conversion
   model['PhysicalEntity']=PhysicalEntity
   model['DeltaG']=DeltaG
   model['Interaction']=Interaction
   model['DnaReference']=DnaReference
   model['BioSource']=BioSource
   model['EntityReferenceTypeVocabulary']=EntityReferenceTypeVocabulary
   model['Xref']=Xref
   model['FragmentFeature']=FragmentFeature
   model['RelationshipTypeVocabulary']=RelationshipTypeVocabulary
   model['ChemicalStructure']=ChemicalStructure
   model['ExperimentalFormVocabulary']=ExperimentalFormVocabulary
   model['InteractionVocabulary']=InteractionVocabulary
   model['Degradation']=Degradation
   model['SequenceModificationVocabulary']=SequenceModificationVocabulary
   model['TemplateReaction']=TemplateReaction
   model['BindingFeature']=BindingFeature
   model['Pathway']=Pathway
   model['PublicationXref']=PublicationXref
   model['Modulation']=Modulation
   model['ControlledVocabulary']=ControlledVocabulary
   model['SequenceInterval']=SequenceInterval
   model['DnaRegion']=DnaRegion
   model['SequenceLocation']=SequenceLocation
   model['KPrime']=KPrime
   model['BiochemicalPathwayStep']=BiochemicalPathwayStep
   model['EntityFeature']=EntityFeature
   model['SmallMoleculeReference']=SmallMoleculeReference
   model['ExperimentalForm']=ExperimentalForm
   model['PathwayStep']=PathwayStep
   model['RnaRegion']=RnaRegion
   model['RnaRegionReference']=RnaRegionReference
   model['MolecularInteraction']=MolecularInteraction
   model['TissueVocabulary']=TissueVocabulary
   model['BiochemicalReaction']=BiochemicalReaction
   model['ComplexAssembly']=ComplexAssembly
   model['Catalysis']=Catalysis
   model['Control']=Control
   model['Transport']=Transport
   model['ModificationFeature']=ModificationFeature
   model['Complex']=Complex
   model['CellularLocationVocabulary']=CellularLocationVocabulary
   model['PhenotypeVocabulary']=PhenotypeVocabulary
   model['Score']=Score
   model['Gene']=Gene
   model['Stoichiometry']=Stoichiometry
   model['SmallMolecule']=SmallMolecule
   model['Dna']=Dna
   model['GeneticInteraction']=GeneticInteraction
   model['UnificationXref']=UnificationXref
   model['SequenceSite']=SequenceSite
   model['DnaRegionReference']=DnaRegionReference
   model['UtilityClass']=UtilityClass
   model['Entity']=Entity
 
   return model 

#list all classes of the model
def classes():
   model=classesDict()
   return list(model.keys()) 

def createInstance(cln):
    model=classesDict()
    if cln in model.keys():
       cl=model[cln]
       return cl()
    return None 

def parentTree():
 parentdict=dict()
 chl=classes_children()
 for k in chl.keys():
    v=chl[k]
    for el in v:  
      if el in parentdict.keys():
        pad=parentdict[el]
      else:
        pad=dict()
      pad[k]=1
      parentdict[el]=pad
        
 for k in parentdict.keys():
    pad=parentdict[k]
    parentdict[k]=list(pad.keys())
 return parentdict




def modelPopulator():
    mp=PackageModelPopulator().mpop
    return mp


class  PackageModelPopulator():

  def __init__(self):
    self.package_name="biopax"
    self.classDict=None
    self.mpop= None
    self.config()

  def config(self):
    self.classDict=self.classDictConf()
    self.mpop= ModelPopulator(self.classDict,self.package_name)

  def classDictConf(self)  :

     b64conf=b''

     obj = pickle.loads(base64.b64decode(b64conf))
     return obj

def domain():
    return "http://www.biopax.org/release/biopax-level3.owl#"

def prefix():
    return "biopax"    
def shortPrefix():
    return "bi"       


